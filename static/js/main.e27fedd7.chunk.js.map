{"version":3,"sources":["helpers/utils.js","model/ForecastModel.js","model/InvestmentModel.js","renderer/D3ChartStrategy.js","renderer/LineChartD3.js","renderer/CashflowBarChartD3.js","components/Visualization.jsx","components/MinimalBootstrapComponents.jsx","components/TextInputElement.jsx","components/CheckboxInputElement.jsx","components/BrokerDropDown.jsx","components/GraphDetailDropDown.jsx","components/ETFSelectionDropDown.jsx","components/App.jsx","reportWebVitals.js","index.js"],"names":["timeDiffIgnoreDivisor","numberOfMonthsOfAYear","isFirstMonthOfAYear","date","getMonth","loadHistoricalETFData","etfIdentifier","apiKey","a","d3","entry","Date","timestamp","toString","dividend","parseFloat","course","historicalData","sort","b","etfHistoricalToCourseForecastArray","map","dateToTimestamp","etfHistoricalToDividendForecastArray","currentYear","getFullYear","dividendForecastArray","forEach","length","push","Math","floor","getTime","HistoricalDataNotPresentException","this","message","name","roundDateToBeginningOfMonth","month","year","currentDayOfMonth","getDate","maxDayOfMonth","monthOffset","round","ForecastModelSingleton","coursePredictors","dividendPredictors","courseForecastArray","maxTimestampBeforeCoursePredictorRepetition","_calculateMaxTimestampBeforePredictorRepetition","maxYearBeforeDividendPredictorRepetition","history","forecastArray","lastTimestampToIncludeInPrediction","abs","backCastTimeFactor","backCastTimestampConstant","filteredForecastArray","filter","regression","linear","order","precision","lastYearToIncludeInPrediction","_courseDateToPredictorTimestampAndDateTimestamp","predictorTimestamp","_createCoursePredictorIfNotPresent","predict","predictorYear","_dividendYearToPredictorYear","_createDividendPredictorIfNotPresent","max","backCastTimeConstant","backCastTimeDate","setMonth","instance","getInstance","etfProperties","configure","forecast","loadAndCacheHistoricalETFData","symbol","console","log","firstTimestamp","lastTimestamp","corporateTaxRatio","getNextMonthDate","newDate","calculateDividend","isLastMonthOfAYear","dividendAmount","predictDividend","sharePrize","predictCourse","calculateCosts","amount","costConfiguration","costs","percentageCosts","fixedCosts","amountWithoutCosts","subtractTaxFreeGain","taxAmount","taxFreeAmount","getTotalShareValue","investmentStep","totalShares","sharePrizes","getTotalDividenShareValue","dividendTotalShares","getNewShareValue","newShares","calculateAndAddInflation","initialDate","endDate","sumTotalValues","sum","sumOfTotalValues","timeFactor","inflation","pow","addAccumulationMonth","investmentSteps","investment","etfToRatio","configOptions","prevInvestmentStep","newInvestmentStep","dividendNewShares","totalCosts","totalInvestedMoney","newInvestedMoney","newInvestment","totalTaxes","totalPayout","newPayout","investmentOfEtfWithCosts","costConfig","investmentOfEtfWithoutCosts","etfSharePrize","dividendPayoutMoneyPerShare","newSharesByDividend","leftoverTaxFreeAmount","value","min","summedTaxes","decemberInvestmentStep","firstInvestmentStepOfThisYear","accumulatedBasicProfit","i","profitOverAllTime","profitOfPreviousYears","amountToApplyTaxes","calculateTaxes","newTaxes","newLeftoverTaxFreeAmount","addPayoutMonth","sellingAmount","leftoverAlreadyPaidTaxes","payoutStats","taxes","investmentStepsIdx","amountToSell","amountAlreadySold","costsToPay","alreadyPaidCosts","payoutInvestmentStepIdxForFIFO","currentSharesLeft","alreadySoldShares","leftoverAmountToSell","currentInvestmentStepForFIFO","currentValueOfShares","amountToSellWithCosts","amountOfSharesToSell","amountToSellWithoutCosts","initialValueOfShares","amountToPayTaxes","taxesToPay","payoutAmount","amountOfDividendSharesLeft","amountOfDividendSharesSold","generateEmptyInvestmentStep","emptyInvestmentStep","InvestmentModel","startCapital","monthlyInvestment","monthlyPayout","savingPhaseLength","age","expectationOfLife","_calculateTimestampsForModel","_calculateModel","lifeExpectation","fadeOutYears","yearsLeft","now","beginningDate","endSavingPhaseDate","setFullYear","calculateForecastInterval","startDate","savingDates","currentDate","payoutDates","slice","savingDate","payoutDate","numberOfEntriesPerYear","Number","isInteger","Error","selectedInvestmentSteps","numberOfMonthsToMerge","adjustedInvestmentStep","cloneDeep","offset","FIVE_MILLION","ONE_MILLION","generateLabelWithValueText","undefined","charAt","toUpperCase","setInteractionDisplayForActiveDiagrams","displayOption","D3ChartStrategy","activeStrategies","interaction","style","renderDivRef","payoutPhaseStartDate","svgID","tooltipDate","width","height","marginW","marginH","constructor","lineStrokeWidth","labelValueIdentifier","innerHTML","svg","append","attr","_prepareData","_calculateExtents","_createScales","_drawContent","_prepareText","_drawText","_drawAxis","_addInteraction","_updateAllDiagrams","dateExtent","dataArray","d","lastImportantDateForYScale","filteredDataArrayForYMax","maxIndex","e","filteredDataArrayForYMin","minIndex","maxVal","yStart","minVal","yEnd","yExtent","yScale","domain","range","xScale","hasToBePositive","labelDivisionFactor","numberIndicator","toLocaleString","maximumFractionDigits","call","tickFormat","valueToDisplayText","ticks","hoverLine","on","mouseEvent","_handleTooltipEvent","x","invert","investmentStepIndex","firstDate","secondDate","numberOfMonthsSinceStartDate","numberOfMonthsPerInvestmentStep","calculateInvestmentStepIndexForDate","activeDiagram","_updateTooltip","_updateDiagram","textGroup","selectAll","data","Object","values","textProperties","enter","text","y","fontSize","fontWeight","textAnchor","color","savingPhaseMid","payoutPhaseMid","yPos","standardFontSize","savingBold","savingPhase","payoutBold","payoutPhase","generateEtfValueText","investmentValue","totalValue","negativeLabels","negativeLabelsToInvestmentStepIdentifier","capitalIdentifier","investedIdentifier","AreaChartD3","etfLineColors","total","invested","ESGE","SUSA","colors","lineOpacity","etfIdentifiers","keys","dataToIndex","currentIdx","heightOffset","totalShareValue","totalDividendShareValue","datum","_drawArea","curve","y0","y1","paddingW","paddingH","ETF_SYMBOL_TO_NAME","investedValue","updatedValueText","negativeLabel","getSumNewPayout","sumNewPayout","CashflowBarChart","barPaddingPercentage","zeroLineStrokeWidth","payout","rectWidth","payoutX","payoutY","payoutIdentifier","investedX","investedY","payoutValue","needToSkipLastBar","barArray","Visualization","props","firstSVGRef","React","createRef","secondSVGRef","state","etfIdentifierToRatio","selected","percentage","STARTING_CAPITAL_IDENTIFIER","MONTHLY_INVESTMENT_IDENTIFIER","MONTHLY_PAYOUT_IDENTIFIER","SAVING_PHASE_IDENTIFIER","TAX_FREE_AMOUNT_IDENTIFIER","TRANSACTION_COSTS_TYPE_IDENTIFIER","TRANSACTION_COSTS_IDENTIFIER","AGE_IDENTIFIER","LIFE_EXPECTATION_IDENTIFIER","areaChart","barChart","reset","isValid","investmentModel","getInvestmentModel","firstPayoutPhaseDate","correctLevelOfDetailInvestmentSteps","getInvestmentSteps","DETAILED_GRAPH_DROPDOWN_IDENTIFIER","getTooltipDate","current","render","error","drawVisualization","Fragment","ref","Component","SidebarSectionHeading","className","title","ErrorMessage","identifier","Overlay","visibility","displayOverlay","href","target","rel","TextInputElement","disabled","type","onClick","handleAPIKeyConfirm","id","errorMessage","htmlFor","label","textAppending","onChange","onValueChange","transformFunction","CheckboxInputElement","costsOfElementMatchUIValues","element","BrokerDropDown","data-bs-toggle","aria-expanded","aria-labelledby","elements","handleChange","GraphDetailDropDown","percentageTransformFunction","floatVal","isNaN","ETFSelectionDropDown","elementIdentifier","handleSelectionChange","handleShareChange","autoPercentage","ETF_DROPDOWN_SELECTION_IDENTIFIER","API_KEY_IDENTIFIER","BROKER_DROPDOWN_IDENTIFIER","ETF_AUTOMATIC_PERCENTAGE_IDENTIFIER","transformInputToInt","intVal","parseInt","split","transformInputToFloat","isPositiveInt","val","recalculateETFPercentages","numberOfSelectedETFs","newPercentage","App","handleTextChange","bind","handleCheckBoxChange","handleBrokerChange","handleGraphDetailChange","handleETFSelectionChange","handleETFShareChange","caller","S_and_P_500","iShare","msciUSA","getInitialInputFormState","changedValue","changedStateIdentifier","validateAndSetState","brokerProperties","detailProperties","changedETFIdentifier","apiValues","loadHistoricData","setState","forceUpdate","positiveIntIdentifier","leftoverYears","sumOfPercentages","foundOneSelectedEtf","visualizationProps","assign","constructVisualizationProps","noValidate","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e27fedd7.chunk.js","sourcesContent":["import * as d3 from 'd3';\n\n// Ignore milliseconds, seconds, minutes.\nconst timeDiffIgnoreDivisor = 1000 * 60 * 60 * 24;\n\nexport const timestampIndexOfForecastArray = 0;\nexport const courseIndexOfForecastArray = 1;\nexport const numberOfMonthsOfAYear = 12;\nexport const inflationRate = 0.01;\n\nexport function isLastMonthOfAYear(date) {\n    return date.getMonth() === numberOfMonthsOfAYear - 1;\n}\n\nexport function clamp(value, min, max) {\n    return Math.max(min, Math.min(value, max));\n}\n\nexport function isFirstMonthOfAYear(date) {\n    return date.getMonth() === 0;\n}\n\nexport async function loadHistoricalETFData(etfIdentifier, apiKey) {\n    const historicalData = await d3.csv(\n        `https://www.alphavantage.co/query?function=TIME_SERIES_MONTHLY_ADJUSTED&symbol=${etfIdentifier}&apikey=${apiKey}&datatype=csv`,\n        entry => {\n            return {\n                date: new Date(entry.timestamp.toString()),\n                dividend: parseFloat(entry['dividend amount']),\n                course: parseFloat(entry['adjusted close']),\n            };\n        }\n    );\n    historicalData.sort((a, b) => a.date - b.date);\n    return historicalData;\n}\n\nexport function etfHistoricalToCourseForecastArray(historicalData) {\n    return historicalData.map(entry => [dateToTimestamp(entry.date), entry.course]);\n}\n\n// Requires sorted historical data. Note it is sorted by default. Do not change the order.\nexport function etfHistoricalToDividendForecastArray(historicalData) {\n    let currentYear = historicalData[0].date.getFullYear();\n    const dividendForecastArray = [[currentYear, 0]];\n    historicalData.forEach(entry => {\n        if (entry.date.getFullYear() === currentYear) {\n            dividendForecastArray[dividendForecastArray.length - 1][courseIndexOfForecastArray] += entry.dividend;\n        } else {\n            currentYear = entry.date.getFullYear();\n            dividendForecastArray.push([currentYear, entry.dividend]);\n        }\n    });\n    dividendForecastArray.sort((a, b) => a[timestampIndexOfForecastArray] - b[timestampIndexOfForecastArray]);\n    return dividendForecastArray;\n}\n\nexport function dateToTimestamp(date) {\n    return Math.floor(date.getTime() / timeDiffIgnoreDivisor);\n}\n\nexport function timestampToDate(timestamp) {\n    return new Date(timestamp * timeDiffIgnoreDivisor);\n}\n\nexport function HistoricalDataNotPresentException(etfIdentifier) {\n    this.message = `First call loadHistoricalDataIfNotPresent() before predicting: ${etfIdentifier}`;\n    this.name = 'HistoricalDataNotPresentException';\n}\n\n// Slightly manipulated. Original: https://stackoverflow.com/a/315767\nfunction daysInMonth(month, year) {\n    return new Date(year, month + 1, 0).getDate();\n}\n\nexport function roundDateToBeginningOfMonth(date) {\n    const currentDayOfMonth = date.getDate();\n    const maxDayOfMonth = daysInMonth(date.getMonth(), date.getFullYear());\n    const monthOffset = Math.round(currentDayOfMonth / maxDayOfMonth);\n    return new Date(date.getFullYear(), date.getMonth() + monthOffset);\n}\n","import regression from 'regression';\nimport {\n    dateToTimestamp,\n    etfHistoricalToCourseForecastArray,\n    etfHistoricalToDividendForecastArray,\n    loadHistoricalETFData,\n    timestampIndexOfForecastArray,\n    courseIndexOfForecastArray,\n    HistoricalDataNotPresentException,\n} from '../helpers/utils';\n\n// USAGE: first call configure to set required static vars. Then the singleton can be accessed via getInstance. Never call the Constructor on your own.\n// Always call loadAndCacheHistoricalETFData of an etf before calling predict on that etf.\nexport class ForecastModelSingleton {\n    static instance = null;\n    static apiKey = null;\n    static backCastTimeConstant = null;\n    static backCastTimeFactor = null;\n\n    // DO NOT CALL. USE getInstance()\n    constructor() {\n        this.historicalData = {};\n        this.coursePredictors = {};\n        this.dividendPredictors = {};\n    }\n\n    static configure(apiKey, backCastTimeFactor = 2, backCastTimeConstant = 7) {\n        ForecastModelSingleton.apiKey = apiKey;\n        ForecastModelSingleton.backCastTimeFactor = backCastTimeFactor;\n\n        const backCastTimeDate = new Date(0);\n        backCastTimeDate.setMonth(backCastTimeConstant);\n        ForecastModelSingleton.backCastTimestampConstant = dateToTimestamp(backCastTimeDate);\n\n        // reset predictors if present.\n        if (ForecastModelSingleton.instance != null) {\n            const instance = ForecastModelSingleton.getInstance();\n            for (const etfIdentifier in instance.coursePredictors) {\n                instance.coursePredictors[etfIdentifier] = {\n                    maxTimestampBeforeCoursePredictorRepetition: ForecastModelSingleton._calculateMaxTimestampBeforePredictorRepetition(\n                        instance.historicalData[etfIdentifier].courseForecastArray\n                    ),\n                };\n            }\n            for (const etfIdentifier in instance.dividendPredictors) {\n                instance.dividendPredictors[etfIdentifier] = {\n                    maxYearBeforeDividendPredictorRepetition: ForecastModelSingleton._calculateMaxTimestampBeforePredictorRepetition(\n                        instance.historicalData[etfIdentifier].dividendForecastArray\n                    ),\n                };\n            }\n        }\n    }\n\n    static async loadHistoricData(apiKey, etfProperties) {\n        ForecastModelSingleton.configure(apiKey);\n        const forecast = ForecastModelSingleton.getInstance();\n        for (const etfIdentifier in etfProperties) {\n            await forecast.loadAndCacheHistoricalETFData(etfProperties[etfIdentifier].symbol);\n        }\n        console.log('Finished loading the historic data.');\n    }\n\n    static getInstance() {\n        if (ForecastModelSingleton.instance == null) {\n            ForecastModelSingleton.instance = new ForecastModelSingleton();\n        }\n        return ForecastModelSingleton.instance;\n    }\n\n    static _calculateMaxTimestampBeforePredictorRepetition(forecastArray) {\n        const firstTimestamp = forecastArray[0][timestampIndexOfForecastArray];\n        const lastTimestamp = forecastArray[forecastArray.length - 1][timestampIndexOfForecastArray];\n        return lastTimestamp + (lastTimestamp - firstTimestamp) / ForecastModelSingleton.backCastTimeFactor;\n    }\n\n    async loadAndCacheHistoricalETFData(etfIdentifier) {\n        if (etfIdentifier in this.historicalData) {\n            return;\n        }\n        const historicalData = await loadHistoricalETFData(etfIdentifier);\n\n        const courseForecastArray = etfHistoricalToCourseForecastArray(historicalData);\n        const maxTimestampBeforeCoursePredictorRepetition = ForecastModelSingleton._calculateMaxTimestampBeforePredictorRepetition(\n            courseForecastArray\n        );\n\n        const dividendForecastArray = etfHistoricalToDividendForecastArray(historicalData);\n        const maxYearBeforeDividendPredictorRepetition = ForecastModelSingleton._calculateMaxTimestampBeforePredictorRepetition(\n            dividendForecastArray\n        );\n\n        this.historicalData[etfIdentifier] = {\n            history: historicalData,\n            courseForecastArray: courseForecastArray,\n            dividendForecastArray: dividendForecastArray,\n        };\n        this.coursePredictors[etfIdentifier] = {\n            maxTimestampBeforeCoursePredictorRepetition: maxTimestampBeforeCoursePredictorRepetition,\n        };\n        this.dividendPredictors[etfIdentifier] = {\n            maxYearBeforeDividendPredictorRepetition: maxYearBeforeDividendPredictorRepetition,\n        };\n    }\n\n    _createCoursePredictorIfNotPresent(etfIdentifier, timestamp) {\n        // Skip if already exists.\n        if (timestamp in this.coursePredictors[etfIdentifier]) {\n            return;\n        }\n        const forecastArray = this.historicalData[etfIdentifier].courseForecastArray;\n        const lastTimestampToIncludeInPrediction =\n            forecastArray[forecastArray.length - 1][timestampIndexOfForecastArray] -\n            Math.abs(forecastArray[forecastArray.length - 1][timestampIndexOfForecastArray] - timestamp) *\n                ForecastModelSingleton.backCastTimeFactor -\n            ForecastModelSingleton.backCastTimestampConstant;\n        const filteredForecastArray = forecastArray.filter(\n            entry => entry[timestampIndexOfForecastArray] >= lastTimestampToIncludeInPrediction\n        );\n        this.coursePredictors[etfIdentifier][timestamp] = regression.linear(filteredForecastArray, {\n            order: 2,\n            precision: 20,\n        });\n    }\n\n    _courseDateToPredictorTimestampAndDateTimestamp(date, etfIdentifier) {\n        const timestamp = dateToTimestamp(date);\n        return [\n            timestamp > this.coursePredictors[etfIdentifier].maxTimestampBeforeCoursePredictorRepetition\n                ? this.coursePredictors[etfIdentifier].maxTimestampBeforeCoursePredictorRepetition\n                : timestamp,\n            timestamp,\n        ];\n    }\n\n    _createDividendPredictorIfNotPresent(etfIdentifier, year) {\n        // Skip if already exists.\n        if (year in this.dividendPredictors[etfIdentifier]) {\n            return;\n        }\n        const forecastArray = this.historicalData[etfIdentifier].dividendForecastArray;\n        const lastYearToIncludeInPrediction =\n            forecastArray[forecastArray.length - 1][timestampIndexOfForecastArray] -\n            Math.abs(forecastArray[forecastArray.length - 1][timestampIndexOfForecastArray] - year) *\n                ForecastModelSingleton.backCastTimeFactor -\n            ForecastModelSingleton.backCastTimestampConstant;\n        const filteredForecastArray = forecastArray.filter(\n            entry => entry[timestampIndexOfForecastArray] >= lastYearToIncludeInPrediction\n        );\n        this.dividendPredictors[etfIdentifier][year] = regression.linear(filteredForecastArray, {\n            order: 2,\n            precision: 20,\n        });\n    }\n\n    _dividendYearToPredictorYear(etfIdentifier, year) {\n        return this.dividendPredictors[etfIdentifier].maxYearBeforeDividendPredictorRepetition < year\n            ? this.dividendPredictors[etfIdentifier].maxYearBeforeDividendPredictorRepetition\n            : year;\n    }\n\n    predictCourse(etfIdentifier, date) {\n        if (!(etfIdentifier in this.coursePredictors)) {\n            throw new HistoricalDataNotPresentException(etfIdentifier);\n        }\n        const [predictorTimestamp, timestamp] = this._courseDateToPredictorTimestampAndDateTimestamp(\n            date,\n            etfIdentifier\n        );\n        this._createCoursePredictorIfNotPresent(etfIdentifier, predictorTimestamp);\n        return this.coursePredictors[etfIdentifier][predictorTimestamp].predict(timestamp)[courseIndexOfForecastArray];\n    }\n\n    predictDividend(etfIdentifier, year) {\n        if (!(etfIdentifier in this.dividendPredictors)) {\n            throw new HistoricalDataNotPresentException(etfIdentifier);\n        }\n        const predictorYear = this._dividendYearToPredictorYear(etfIdentifier, year);\n        this._createDividendPredictorIfNotPresent(etfIdentifier, predictorYear);\n        return Math.max(\n            0,\n            this.dividendPredictors[etfIdentifier][predictorYear].predict(year)[courseIndexOfForecastArray]\n        );\n    }\n}\n\nexport default ForecastModelSingleton;\n","import ForecastModelSingleton from './ForecastModel';\nimport { numberOfMonthsOfAYear, isLastMonthOfAYear, clamp, isFirstMonthOfAYear } from '../helpers/utils';\nimport cloneDeep from 'lodash.clonedeep';\n\nconst basicRateOfInterest = 0.007;\nconst partialExemption = 0.7;\nconst corporateTaxRatio = 0.26375;\nconst inflationRate = 0.01;\nconst defaultDividendAmount = 0.025;\n\nfunction getNextMonthDate(date) {\n    const newDate = new Date(date);\n    newDate.setMonth(date.getMonth() + 1);\n    return newDate;\n}\n\nfunction calculateDividend(etfIdentifier, date) {\n    if (!isLastMonthOfAYear(date)) {\n        return 0;\n    } else {\n        const dividendAmount = ForecastModelSingleton.getInstance().predictDividend(etfIdentifier, date.getFullYear());\n        const sharePrize = ForecastModelSingleton.getInstance().predictCourse(etfIdentifier, date);\n        return dividendAmount > 0 ? dividendAmount : defaultDividendAmount * sharePrize;\n    }\n}\n\nfunction calculateCosts(amount, costConfiguration) {\n    let costs = amount * costConfiguration.percentageCosts + costConfiguration.fixedCosts;\n    const amountWithoutCosts = Math.max(amount - costs, 0);\n    costs = amount - amountWithoutCosts;\n    return [amountWithoutCosts, costs];\n}\n\nfunction subtractTaxFreeGain(taxAmount, taxFreeAmount) {\n    const leftoverTaxes = Math.max(0, taxAmount - taxFreeAmount);\n    const leftoverTaxFreeAmount = Math.max(0, taxFreeAmount - taxAmount);\n    return [leftoverTaxes, leftoverTaxFreeAmount];\n}\n\nexport function getTotalShareValue(etfIdentifier, investmentStep) {\n    return investmentStep.totalShares[etfIdentifier] * investmentStep.sharePrizes[etfIdentifier];\n}\n\nexport function getTotalDividenShareValue(etfIdentifier, investmentStep){\n    return investmentStep.dividendTotalShares[etfIdentifier] * investmentStep.sharePrizes[etfIdentifier];\n}\n\nfunction getNewShareValue(etfIdentifier, investmentStep) {\n    return investmentStep.newShares[etfIdentifier] * investmentStep.sharePrizes[etfIdentifier];\n}\n\nfunction sumOfTotalValues(investmentStep) {\n    let sum = 0;\n    for (const etfIdentifier in investmentStep.totalShares) {\n        sum += getTotalShareValue(etfIdentifier, investmentStep);\n    }\n    return sum;\n}\n\nfunction calculateAndAddInflation(investmentStep, initialDate, endDate) {\n    // TODO predict inflationRate??? if so how should I predict it?\n    const sumTotalValues = sumOfTotalValues(investmentStep);\n    const timeFactor =\n        endDate.getFullYear() -\n        initialDate.getFullYear() +\n        (endDate.getMonth() - initialDate.getMonth()) / numberOfMonthsOfAYear;\n    investmentStep.inflation = sumTotalValues - sumTotalValues * Math.pow(1 - inflationRate, timeFactor);\n}\n\nfunction calculateForecastInterval(age, lifeExpectation, savingPhaseLength, fadeOutYears = 10) {\n    const yearsLeft = lifeExpectation - age;\n    const now = new Date();\n    const beginningDate = new Date(now.getFullYear(), now.getMonth() + 1);\n    // start next month.\n    const endSavingPhaseDate = new Date(beginningDate);\n    endSavingPhaseDate.setFullYear(beginningDate.getFullYear() + savingPhaseLength);\n    const endDate = new Date(beginningDate);\n    endDate.setFullYear(beginningDate.getFullYear() + yearsLeft + fadeOutYears);\n    return [beginningDate, endSavingPhaseDate, endDate];\n}\n\nfunction calculateTaxes(investmentSteps, date, leftoverTaxFreeAmount, etfToRatio) {\n    if (!isFirstMonthOfAYear(date) || investmentSteps.length < 2) {\n        return [0, leftoverTaxFreeAmount];\n    }\n    let summedTaxes = 0;\n    const decemberInvestmentStep = investmentSteps[investmentSteps.length - 1];\n    // Use the second investment step if there are not enough meaning the investing started this year after january.\n    // The second is the true first investment step the first is a dummy.\n    const firstInvestmentStepOfThisYear =\n        investmentSteps.length - numberOfMonthsOfAYear > 1\n            ? investmentSteps[investmentSteps.length - numberOfMonthsOfAYear]\n            : investmentSteps[1];\n    for (const etfIdentifier in etfToRatio) {\n        let accumulatedBasicProfit = 0;\n        // Sum up all new investments from february to december.\n        for (let i = 1; i < numberOfMonthsOfAYear && investmentSteps.length - i > 0; i++) {\n            const currentInvestmentStep = investmentSteps[investmentSteps.length - i];\n            accumulatedBasicProfit +=\n                (getNewShareValue(etfIdentifier, currentInvestmentStep) * i) / numberOfMonthsOfAYear;\n        }\n        // Sum up total Investment of the first date of this year.\n        accumulatedBasicProfit +=\n            (getTotalShareValue(etfIdentifier, firstInvestmentStepOfThisYear) *\n                (numberOfMonthsOfAYear - firstInvestmentStepOfThisYear.date.getMonth())) /\n            numberOfMonthsOfAYear;\n        accumulatedBasicProfit *= 0.7 * basicRateOfInterest;\n        const currentShareValues = getTotalShareValue(etfIdentifier, decemberInvestmentStep);\n        // Calculate profit of last year.\n        const profitOverAllTime = currentShareValues - decemberInvestmentStep.totalInvestedMoney[etfIdentifier];\n        let profitOfPreviousYears = 0;\n        if (investmentSteps.length > numberOfMonthsOfAYear) {\n            profitOfPreviousYears = Math.max(\n                0,\n                getTotalShareValue(etfIdentifier, investmentSteps[investmentSteps.length - 1 - numberOfMonthsOfAYear]) -\n                    investmentSteps[investmentSteps.length - 1 - numberOfMonthsOfAYear].totalInvestedMoney[\n                        etfIdentifier\n                    ]\n            );\n        }\n\n        const profitOfThisYear = profitOverAllTime - profitOfPreviousYears;\n        let amountToApplyTaxes = clamp(profitOfThisYear, 0, accumulatedBasicProfit);\n        [amountToApplyTaxes, leftoverTaxFreeAmount] = subtractTaxFreeGain(amountToApplyTaxes, leftoverTaxFreeAmount);\n        summedTaxes += amountToApplyTaxes * partialExemption * corporateTaxRatio;\n    }\n    return [summedTaxes, leftoverTaxFreeAmount];\n}\n\nexport function addAccumulationMonth(investmentSteps, investment, date, initialDate, etfToRatio, configOptions) {\n    const forecast = ForecastModelSingleton.getInstance();\n    let costs = 0;\n    const prevInvestmentStep = investmentSteps[investmentSteps.length - 1];\n    const newInvestmentStep = {\n        date: date,\n        newShares: {},\n        totalShares: { ...prevInvestmentStep.totalShares },\n        dividendNewShares: {},\n        dividendTotalShares: { ...prevInvestmentStep.dividendTotalShares },\n        totalCosts: prevInvestmentStep.totalCosts,\n        sharePrizes: {},\n        totalInvestedMoney: { ...prevInvestmentStep.totalInvestedMoney },\n        newInvestedMoney: {},\n        newInvestment: 0,\n        totalTaxes: prevInvestmentStep.totalTaxes,\n        totalPayout: { ...prevInvestmentStep.totalPayout },\n        newPayout: {},\n    };\n    for (const etfIdentifier in etfToRatio) {\n        const investmentOfEtfWithCosts = etfToRatio[etfIdentifier] * investment;\n        newInvestmentStep.newInvestment += investmentOfEtfWithCosts;\n        const [investmentOfEtfWithoutCosts, newCosts] = calculateCosts(\n            investmentOfEtfWithCosts,\n            configOptions.costConfig\n        );\n        costs += newCosts;\n        newInvestmentStep.newInvestedMoney[etfIdentifier] = investmentOfEtfWithoutCosts;\n        newInvestmentStep.totalInvestedMoney[etfIdentifier] += investmentOfEtfWithoutCosts;\n\n        const etfSharePrize = forecast.predictCourse(etfIdentifier, date);\n        const newShares = investmentOfEtfWithoutCosts / etfSharePrize;\n        newInvestmentStep.sharePrizes[etfIdentifier] = etfSharePrize;\n        newInvestmentStep.newShares[etfIdentifier] = newShares;\n\n        const dividendPayoutMoneyPerShare = calculateDividend(etfIdentifier, date);\n        const dividendPayoutMoney = newInvestmentStep.totalShares[etfIdentifier] * dividendPayoutMoneyPerShare;\n        const newSharesByDividend = dividendPayoutMoney / etfSharePrize;\n        newInvestmentStep.newShares[etfIdentifier] += newSharesByDividend;\n        newInvestmentStep.dividendNewShares[etfIdentifier] = newSharesByDividend;\n        newInvestmentStep.dividendTotalShares[etfIdentifier] += newSharesByDividend;\n\n        newInvestmentStep.totalShares[etfIdentifier] += newInvestmentStep.newShares[etfIdentifier];\n        newInvestmentStep.newPayout[etfIdentifier] = 0;\n    }\n    newInvestmentStep.totalCosts += costs;\n    const [newTaxes, newLeftoverTaxFreeAmount] = calculateTaxes(\n        investmentSteps,\n        date,\n        configOptions.taxFreeAmount,\n        etfToRatio\n    );\n    newInvestmentStep.totalTaxes += newTaxes;\n    calculateAndAddInflation(newInvestmentStep, initialDate, date);\n    investmentSteps.push(newInvestmentStep);\n\n    return newLeftoverTaxFreeAmount;\n}\n\nfunction addPayoutMonth(\n    investmentSteps,\n    sellingAmount,\n    etfToRatio,\n    date,\n    initialDate,\n    configOptions,\n    leftoverAlreadyPaidTaxes,\n    leftoverTaxFreeAmount,\n    payoutStats\n) {\n    if (isFirstMonthOfAYear(date)) {\n        leftoverTaxFreeAmount = configOptions.taxFreeAmount;\n    }\n    const forecast = ForecastModelSingleton.getInstance();\n    let costs = 0;\n    let taxes = 0;\n    const prevInvestmentStep = investmentSteps[investmentSteps.length - 1];\n    const newInvestmentStep = {\n        date: date,\n        newShares: {},\n        totalShares: { ...prevInvestmentStep.totalShares },\n        dividendNewShares: {},\n        dividendTotalShares: { ...prevInvestmentStep.dividendTotalShares },\n        totalCosts: prevInvestmentStep.totalCosts,\n        sharePrizes: {},\n        totalInvestedMoney: { ...prevInvestmentStep.totalInvestedMoney },\n        newInvestedMoney: {},\n        newInvestment: 0,\n        totalTaxes: prevInvestmentStep.totalTaxes,\n        totalPayout: { ...prevInvestmentStep.totalPayout },\n        newPayout: {},\n    };\n    for (const etfIdentifier in etfToRatio) {\n        const etfSharePrize = forecast.predictCourse(etfIdentifier, date);\n        newInvestmentStep.sharePrizes[etfIdentifier] = etfSharePrize;\n        newInvestmentStep.newPayout[etfIdentifier] = 0;\n        newInvestmentStep.newInvestedMoney[etfIdentifier] = 0;\n        // Skip payout if there are no shares left to sell.\n        if (payoutStats[etfIdentifier].investmentStepsIdx < investmentSteps.length) {\n            // Handle payout.\n            const amountToSell = sellingAmount * etfToRatio[etfIdentifier];\n            let amountAlreadySold = 0;\n            const costsToPay = calculateCosts(amountToSell, configOptions.costConfig)[1];\n            let alreadyPaidCosts = 0;\n            let payoutInvestmentStepIdxForFIFO = payoutStats[etfIdentifier].investmentStepsIdx;\n            let currentSharesLeft =\n                investmentSteps[payoutInvestmentStepIdxForFIFO].newShares[etfIdentifier] -\n                payoutStats[etfIdentifier].alreadySoldShares;\n            for (; payoutInvestmentStepIdxForFIFO < investmentSteps.length; payoutInvestmentStepIdxForFIFO++) {\n                const leftoverAmountToSell = amountToSell - amountAlreadySold;\n                const currentInvestmentStepForFIFO = investmentSteps[payoutInvestmentStepIdxForFIFO];\n\n                const currentValueOfShares =\n                    etfSharePrize *\n                    (payoutInvestmentStepIdxForFIFO === payoutStats[etfIdentifier].investmentStepsIdx\n                        ? currentInvestmentStepForFIFO.newShares[etfIdentifier] -\n                          payoutStats[etfIdentifier].alreadySoldShares\n                        : currentInvestmentStepForFIFO.newShares[etfIdentifier]);\n                const amountToSellWithCosts = Math.min(currentValueOfShares, leftoverAmountToSell);\n                const amountOfSharesToSell = amountToSellWithCosts / etfSharePrize;\n                currentSharesLeft = currentInvestmentStepForFIFO.newShares[etfIdentifier] - amountOfSharesToSell;\n                currentSharesLeft -=\n                    payoutInvestmentStepIdxForFIFO === payoutStats[etfIdentifier].investmentStepsIdx\n                        ? payoutStats[etfIdentifier].alreadySoldShares\n                        : 0;\n\n                const amountToSellWithoutCosts = Math.max(0, amountToSellWithCosts - (costsToPay - alreadyPaidCosts));\n                alreadyPaidCosts += Math.max(0, amountToSellWithCosts - amountToSellWithoutCosts);\n\n                const initialValueOfShares =\n                    amountOfSharesToSell * currentInvestmentStepForFIFO.sharePrizes[etfIdentifier];\n                let amountToPayTaxes = Math.max(0, amountToSellWithoutCosts - initialValueOfShares);\n\n                [amountToPayTaxes, leftoverTaxFreeAmount] = subtractTaxFreeGain(\n                    amountToPayTaxes,\n                    leftoverTaxFreeAmount\n                );\n                let taxesToPay = amountToPayTaxes * partialExemption * corporateTaxRatio;\n                [taxesToPay, leftoverAlreadyPaidTaxes] = subtractTaxFreeGain(taxesToPay, leftoverAlreadyPaidTaxes);\n                taxes += taxesToPay;\n                const payoutAmount = amountToSellWithoutCosts - taxesToPay;\n\n                newInvestmentStep.newPayout[etfIdentifier] += payoutAmount;\n                newInvestmentStep.totalPayout[etfIdentifier] += payoutAmount;\n\n                newInvestmentStep.totalShares[etfIdentifier] -= amountOfSharesToSell;\n                amountAlreadySold += amountToSellWithCosts;\n\n                // Handle the decrease of the dividendShares.\n                let amountOfDividendSharesLeft = 0;\n                if (payoutInvestmentStepIdxForFIFO === payoutStats[etfIdentifier].investmentStepsIdx) {\n                    amountOfDividendSharesLeft = Math.max(\n                        0,\n                        currentInvestmentStepForFIFO.dividendNewShares[etfIdentifier] -\n                            payoutStats[etfIdentifier].alreadySoldShares\n                    );\n                } else {\n                    amountOfDividendSharesLeft = currentInvestmentStepForFIFO.dividendNewShares[etfIdentifier];\n                }\n                const amountOfDividendSharesSold = Math.min(amountOfDividendSharesLeft, amountOfSharesToSell);\n                newInvestmentStep.dividendTotalShares[etfIdentifier] -= amountOfDividendSharesSold;\n\n                // Use break in order to not change the value of payoutInvestmentStepIdxForFIFO.\n                if (amountAlreadySold >= amountToSell) {\n                    break;\n                }\n            }\n            costs += alreadyPaidCosts;\n            // Handle update payoutStats.\n            payoutStats[etfIdentifier].investmentStepsIdx = payoutInvestmentStepIdxForFIFO;\n            payoutStats[etfIdentifier].investmentStepsIdx += currentSharesLeft === 0 ? 1 : 0;\n\n            payoutStats[etfIdentifier].alreadySoldShares =\n                payoutInvestmentStepIdxForFIFO < investmentSteps.length\n                    ? investmentSteps[payoutInvestmentStepIdxForFIFO].newShares[etfIdentifier] - currentSharesLeft\n                    : 0;\n        }\n\n        // Handle dividend.\n        const dividendPayoutMoney =\n            newInvestmentStep.totalShares[etfIdentifier] * calculateDividend(etfIdentifier, date);\n        const newSharesByDividend = dividendPayoutMoney / etfSharePrize;\n        newInvestmentStep.newShares[etfIdentifier] = newSharesByDividend;\n        newInvestmentStep.totalShares[etfIdentifier] += newSharesByDividend;\n        newInvestmentStep.dividendNewShares[etfIdentifier] = newSharesByDividend;\n        newInvestmentStep.dividendTotalShares[etfIdentifier] += newSharesByDividend;\n    }\n\n    newInvestmentStep.totalCosts += costs;\n    newInvestmentStep.totalTaxes += taxes;\n    calculateAndAddInflation(newInvestmentStep, initialDate, date);\n    investmentSteps.push(newInvestmentStep);\n    return [leftoverAlreadyPaidTaxes, leftoverTaxFreeAmount];\n}\n\nfunction generateEmptyInvestmentStep(etfToRatio, date) {\n    const forecast = ForecastModelSingleton.getInstance();\n    const emptyInvestmentStep = {\n        date: date,\n        totalCosts: 0,\n        totalTaxes: 0,\n        newShares: {},\n        totalShares: {},\n        dividendNewShares: {},\n        dividendTotalShares: {},\n        totalInvestedMoney: {},\n        totalPayout: {},\n        newPayout: {},\n        sharePrizes: {},\n        newInvestedMoney: {},\n        newInvestment: 0,\n    };\n    for (const etfIdentifier in etfToRatio) {\n        emptyInvestmentStep.newShares[etfIdentifier] = 0;\n        emptyInvestmentStep.totalShares[etfIdentifier] = 0;\n        emptyInvestmentStep.dividendNewShares[etfIdentifier] = 0;\n        emptyInvestmentStep.dividendTotalShares[etfIdentifier] = 0;\n        emptyInvestmentStep.totalInvestedMoney[etfIdentifier] = 0;\n        emptyInvestmentStep.totalPayout[etfIdentifier] = 0;\n        emptyInvestmentStep.newPayout[etfIdentifier] = 0;\n        emptyInvestmentStep.newInvestedMoney[etfIdentifier] = 0;\n        emptyInvestmentStep.sharePrizes[etfIdentifier] = forecast.predictCourse(etfIdentifier, date);\n    }\n    return emptyInvestmentStep;\n}\n\nexport class InvestmentModel {\n    constructor(\n        startCapital,\n        monthlyInvestment,\n        monthlyPayout,\n        savingPhaseLength,\n        etfToRatio,\n        configOptions,\n        age,\n        expectationOfLife\n    ) {\n        this.startCapital = startCapital;\n        this.monthlyInvestment = monthlyInvestment;\n        this.monthlyPayout = monthlyPayout;\n        this.savingPhaseLength = savingPhaseLength;\n        this.etfToRatio = etfToRatio;\n        this.configOptions = configOptions;\n        this.expectationOfLife = expectationOfLife;\n        this.age = age;\n        this._calculateTimestampsForModel();\n        this._calculateModel();\n    }\n\n    _calculateTimestampsForModel() {\n        const [startDate, endSavingPhaseDate, endDate] = calculateForecastInterval(\n            this.age,\n            this.expectationOfLife,\n            this.savingPhaseLength\n        );\n        const savingDates = [];\n        for (\n            let currentDate = startDate;\n            currentDate < endSavingPhaseDate;\n            currentDate = getNextMonthDate(currentDate)\n        ) {\n            savingDates.push(currentDate);\n        }\n        this.savingDates = savingDates;\n        const payoutDates = [];\n        for (let currentDate = endSavingPhaseDate; currentDate < endDate; currentDate = getNextMonthDate(currentDate)) {\n            payoutDates.push(currentDate);\n        }\n        this.payoutDates = payoutDates;\n        this.initialDate = startDate;\n    }\n\n    _calculateModel() {\n        let investmentSteps = [generateEmptyInvestmentStep(this.etfToRatio, this.savingDates[0])];\n        addAccumulationMonth(\n            investmentSteps,\n            this.monthlyInvestment + this.startCapital,\n            this.savingDates[0],\n            this.initialDate,\n            this.etfToRatio,\n            this.configOptions\n        );\n        for (const savingDate of this.savingDates.slice(1)) {\n            addAccumulationMonth(\n                investmentSteps,\n                this.monthlyInvestment,\n                savingDate,\n                this.initialDate,\n                this.etfToRatio,\n                this.configOptions\n            );\n        }\n        // Discard the empty investment step.\n        investmentSteps = investmentSteps.slice(1);\n\n        let leftoverAlreadyPaidTaxes = investmentSteps[investmentSteps.length - 1].totalTaxes;\n        let leftoverTaxFreeAmount = this.configOptions.taxFreeAmount;\n        const payoutStats = {};\n        for (const etfIdentifier in this.etfToRatio) {\n            payoutStats[etfIdentifier] = { investmentStepsIdx: 0, alreadySoldShares: 0 };\n        }\n        for (const payoutDate of this.payoutDates) {\n            [leftoverAlreadyPaidTaxes, leftoverTaxFreeAmount] = addPayoutMonth(\n                investmentSteps,\n                this.monthlyPayout,\n                this.etfToRatio,\n                payoutDate,\n                this.initialDate,\n                this.configOptions,\n                leftoverAlreadyPaidTaxes,\n                leftoverTaxFreeAmount,\n                payoutStats\n            );\n        }\n        this.investmentSteps = investmentSteps;\n    }\n\n    getInvestmentSteps(numberOfEntriesPerYear) {\n        if (!Number.isInteger(numberOfMonthsOfAYear / numberOfEntriesPerYear)) {\n            throw new Error(\n                `The numberOfEntriesPerYear need to be dividable by ${numberOfMonthsOfAYear} in order to make sense.`\n            );\n        }\n\n        if (numberOfEntriesPerYear === numberOfMonthsOfAYear) {\n            return this.investmentSteps;\n        }\n        const selectedInvestmentSteps = [];\n        const numberOfMonthsToMerge = numberOfMonthsOfAYear / numberOfEntriesPerYear;\n        for (let i = 0; i < this.investmentSteps.length; i += numberOfMonthsToMerge) {\n            // Take the start date as representative.\n            const adjustedInvestmentStep = cloneDeep(this.investmentSteps[i]);\n            for (let offset = 1; offset < numberOfMonthsToMerge; offset++) {\n                adjustedInvestmentStep.newInvestment += this.investmentSteps[i + offset].newInvestment;\n                for (const etfIdentifier in this.investmentSteps[i + offset].newPayout) {\n                    adjustedInvestmentStep.newPayout[etfIdentifier] += this.investmentSteps[i + offset].newPayout[\n                        etfIdentifier\n                    ];\n                }\n            }\n            selectedInvestmentSteps.push(adjustedInvestmentStep);\n        }\n        return selectedInvestmentSteps;\n    }\n}\n","import * as d3 from 'd3';\nimport { roundDateToBeginningOfMonth, numberOfMonthsOfAYear } from '../helpers/utils';\n\nconst FIVE_MILLION = 5000000;\nconst ONE_THOUSAND = 1000;\nconst ONE_MILLION = 1000000;\nconst numberOfTicks = 7;\n\nexport function generateLabelWithValueText(name, value = undefined) {\n    return `${name.charAt(0).toUpperCase()}${name.slice(1)}: ${value == null ? '-' : value}`;\n}\n\nfunction setInteractionDisplayForActiveDiagrams(displayOption) {\n    for (const activeDiagram of D3ChartStrategy.activeStrategies) {\n        activeDiagram.interaction.style('display', displayOption);\n    }\n}\n\nfunction calculateInvestmentStepIndexForDate(date, investmentSteps) {\n    const firstDate = investmentSteps[0].date;\n    const secondDate = investmentSteps[1].date;\n    const numberOfMonthsSinceStartDate =\n        (date.getFullYear() - firstDate.getFullYear()) * numberOfMonthsOfAYear +\n        (date.getMonth() - firstDate.getMonth());\n    const numberOfMonthsPerInvestmentStep =\n        (secondDate.getFullYear() - firstDate.getFullYear()) * numberOfMonthsOfAYear +\n        (secondDate.getMonth() - firstDate.getMonth());\n\n    return Math.floor(numberOfMonthsSinceStartDate / numberOfMonthsPerInvestmentStep);\n}\n\nexport class D3ChartStrategy {\n    static activeStrategies = [];\n    constructor(\n        investmentSteps,\n        renderDivRef,\n        payoutPhaseStartDate,\n        svgID,\n        tooltipDate,\n        width = 1100,\n        height = 300,\n        marginW = 200,\n        marginH = 40\n    ) {\n        if (this.constructor === D3ChartStrategy) {\n            throw new Error(\"Abstract classes can't be instantiated.\");\n        }\n        D3ChartStrategy.activeStrategies.push(this);\n        this.investmentSteps = investmentSteps;\n        this.payoutPhaseStartDate = payoutPhaseStartDate;\n        this.tooltipDate = tooltipDate;\n\n        this.marginW = marginW;\n        this.marginH = marginH;\n        this.width = width;\n        this.height = height;\n\n        this.lineStrokeWidth = 3;\n        this.labelValueIdentifier = 'value';\n\n        // Reset diagram by deletion.\n        renderDivRef.innerHTML = '';\n\n        this.svg = d3\n            .select(renderDivRef)\n            .append('svg')\n            .attr('id', svgID)\n            .attr('viewBox', `0 0 ${this.width + 2 * this.marginW} ${this.height + 2 * this.marginH}`)\n            .append('g')\n            .attr('transform', `translate(${[this.marginW / 2, this.marginH]})`);\n    }\n\n    static reset() {\n        D3ChartStrategy.activeStrategies = [];\n    }\n\n    render() {\n        this._prepareData();\n        this._calculateExtents();\n        this._createScales();\n        this._drawContent();\n        this._prepareText();\n        this._drawText();\n        this._drawAxis();\n        this._addInteraction();\n\n        if(this.tooltipDate != null){\n            this._updateAllDiagrams();\n        }\n    }\n\n    _calculateExtents() {\n        this.dateExtent = d3.extent(this.dataArray[0], d => d.date);\n\n        const lastImportantDateForYScale = new Date(this.payoutPhaseStartDate);\n        lastImportantDateForYScale.setMonth(lastImportantDateForYScale.getMonth() + numberOfMonthsOfAYear);\n        const filteredDataArrayForYMax = this.dataArray[this.maxIndex].filter(\n            e => e.date <= lastImportantDateForYScale && e.date > this.dateExtent[0]\n        );\n        const filteredDataArrayForYMin = this.dataArray[this.minIndex].filter(\n            e => e.date <= lastImportantDateForYScale\n        );\n        const maxVal = d3.max(filteredDataArrayForYMax.map(e => e.yStart));\n        const minVal = d3.min(filteredDataArrayForYMin.map(e => e.yEnd));\n        this.yExtent = [minVal, maxVal];\n    }\n\n    _createScales() {\n        this.yScale = d3.scaleLinear().domain(this.yExtent).range([this.height, 0]);\n        this.xScale = d3.scaleTime().domain(this.dateExtent).range([0, this.width]);\n    }\n\n    valueToDisplayText(value, hasToBePositive = false) {\n        const labelDivisionFactor =\n            Math.max(-this.yExtent[0], this.yExtent[1]) >= FIVE_MILLION ? ONE_MILLION : ONE_THOUSAND;\n        const numberIndicator = labelDivisionFactor === ONE_MILLION ? 'M' : 'K';\n        if (hasToBePositive) {\n            value = Math.abs(value);\n        }\n        return `${(value / labelDivisionFactor).toLocaleString(undefined, {\n            maximumFractionDigits: 2,\n        })}${numberIndicator} €`;\n    }\n\n    _drawAxis() {\n        this.svg\n            .append('g')\n            .style('font-size', '20px')\n            .call(\n                d3\n                    .axisLeft(this.yScale)\n                    .tickFormat(d => this.valueToDisplayText(d))\n                    .ticks(numberOfTicks)\n            );\n\n        this.svg\n            .append('g')\n            .style('font-size', '20px')\n            .attr('transform', `translate(0, ${this.height})`)\n            .call(d3.axisBottom(this.xScale));\n\n        // Draw zero line.\n        this.svg\n            .append('g')\n            .append('line')\n            .attr('x1', this.xScale(this.dateExtent[0]))\n            .attr('y1', this.yScale(0))\n            .attr('x2', this.xScale(this.dateExtent[1]))\n            .attr('y2', this.yScale(0))\n            .style('stroke-width', this.lineStrokeWidth)\n            .style('stroke', 'black');\n\n        // Draw phase division line.\n        this.svg\n            .append('g')\n            .append('line')\n            .attr('x1', this.xScale(this.payoutPhaseStartDate) - this.lineStrokeWidth / 2)\n            .attr('y1', this.yScale(this.yExtent[0]))\n            .attr('x2', this.xScale(this.payoutPhaseStartDate) - this.lineStrokeWidth / 2)\n            .attr('y2', this.yScale(this.yExtent[1]))\n            .style('stroke-width', this.lineStrokeWidth)\n            .style('stroke', 'black');\n    }\n\n    _addInteraction() {\n        const interactionClass = 'interaction';\n        const tooltipLineClass = 'tooltipLine';\n\n        this.interaction = this.svg\n            .append('g')\n            .attr('class', interactionClass)\n            .style('display', 'none')\n            .attr('transform', `translate(${[0, -this.marginH]})`);\n\n        this.hoverLine = this.interaction\n            .append('line')\n            .attr('class', tooltipLineClass)\n            .style('stroke', 'blue')\n            .style('stroke-dasharray', '3,3')\n            .style('opacity', 0.5)\n            .attr('y1', this.height + 2 * this.marginH)\n            .attr('y2', 0);\n\n        // Add rectangle to catch mouse events.\n        this.svg\n            .append('rect')\n            .attr('class', 'mouseEvent')\n            .attr('transform', `translate(${[0, -this.marginH]})`)\n            .attr('height', this.height + 2 * this.marginH)\n            .attr('width', this.width)\n            .attr('fill', 'none')\n            .style('pointer-events', 'all')\n            .on('mouseover', () => setInteractionDisplayForActiveDiagrams(null))\n            .on('mouseout', () => setInteractionDisplayForActiveDiagrams('none'))\n            .on('mousemove', mouseEvent => this._handleTooltipEvent(mouseEvent));\n    }\n\n    // Interaction inspired by: http://www.d3noob.org/2014/07/my-favourite-tooltip-method-for-line.html\n    _handleTooltipEvent(mouseEvent) {\n        const x = d3.pointer(mouseEvent)[0];\n        const date = this.xScale.invert(x);\n        this.tooltipDate = roundDateToBeginningOfMonth(date);\n        this._updateAllDiagrams();\n    }\n\n    _updateAllDiagrams() {\n        const investmentStepIndex = calculateInvestmentStepIndexForDate(this.tooltipDate, this.investmentSteps);\n        for (const activeDiagram of D3ChartStrategy.activeStrategies) {\n            activeDiagram.hoverLine.attr('x1', this.xScale(this.tooltipDate)).attr('x2', this.xScale(this.tooltipDate));\n            activeDiagram._updateTooltip(investmentStepIndex);\n            activeDiagram._updateDiagram();\n        }\n    }\n\n    _drawText() {\n        this.textGroup = this.svg.append('g').attr('class', 'textGroup');\n        this.textGroup\n            .selectAll('text')\n            .data(Object.values(this.textProperties))\n            .enter()\n            .append('text')\n            .text(d => d.text)\n            .attr('x', d => d.x)\n            .attr('y', d => d.y)\n            .style('font-size', d => d.fontSize)\n            .style('font-weight', d => d.fontWeight)\n            .style('text-anchor', d => d.textAnchor)\n            .style('fill', d => d.color);\n    }\n\n    _updateDiagram() {\n        this.textGroup.selectAll('text').text(d => d.text);\n    }\n\n    _prepareText() {\n        const savingPhaseMid =\n            this.xScale(this.dateExtent[0]) +\n            (this.xScale(this.payoutPhaseStartDate) - this.xScale(this.dateExtent[0])) / 2;\n\n        const payoutPhaseMid =\n            this.xScale(this.payoutPhaseStartDate) +\n            (this.xScale(this.dateExtent[1]) - this.xScale(this.payoutPhaseStartDate)) / 2;\n        const yPos = -10;\n        this.standardFontSize = 20;\n        this.textProperties = {\n            savingBold: {\n                text: 'SAVING',\n                x: savingPhaseMid,\n                y: yPos,\n                fontSize: this.standardFontSize,\n                textAnchor: 'end',\n                fontWeight: 'bold',\n                color: 'black',\n            },\n            savingPhase: {\n                text: 'Phase',\n                x: savingPhaseMid,\n                y: yPos,\n                fontSize: this.standardFontSize,\n                textAnchor: 'start',\n                fontWeight: 'normal',\n                color: 'black',\n            },\n            payoutBold: {\n                text: 'PAYOUT',\n                x: payoutPhaseMid,\n                y: yPos,\n                fontSize: this.standardFontSize,\n                textAnchor: 'end',\n                fontWeight: 'bold',\n                color: 'black',\n            },\n            payoutPhase: {\n                text: 'Phase',\n                x: payoutPhaseMid,\n                y: yPos,\n                fontSize: this.standardFontSize,\n                textAnchor: 'start',\n                fontWeight: 'normal',\n                color: 'black',\n            },\n        };\n    }\n\n    _prepareData() {\n        throw new Error('Abstract method. Not Implemented');\n    }\n\n    _drawContent() {\n        throw new Error('Abstract method. Not Implemented');\n    }\n\n    _updateTooltip() {\n        throw new Error('Abstract method. Not Implemented');\n    }\n}\n","import * as d3 from 'd3';\nimport { getTotalShareValue, getTotalDividenShareValue } from '../model/InvestmentModel';\nimport { D3ChartStrategy, generateLabelWithValueText } from './D3ChartStrategy';\nimport { ETF_SYMBOL_TO_NAME } from '../components/App';\n\nfunction generateEtfValueText(investmentValue = undefined, totalValue = undefined) {\n    return `Inv: ${investmentValue == null ? '-' : investmentValue}, Tot: ${totalValue == null ? '-' : totalValue}`;\n}\n\nconst negativeLabels = ['costs', 'taxes', 'inflation'];\nconst negativeLabelsToInvestmentStepIdentifier = { costs: 'totalCosts', taxes: 'totalTaxes', inflation: 'inflation' };\nconst capitalIdentifier = 'capital';\nconst investedIdentifier = 'invested';\n\nexport class AreaChartD3 extends D3ChartStrategy {\n    constructor(investmentSteps, renderDivRef, payoutPhaseStartDate, tooltipDate) {\n        super(investmentSteps, renderDivRef, payoutPhaseStartDate, 'firstSVG', tooltipDate);\n\n        this.etfLineColors = {\n            'SP5C.PAR': { total: '#0562a0', invested: '#71c1f7' },\n            ESGE: { total: '#ff1eff', invested: '#ff63ff' },\n            SUSA: { total: '#23ff01', invested: '#7dff69' },\n        };\n        this.colors = { inflation: '#ff7f00', costs: '#be3bff', taxes: '#e31a1c' };\n        this.lineOpacity = 0.7;\n\n        this.etfIdentifiers = Object.keys(this.investmentSteps[0].totalShares);\n    }\n\n    _prepareData() {\n        this.dataToIndex = {\n            costs: 0,\n            taxes: 1,\n            inflation: 2,\n        };\n\n        let currentIdx = 3;\n        for (const etfIdentifier of this.etfIdentifiers) {\n            this.dataToIndex[etfIdentifier + investedIdentifier] = currentIdx++;\n            this.dataToIndex[etfIdentifier + capitalIdentifier] = currentIdx++;\n        }\n\n        this.minIndex = this.dataToIndex.inflation;\n        this.maxIndex = currentIdx - 1;\n\n        this.dataArray = [];\n        for (let i = 0; i < currentIdx; i++) {\n            this.dataArray.push([]);\n        }\n        for (const investmentStep of this.investmentSteps) {\n            this.dataArray[this.dataToIndex.costs].push({\n                yStart: 0,\n                yEnd: -investmentStep.totalCosts,\n                date: investmentStep.date,\n            });\n            this.dataArray[this.dataToIndex.taxes].push({\n                yStart: -investmentStep.totalCosts,\n                yEnd: -investmentStep.totalCosts - investmentStep.totalTaxes,\n                date: investmentStep.date,\n            });\n            this.dataArray[this.dataToIndex.inflation].push({\n                yStart: -investmentStep.totalCosts - investmentStep.totalTaxes,\n                yEnd: -investmentStep.totalCosts - investmentStep.totalTaxes - investmentStep.inflation,\n                date: investmentStep.date,\n            });\n            let heightOffset = 0;\n            for (const etfIdentifier in investmentStep.totalShares) {\n                const totalShareValue = getTotalShareValue(etfIdentifier, investmentStep);\n                const totalDividendShareValue = getTotalDividenShareValue(etfIdentifier, investmentStep);\n                this.dataArray[this.dataToIndex[etfIdentifier + capitalIdentifier]].push({\n                    yStart: totalShareValue + heightOffset,\n                    yEnd: totalShareValue - totalDividendShareValue + heightOffset,\n                    date: investmentStep.date,\n                });\n                this.dataArray[this.dataToIndex[etfIdentifier + investedIdentifier]].push({\n                    yStart: totalShareValue - totalDividendShareValue + heightOffset,\n                    yEnd: heightOffset,\n                    date: investmentStep.date,\n                });\n                heightOffset += totalShareValue;\n            }\n        }\n\n        // Append miscellaneous data to array.\n        this.dataArray[this.dataToIndex.inflation].color = this.colors.inflation;\n        this.dataArray[this.dataToIndex.taxes].color = this.colors.taxes;\n        this.dataArray[this.dataToIndex.costs].color = this.colors.costs;\n        for (const etfIdentifier in this.investmentSteps[0].totalShares) {\n            this.dataArray[this.dataToIndex[etfIdentifier + investedIdentifier]].color = this.etfLineColors[\n                etfIdentifier\n            ].invested;\n            this.dataArray[this.dataToIndex[etfIdentifier + capitalIdentifier]].color = this.etfLineColors[\n                etfIdentifier\n            ].total;\n        }\n    }\n\n    _drawLines() {\n        // Draw line chart.\n        for (let i = 0; i < this.dataArray.length; i++) {\n            this.svg\n                .append('path')\n                .datum(this.dataArray[i])\n                .style('stroke', d => d.color)\n                .style('stroke-width', this.lineStrokeWidth)\n                .style('opacity', this.lineOpacity)\n                .style('fill', 'none')\n                .attr(\n                    'd',\n                    d3\n                        .line()\n                        .x(d => this.xScale(d.date))\n                        .y(d => this.yScale(d.yStart))\n                );\n        }\n    }\n    _drawContent() {\n        this._drawArea();\n    }\n\n    _drawArea() {\n        // Draw stacked area chart.\n        for (let i = 0; i < this.dataArray.length; i++) {\n            this.svg\n                .append('g')\n                .attr('class', 'area')\n                .append('path')\n                .datum(this.dataArray[i])\n                .style('opacity', this.lineOpacity)\n                .style('fill', d => d.color)\n                .attr(\n                    'd',\n                    d3\n                        .area()\n                        .curve(d3.curveMonotoneX)\n                        .x(d => this.xScale(d.date))\n                        .y0(d => this.yScale(d.yEnd))\n                        .y1(d => this.yScale(d.yStart))\n                );\n        }\n    }\n\n    _prepareText() {\n        super._prepareText();\n        const paddingW = this.width * 0.005;\n        const paddingH = this.standardFontSize * 0.3;\n\n        for (let i = 0; i < negativeLabels.length; i++) {\n            this.textProperties[negativeLabels[i]] = {\n                text: generateLabelWithValueText(negativeLabels[i]),\n                x: this.xScale(this.dateExtent[1]) + paddingW,\n                y: this.yScale(0) + (this.standardFontSize + paddingH) * i + this.standardFontSize,\n                fontSize: this.standardFontSize,\n                textAnchor: 'start',\n                fontWeight: 'normal',\n                color: this.colors[negativeLabels[i]],\n            };\n        }\n\n        // Add ETF Labels.\n        for (let i = 0; i < this.etfIdentifiers.length; i++) {\n            this.textProperties[this.etfIdentifiers[i]] = {\n                text: ETF_SYMBOL_TO_NAME[this.etfIdentifiers[i]],\n                x: this.xScale(this.dateExtent[1]) + paddingW,\n                y: this.yScale(0) - (this.standardFontSize + paddingH) * i * 2 - 2 * this.standardFontSize,\n                fontSize: this.standardFontSize,\n                textAnchor: 'start',\n                fontWeight: 'normal',\n                color: this.etfLineColors[this.etfIdentifiers[i]].total,\n            };\n        }\n\n        // Add ETF values of Labels.\n        for (let i = 0; i < this.etfIdentifiers.length; i++) {\n            this.textProperties[this.etfIdentifiers[i] + this.labelValueIdentifier] = {\n                text: generateEtfValueText(),\n                x: this.xScale(this.dateExtent[1]) + paddingW,\n                y: this.yScale(0) - (this.standardFontSize + paddingH) * i * 2 - 1 * this.standardFontSize,\n                fontSize: this.standardFontSize,\n                textAnchor: 'start',\n                fontWeight: 'normal',\n                color: this.etfLineColors[this.etfIdentifiers[i]].total,\n            };\n        }\n    }\n\n    _updateTooltip(investmentStepIndex) {\n        for (const etfIdentifier of this.etfIdentifiers) {\n            const totalValue = getTotalShareValue(etfIdentifier, this.investmentSteps[investmentStepIndex]);\n            const totalDividendValue = getTotalDividenShareValue(\n                etfIdentifier,\n                this.investmentSteps[investmentStepIndex]\n            );\n            const investedValue = totalValue - totalDividendValue;\n            const updatedValueText = generateEtfValueText(\n                this.valueToDisplayText(investedValue, true),\n                this.valueToDisplayText(totalValue, true)\n            );\n            this.textProperties[etfIdentifier + this.labelValueIdentifier].text = updatedValueText;\n        }\n        for (const negativeLabel of negativeLabels) {\n            const value = this.investmentSteps[investmentStepIndex][\n                negativeLabelsToInvestmentStepIdentifier[negativeLabel]\n            ];\n            const updatedValueText = generateLabelWithValueText(negativeLabel, this.valueToDisplayText(value, true));\n            this.textProperties[negativeLabel].text = updatedValueText;\n        }\n    }\n}\n\nexport default AreaChartD3;\n","import { D3ChartStrategy, generateLabelWithValueText } from './D3ChartStrategy';\n\nfunction getSumNewPayout(investmentStep) {\n    let sumNewPayout = 0;\n    for (const etfIdentifier in investmentStep.newPayout) {\n        sumNewPayout += investmentStep.newPayout[etfIdentifier];\n    }\n    return sumNewPayout;\n}\n\nexport class CashflowBarChart extends D3ChartStrategy {\n    constructor(investmentSteps, renderDivRef, payoutPhaseStartDate, tooltipDate) {\n        super(investmentSteps, renderDivRef, payoutPhaseStartDate, 'secondSVG', tooltipDate);\n        this.barPaddingPercentage = 0.9;\n\n        this.zeroLineStrokeWidth = 3;\n\n        this.colors = { payout: '#3acc5c', invested: '#ff3e58' };\n    }\n\n    render() {\n        super.render();\n    }\n\n    _prepareData() {\n        // Create line array.\n        const dataToIndex = {\n            invested: 0,\n            payout: 1,\n        };\n\n        this.minIndex = dataToIndex.invested;\n        this.maxIndex = dataToIndex.payout;\n\n        this.dataArray = [[], []];\n        for (const investmentStep of this.investmentSteps) {\n            let sumNewPayout = getSumNewPayout(investmentStep);\n\n            this.dataArray[dataToIndex.invested].push({\n                yStart: 0,\n                yEnd: -investmentStep.newInvestment,\n                date: investmentStep.date,\n                color: this.colors.invested,\n            });\n            this.dataArray[dataToIndex.payout].push({\n                yStart: sumNewPayout,\n                yEnd: 0,\n                date: investmentStep.date,\n                color: this.colors.payout,\n            });\n        }\n\n        this.rectWidth = (this.width / this.dataArray[dataToIndex.invested].length) * this.barPaddingPercentage;\n    }\n\n    _prepareText() {\n        super._prepareText();\n\n        const payoutX =\n            this.xScale(this.payoutPhaseStartDate) +\n            (this.xScale(this.dateExtent[1]) - this.xScale(this.payoutPhaseStartDate)) / 2;\n        const payoutY = this.yScale(0) + (this.yScale(this.yExtent[0]) - this.yScale(0)) / 2;\n\n        const payoutIdentifier = 'payout';\n        this.textProperties[payoutIdentifier] = {\n            text: generateLabelWithValueText(payoutIdentifier),\n            x: payoutX,\n            y: payoutY,\n            fontSize: this.standardFontSize,\n            textAnchor: 'middle',\n            fontWeight: 'normal',\n            color: this.colors[payoutIdentifier],\n        };\n\n        const investedX =\n            this.xScale(this.dateExtent[0]) +\n            (this.xScale(this.payoutPhaseStartDate) - this.xScale(this.dateExtent[0])) / 2;\n        const investedY = this.yScale(0) - (this.yScale(0) - this.yScale(this.yExtent[1])) / 2;\n\n        const investedIdentifier = 'invested';\n        this.textProperties[investedIdentifier] = {\n            text: generateLabelWithValueText(investedIdentifier),\n            x: investedX,\n            y: investedY,\n            fontSize: this.standardFontSize,\n            textAnchor: 'middle',\n            fontWeight: 'normal',\n            color: this.colors[investedIdentifier],\n        };\n    }\n\n    _updateTooltip(investmentStepIndex) {\n        const payoutValue = getSumNewPayout(this.investmentSteps[investmentStepIndex]);\n        const investedValue = this.investmentSteps[investmentStepIndex].newInvestment;\n        this.textProperties.payout.text = generateLabelWithValueText('payout', this.valueToDisplayText(payoutValue));\n        this.textProperties.invested.text = generateLabelWithValueText(\n            'invested',\n            this.valueToDisplayText(investedValue)\n        );\n    }\n\n    _drawContent() {\n        // Skip the last bar if it is outside the graph.\n        const needToSkipLastBar = this.dataArray[0][this.dataArray[0].length - 1].date === this.dateExtent[1];\n        for (let barArray of this.dataArray) {\n            if (needToSkipLastBar) {\n                barArray = barArray.slice(0, -1);\n            }\n\n            this.svg\n                .append('g')\n                .attr('class', 'bars')\n                .selectAll(`rect.none`)\n                .data(barArray)\n                .enter()\n                .append('rect')\n                .style('fill', d => d.color)\n                .attr('x', d => this.xScale(d.date))\n                .attr('width', this.rectWidth)\n                .attr('y', d => this.yScale(d.yStart))\n                .attr('height', d => this.yScale(d.yEnd) - this.yScale(d.yStart));\n        }\n    }\n}\n\nexport default CashflowBarChart;\n","import React from 'react';\nimport {\n    STARTING_CAPITAL_IDENTIFIER,\n    MONTHLY_INVESTMENT_IDENTIFIER,\n    TRANSACTION_COSTS_IDENTIFIER,\n    TRANSACTION_COSTS_TYPE_IDENTIFIER,\n    SAVING_PHASE_IDENTIFIER,\n    AGE_IDENTIFIER,\n    TAX_FREE_AMOUNT_IDENTIFIER,\n    MONTHLY_PAYOUT_IDENTIFIER,\n    LIFE_EXPECTATION_IDENTIFIER,\n    DETAILED_GRAPH_DROPDOWN_IDENTIFIER,\n} from './App';\nimport { InvestmentModel } from '../model/InvestmentModel';\nimport AreaChartD3 from '../renderer/LineChartD3';\nimport CashflowBarChart from '../renderer/CashflowBarChartD3';\nimport { D3ChartStrategy } from '../renderer/D3ChartStrategy';\n\nfunction generateCostConfig(state) {\n    if (state[TRANSACTION_COSTS_TYPE_IDENTIFIER]) {\n        return { percentageCosts: 0.0, fixedCosts: state[TRANSACTION_COSTS_IDENTIFIER] };\n    } else {\n        return { percentageCosts: state[TRANSACTION_COSTS_IDENTIFIER], fixedCosts: 0.0 };\n    }\n}\n\nexport class Visualization extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.firstSVGRef = React.createRef();\n        this.secondSVGRef = React.createRef();\n    }\n\n    getInvestmentModel() {\n        const etfIdentifierToRatio = {};\n        for (const etfIdentifier in this.props.etfProperties) {\n            if (this.props.etfProperties[etfIdentifier].selected) {\n                etfIdentifierToRatio[this.props.etfProperties[etfIdentifier].symbol] = this.props.etfProperties[\n                    etfIdentifier\n                ].percentage;\n            }\n        }\n\n        return new InvestmentModel(\n            this.props[STARTING_CAPITAL_IDENTIFIER],\n            this.props[MONTHLY_INVESTMENT_IDENTIFIER],\n            this.props[MONTHLY_PAYOUT_IDENTIFIER],\n            this.props[SAVING_PHASE_IDENTIFIER],\n            etfIdentifierToRatio,\n            {\n                taxFreeAmount: this.props[TAX_FREE_AMOUNT_IDENTIFIER],\n                costConfig: generateCostConfig(this.props),\n            },\n            this.props[AGE_IDENTIFIER],\n            this.props[LIFE_EXPECTATION_IDENTIFIER]\n        );\n    }\n\n    getTooltipDate() {\n        if (this.areaChart != null) {\n            return this.areaChart.tooltipDate;\n        } else if (this.barChart != null) {\n            return this.barChart.tooltipDate;\n        } else {\n            return undefined;\n        }\n    }\n\n    drawVisualization() {\n        D3ChartStrategy.reset();\n        try {\n            if (this.props.isValid != null && this.props.isValid) {\n                this.investmentModel = this.getInvestmentModel();\n            }\n            const firstPayoutPhaseDate = this.investmentModel.payoutDates[0];\n            const correctLevelOfDetailInvestmentSteps = this.investmentModel.getInvestmentSteps(\n                this.props[DETAILED_GRAPH_DROPDOWN_IDENTIFIER]\n            );\n            let tooltipDate = this.getTooltipDate();\n            this.areaChart = new AreaChartD3(\n                correctLevelOfDetailInvestmentSteps,\n                this.firstSVGRef.current,\n                firstPayoutPhaseDate,\n                tooltipDate\n            );\n            this.areaChart.render();\n            this.barChart = new CashflowBarChart(\n                correctLevelOfDetailInvestmentSteps,\n                this.secondSVGRef.current,\n                firstPayoutPhaseDate,\n                tooltipDate\n            );\n            this.barChart.render();\n        } catch (e) {\n            console.error(e);\n        }\n    }\n\n    async componentDidMount() {\n        this.drawVisualization();\n    }\n\n    componentDidUpdate() {\n        this.drawVisualization();\n    }\n    render() {\n        return (\n            <React.Fragment>\n                <div ref={this.secondSVGRef}></div>\n                <div ref={this.firstSVGRef}></div>\n            </React.Fragment>\n        );\n    }\n}\n\nexport default Visualization;\n","import React from 'react';\n\nimport { TextInputElement } from './TextInputElement';\n\nexport function SidebarSectionHeading(props) {\n    return (\n        <div className=\"position-relative\">\n            <h6 className=\"sidebar-heading d-flex justify-content-between align-items-center px-3 mt-4 mb-1\">\n                <span>{props.title}</span>\n            </h6>\n            <ErrorMessage {...props} identifier={props.title} />\n        </div>\n    );\n}\n\nexport function Overlay(props) {\n    return (\n        <div className=\"row\">\n            <div className=\"col-12 p-0\">\n                <div className=\"d-grid gap-0\">\n                    <div\n                        className=\"overlay min-vh-100 text-center m-0 d-flex flex-column justify-content-center\"\n                        style={{ visibility: props.displayOverlay ? 'visible' : 'hidden' }}>\n                        <h1 className=\"p-5\">\n                            Enter your personal{' '}\n                            <a\n                                href=\"https://www.alphavantage.co/support/#api-key\"\n                                target=\"_blank\"\n                                rel=\"noopener noreferrer\">\n                                {' '}\n                                Alphavantage API Key\n                            </a>{' '}\n                        </h1>\n                        <TextInputElement {...props} disabled={!props.displayOverlay} />\n                        <button type=\"button\" className=\"btn btn-primary my-5\" onClick={props.handleAPIKeyConfirm}>\n                            Confirm\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport function ErrorMessage(props) {\n    return (\n        <div\n            id={props.identifier + 'Feedback'}\n            className=\"invalid-tooltip\"\n            style={{ visibility: props.isValid ? 'hidden' : 'visible' }}>\n            {props.errorMessage}\n        </div>\n    );\n}\n","import React from 'react';\n\nimport { ErrorMessage } from './MinimalBootstrapComponents';\n\nexport function TextInputElement(props) {\n    return (\n        <div className=\"position-relative\">\n            <label className=\"form-label\" htmlFor={props.identifier}>\n                {props.label}\n            </label>\n            <input\n                className={'form-control ' + (props.isValid ? '' : 'is-invalid')}\n                id={props.identifier}\n                type=\"text\"\n                value={props.value.toString() + (props.textAppending !== '' ? ' ' + props.textAppending : '')}\n                onChange={e => props.onValueChange(props.transformFunction(e), props.identifier)}\n                disabled={props.disabled}\n            />\n            <ErrorMessage {...props} />\n        </div>\n    );\n}\n\nexport default TextInputElement;\n","import React from 'react';\n\nexport function CheckboxInputElement(props) {\n    return (\n        <div className=\"checkbox-element\">\n            <input\n                className=\"form-check-input\"\n                id={props.identifier}\n                type=\"checkbox\"\n                value={props.value}\n                onChange={() => props.onValueChange(props.identifier)}\n            />\n            <label className=\"form-check-label\" htmlFor={props.identifier}>\n                {props.label}\n            </label>\n        </div>\n    );\n}\n\nexport default CheckboxInputElement;\n","import React from 'react';\n\nfunction costsOfElementMatchUIValues(props, element) {\n    return element.fixedCosts === props.fixedCosts && element.percentageCosts === props.percentageCosts;\n}\n\nexport function BrokerDropDown(props) {\n    return (\n        <div className=\"dropdown\">\n            <button\n                className=\"btn btn-secondary dropdown-toggle\"\n                type=\"button\"\n                id=\"BrokerDropDown\"\n                data-bs-toggle=\"dropdown\"\n                aria-expanded=\"false\">\n                {props.label}\n            </button>\n            <ul className=\"dropdown-menu\" aria-labelledby=\"BrokerDropDown\">\n                {props.elements.map(element => (\n                    <li key={element.identifier}>\n                        <button\n                            className={\n                                costsOfElementMatchUIValues(props, element) ? 'dropdown-item active' : 'dropdown-item'\n                            }\n                            type=\"button\"\n                            onClick={e => props.handleChange(element)}>\n                            {element.label}\n                        </button>\n                    </li>\n                ))}\n            </ul>\n        </div>\n    );\n}\n","import React from 'react';\n\nexport function GraphDetailDropDown(props) {\n    return (\n        <div className=\"dropdown\">\n            <button\n                className=\"btn btn-secondary dropdown-toggle\"\n                type=\"button\"\n                id=\"GraphDetailDropDown\"\n                data-bs-toggle=\"dropdown\"\n                aria-expanded=\"false\">\n                {props.label}\n            </button>\n            <ul className=\"dropdown-menu\" aria-labelledby=\"GraphDetailDropDown\">\n                {props.elements.map(element => (\n                    <li key={element.identifier}>\n                        <button\n                            className={\n                                props.value === element.value ? 'dropdown-item active' : 'dropdown-item'\n                            }\n                            type=\"button\"\n                            onClick={e => props.handleChange(element)}>\n                            {element.label}\n                        </button>\n                    </li>\n                ))}\n            </ul>\n        </div>\n    );\n}\n","import React from 'react';\n\nimport { TextInputElement } from './TextInputElement';\n\nimport { ErrorMessage } from './MinimalBootstrapComponents';\n\nfunction percentageTransformFunction(e) {\n    const floatVal = parseFloat(e.target.value) / 100;\n    return isNaN(floatVal) ? 0 : floatVal;\n}\n\nexport function ETFSelectionDropDown(props) {\n    return (\n        <div className=\"dropdown position-relative\">\n            <button\n                className=\"btn btn-secondary dropdown-toggle is-invalid\"\n                type=\"button\"\n                id=\"ETFSelectionDropDown\"\n                data-bs-toggle=\"dropdown\"\n                aria-expanded=\"false\">\n                {props.label}\n            </button>\n            <ErrorMessage {...props} />\n            <ul className=\"dropdown-menu\" aria-labelledby=\"ETFSelectionDropDown\">\n                {Object.keys(props.elements).map(elementIdentifier => (\n                    <li key={elementIdentifier}>\n                        <button\n                            className={\n                                props.elements[elementIdentifier].selected ? 'dropdown-item active' : 'dropdown-item'\n                            }\n                            type=\"button\"\n                            onClick={e => {\n                                if (e.target.type !== 'text') {\n                                    props.handleSelectionChange(props.elements[elementIdentifier]);\n                                }\n                            }}>\n                            <TextInputElement\n                                {...props.elements[elementIdentifier]}\n                                value={Math.round(props.elements[elementIdentifier].percentage * 100)}\n                                textAppending=\"%\"\n                                onValueChange={props.handleShareChange}\n                                transformFunction={percentageTransformFunction}\n                                disabled={props.autoPercentage}\n                                isValid={true}\n                            />\n                        </button>\n                    </li>\n                ))}\n            </ul>\n        </div>\n    );\n}\n","import React from 'react';\n// Needed to make the drop downs work.\nimport { Dropdown, Tooltip } from 'bootstrap'; // eslint-disable-line no-unused-vars\nimport Visualization from './Visualization';\nimport TextInputElement from './TextInputElement';\nimport CheckboxInputElement from './CheckboxInputElement';\nimport { SidebarSectionHeading, Overlay } from './MinimalBootstrapComponents';\nimport { BrokerDropDown } from './BrokerDropDown';\nimport { GraphDetailDropDown } from './GraphDetailDropDown';\nimport { ETFSelectionDropDown } from './ETFSelectionDropDown';\nimport ForecastModelSingleton from '../model/ForecastModel';\n\nexport const STARTING_CAPITAL_IDENTIFIER = 'startingCapital';\nexport const MONTHLY_INVESTMENT_IDENTIFIER = 'monthlyInvestment';\nexport const TRANSACTION_COSTS_IDENTIFIER = 'transactionCosts';\nexport const TRANSACTION_COSTS_TYPE_IDENTIFIER = 'transactionCostsType';\nexport const SAVING_PHASE_IDENTIFIER = 'savingPhase';\nexport const AGE_IDENTIFIER = 'age';\nexport const TAX_FREE_AMOUNT_IDENTIFIER = 'taxFreeAmount';\nexport const MONTHLY_PAYOUT_IDENTIFIER = 'monthlyPayout';\nexport const LIFE_EXPECTATION_IDENTIFIER = 'lifeExpectation';\nexport const DETAILED_GRAPH_DROPDOWN_IDENTIFIER = 'detailedGraph';\nexport const ETF_DROPDOWN_SELECTION_IDENTIFIER = 'etfDropdownSelection';\nexport const API_KEY_IDENTIFIER = 'apiKey';\nconst BROKER_DROPDOWN_IDENTIFIER = 'brokerDropdown';\nconst ETF_AUTOMATIC_PERCENTAGE_IDENTIFIER = 'etfAutomaticPercentage';\n\nexport const ETF_SYMBOL_TO_NAME = {\n    'SP5C.PAR': 'S & P 500',\n    'ESGE': 'iShare',\n    'SUSA': 'MSCI USA ESG',\n};\n\nfunction transformInputToInt(e) {\n    const intVal = parseInt(e.target.value.split(' ', 1));\n    return isNaN(intVal) ? 0 : intVal;\n}\n\nfunction transformInputToFloat(e) {\n    const floatVal = parseFloat(e.target.value);\n    return isNaN(floatVal) ? 0 : floatVal;\n}\n\nfunction isPercentage(val) {\n    return !Number.isNaN(val) && val >= 0 && val <= 1;\n}\n\nfunction isPositiveInt(val) {\n    return !Number.isNaN(val) && Number.isInteger(val) && val >= 0;\n}\n\nfunction constructVisualizationProps(state) {\n    const props = {};\n    for (const identifier in state) {\n        props[identifier] = state[identifier].value;\n    }\n    Object.assign(props, { etfProperties: state[ETF_DROPDOWN_SELECTION_IDENTIFIER].elements });\n    props.isValid = state.isValid;\n    return props;\n}\n\nfunction recalculateETFPercentages(state) {\n    let numberOfSelectedETFs = 0;\n    for (const etfIdentifier in state[ETF_DROPDOWN_SELECTION_IDENTIFIER].elements) {\n        if (state[ETF_DROPDOWN_SELECTION_IDENTIFIER].elements[etfIdentifier].selected) {\n            numberOfSelectedETFs++;\n        }\n    }\n    const newPercentage = 1.0 / Math.max(1, numberOfSelectedETFs);\n    for (const etfIdentifier in state[ETF_DROPDOWN_SELECTION_IDENTIFIER].elements) {\n        state[ETF_DROPDOWN_SELECTION_IDENTIFIER].elements[etfIdentifier].percentage = newPercentage;\n    }\n    return state;\n}\n\nexport class App extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.handleTextChange = this.handleTextChange.bind(this);\n        this.handleCheckBoxChange = this.handleCheckBoxChange.bind(this);\n        this.handleBrokerChange = this.handleBrokerChange.bind(this);\n        this.handleGraphDetailChange = this.handleGraphDetailChange.bind(this);\n        this.handleETFSelectionChange = this.handleETFSelectionChange.bind(this);\n        this.handleETFShareChange = this.handleETFShareChange.bind(this);\n        this.handleAPIKeyConfirm = this.handleAPIKeyConfirm.bind(this);\n\n        this.state = getInitialInputFormState(this);\n    }\n\n    handleTextChange(changedValue, changedStateIdentifier) {\n        const state = { ...this.state };\n        state[changedStateIdentifier].value = changedValue;\n        this.validateAndSetState(state);\n    }\n\n    handleCheckBoxChange(changedStateIdentifier) {\n        const state = { ...this.state };\n        state[changedStateIdentifier].value = !state[changedStateIdentifier].value;\n        if (changedStateIdentifier === TRANSACTION_COSTS_TYPE_IDENTIFIER) {\n            state[TRANSACTION_COSTS_IDENTIFIER].value = state[changedStateIdentifier].value ? 5 : 0.015;\n            state[TRANSACTION_COSTS_IDENTIFIER].textAppending = state[changedStateIdentifier].value ? '€' : '%';\n            state[TRANSACTION_COSTS_IDENTIFIER].transformFunction = state[changedStateIdentifier].value\n                ? transformInputToInt\n                : transformInputToFloat;\n        } else if (\n            changedStateIdentifier === ETF_AUTOMATIC_PERCENTAGE_IDENTIFIER &&\n            state[changedStateIdentifier].value\n        ) {\n            recalculateETFPercentages(state);\n        }\n        this.validateAndSetState(state);\n    }\n\n    handleBrokerChange(brokerProperties) {\n        const state = { ...this.state };\n        state[TRANSACTION_COSTS_IDENTIFIER].value =\n            brokerProperties.percentageCosts > 0 ? brokerProperties.percentageCosts : brokerProperties.fixedCosts;\n        state[TRANSACTION_COSTS_TYPE_IDENTIFIER].value = brokerProperties.percentageCosts > 0 ? false : true;\n        this.validateAndSetState(state);\n    }\n\n    handleGraphDetailChange(detailProperties) {\n        const state = { ...this.state };\n        state[DETAILED_GRAPH_DROPDOWN_IDENTIFIER].value = detailProperties.value;\n        this.validateAndSetState(state);\n    }\n\n    handleETFSelectionChange(etfProperties) {\n        const state = { ...this.state };\n        state[ETF_DROPDOWN_SELECTION_IDENTIFIER].elements[etfProperties.identifier].selected = !state[\n            ETF_DROPDOWN_SELECTION_IDENTIFIER\n        ].elements[etfProperties.identifier].selected;\n        if (state[ETF_AUTOMATIC_PERCENTAGE_IDENTIFIER].value) {\n            recalculateETFPercentages(state);\n        }\n        this.validateAndSetState(state);\n    }\n\n    handleETFShareChange(changedValue, changedETFIdentifier) {\n        const state = { ...this.state };\n        state[ETF_DROPDOWN_SELECTION_IDENTIFIER].elements[changedETFIdentifier].percentage = changedValue;\n        this.validateAndSetState(state);\n    }\n\n    async handleAPIKeyConfirm() {\n        const apiKey = this.state[API_KEY_IDENTIFIER].value;\n        const apiValues = { ...this.state[API_KEY_IDENTIFIER] };\n        try {\n            await ForecastModelSingleton.loadHistoricData(\n                apiKey,\n                this.state[ETF_DROPDOWN_SELECTION_IDENTIFIER].elements\n            );\n            apiValues.error = false;\n            apiValues.displayOverlay = false;\n        } catch (e) {\n            apiValues.error = true;\n        }\n        this.setState({ [API_KEY_IDENTIFIER]: apiValues });\n        this.forceUpdate();\n    }\n\n    validateAndSetState(state) {\n        const positiveIntIdentifier = [\n            MONTHLY_INVESTMENT_IDENTIFIER,\n            MONTHLY_PAYOUT_IDENTIFIER,\n            STARTING_CAPITAL_IDENTIFIER,\n            AGE_IDENTIFIER,\n            LIFE_EXPECTATION_IDENTIFIER,\n            SAVING_PHASE_IDENTIFIER,\n            TAX_FREE_AMOUNT_IDENTIFIER,\n        ];\n        state.isValid = true;\n\n        for (const identifier of positiveIntIdentifier) {\n            state[identifier].isValid = isPositiveInt(state[identifier].value);\n            state[identifier].errorMessage = 'Please enter a positive number.';\n            state.isValid = state[identifier].isValid && state.isValid;\n        }\n\n        // Check the year values.\n        const leftoverYears = state[LIFE_EXPECTATION_IDENTIFIER].value - state[AGE_IDENTIFIER].value;\n        if (state[AGE_IDENTIFIER].value >= state[LIFE_EXPECTATION_IDENTIFIER].value) {\n            state[AGE_IDENTIFIER].errorMessage = 'You cannot be older than the life expectation';\n            state[AGE_IDENTIFIER].isValid = false;\n            state.isValid = false;\n        } else if (leftoverYears <= state[SAVING_PHASE_IDENTIFIER].value) {\n            state[SAVING_PHASE_IDENTIFIER].errorMessage =\n                'You cannot have a saving phase that lasts longer than your life.';\n            state[SAVING_PHASE_IDENTIFIER].isValid = false;\n            state.isValid = false;\n        }\n\n        // Check Cost values.\n        if (state[TRANSACTION_COSTS_TYPE_IDENTIFIER].value) {\n            state[TRANSACTION_COSTS_IDENTIFIER].isValid = isPositiveInt(state[TRANSACTION_COSTS_IDENTIFIER].value);\n            state[TRANSACTION_COSTS_IDENTIFIER].errorMessage = 'Please enter a positive number.';\n        } else {\n            state[TRANSACTION_COSTS_IDENTIFIER].isValid = isPercentage(state[TRANSACTION_COSTS_IDENTIFIER].value);\n            state[TRANSACTION_COSTS_IDENTIFIER].errorMessage = 'Please enter a valid percentage.';\n        }\n        state.isValid = state[TRANSACTION_COSTS_IDENTIFIER].isValid && state.isValid;\n\n        // Check the etf percentages.\n        let sumOfPercentages = 0;\n        let foundOneSelectedEtf = false;\n        for (const etfIdentifier in state[ETF_DROPDOWN_SELECTION_IDENTIFIER].elements) {\n            if (state[ETF_DROPDOWN_SELECTION_IDENTIFIER].elements[etfIdentifier].selected) {\n                sumOfPercentages += state[ETF_DROPDOWN_SELECTION_IDENTIFIER].elements[etfIdentifier].percentage;\n                foundOneSelectedEtf = true;\n            }\n        }\n        if (!foundOneSelectedEtf) {\n            state[ETF_DROPDOWN_SELECTION_IDENTIFIER].isValid = false;\n            state[ETF_DROPDOWN_SELECTION_IDENTIFIER].errorMessage = 'Please select at least one ETF.';\n            state.isValid = false;\n        } else if (sumOfPercentages !== 1.0) {\n            state[ETF_DROPDOWN_SELECTION_IDENTIFIER].isValid = false;\n            state[ETF_DROPDOWN_SELECTION_IDENTIFIER].errorMessage = 'The sum of all selected ETF needs to be 100%';\n            state.isValid = false;\n        } else {\n            state[ETF_DROPDOWN_SELECTION_IDENTIFIER].isValid = true;\n        }\n\n        this.setState(state);\n    }\n\n    render() {\n        const visualizationProps = constructVisualizationProps(this.state);\n        return (\n            <div className=\"container-fluid\">\n                <Overlay {...this.state[API_KEY_IDENTIFIER]} />\n                <div className=\"row\">\n                    <nav id=\"sidebarMenu\" className=\"col-md-3 col-lg-2 bg-light sidebar\">\n                        <form className=\"position-sticky needs-validation\" noValidate>\n                            {/* Money Options */}\n                            <SidebarSectionHeading title=\"Money Options\" />\n                            <TextInputElement\n                                key={STARTING_CAPITAL_IDENTIFIER}\n                                {...this.state[STARTING_CAPITAL_IDENTIFIER]}\n                            />\n                            <TextInputElement\n                                key={MONTHLY_INVESTMENT_IDENTIFIER}\n                                {...this.state[MONTHLY_INVESTMENT_IDENTIFIER]}\n                            />\n                            <TextInputElement\n                                key={MONTHLY_PAYOUT_IDENTIFIER}\n                                {...this.state[MONTHLY_PAYOUT_IDENTIFIER]}\n                            />\n                            <TextInputElement\n                                key={TAX_FREE_AMOUNT_IDENTIFIER}\n                                {...this.state[TAX_FREE_AMOUNT_IDENTIFIER]}\n                            />\n                            {/* Time Options */}\n                            <SidebarSectionHeading title=\"Time Options\" />\n                            <TextInputElement key={AGE_IDENTIFIER} {...this.state[AGE_IDENTIFIER]} />\n                            <TextInputElement\n                                key={LIFE_EXPECTATION_IDENTIFIER}\n                                {...this.state[LIFE_EXPECTATION_IDENTIFIER]}\n                            />\n                            <TextInputElement key={SAVING_PHASE_IDENTIFIER} {...this.state[SAVING_PHASE_IDENTIFIER]} />\n                            {/* Cost Options */}\n                            <SidebarSectionHeading title=\"Cost Options\" />\n                            <TextInputElement\n                                key={TRANSACTION_COSTS_IDENTIFIER}\n                                {...this.state[TRANSACTION_COSTS_IDENTIFIER]}\n                            />\n                            <CheckboxInputElement\n                                key={TRANSACTION_COSTS_TYPE_IDENTIFIER}\n                                {...this.state[TRANSACTION_COSTS_TYPE_IDENTIFIER]}\n                            />\n                            <BrokerDropDown\n                                key={BROKER_DROPDOWN_IDENTIFIER}\n                                fixedCosts={\n                                    this.state[TRANSACTION_COSTS_TYPE_IDENTIFIER].value\n                                        ? this.state[TRANSACTION_COSTS_IDENTIFIER].value\n                                        : 0\n                                }\n                                percentageCosts={\n                                    this.state[TRANSACTION_COSTS_TYPE_IDENTIFIER].value\n                                        ? 0\n                                        : this.state[TRANSACTION_COSTS_IDENTIFIER].value\n                                }\n                                {...this.state[BROKER_DROPDOWN_IDENTIFIER]}\n                            />\n                            {/* Visualization Options */}\n                            <SidebarSectionHeading title=\"Visualization Options\" />\n                            <div className=\"d-grid gap-0\">\n                                <div className=\"p-1\">\n                                    <GraphDetailDropDown\n                                        key={DETAILED_GRAPH_DROPDOWN_IDENTIFIER}\n                                        {...this.state[DETAILED_GRAPH_DROPDOWN_IDENTIFIER]}\n                                    />\n                                </div>\n                                <CheckboxInputElement\n                                    key={ETF_AUTOMATIC_PERCENTAGE_IDENTIFIER}\n                                    {...this.state[ETF_AUTOMATIC_PERCENTAGE_IDENTIFIER]}\n                                />\n                                <div className=\"p-1\">\n                                    <ETFSelectionDropDown\n                                        key={ETF_DROPDOWN_SELECTION_IDENTIFIER}\n                                        autoPercentage={this.state[ETF_AUTOMATIC_PERCENTAGE_IDENTIFIER].value}\n                                        {...this.state[ETF_DROPDOWN_SELECTION_IDENTIFIER]}\n                                    />\n                                </div>\n                            </div>\n                        </form>\n                    </nav>\n                    <main className=\"col-md-9 col-lg-10 ms-sm-auto\">\n                        <h1>Etf Pension Plan Visualization</h1>\n                        <Visualization {...visualizationProps} />\n                    </main>\n                </div>\n            </div>\n        );\n    }\n}\n\nfunction getInitialInputFormState(caller) {\n    return {\n        isValid: true,\n        // simple ui elements.\n        [STARTING_CAPITAL_IDENTIFIER]: {\n            value: 1000,\n            label: 'Starting Capital',\n            errorMessage: '',\n            textAppending: '€',\n            isValid: true,\n            identifier: STARTING_CAPITAL_IDENTIFIER,\n            transformFunction: transformInputToInt,\n            onValueChange: caller.handleTextChange,\n        },\n        [MONTHLY_INVESTMENT_IDENTIFIER]: {\n            value: 100,\n            label: 'Monthly Investment',\n            errorMessage: 'Please enter a positive Money amount.',\n            textAppending: '€',\n            isValid: true,\n            identifier: MONTHLY_INVESTMENT_IDENTIFIER,\n            transformFunction: transformInputToInt,\n            onValueChange: caller.handleTextChange,\n        },\n        [MONTHLY_PAYOUT_IDENTIFIER]: {\n            value: 1000,\n            label: 'Monthly Payout',\n            errorMessage: '',\n            textAppending: '€',\n            isValid: true,\n            identifier: MONTHLY_PAYOUT_IDENTIFIER,\n            transformFunction: transformInputToInt,\n            onValueChange: caller.handleTextChange,\n        },\n        [TRANSACTION_COSTS_IDENTIFIER]: {\n            value: 0.015,\n            label: 'Transaction Costs',\n            errorMessage: '',\n            textAppending: '%',\n            isValid: true,\n            identifier: TRANSACTION_COSTS_IDENTIFIER,\n            transformFunction: transformInputToFloat,\n            onValueChange: caller.handleTextChange,\n        },\n        [TRANSACTION_COSTS_TYPE_IDENTIFIER]: {\n            value: false,\n            label: 'Fixed Amount',\n            identifier: TRANSACTION_COSTS_TYPE_IDENTIFIER,\n            onValueChange: caller.handleCheckBoxChange,\n        },\n        [SAVING_PHASE_IDENTIFIER]: {\n            value: 40,\n            label: 'Saving Phase',\n            errorMessage: '',\n            textAppending: 'Y',\n            isValid: true,\n            identifier: SAVING_PHASE_IDENTIFIER,\n            transformFunction: transformInputToInt,\n            onValueChange: caller.handleTextChange,\n        },\n        [AGE_IDENTIFIER]: {\n            value: 30,\n            label: 'Your Age',\n            textAppending: 'Y',\n            errorMessage: '',\n            isValid: true,\n            identifier: AGE_IDENTIFIER,\n            transformFunction: transformInputToInt,\n            onValueChange: caller.handleTextChange,\n        },\n        [LIFE_EXPECTATION_IDENTIFIER]: {\n            value: 80,\n            label: 'Life Expectation',\n            errorMessage: '',\n            isValid: true,\n            textAppending: 'Y',\n            identifier: LIFE_EXPECTATION_IDENTIFIER,\n            transformFunction: transformInputToInt,\n            onValueChange: caller.handleTextChange,\n        },\n        [TAX_FREE_AMOUNT_IDENTIFIER]: {\n            value: 801,\n            label: 'Tax Free Amount',\n            errorMessage: '',\n            isValid: true,\n            textAppending: '€',\n            identifier: TAX_FREE_AMOUNT_IDENTIFIER,\n            transformFunction: transformInputToInt,\n            onValueChange: caller.handleTextChange,\n        },\n        [ETF_AUTOMATIC_PERCENTAGE_IDENTIFIER]: {\n            value: false,\n            label: 'Automatic ETF Ratio',\n            identifier: ETF_AUTOMATIC_PERCENTAGE_IDENTIFIER,\n            onValueChange: caller.handleCheckBoxChange,\n        },\n        [API_KEY_IDENTIFIER]: {\n            displayOverlay: true,\n            value: '',\n            label: '',\n            errorMessage: '',\n            isValid: true,\n            textAppending: '',\n            identifier: API_KEY_IDENTIFIER,\n            transformFunction: e => e.target.value,\n            onValueChange: caller.handleTextChange,\n            handleAPIKeyConfirm: caller.handleAPIKeyConfirm,\n        },\n        // Complex UI elements.\n        [DETAILED_GRAPH_DROPDOWN_IDENTIFIER]: {\n            value: 1,\n            label: 'Graph Detail Level',\n            isValid: true,\n            handleChange: caller.handleGraphDetailChange,\n            elements: [\n                {\n                    identifier: '12',\n                    value: 12,\n                    label: 'All Months a Year (highest detail)',\n                },\n                {\n                    identifier: '6',\n                    value: 6,\n                    label: 'Every 2nd Month (higher detail)',\n                },\n                {\n                    identifier: '3',\n                    value: 3,\n                    label: 'Every 4th Month (lower detail)',\n                },\n                {\n                    identifier: '1',\n                    value: 1,\n                    label: 'One Month a Year (lowest detail) (default)',\n                },\n            ],\n        },\n        [BROKER_DROPDOWN_IDENTIFIER]: {\n            label: 'Broker',\n            isValid: true,\n            handleChange: caller.handleBrokerChange,\n            elements: [\n                {\n                    identifier: 'comdirect',\n                    label: 'comdirect',\n                    fixedCosts: 0,\n                    percentageCosts: 0.015,\n                },\n                {\n                    identifier: 'tradeRepublic',\n                    label: 'Trade Republic',\n                    fixedCosts: 0,\n                    percentageCosts: 0.01,\n                },\n                {\n                    identifier: 'eToro',\n                    label: 'eToro',\n                    fixedCosts: 0,\n                    percentageCosts: 0.0,\n                },\n            ],\n        },\n        [ETF_DROPDOWN_SELECTION_IDENTIFIER]: {\n            label: 'ETF Selection',\n            isValid: true,\n            identifier: ETF_DROPDOWN_SELECTION_IDENTIFIER,\n            errorMessage: '',\n            handleSelectionChange: caller.handleETFSelectionChange,\n            handleShareChange: caller.handleETFShareChange,\n            elements: {\n                S_and_P_500: {\n                    identifier: 'S_and_P_500',\n                    symbol: 'SP5C.PAR',\n                    label: ETF_SYMBOL_TO_NAME['SP5C.PAR'],\n                    percentage: 1.0,\n                    selected: true,\n                },\n                iShare: {\n                    identifier: 'iShare',\n                    symbol: 'ESGE',\n                    label: ETF_SYMBOL_TO_NAME['ESGE'],\n                    percentage: 1.0,\n                    selected: false,\n                },\n                msciUSA: {\n                    identifier: 'msciUSA',\n                    symbol: 'SUSA',\n                    label: ETF_SYMBOL_TO_NAME['SUSA'],\n                    percentage: 1.0,\n                    selected: false,\n                },\n            },\n        },\n    };\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './scss/main.scss';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}