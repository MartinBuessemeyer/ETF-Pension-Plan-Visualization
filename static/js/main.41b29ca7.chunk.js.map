{"version":3,"sources":["helpers/utils.js","model/ForecastModel.js","model/InvestmentModel.js","renderer/D3ChartStrategy.js","renderer/LineChartD3.js","renderer/CashflowBarChartD3.js","components/Visualization.jsx","components/MinimalBootstrapComponents.jsx","components/TextInputElement.jsx","components/CheckboxInputElement.jsx","components/BrokerDropDown.jsx","components/GraphDetailDropDown.jsx","components/ETFSelectionDropDown.jsx","components/App.jsx","reportWebVitals.js","index.js"],"names":["timeDiffIgnoreDivisor","numberOfMonthsOfAYear","isFirstMonthOfAYear","date","getMonth","loadHistoricalETFData","etfIdentifier","apiKey","a","d3","entry","Date","timestamp","toString","dividend","parseFloat","course","historicalData","sort","b","etfHistoricalToCourseForecastArray","map","dateToTimestamp","etfHistoricalToDividendForecastArray","currentYear","getFullYear","dividendForecastArray","forEach","length","push","Math","floor","getTime","HistoricalDataNotPresentException","this","message","name","roundDateToBeginningOfMonth","month","year","currentDayOfMonth","getDate","maxDayOfMonth","monthOffset","round","ForecastModelSingleton","coursePredictors","dividendPredictors","courseForecastArray","maxTimestampBeforeCoursePredictorRepetition","_calculateMaxTimestampBeforePredictorRepetition","maxYearBeforeDividendPredictorRepetition","history","forecastArray","lastTimestampToIncludeInPrediction","abs","backCastTimeFactor","backCastTimestampConstant","filteredForecastArray","filter","regression","linear","order","precision","lastYearToIncludeInPrediction","_courseDateToPredictorTimestampAndDateTimestamp","predictorTimestamp","_createCoursePredictorIfNotPresent","predict","predictorYear","_dividendYearToPredictorYear","_createDividendPredictorIfNotPresent","max","backCastTimeConstant","backCastTimeDate","setMonth","instance","getInstance","etfProperties","configure","forecast","loadAndCacheHistoricalETFData","symbol","console","log","firstTimestamp","lastTimestamp","corporateTaxRatio","getNextMonthDate","newDate","calculateDividend","isLastMonthOfAYear","dividendAmount","predictDividend","sharePrize","predictCourse","calculateCosts","amount","costConfiguration","costs","percentageCosts","fixedCosts","amountWithoutCosts","subtractTaxFreeGain","taxAmount","taxFreeAmount","getTotalShareValue","investmentStep","totalShares","sharePrizes","getNewShareValue","newShares","calculateAndAddInflation","initialDate","endDate","sumTotalValues","sum","sumOfTotalValues","timeFactor","inflation","pow","addAccumulationMonth","investmentSteps","investment","etfToRatio","configOptions","prevInvestmentStep","newInvestmentStep","dividendNewShares","dividendTotalShares","totalCosts","totalInvestedMoney","newInvestedMoney","newInvestment","totalTaxes","totalPayout","newPayout","investmentOfEtfWithCosts","costConfig","investmentOfEtfWithoutCosts","etfSharePrize","dividendPayoutMoneyPerShare","newSharesByDividend","leftoverTaxFreeAmount","value","min","summedTaxes","decemberInvestmentStep","firstInvestmentStepOfThisYear","accumulatedBasicProfit","i","profitOverAllTime","profitOfPreviousYears","amountToApplyTaxes","calculateTaxes","newTaxes","newLeftoverTaxFreeAmount","addPayoutMonth","sellingAmount","leftoverAlreadyPaidTaxes","payoutStats","taxes","investmentStepsIdx","amountToSell","amountAlreadySold","costsToPay","alreadyPaidCosts","payoutInvestmentStepIdxForFIFO","currentSharesLeft","alreadySoldShares","leftoverAmountToSell","currentInvestmentStepForFIFO","currentValueOfShares","amountToSellWithCosts","amountOfSharesToSell","amountToSellWithoutCosts","initialValueOfShares","amountToPayTaxes","taxesToPay","payoutAmount","amountOfDividendSharesLeft","amountOfDividendSharesSold","generateEmptyInvestmentStep","emptyInvestmentStep","InvestmentModel","startCapital","monthlyInvestment","monthlyPayout","savingPhaseLength","age","expectationOfLife","_calculateTimestampsForModel","_calculateModel","lifeExpectation","fadeOutYears","yearsLeft","now","beginningDate","endSavingPhaseDate","setFullYear","calculateForecastInterval","startDate","savingDates","currentDate","payoutDates","slice","savingDate","payoutDate","numberOfEntriesPerYear","Number","isInteger","Error","selectedInvestmentSteps","numberOfMonthsToMerge","adjustedInvestmentStep","cloneDeep","offset","ONE_MILLION","setInteractionDisplayForActiveDiagrams","displayOption","D3ChartStrategy","activeStrategies","interaction","style","renderDivRef","payoutPhaseStartDate","svgID","width","height","marginW","marginH","constructor","lineStrokeWidth","innerHTML","svg","append","attr","_prepareData","_calculateExtents","_createScales","_drawContent","_prepareText","_drawText","_drawAxis","_addInteraction","dateExtent","dataArray","d","lastImportantDateForYScale","filteredDataArrayForYMax","maxIndex","e","filteredDataArrayForYMin","minIndex","maxVal","yStart","minVal","yEnd","yExtent","yScale","domain","range","xScale","labelDivisionFactor","numberIndicator","call","tickFormat","toLocaleString","ticks","hoverLine","on","mouseEvent","_handleTooltipEvent","x","roundedDate","invert","activeDiagram","_updateTooltip","selectAll","data","textProperties","enter","text","y","fontSize","fontWeight","textAnchor","color","savingPhaseMid","payoutPhaseMid","yPos","standardFontSize","LineChartD3","etfLineColors","total","ESGE","SUSA","colors","lineOpacity","dataToIndex","currentIdx","capitalIdentifier","dividendIdentifier","heightOffset","totalShareValue","totalDividendShareValue","datum","_drawArea","curve","y0","y1","costData","maxCostsMiddlePosition","CashflowBarChart","barPaddingPercentage","zeroLineStrokeWidth","sumNewPayout","rectWidth","needToSkipLastBar","barArray","Visualization","props","firstSVGRef","React","createRef","secondSVGRef","state","etfIdentifierToRatio","selected","percentage","STARTING_CAPITAL_IDENTIFIER","MONTHLY_INVESTMENT_IDENTIFIER","MONTHLY_PAYOUT_IDENTIFIER","SAVING_PHASE_IDENTIFIER","TAX_FREE_AMOUNT_IDENTIFIER","TRANSACTION_COSTS_TYPE_IDENTIFIER","TRANSACTION_COSTS_IDENTIFIER","AGE_IDENTIFIER","LIFE_EXPECTATION_IDENTIFIER","reset","isValid","investmentModel","getInvestmentModel","firstPayoutPhaseDate","correctLevelOfDetailInvestmentSteps","getInvestmentSteps","DETAILED_GRAPH_DROPDOWN_IDENTIFIER","current","render","error","drawVisualization","Fragment","ref","Component","SidebarSectionHeading","className","title","ErrorMessage","identifier","Overlay","visibility","displayOverlay","href","target","rel","TextInputElement","disabled","type","onClick","handleAPIKeyConfirm","id","errorMessage","htmlFor","label","textAppending","onChange","onValueChange","transformFunction","CheckboxInputElement","costsOfElementMatchUIValues","element","BrokerDropDown","data-bs-toggle","aria-expanded","aria-labelledby","elements","handleChange","GraphDetailDropDown","percentageTransformFunction","floatVal","isNaN","ETFSelectionDropDown","Object","keys","elementIdentifier","handleSelectionChange","handleShareChange","autoPercentage","ETF_DROPDOWN_SELECTION_IDENTIFIER","API_KEY_IDENTIFIER","BROKER_DROPDOWN_IDENTIFIER","ETF_AUTOMATIC_PERCENTAGE_IDENTIFIER","transformInputToInt","intVal","parseInt","split","transformInputToFloat","isPositiveInt","val","recalculateETFPercentages","numberOfSelectedETFs","newPercentage","App","handleTextChange","bind","handleCheckBoxChange","handleBrokerChange","handleGraphDetailChange","handleETFSelectionChange","handleETFShareChange","caller","S_and_P_500","iShare","msciUSA","getInitialInputFormState","changedValue","changedStateIdentifier","validateAndSetState","brokerProperties","detailProperties","changedETFIdentifier","apiValues","loadHistoricData","setState","forceUpdate","positiveIntIdentifier","leftoverYears","sumOfPercentages","foundOneSelectedEtf","visualizationProps","assign","constructVisualizationProps","noValidate","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.41b29ca7.chunk.js","sourcesContent":["import * as d3 from 'd3';\n\n// Ignore milliseconds, seconds, minutes.\nconst timeDiffIgnoreDivisor = 1000 * 60 * 60 * 24;\n\nexport const timestampIndexOfForecastArray = 0;\nexport const courseIndexOfForecastArray = 1;\nexport const numberOfMonthsOfAYear = 12;\nexport const inflationRate = 0.01;\n\nexport function isLastMonthOfAYear(date) {\n    return date.getMonth() === numberOfMonthsOfAYear - 1;\n}\n\nexport function clamp(value, min, max) {\n    return Math.max(min, Math.min(value, max));\n}\n\nexport function isFirstMonthOfAYear(date) {\n    return date.getMonth() === 0;\n}\n\nexport async function loadHistoricalETFData(etfIdentifier, apiKey) {\n    const historicalData = await d3.csv(\n        `https://www.alphavantage.co/query?function=TIME_SERIES_MONTHLY_ADJUSTED&symbol=${etfIdentifier}&apikey=${apiKey}&datatype=csv`,\n        entry => {\n            return {\n                date: new Date(entry.timestamp.toString()),\n                dividend: parseFloat(entry['dividend amount']),\n                course: parseFloat(entry['adjusted close']),\n            };\n        }\n    );\n    historicalData.sort((a, b) => a.date - b.date);\n    return historicalData;\n}\n\nexport function etfHistoricalToCourseForecastArray(historicalData) {\n    return historicalData.map(entry => [dateToTimestamp(entry.date), entry.course]);\n}\n\n// Requires sorted historical data. Note it is sorted by default. Do not change the order.\nexport function etfHistoricalToDividendForecastArray(historicalData) {\n    let currentYear = historicalData[0].date.getFullYear();\n    const dividendForecastArray = [[currentYear, 0]];\n    historicalData.forEach(entry => {\n        if (entry.date.getFullYear() === currentYear) {\n            dividendForecastArray[dividendForecastArray.length - 1][courseIndexOfForecastArray] += entry.dividend;\n        } else {\n            currentYear = entry.date.getFullYear();\n            dividendForecastArray.push([currentYear, entry.dividend]);\n        }\n    });\n    dividendForecastArray.sort((a, b) => a[timestampIndexOfForecastArray] - b[timestampIndexOfForecastArray]);\n    return dividendForecastArray;\n}\n\nexport function dateToTimestamp(date) {\n    return Math.floor(date.getTime() / timeDiffIgnoreDivisor);\n}\n\nexport function timestampToDate(timestamp) {\n    return new Date(timestamp * timeDiffIgnoreDivisor);\n}\n\nexport function HistoricalDataNotPresentException(etfIdentifier) {\n    this.message = `First call loadHistoricalDataIfNotPresent() before predicting: ${etfIdentifier}`;\n    this.name = 'HistoricalDataNotPresentException';\n}\n\n// Slightly manipulated. Original: https://stackoverflow.com/a/315767\nfunction daysInMonth(month, year) {\n    return new Date(year, month + 1, 0).getDate();\n}\n\nexport function roundDateToBeginningOfMonth(date) {\n    const currentDayOfMonth = date.getDate();\n    const maxDayOfMonth = daysInMonth(date.getMonth(), date.getFullYear());\n    const monthOffset = Math.round(currentDayOfMonth / maxDayOfMonth);\n    return new Date(date.getFullYear(), date.getMonth() + monthOffset);\n}\n","import regression from 'regression';\nimport {\n    dateToTimestamp,\n    etfHistoricalToCourseForecastArray,\n    etfHistoricalToDividendForecastArray,\n    loadHistoricalETFData,\n    timestampIndexOfForecastArray,\n    courseIndexOfForecastArray,\n    HistoricalDataNotPresentException,\n} from '../helpers/utils';\n\n// USAGE: first call configure to set required static vars. Then the singleton can be accessed via getInstance. Never call the Constructor on your own.\n// Always call loadAndCacheHistoricalETFData of an etf before calling predict on that etf.\nexport class ForecastModelSingleton {\n    static instance = null;\n    static apiKey = null;\n    static backCastTimeConstant = null;\n    static backCastTimeFactor = null;\n\n    // DO NOT CALL. USE getInstance()\n    constructor() {\n        this.historicalData = {};\n        this.coursePredictors = {};\n        this.dividendPredictors = {};\n    }\n\n    static configure(apiKey, backCastTimeFactor = 2, backCastTimeConstant = 7) {\n        ForecastModelSingleton.apiKey = apiKey;\n        ForecastModelSingleton.backCastTimeFactor = backCastTimeFactor;\n\n        const backCastTimeDate = new Date(0);\n        backCastTimeDate.setMonth(backCastTimeConstant);\n        ForecastModelSingleton.backCastTimestampConstant = dateToTimestamp(backCastTimeDate);\n\n        // reset predictors if present.\n        if (ForecastModelSingleton.instance != null) {\n            const instance = ForecastModelSingleton.getInstance();\n            for (const etfIdentifier in instance.coursePredictors) {\n                instance.coursePredictors[etfIdentifier] = {\n                    maxTimestampBeforeCoursePredictorRepetition: ForecastModelSingleton._calculateMaxTimestampBeforePredictorRepetition(\n                        instance.historicalData[etfIdentifier].courseForecastArray\n                    ),\n                };\n            }\n            for (const etfIdentifier in instance.dividendPredictors) {\n                instance.dividendPredictors[etfIdentifier] = {\n                    maxYearBeforeDividendPredictorRepetition: ForecastModelSingleton._calculateMaxTimestampBeforePredictorRepetition(\n                        instance.historicalData[etfIdentifier].dividendForecastArray\n                    ),\n                };\n            }\n        }\n    }\n\n    static async loadHistoricData(apiKey, etfProperties) {\n        ForecastModelSingleton.configure(apiKey);\n        const forecast = ForecastModelSingleton.getInstance();\n        for (const etfIdentifier in etfProperties) {\n            await forecast.loadAndCacheHistoricalETFData(etfProperties[etfIdentifier].symbol);\n        }\n        console.log('Finished loading the historic data.');\n    }\n\n    static getInstance() {\n        if (ForecastModelSingleton.instance == null) {\n            ForecastModelSingleton.instance = new ForecastModelSingleton();\n        }\n        return ForecastModelSingleton.instance;\n    }\n\n    static _calculateMaxTimestampBeforePredictorRepetition(forecastArray) {\n        const firstTimestamp = forecastArray[0][timestampIndexOfForecastArray];\n        const lastTimestamp = forecastArray[forecastArray.length - 1][timestampIndexOfForecastArray];\n        return lastTimestamp + (lastTimestamp - firstTimestamp) / ForecastModelSingleton.backCastTimeFactor;\n    }\n\n    async loadAndCacheHistoricalETFData(etfIdentifier) {\n        if (etfIdentifier in this.historicalData) {\n            return;\n        }\n        const historicalData = await loadHistoricalETFData(etfIdentifier);\n\n        const courseForecastArray = etfHistoricalToCourseForecastArray(historicalData);\n        const maxTimestampBeforeCoursePredictorRepetition = ForecastModelSingleton._calculateMaxTimestampBeforePredictorRepetition(\n            courseForecastArray\n        );\n\n        const dividendForecastArray = etfHistoricalToDividendForecastArray(historicalData);\n        const maxYearBeforeDividendPredictorRepetition = ForecastModelSingleton._calculateMaxTimestampBeforePredictorRepetition(\n            dividendForecastArray\n        );\n\n        this.historicalData[etfIdentifier] = {\n            history: historicalData,\n            courseForecastArray: courseForecastArray,\n            dividendForecastArray: dividendForecastArray,\n        };\n        this.coursePredictors[etfIdentifier] = {\n            maxTimestampBeforeCoursePredictorRepetition: maxTimestampBeforeCoursePredictorRepetition,\n        };\n        this.dividendPredictors[etfIdentifier] = {\n            maxYearBeforeDividendPredictorRepetition: maxYearBeforeDividendPredictorRepetition,\n        };\n    }\n\n    _createCoursePredictorIfNotPresent(etfIdentifier, timestamp) {\n        // Skip if already exists.\n        if (timestamp in this.coursePredictors[etfIdentifier]) {\n            return;\n        }\n        const forecastArray = this.historicalData[etfIdentifier].courseForecastArray;\n        const lastTimestampToIncludeInPrediction =\n            forecastArray[forecastArray.length - 1][timestampIndexOfForecastArray] -\n            Math.abs(forecastArray[forecastArray.length - 1][timestampIndexOfForecastArray] - timestamp) *\n                ForecastModelSingleton.backCastTimeFactor -\n            ForecastModelSingleton.backCastTimestampConstant;\n        const filteredForecastArray = forecastArray.filter(\n            entry => entry[timestampIndexOfForecastArray] >= lastTimestampToIncludeInPrediction\n        );\n        this.coursePredictors[etfIdentifier][timestamp] = regression.linear(filteredForecastArray, {\n            order: 2,\n            precision: 20,\n        });\n    }\n\n    _courseDateToPredictorTimestampAndDateTimestamp(date, etfIdentifier) {\n        const timestamp = dateToTimestamp(date);\n        return [\n            timestamp > this.coursePredictors[etfIdentifier].maxTimestampBeforeCoursePredictorRepetition\n                ? this.coursePredictors[etfIdentifier].maxTimestampBeforeCoursePredictorRepetition\n                : timestamp,\n            timestamp,\n        ];\n    }\n\n    _createDividendPredictorIfNotPresent(etfIdentifier, year) {\n        // Skip if already exists.\n        if (year in this.dividendPredictors[etfIdentifier]) {\n            return;\n        }\n        const forecastArray = this.historicalData[etfIdentifier].dividendForecastArray;\n        const lastYearToIncludeInPrediction =\n            forecastArray[forecastArray.length - 1][timestampIndexOfForecastArray] -\n            Math.abs(forecastArray[forecastArray.length - 1][timestampIndexOfForecastArray] - year) *\n                ForecastModelSingleton.backCastTimeFactor -\n            ForecastModelSingleton.backCastTimestampConstant;\n        const filteredForecastArray = forecastArray.filter(\n            entry => entry[timestampIndexOfForecastArray] >= lastYearToIncludeInPrediction\n        );\n        this.dividendPredictors[etfIdentifier][year] = regression.linear(filteredForecastArray, {\n            order: 2,\n            precision: 20,\n        });\n    }\n\n    _dividendYearToPredictorYear(etfIdentifier, year) {\n        return this.dividendPredictors[etfIdentifier].maxYearBeforeDividendPredictorRepetition < year\n            ? this.dividendPredictors[etfIdentifier].maxYearBeforeDividendPredictorRepetition\n            : year;\n    }\n\n    predictCourse(etfIdentifier, date) {\n        if (!(etfIdentifier in this.coursePredictors)) {\n            throw new HistoricalDataNotPresentException(etfIdentifier);\n        }\n        const [predictorTimestamp, timestamp] = this._courseDateToPredictorTimestampAndDateTimestamp(\n            date,\n            etfIdentifier\n        );\n        this._createCoursePredictorIfNotPresent(etfIdentifier, predictorTimestamp);\n        return this.coursePredictors[etfIdentifier][predictorTimestamp].predict(timestamp)[courseIndexOfForecastArray];\n    }\n\n    predictDividend(etfIdentifier, year) {\n        if (!(etfIdentifier in this.dividendPredictors)) {\n            throw new HistoricalDataNotPresentException(etfIdentifier);\n        }\n        const predictorYear = this._dividendYearToPredictorYear(etfIdentifier, year);\n        this._createDividendPredictorIfNotPresent(etfIdentifier, predictorYear);\n        return Math.max(\n            0,\n            this.dividendPredictors[etfIdentifier][predictorYear].predict(year)[courseIndexOfForecastArray]\n        );\n    }\n}\n\nexport default ForecastModelSingleton;\n","import ForecastModelSingleton from './ForecastModel';\nimport { numberOfMonthsOfAYear, isLastMonthOfAYear, clamp, isFirstMonthOfAYear } from '../helpers/utils';\nimport cloneDeep from 'lodash.clonedeep';\n\nconst basicRateOfInterest = 0.007;\nconst partialExemption = 0.7;\nconst corporateTaxRatio = 0.26375;\nconst inflationRate = 0.01;\nconst defaultDividendAmount = 0.025;\n\nfunction getNextMonthDate(date) {\n    const newDate = new Date(date);\n    newDate.setMonth(date.getMonth() + 1);\n    return newDate;\n}\n\nfunction calculateDividend(etfIdentifier, date) {\n    if (!isLastMonthOfAYear(date)) {\n        return 0;\n    } else {\n        const dividendAmount = ForecastModelSingleton.getInstance().predictDividend(etfIdentifier, date.getFullYear());\n        const sharePrize = ForecastModelSingleton.getInstance().predictCourse(etfIdentifier, date);\n        return dividendAmount > 0 ? dividendAmount : defaultDividendAmount * sharePrize;\n    }\n}\n\nfunction calculateCosts(amount, costConfiguration) {\n    let costs = amount * costConfiguration.percentageCosts + costConfiguration.fixedCosts;\n    const amountWithoutCosts = Math.max(amount - costs, 0);\n    costs = amount - amountWithoutCosts;\n    return [amountWithoutCosts, costs];\n}\n\nfunction subtractTaxFreeGain(taxAmount, taxFreeAmount) {\n    const leftoverTaxes = Math.max(0, taxAmount - taxFreeAmount);\n    const leftoverTaxFreeAmount = Math.max(0, taxFreeAmount - taxAmount);\n    return [leftoverTaxes, leftoverTaxFreeAmount];\n}\n\nexport function getTotalShareValue(etfIdentifier, investmentStep) {\n    return investmentStep.totalShares[etfIdentifier] * investmentStep.sharePrizes[etfIdentifier];\n}\n\nfunction getNewShareValue(etfIdentifier, investmentStep) {\n    return investmentStep.newShares[etfIdentifier] * investmentStep.sharePrizes[etfIdentifier];\n}\n\nfunction sumOfTotalValues(investmentStep) {\n    let sum = 0;\n    for (const etfIdentifier in investmentStep.totalShares) {\n        sum += getTotalShareValue(etfIdentifier, investmentStep);\n    }\n    return sum;\n}\n\nfunction calculateAndAddInflation(investmentStep, initialDate, endDate) {\n    // TODO predict inflationRate??? if so how should I predict it?\n    const sumTotalValues = sumOfTotalValues(investmentStep);\n    const timeFactor =\n        endDate.getFullYear() -\n        initialDate.getFullYear() +\n        (endDate.getMonth() - initialDate.getMonth()) / numberOfMonthsOfAYear;\n    investmentStep.inflation = sumTotalValues - sumTotalValues * Math.pow(1 - inflationRate, timeFactor);\n}\n\nfunction calculateForecastInterval(age, lifeExpectation, savingPhaseLength, fadeOutYears = 10) {\n    const yearsLeft = lifeExpectation - age;\n    const now = new Date();\n    const beginningDate = new Date(now.getFullYear(), now.getMonth() + 1);\n    // start next month.\n    const endSavingPhaseDate = new Date(beginningDate);\n    endSavingPhaseDate.setFullYear(beginningDate.getFullYear() + savingPhaseLength);\n    const endDate = new Date(beginningDate);\n    endDate.setFullYear(beginningDate.getFullYear() + yearsLeft + fadeOutYears);\n    return [beginningDate, endSavingPhaseDate, endDate];\n}\n\nfunction calculateTaxes(investmentSteps, date, leftoverTaxFreeAmount, etfToRatio) {\n    if (!isFirstMonthOfAYear(date) || investmentSteps.length < 2) {\n        return [0, leftoverTaxFreeAmount];\n    }\n    let summedTaxes = 0;\n    const decemberInvestmentStep = investmentSteps[investmentSteps.length - 1];\n    // Use the second investment step if there are not enough meaning the investing started this year after january.\n    // The second is the true first investment step the first is a dummy.\n    const firstInvestmentStepOfThisYear =\n        investmentSteps.length - numberOfMonthsOfAYear > 1\n            ? investmentSteps[investmentSteps.length - numberOfMonthsOfAYear]\n            : investmentSteps[1];\n    for (const etfIdentifier in etfToRatio) {\n        let accumulatedBasicProfit = 0;\n        // Sum up all new investments from february to december.\n        for (let i = 1; i < numberOfMonthsOfAYear && investmentSteps.length - i > 0; i++) {\n            const currentInvestmentStep = investmentSteps[investmentSteps.length - i];\n            accumulatedBasicProfit +=\n                (getNewShareValue(etfIdentifier, currentInvestmentStep) * i) / numberOfMonthsOfAYear;\n        }\n        // Sum up total Investment of the first date of this year.\n        accumulatedBasicProfit +=\n            (getTotalShareValue(etfIdentifier, firstInvestmentStepOfThisYear) *\n                (numberOfMonthsOfAYear - firstInvestmentStepOfThisYear.date.getMonth())) /\n            numberOfMonthsOfAYear;\n        accumulatedBasicProfit *= 0.7 * basicRateOfInterest;\n        const currentShareValues = getTotalShareValue(etfIdentifier, decemberInvestmentStep);\n        // Calculate profit of last year.\n        const profitOverAllTime = currentShareValues - decemberInvestmentStep.totalInvestedMoney[etfIdentifier];\n        let profitOfPreviousYears = 0;\n        if (investmentSteps.length > numberOfMonthsOfAYear) {\n            profitOfPreviousYears = Math.max(\n                0,\n                getTotalShareValue(etfIdentifier, investmentSteps[investmentSteps.length - 1 - numberOfMonthsOfAYear]) -\n                    investmentSteps[investmentSteps.length - 1 - numberOfMonthsOfAYear].totalInvestedMoney[\n                        etfIdentifier\n                    ]\n            );\n        }\n\n        const profitOfThisYear = profitOverAllTime - profitOfPreviousYears;\n        let amountToApplyTaxes = clamp(profitOfThisYear, 0, accumulatedBasicProfit);\n        [amountToApplyTaxes, leftoverTaxFreeAmount] = subtractTaxFreeGain(amountToApplyTaxes, leftoverTaxFreeAmount);\n        summedTaxes += amountToApplyTaxes * partialExemption * corporateTaxRatio;\n    }\n    return [summedTaxes, leftoverTaxFreeAmount];\n}\n\nexport function addAccumulationMonth(investmentSteps, investment, date, initialDate, etfToRatio, configOptions) {\n    const forecast = ForecastModelSingleton.getInstance();\n    let costs = 0;\n    const prevInvestmentStep = investmentSteps[investmentSteps.length - 1];\n    const newInvestmentStep = {\n        date: date,\n        newShares: {},\n        totalShares: { ...prevInvestmentStep.totalShares },\n        dividendNewShares: {},\n        dividendTotalShares: { ...prevInvestmentStep.dividendTotalShares },\n        totalCosts: prevInvestmentStep.totalCosts,\n        sharePrizes: {},\n        totalInvestedMoney: { ...prevInvestmentStep.totalInvestedMoney },\n        newInvestedMoney: {},\n        newInvestment: 0,\n        totalTaxes: prevInvestmentStep.totalTaxes,\n        totalPayout: { ...prevInvestmentStep.totalPayout },\n        newPayout: {},\n    };\n    for (const etfIdentifier in etfToRatio) {\n        const investmentOfEtfWithCosts = etfToRatio[etfIdentifier] * investment;\n        newInvestmentStep.newInvestment += investmentOfEtfWithCosts;\n        const [investmentOfEtfWithoutCosts, newCosts] = calculateCosts(\n            investmentOfEtfWithCosts,\n            configOptions.costConfig\n        );\n        costs += newCosts;\n        newInvestmentStep.newInvestedMoney[etfIdentifier] = investmentOfEtfWithoutCosts;\n        newInvestmentStep.totalInvestedMoney[etfIdentifier] += investmentOfEtfWithoutCosts;\n\n        const etfSharePrize = forecast.predictCourse(etfIdentifier, date);\n        const newShares = investmentOfEtfWithoutCosts / etfSharePrize;\n        newInvestmentStep.sharePrizes[etfIdentifier] = etfSharePrize;\n        newInvestmentStep.newShares[etfIdentifier] = newShares;\n\n        const dividendPayoutMoneyPerShare = calculateDividend(etfIdentifier, date);\n        const dividendPayoutMoney = newInvestmentStep.totalShares[etfIdentifier] * dividendPayoutMoneyPerShare;\n        const newSharesByDividend = dividendPayoutMoney / etfSharePrize;\n        newInvestmentStep.newShares[etfIdentifier] += newSharesByDividend;\n        newInvestmentStep.dividendNewShares[etfIdentifier] = newSharesByDividend;\n        newInvestmentStep.dividendTotalShares[etfIdentifier] += newSharesByDividend;\n\n        newInvestmentStep.totalShares[etfIdentifier] += newInvestmentStep.newShares[etfIdentifier];\n        newInvestmentStep.newPayout[etfIdentifier] = 0;\n    }\n    newInvestmentStep.totalCosts += costs;\n    const [newTaxes, newLeftoverTaxFreeAmount] = calculateTaxes(\n        investmentSteps,\n        date,\n        configOptions.taxFreeAmount,\n        etfToRatio\n    );\n    newInvestmentStep.totalTaxes += newTaxes;\n    calculateAndAddInflation(newInvestmentStep, initialDate, date);\n    investmentSteps.push(newInvestmentStep);\n\n    return newLeftoverTaxFreeAmount;\n}\n\nfunction addPayoutMonth(\n    investmentSteps,\n    sellingAmount,\n    etfToRatio,\n    date,\n    initialDate,\n    configOptions,\n    leftoverAlreadyPaidTaxes,\n    leftoverTaxFreeAmount,\n    payoutStats\n) {\n    if (isFirstMonthOfAYear(date)) {\n        leftoverTaxFreeAmount = configOptions.taxFreeAmount;\n    }\n    const forecast = ForecastModelSingleton.getInstance();\n    let costs = 0;\n    let taxes = 0;\n    const prevInvestmentStep = investmentSteps[investmentSteps.length - 1];\n    const newInvestmentStep = {\n        date: date,\n        newShares: {},\n        totalShares: { ...prevInvestmentStep.totalShares },\n        dividendNewShares: {},\n        dividendTotalShares: { ...prevInvestmentStep.dividendTotalShares },\n        totalCosts: prevInvestmentStep.totalCosts,\n        sharePrizes: {},\n        totalInvestedMoney: { ...prevInvestmentStep.totalInvestedMoney },\n        newInvestedMoney: {},\n        newInvestment: 0,\n        totalTaxes: prevInvestmentStep.totalTaxes,\n        totalPayout: { ...prevInvestmentStep.totalPayout },\n        newPayout: {},\n    };\n    for (const etfIdentifier in etfToRatio) {\n        const etfSharePrize = forecast.predictCourse(etfIdentifier, date);\n        newInvestmentStep.sharePrizes[etfIdentifier] = etfSharePrize;\n        newInvestmentStep.newPayout[etfIdentifier] = 0;\n        newInvestmentStep.newInvestedMoney[etfIdentifier] = 0;\n        // Skip payout if there are no shares left to sell.\n        if (payoutStats[etfIdentifier].investmentStepsIdx < investmentSteps.length) {\n            // Handle payout.\n            const amountToSell = sellingAmount * etfToRatio[etfIdentifier];\n            let amountAlreadySold = 0;\n            const costsToPay = calculateCosts(amountToSell, configOptions.costConfig)[1];\n            let alreadyPaidCosts = 0;\n            let payoutInvestmentStepIdxForFIFO = payoutStats[etfIdentifier].investmentStepsIdx;\n            let currentSharesLeft =\n                investmentSteps[payoutInvestmentStepIdxForFIFO].newShares[etfIdentifier] -\n                payoutStats[etfIdentifier].alreadySoldShares;\n            for (; payoutInvestmentStepIdxForFIFO < investmentSteps.length; payoutInvestmentStepIdxForFIFO++) {\n                const leftoverAmountToSell = amountToSell - amountAlreadySold;\n                const currentInvestmentStepForFIFO = investmentSteps[payoutInvestmentStepIdxForFIFO];\n\n                const currentValueOfShares =\n                    etfSharePrize *\n                    (payoutInvestmentStepIdxForFIFO === payoutStats[etfIdentifier].investmentStepsIdx\n                        ? currentInvestmentStepForFIFO.newShares[etfIdentifier] -\n                          payoutStats[etfIdentifier].alreadySoldShares\n                        : currentInvestmentStepForFIFO.newShares[etfIdentifier]);\n                const amountToSellWithCosts = Math.min(currentValueOfShares, leftoverAmountToSell);\n                const amountOfSharesToSell = amountToSellWithCosts / etfSharePrize;\n                currentSharesLeft = currentInvestmentStepForFIFO.newShares[etfIdentifier] - amountOfSharesToSell;\n                currentSharesLeft -=\n                    payoutInvestmentStepIdxForFIFO === payoutStats[etfIdentifier].investmentStepsIdx\n                        ? payoutStats[etfIdentifier].alreadySoldShares\n                        : 0;\n\n                const amountToSellWithoutCosts = Math.max(0, amountToSellWithCosts - (costsToPay - alreadyPaidCosts));\n                alreadyPaidCosts += Math.max(0, amountToSellWithCosts - amountToSellWithoutCosts);\n\n                const initialValueOfShares =\n                    amountOfSharesToSell * currentInvestmentStepForFIFO.sharePrizes[etfIdentifier];\n                let amountToPayTaxes = Math.max(0, amountToSellWithoutCosts - initialValueOfShares);\n\n                [amountToPayTaxes, leftoverTaxFreeAmount] = subtractTaxFreeGain(\n                    amountToPayTaxes,\n                    leftoverTaxFreeAmount\n                );\n                let taxesToPay = amountToPayTaxes * partialExemption * corporateTaxRatio;\n                [taxesToPay, leftoverAlreadyPaidTaxes] = subtractTaxFreeGain(taxesToPay, leftoverAlreadyPaidTaxes);\n                taxes += taxesToPay;\n                const payoutAmount = amountToSellWithoutCosts - taxesToPay;\n\n                newInvestmentStep.newPayout[etfIdentifier] += payoutAmount;\n                newInvestmentStep.totalPayout[etfIdentifier] += payoutAmount;\n\n                newInvestmentStep.totalShares[etfIdentifier] -= amountOfSharesToSell;\n                amountAlreadySold += amountToSellWithCosts;\n\n                // Handle the decrease of the dividendShares.\n                let amountOfDividendSharesLeft = 0;\n                if (payoutInvestmentStepIdxForFIFO === payoutStats[etfIdentifier].investmentStepsIdx) {\n                    amountOfDividendSharesLeft = Math.max(\n                        0,\n                        currentInvestmentStepForFIFO.dividendNewShares[etfIdentifier] -\n                            payoutStats[etfIdentifier].alreadySoldShares\n                    );\n                } else {\n                    amountOfDividendSharesLeft = currentInvestmentStepForFIFO.dividendNewShares[etfIdentifier];\n                }\n                const amountOfDividendSharesSold = Math.min(amountOfDividendSharesLeft, amountOfSharesToSell);\n                newInvestmentStep.dividendTotalShares[etfIdentifier] -= amountOfDividendSharesSold;\n\n                // Use break in order to not change the value of payoutInvestmentStepIdxForFIFO.\n                if (amountAlreadySold >= amountToSell) {\n                    break;\n                }\n            }\n            costs += alreadyPaidCosts;\n            // Handle update payoutStats.\n            payoutStats[etfIdentifier].investmentStepsIdx = payoutInvestmentStepIdxForFIFO;\n            payoutStats[etfIdentifier].investmentStepsIdx += currentSharesLeft === 0 ? 1 : 0;\n\n            payoutStats[etfIdentifier].alreadySoldShares =\n                payoutInvestmentStepIdxForFIFO < investmentSteps.length\n                    ? investmentSteps[payoutInvestmentStepIdxForFIFO].newShares[etfIdentifier] - currentSharesLeft\n                    : 0;\n        }\n\n        // Handle dividend.\n        const dividendPayoutMoney =\n            newInvestmentStep.totalShares[etfIdentifier] * calculateDividend(etfIdentifier, date);\n        const newSharesByDividend = dividendPayoutMoney / etfSharePrize;\n        newInvestmentStep.newShares[etfIdentifier] = newSharesByDividend;\n        newInvestmentStep.totalShares[etfIdentifier] += newSharesByDividend;\n        newInvestmentStep.dividendNewShares[etfIdentifier] = newSharesByDividend;\n        newInvestmentStep.dividendTotalShares[etfIdentifier] += newSharesByDividend;\n    }\n\n    newInvestmentStep.totalCosts += costs;\n    newInvestmentStep.totalTaxes += taxes;\n    calculateAndAddInflation(newInvestmentStep, initialDate, date);\n    investmentSteps.push(newInvestmentStep);\n    return [leftoverAlreadyPaidTaxes, leftoverTaxFreeAmount];\n}\n\nfunction generateEmptyInvestmentStep(etfToRatio, date) {\n    const forecast = ForecastModelSingleton.getInstance();\n    const emptyInvestmentStep = {\n        date: date,\n        totalCosts: 0,\n        totalTaxes: 0,\n        newShares: {},\n        totalShares: {},\n        dividendNewShares: {},\n        dividendTotalShares: {},\n        totalInvestedMoney: {},\n        totalPayout: {},\n        newPayout: {},\n        sharePrizes: {},\n        newInvestedMoney: {},\n        newInvestment: 0,\n    };\n    for (const etfIdentifier in etfToRatio) {\n        emptyInvestmentStep.newShares[etfIdentifier] = 0;\n        emptyInvestmentStep.totalShares[etfIdentifier] = 0;\n        emptyInvestmentStep.dividendNewShares[etfIdentifier] = 0;\n        emptyInvestmentStep.dividendTotalShares[etfIdentifier] = 0;\n        emptyInvestmentStep.totalInvestedMoney[etfIdentifier] = 0;\n        emptyInvestmentStep.totalPayout[etfIdentifier] = 0;\n        emptyInvestmentStep.newPayout[etfIdentifier] = 0;\n        emptyInvestmentStep.newInvestedMoney[etfIdentifier] = 0;\n        emptyInvestmentStep.sharePrizes[etfIdentifier] = forecast.predictCourse(etfIdentifier, date);\n    }\n    return emptyInvestmentStep;\n}\n\nexport class InvestmentModel {\n    constructor(\n        startCapital,\n        monthlyInvestment,\n        monthlyPayout,\n        savingPhaseLength,\n        etfToRatio,\n        configOptions,\n        age,\n        expectationOfLife\n    ) {\n        this.startCapital = startCapital;\n        this.monthlyInvestment = monthlyInvestment;\n        this.monthlyPayout = monthlyPayout;\n        this.savingPhaseLength = savingPhaseLength;\n        this.etfToRatio = etfToRatio;\n        this.configOptions = configOptions;\n        this.expectationOfLife = expectationOfLife;\n        this.age = age;\n        this._calculateTimestampsForModel();\n        this._calculateModel();\n    }\n\n    _calculateTimestampsForModel() {\n        const [startDate, endSavingPhaseDate, endDate] = calculateForecastInterval(\n            this.age,\n            this.expectationOfLife,\n            this.savingPhaseLength\n        );\n        const savingDates = [];\n        for (\n            let currentDate = startDate;\n            currentDate < endSavingPhaseDate;\n            currentDate = getNextMonthDate(currentDate)\n        ) {\n            savingDates.push(currentDate);\n        }\n        this.savingDates = savingDates;\n        const payoutDates = [];\n        for (let currentDate = endSavingPhaseDate; currentDate < endDate; currentDate = getNextMonthDate(currentDate)) {\n            payoutDates.push(currentDate);\n        }\n        this.payoutDates = payoutDates;\n        this.initialDate = startDate;\n    }\n\n    _calculateModel() {\n        let investmentSteps = [generateEmptyInvestmentStep(this.etfToRatio, this.savingDates[0])];\n        let leftoverTaxFreeAmount = addAccumulationMonth(\n            investmentSteps,\n            this.monthlyInvestment + this.startCapital,\n            this.savingDates[0],\n            this.initialDate,\n            this.etfToRatio,\n            this.configOptions\n        );\n        for (const savingDate of this.savingDates.slice(1)) {\n            leftoverTaxFreeAmount = addAccumulationMonth(\n                investmentSteps,\n                this.monthlyInvestment,\n                savingDate,\n                this.initialDate,\n                this.etfToRatio,\n                this.configOptions\n            );\n        }\n        // Discard the empty investment step.\n        investmentSteps = investmentSteps.slice(1);\n\n        let leftoverAlreadyPaidTaxes = investmentSteps[investmentSteps.length - 1].totalTaxes;\n        const payoutStats = {};\n        for (const etfIdentifier in this.etfToRatio) {\n            payoutStats[etfIdentifier] = { investmentStepsIdx: 0, alreadySoldShares: 0 };\n        }\n        for (const payoutDate of this.payoutDates) {\n            [leftoverAlreadyPaidTaxes, leftoverTaxFreeAmount] = addPayoutMonth(\n                investmentSteps,\n                this.monthlyPayout,\n                this.etfToRatio,\n                payoutDate,\n                this.initialDate,\n                this.configOptions,\n                leftoverAlreadyPaidTaxes,\n                leftoverTaxFreeAmount,\n                payoutStats\n            );\n        }\n        this.investmentSteps = investmentSteps;\n    }\n\n    getInvestmentSteps(numberOfEntriesPerYear) {\n        if (!Number.isInteger(numberOfMonthsOfAYear / numberOfEntriesPerYear)) {\n            throw new Error(\n                `The numberOfEntriesPerYear need to be dividable by ${numberOfMonthsOfAYear} in order to make sense.`\n            );\n        }\n\n        if (numberOfEntriesPerYear === numberOfMonthsOfAYear) {\n            return this.investmentSteps;\n        }\n        const selectedInvestmentSteps = [];\n        const numberOfMonthsToMerge = numberOfMonthsOfAYear / numberOfEntriesPerYear;\n        for (let i = 0; i < this.investmentSteps.length; i += numberOfMonthsToMerge) {\n            // Take the start date as representative.\n            const adjustedInvestmentStep = cloneDeep(this.investmentSteps[i]);\n            for (let offset = 1; offset < numberOfMonthsToMerge; offset++) {\n                adjustedInvestmentStep.newInvestment += this.investmentSteps[i + offset].newInvestment;\n                for (const etfIdentifier in this.investmentSteps[i + offset].newPayout) {\n                    adjustedInvestmentStep.newPayout[etfIdentifier] += this.investmentSteps[i + offset].newPayout[\n                        etfIdentifier\n                    ];\n                }\n            }\n            selectedInvestmentSteps.push(adjustedInvestmentStep);\n        }\n        return selectedInvestmentSteps;\n    }\n}\n","import * as d3 from 'd3';\nimport { roundDateToBeginningOfMonth, numberOfMonthsOfAYear } from '../helpers/utils';\n\nconst FIVE_MILLION = 5000000;\nconst ONE_THOUSAND = 1000;\nconst ONE_MILLION = 1000000;\nconst numberOfTicks = 7;\n\nfunction setInteractionDisplayForActiveDiagrams(displayOption) {\n    for (const activeDiagram of D3ChartStrategy.activeStrategies) {\n        activeDiagram.interaction.style('display', displayOption);\n    }\n}\n\nexport class D3ChartStrategy {\n    static activeStrategies = [];\n    constructor(\n        investmentSteps,\n        renderDivRef,\n        payoutPhaseStartDate,\n        svgID,\n        width = 1100,\n        height = 300,\n        marginW = 150,\n        marginH = 40\n    ) {\n        if (this.constructor === D3ChartStrategy) {\n            throw new Error(\"Abstract classes can't be instantiated.\");\n        }\n        D3ChartStrategy.activeStrategies.push(this);\n        this.investmentSteps = investmentSteps;\n        this.payoutPhaseStartDate = payoutPhaseStartDate;\n\n        this.marginW = marginW;\n        this.marginH = marginH;\n        this.width = width;\n        this.height = height;\n\n        this.lineStrokeWidth = 3;\n\n        // Reset diagram by deletion.\n        renderDivRef.innerHTML = '';\n\n        this.svg = d3\n            .select(renderDivRef)\n            .append('svg')\n            .attr('id', svgID)\n            .attr('viewBox', `0 0 ${this.width + 2 * this.marginW} ${this.height + 2 * this.marginH}`)\n            .append('g')\n            .attr('transform', `translate(${[this.marginW, this.marginH]})`);\n    }\n\n    static reset() {\n        D3ChartStrategy.activeStrategies = [];\n    }\n\n    render() {\n        this._prepareData();\n        this._calculateExtents();\n        this._createScales();\n        this._drawContent();\n        this._prepareText();\n        this._drawText();\n        this._drawAxis();\n        this._addInteraction();\n    }\n\n    _calculateExtents() {\n        this.dateExtent = d3.extent(this.dataArray[0], d => d.date);\n\n        const lastImportantDateForYScale = new Date(this.payoutPhaseStartDate);\n        lastImportantDateForYScale.setMonth(lastImportantDateForYScale.getMonth() + numberOfMonthsOfAYear);\n        const filteredDataArrayForYMax = this.dataArray[this.maxIndex].filter(\n            e => e.date <= lastImportantDateForYScale && e.date > this.dateExtent[0]\n        );\n        const filteredDataArrayForYMin = this.dataArray[this.minIndex].filter(\n            e => e.date <= lastImportantDateForYScale\n        );\n        const maxVal = d3.max(filteredDataArrayForYMax.map(e => e.yStart));\n        const minVal = d3.min(filteredDataArrayForYMin.map(e => e.yEnd));\n        this.yExtent = [minVal, maxVal];\n    }\n\n    _createScales() {\n        this.yScale = d3.scaleLinear().domain(this.yExtent).range([this.height, 0]);\n        this.xScale = d3.scaleTime().domain(this.dateExtent).range([0, this.width]);\n    }\n\n    _drawAxis() {\n        const labelDivisionFactor =\n            Math.max(-this.yExtent[0], this.yExtent[1]) >= FIVE_MILLION ? ONE_MILLION : ONE_THOUSAND;\n        const numberIndicator = labelDivisionFactor === ONE_MILLION ? 'M' : 'K';\n        this.svg\n            .append('g')\n            .style('font-size', '20px')\n            .call(\n                d3\n                    .axisLeft(this.yScale)\n                    .tickFormat(d => `${(d / labelDivisionFactor).toLocaleString()}${numberIndicator} €`)\n                    .ticks(numberOfTicks)\n            );\n\n        this.svg\n            .append('g')\n            .style('font-size', '20px')\n            .attr('transform', `translate(0, ${this.height})`)\n            .call(d3.axisBottom(this.xScale));\n\n        // Draw zero line.\n        this.svg\n            .append('g')\n            .append('line')\n            .attr('x1', this.xScale(this.dateExtent[0]))\n            .attr('y1', this.yScale(0))\n            .attr('x2', this.xScale(this.dateExtent[1]))\n            .attr('y2', this.yScale(0))\n            .style('stroke-width', this.lineStrokeWidth)\n            .style('stroke', 'black');\n\n        // Draw phase division line.\n        this.svg\n            .append('g')\n            .append('line')\n            .attr('x1', this.xScale(this.payoutPhaseStartDate) - this.lineStrokeWidth / 2)\n            .attr('y1', this.yScale(this.yExtent[0]))\n            .attr('x2', this.xScale(this.payoutPhaseStartDate) - this.lineStrokeWidth / 2)\n            .attr('y2', this.yScale(this.yExtent[1]))\n            .style('stroke-width', this.lineStrokeWidth)\n            .style('stroke', 'black');\n    }\n\n    _addInteraction() {\n        const interactionClass = 'interaction';\n        const tooltipLineClass = 'tooltipLine';\n\n        this.interaction = this.svg\n            .append('g')\n            .attr('class', interactionClass)\n            .style('display', 'none')\n            .attr('transform', `translate(${[0, -this.marginH]})`);\n\n        this.hoverLine = this.interaction\n            .append('line')\n            .attr('class', tooltipLineClass)\n            .style('stroke', 'blue')\n            .style('stroke-dasharray', '3,3')\n            .style('opacity', 0.5)\n            .attr('y1', this.height + 2 * this.marginH)\n            .attr('y2', 0);\n\n        // Add rectangle to catch mouse events.\n        this.svg\n            .append('rect')\n            .attr('class', 'mouseEvent')\n            .attr('transform', `translate(${[0, -this.marginH]})`)\n            .attr('height', this.height + 2 * this.marginH)\n            .attr('width', this.width)\n            .attr('fill', 'none')\n            .style('pointer-events', 'all')\n            .on('mouseover', () => setInteractionDisplayForActiveDiagrams(null))\n            .on('mouseout', () => setInteractionDisplayForActiveDiagrams('none'))\n            .on('mousemove', mouseEvent => this._handleTooltipEvent(mouseEvent));\n    }\n\n    // Interaction inspired by: http://www.d3noob.org/2014/07/my-favourite-tooltip-method-for-line.html\n    _handleTooltipEvent(mouseEvent) {\n        const x = d3.pointer(mouseEvent)[0];\n        const date = this.xScale.invert(x);\n        const roundedDate = roundDateToBeginningOfMonth(date);\n        for (const activeDiagram of D3ChartStrategy.activeStrategies) {\n            activeDiagram.hoverLine.attr('x1', this.xScale(roundedDate)).attr('x2', this.xScale(roundedDate));\n            activeDiagram._updateTooltip();\n        }\n    }\n\n    _drawText() {\n        const textGroup = this.svg.append('g').attr('class', 'textGroup');\n        textGroup\n            .selectAll('text')\n            .data(this.textProperties)\n            .enter()\n            .append('text')\n            .text(d => d.text)\n            .attr('x', d => d.x)\n            .attr('y', d => d.y)\n            .style('font-size', d => d.fontSize)\n            .style('font-weight', d => d.fontWeight)\n            .style('text-anchor', d => d.textAnchor)\n            .style('fill', d => d.color);\n    }\n\n    _prepareText() {\n        const savingPhaseMid =\n            this.xScale(this.dateExtent[0]) +\n            (this.xScale(this.payoutPhaseStartDate) - this.xScale(this.dateExtent[0])) / 2;\n\n        const payoutPhaseMid =\n            this.xScale(this.payoutPhaseStartDate) +\n            (this.xScale(this.dateExtent[1]) - this.xScale(this.payoutPhaseStartDate)) / 2;\n        const yPos = -10;\n        this.standardFontSize = 20;\n        this.textProperties = [\n            {\n                text: 'SAVING',\n                x: savingPhaseMid,\n                y: yPos,\n                fontSize: this.standardFontSize,\n                textAnchor: 'end',\n                fontWeight: 'bold',\n                color: 'black',\n            },\n            {\n                text: 'Phase',\n                x: savingPhaseMid,\n                y: yPos,\n                fontSize: this.standardFontSize,\n                textAnchor: 'start',\n                fontWeight: 'normal',\n                color: 'black',\n            },\n            {\n                text: 'PAYOUT',\n                x: payoutPhaseMid,\n                y: yPos,\n                fontSize: this.standardFontSize,\n                textAnchor: 'end',\n                fontWeight: 'bold',\n                color: 'black',\n            },\n            {\n                text: 'Phase',\n                x: payoutPhaseMid,\n                y: yPos,\n                fontSize: this.standardFontSize,\n                textAnchor: 'start',\n                fontWeight: 'normal',\n                color: 'black',\n            },\n        ];\n    }\n\n    _prepareData() {\n        throw new Error('Abstract method. Not Implemented');\n    }\n\n    _drawContent() {\n        throw new Error('Abstract method. Not Implemented');\n    }\n\n    _updateTooltip() {\n        throw new Error('Abstract method. Not Implemented');\n    }\n}\n","import * as d3 from 'd3';\nimport { getTotalShareValue } from '../model/InvestmentModel';\nimport { D3ChartStrategy } from './D3ChartStrategy';\n\nexport class LineChartD3 extends D3ChartStrategy {\n    constructor(investmentSteps, renderDivRef, payoutPhaseStartDate) {\n        super(investmentSteps, renderDivRef, payoutPhaseStartDate, 'firstSVG');\n\n        this.etfLineColors = {\n            'SP5C.PAR': { total: '#0562a0', dividend: '#71c1f7' },\n            ESGE: { total: '#ff1eff', dividend: '#ff63ff' },\n            SUSA: { total: '#23ff01', dividend: '#7dff69' },\n        };\n        this.colors = { inflation: '#ff7f00', costs: '#be3bff', taxes: '#e31a1c' };\n        this.lineOpacity = 0.7;\n    }\n\n    _prepareData() {\n        this.dataToIndex = {\n            costs: 0,\n            taxes: 1,\n            inflation: 2,\n        };\n\n        let currentIdx = 3;\n        const capitalIdentifier = 'capital';\n        const dividendIdentifier = 'dividend';\n        for (const etfIdentifier in this.investmentSteps[0].totalShares) {\n            this.dataToIndex[etfIdentifier + dividendIdentifier] = currentIdx++;\n            this.dataToIndex[etfIdentifier + capitalIdentifier] = currentIdx++;\n        }\n\n        this.minIndex = this.dataToIndex.inflation;\n        this.maxIndex = currentIdx - 1;\n\n        this.dataArray = [];\n        for (let i = 0; i < currentIdx; i++) {\n            this.dataArray.push([]);\n        }\n        for (const investmentStep of this.investmentSteps) {\n            this.dataArray[this.dataToIndex.costs].push({\n                yStart: 0,\n                yEnd: -investmentStep.totalCosts,\n                date: investmentStep.date,\n            });\n            this.dataArray[this.dataToIndex.taxes].push({\n                yStart: -investmentStep.totalCosts,\n                yEnd: -investmentStep.totalCosts - investmentStep.totalTaxes,\n                date: investmentStep.date,\n            });\n            this.dataArray[this.dataToIndex.inflation].push({\n                yStart: -investmentStep.totalCosts - investmentStep.totalTaxes,\n                yEnd: -investmentStep.totalCosts - investmentStep.totalTaxes - investmentStep.inflation,\n                date: investmentStep.date,\n            });\n            let heightOffset = 0;\n            for (const etfIdentifier in investmentStep.totalShares) {\n                const totalShareValue = getTotalShareValue(etfIdentifier, investmentStep);\n                const totalDividendShareValue =\n                    investmentStep.dividendTotalShares[etfIdentifier] * investmentStep.sharePrizes[etfIdentifier];\n                this.dataArray[this.dataToIndex[etfIdentifier + capitalIdentifier]].push({\n                    yStart: totalShareValue + heightOffset,\n                    yEnd: totalShareValue - totalDividendShareValue + heightOffset,\n                    date: investmentStep.date,\n                });\n                this.dataArray[this.dataToIndex[etfIdentifier + dividendIdentifier]].push({\n                    yStart: totalShareValue - totalDividendShareValue + heightOffset,\n                    yEnd: heightOffset,\n                    date: investmentStep.date,\n                });\n                heightOffset += totalShareValue;\n            }\n        }\n\n        // Append miscellaneous data to array.\n        this.dataArray[this.dataToIndex.inflation].color = this.colors.inflation;\n        this.dataArray[this.dataToIndex.taxes].color = this.colors.taxes;\n        this.dataArray[this.dataToIndex.costs].color = this.colors.costs;\n        for (const etfIdentifier in this.investmentSteps[0].totalShares) {\n            this.dataArray[this.dataToIndex[etfIdentifier + dividendIdentifier]].color = this.etfLineColors[\n                etfIdentifier\n            ].dividend;\n            this.dataArray[this.dataToIndex[etfIdentifier + capitalIdentifier]].color = this.etfLineColors[\n                etfIdentifier\n            ].total;\n        }\n    }\n\n    _drawLines() {\n        // Draw line chart.\n        for (let i = 0; i < this.dataArray.length; i++) {\n            this.svg\n                .append('path')\n                .datum(this.dataArray[i])\n                .style('stroke', d => d.color)\n                .style('stroke-width', this.lineStrokeWidth)\n                .style('opacity', this.lineOpacity)\n                .style('fill', 'none')\n                .attr(\n                    'd',\n                    d3\n                        .line()\n                        .x(d => this.xScale(d.date))\n                        .y(d => this.yScale(d.yStart))\n                );\n        }\n    }\n    _drawContent() {\n        this._drawArea();\n    }\n\n    _drawArea() {\n        // Draw stacked area chart.\n        for (let i = 0; i < this.dataArray.length; i++) {\n            this.svg\n                .append('g')\n                .attr('class', 'area')\n                .append('path')\n                .datum(this.dataArray[i])\n                .style('opacity', this.lineOpacity)\n                .style('fill', d => d.color)\n                .attr(\n                    'd',\n                    d3\n                        .area()\n                        .curve(d3.curveMonotoneX)\n                        .x(d => this.xScale(d.date))\n                        .y0(d => this.yScale(d.yEnd))\n                        .y1(d => this.yScale(d.yStart))\n                );\n        }\n    }\n\n    _prepareText() {\n        super._prepareText();\n\n        const costData = this.dataArray[this.dataToIndex.costs];\n        const maxCostsMiddlePosition =\n            this.yScale(0) + (this.yScale(costData[costData.length - 1].yStart) - this.yScale(0)) / 2;\n\n        this.textProperties.push(\n            ...[\n                {\n                    text: ' Inflation',\n                    x: this.xScale(this.dateExtent[0]) + this.width / 40,\n                    y: this.yScale(0) + (this.yScale(this.yExtent[0]) - this.yScale(0)) / 2,\n                    fontSize: this.standardFontSize,\n                    textAnchor: 'start',\n                    fontWeight: 'normal',\n                    color: this.colors.inflation,\n                },\n                {\n                    text: ' Costs',\n                    x: this.width * 1.005,\n                    y: maxCostsMiddlePosition + this.standardFontSize / 2,\n                    fontSize: this.standardFontSize,\n                    textAnchor: 'start',\n                    fontWeight: 'normal',\n                    color: this.colors.costs,\n                },\n                {\n                    text: ' Taxes',\n                    x: this.width * 1.005,\n                    y: maxCostsMiddlePosition + this.standardFontSize * 2,\n                    fontSize: this.standardFontSize,\n                    textAnchor: 'start',\n                    fontWeight: 'normal',\n                    color: this.colors.taxes,\n                },\n            ]\n        );\n    }\n\n    _updateTooltip() {}\n}\n\nexport default LineChartD3;\n","import { D3ChartStrategy } from './D3ChartStrategy';\n\nexport class CashflowBarChart extends D3ChartStrategy {\n    constructor(investmentSteps, renderDivRef, payoutPhaseStartDate) {\n        super(investmentSteps, renderDivRef, payoutPhaseStartDate, 'secondSVG');\n        this.barPaddingPercentage = 0.9;\n\n        this.zeroLineStrokeWidth = 3;\n    }\n\n    render() {\n        super.render();\n    }\n\n    _prepareData() {\n        // Create line array.\n        const dataToIndex = {\n            invested: 0,\n            payout: 1,\n        };\n\n        this.minIndex = dataToIndex.invested;\n        this.maxIndex = dataToIndex.payout;\n\n        this.dataArray = [[], []];\n        for (const investmentStep of this.investmentSteps) {\n            let sumNewPayout = 0;\n            for (const etfIdentifier in investmentStep.newPayout) {\n                sumNewPayout += investmentStep.newPayout[etfIdentifier];\n            }\n            this.dataArray[dataToIndex.invested].push({\n                yStart: 0,\n                yEnd: -investmentStep.newInvestment,\n                date: investmentStep.date,\n                color: '#b4291f',\n            });\n            this.dataArray[dataToIndex.payout].push({\n                yStart: sumNewPayout,\n                yEnd: 0,\n                date: investmentStep.date,\n                color: '#0562a0',\n            });\n        }\n\n        this.rectWidth = (this.width / this.dataArray[dataToIndex.invested].length) * this.barPaddingPercentage;\n    }\n\n    _drawContent() {\n        // Skip the last bar if it is outside the graph.\n        const needToSkipLastBar = this.dataArray[0][this.dataArray[0].length - 1].date === this.dateExtent[1];\n        for (let barArray of this.dataArray) {\n            if (needToSkipLastBar) {\n                barArray = barArray.slice(0, -1);\n            }\n\n            this.svg\n                .append('g')\n                .attr('class', 'bars')\n                .selectAll(`rect.none`)\n                .data(barArray)\n                .enter()\n                .append('rect')\n                .style('fill', d => d.color)\n                .attr('x', d => this.xScale(d.date))\n                .attr('width', this.rectWidth)\n                .attr('y', d => this.yScale(d.yStart))\n                .attr('height', d => this.yScale(d.yEnd) - this.yScale(d.yStart));\n        }\n    }\n\n    _updateTooltip() {}\n}\n\nexport default CashflowBarChart;\n","import React from 'react';\nimport {\n    STARTING_CAPITAL_IDENTIFIER,\n    MONTHLY_INVESTMENT_IDENTIFIER,\n    TRANSACTION_COSTS_IDENTIFIER,\n    TRANSACTION_COSTS_TYPE_IDENTIFIER,\n    SAVING_PHASE_IDENTIFIER,\n    AGE_IDENTIFIER,\n    TAX_FREE_AMOUNT_IDENTIFIER,\n    MONTHLY_PAYOUT_IDENTIFIER,\n    LIFE_EXPECTATION_IDENTIFIER,\n    DETAILED_GRAPH_DROPDOWN_IDENTIFIER,\n} from './App';\nimport { InvestmentModel } from '../model/InvestmentModel';\nimport LineChartD3 from '../renderer/LineChartD3';\nimport CashflowBarChart from '../renderer/CashflowBarChartD3';\nimport { D3ChartStrategy } from '../renderer/D3ChartStrategy';\n\nfunction generateCostConfig(state) {\n    if (state[TRANSACTION_COSTS_TYPE_IDENTIFIER]) {\n        return { percentageCosts: 0.0, fixedCosts: state[TRANSACTION_COSTS_IDENTIFIER] };\n    } else {\n        return { percentageCosts: state[TRANSACTION_COSTS_IDENTIFIER], fixedCosts: 0.0 };\n    }\n}\n\nexport class Visualization extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.firstSVGRef = React.createRef();\n        this.secondSVGRef = React.createRef();\n    }\n\n    getInvestmentModel() {\n        const etfIdentifierToRatio = {};\n        for (const etfIdentifier in this.props.etfProperties) {\n            if (this.props.etfProperties[etfIdentifier].selected) {\n                etfIdentifierToRatio[this.props.etfProperties[etfIdentifier].symbol] = this.props.etfProperties[\n                    etfIdentifier\n                ].percentage;\n            }\n        }\n\n        return new InvestmentModel(\n            this.props[STARTING_CAPITAL_IDENTIFIER],\n            this.props[MONTHLY_INVESTMENT_IDENTIFIER],\n            this.props[MONTHLY_PAYOUT_IDENTIFIER],\n            this.props[SAVING_PHASE_IDENTIFIER],\n            etfIdentifierToRatio,\n            {\n                taxFreeAmount: this.props[TAX_FREE_AMOUNT_IDENTIFIER],\n                costConfig: generateCostConfig(this.props),\n            },\n            this.props[AGE_IDENTIFIER],\n            this.props[LIFE_EXPECTATION_IDENTIFIER]\n        );\n    }\n\n    drawVisualization() {\n        D3ChartStrategy.reset();\n        try {\n            if (this.props.isValid != null && this.props.isValid) {\n                this.investmentModel = this.getInvestmentModel();\n            }\n            const firstPayoutPhaseDate = this.investmentModel.payoutDates[0];\n            const correctLevelOfDetailInvestmentSteps = this.investmentModel.getInvestmentSteps(\n                this.props[DETAILED_GRAPH_DROPDOWN_IDENTIFIER]\n            );\n            new LineChartD3(\n                correctLevelOfDetailInvestmentSteps,\n                this.firstSVGRef.current,\n                firstPayoutPhaseDate\n            ).render();\n            new CashflowBarChart(\n                correctLevelOfDetailInvestmentSteps,\n                this.secondSVGRef.current,\n                firstPayoutPhaseDate\n            ).render();\n        } catch (e) {\n            console.error(e);\n        }\n    }\n\n    async componentDidMount() {\n        this.drawVisualization();\n    }\n\n    componentDidUpdate() {\n        this.drawVisualization();\n    }\n    render() {\n        return (\n            <React.Fragment>\n                <div ref={this.secondSVGRef}></div>\n                <div ref={this.firstSVGRef}></div>\n            </React.Fragment>\n        );\n    }\n}\n\nexport default Visualization;\n","import React from 'react';\n\nimport { TextInputElement } from './TextInputElement';\n\nexport function SidebarSectionHeading(props) {\n    return (\n        <div className=\"position-relative\">\n            <h6 className=\"sidebar-heading d-flex justify-content-between align-items-center px-3 mt-4 mb-1 text-muted\">\n                <span>{props.title}</span>\n            </h6>\n            <ErrorMessage {...props} identifier={props.title} />\n        </div>\n    );\n}\n\nexport function Overlay(props) {\n    return (\n        <div className=\"row\">\n            <div className=\"col-12 p-0\">\n                <div className=\"d-grid gap-0\">\n                    <div\n                        className=\"overlay min-vh-100 text-center m-0 d-flex flex-column justify-content-center\"\n                        style={{ visibility: props.displayOverlay ? 'visible' : 'hidden' }}>\n                        <h1 className=\"p-5\">\n                            Enter your personal{' '}\n                            <a\n                                href=\"https://www.alphavantage.co/support/#api-key\"\n                                target=\"_blank\"\n                                rel=\"noopener noreferrer\">\n                                {' '}\n                                Alphavantage API Key\n                            </a>{' '}\n                        </h1>\n                        <TextInputElement {...props} disabled={!props.displayOverlay} />\n                        <button type=\"button\" className=\"btn btn-primary my-5\" onClick={props.handleAPIKeyConfirm}>\n                            Confirm\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport function ErrorMessage(props) {\n    return (\n        <div\n            id={props.identifier + 'Feedback'}\n            className=\"invalid-tooltip\"\n            style={{ visibility: props.isValid ? 'hidden' : 'visible' }}>\n            {props.errorMessage}\n        </div>\n    );\n}\n","import React from 'react';\n\nimport { ErrorMessage } from './MinimalBootstrapComponents';\n\nexport function TextInputElement(props) {\n    return (\n        <div className=\"position-relative\">\n            <label className=\"form-label\" htmlFor={props.identifier}>\n                {props.label}\n            </label>\n            <input\n                className={'form-control ' + (props.isValid ? '' : 'is-invalid')}\n                id={props.identifier}\n                type=\"text\"\n                value={props.value.toString() + (props.textAppending !== '' ? ' ' + props.textAppending : '')}\n                onChange={e => props.onValueChange(props.transformFunction(e), props.identifier)}\n                disabled={props.disabled}\n            />\n            <ErrorMessage {...props} />\n        </div>\n    );\n}\n\nexport default TextInputElement;\n","import React from 'react';\n\nexport function CheckboxInputElement(props) {\n    return (\n        <div className=\"checkbox-element\">\n            <input\n                className=\"form-check-input\"\n                id={props.identifier}\n                type=\"checkbox\"\n                value={props.value}\n                onChange={() => props.onValueChange(props.identifier)}\n            />\n            <label className=\"form-check-label\" htmlFor={props.identifier}>\n                {props.label}\n            </label>\n        </div>\n    );\n}\n\nexport default CheckboxInputElement;\n","import React from 'react';\n\nfunction costsOfElementMatchUIValues(props, element) {\n    return element.fixedCosts === props.fixedCosts && element.percentageCosts === props.percentageCosts;\n}\n\nexport function BrokerDropDown(props) {\n    return (\n        <div className=\"dropdown\">\n            <button\n                className=\"btn btn-secondary dropdown-toggle\"\n                type=\"button\"\n                id=\"BrokerDropDown\"\n                data-bs-toggle=\"dropdown\"\n                aria-expanded=\"false\">\n                {props.label}\n            </button>\n            <ul className=\"dropdown-menu\" aria-labelledby=\"BrokerDropDown\">\n                {props.elements.map(element => (\n                    <li key={element.identifier}>\n                        <button\n                            className={\n                                costsOfElementMatchUIValues(props, element) ? 'dropdown-item active' : 'dropdown-item'\n                            }\n                            type=\"button\"\n                            onClick={e => props.handleChange(element)}>\n                            {element.label}\n                        </button>\n                    </li>\n                ))}\n            </ul>\n        </div>\n    );\n}\n","import React from 'react';\n\nexport function GraphDetailDropDown(props) {\n    return (\n        <div className=\"dropdown\">\n            <button\n                className=\"btn btn-secondary dropdown-toggle\"\n                type=\"button\"\n                id=\"GraphDetailDropDown\"\n                data-bs-toggle=\"dropdown\"\n                aria-expanded=\"false\">\n                {props.label}\n            </button>\n            <ul className=\"dropdown-menu\" aria-labelledby=\"GraphDetailDropDown\">\n                {props.elements.map(element => (\n                    <li key={element.identifier}>\n                        <button\n                            className={\n                                props.value === element.value ? 'dropdown-item active' : 'dropdown-item'\n                            }\n                            type=\"button\"\n                            onClick={e => props.handleChange(element)}>\n                            {element.label}\n                        </button>\n                    </li>\n                ))}\n            </ul>\n        </div>\n    );\n}\n","import React from 'react';\n\nimport { TextInputElement } from './TextInputElement';\n\nimport { ErrorMessage } from './MinimalBootstrapComponents';\n\nfunction percentageTransformFunction(e) {\n    const floatVal = parseFloat(e.target.value) / 100;\n    return isNaN(floatVal) ? 0 : floatVal;\n}\n\nexport function ETFSelectionDropDown(props) {\n    return (\n        <div className=\"dropdown position-relative\">\n            <button\n                className=\"btn btn-secondary dropdown-toggle is-invalid\"\n                type=\"button\"\n                id=\"ETFSelectionDropDown\"\n                data-bs-toggle=\"dropdown\"\n                aria-expanded=\"false\">\n                {props.label}\n            </button>\n            <ErrorMessage {...props} />\n            <ul className=\"dropdown-menu\" aria-labelledby=\"ETFSelectionDropDown\">\n                {Object.keys(props.elements).map(elementIdentifier => (\n                    <li key={elementIdentifier}>\n                        <button\n                            className={\n                                props.elements[elementIdentifier].selected ? 'dropdown-item active' : 'dropdown-item'\n                            }\n                            type=\"button\"\n                            onClick={e => {\n                                if (e.target.type !== 'text') {\n                                    props.handleSelectionChange(props.elements[elementIdentifier]);\n                                }\n                            }}>\n                            <TextInputElement\n                                {...props.elements[elementIdentifier]}\n                                value={Math.round(props.elements[elementIdentifier].percentage * 100)}\n                                textAppending=\"%\"\n                                onValueChange={props.handleShareChange}\n                                transformFunction={percentageTransformFunction}\n                                disabled={props.autoPercentage}\n                                isValid={true}\n                            />\n                        </button>\n                    </li>\n                ))}\n            </ul>\n        </div>\n    );\n}\n","import React from 'react';\n// Needed to make the drop downs work.\nimport { Dropdown, Tooltip } from 'bootstrap'; // eslint-disable-line no-unused-vars\nimport Visualization from './Visualization';\nimport TextInputElement from './TextInputElement';\nimport CheckboxInputElement from './CheckboxInputElement';\nimport { SidebarSectionHeading, Overlay } from './MinimalBootstrapComponents';\nimport { BrokerDropDown } from './BrokerDropDown';\nimport { GraphDetailDropDown } from './GraphDetailDropDown';\nimport { ETFSelectionDropDown } from './ETFSelectionDropDown';\nimport ForecastModelSingleton from '../model/ForecastModel';\n\nexport const STARTING_CAPITAL_IDENTIFIER = 'startingCapital';\nexport const MONTHLY_INVESTMENT_IDENTIFIER = 'monthlyInvestment';\nexport const TRANSACTION_COSTS_IDENTIFIER = 'transactionCosts';\nexport const TRANSACTION_COSTS_TYPE_IDENTIFIER = 'transactionCostsType';\nexport const SAVING_PHASE_IDENTIFIER = 'savingPhase';\nexport const AGE_IDENTIFIER = 'age';\nexport const TAX_FREE_AMOUNT_IDENTIFIER = 'taxFreeAmount';\nexport const MONTHLY_PAYOUT_IDENTIFIER = 'monthlyPayout';\nexport const LIFE_EXPECTATION_IDENTIFIER = 'lifeExpectation';\nexport const DETAILED_GRAPH_DROPDOWN_IDENTIFIER = 'detailedGraph';\nexport const ETF_DROPDOWN_SELECTION_IDENTIFIER = 'etfDropdownSelection';\nexport const API_KEY_IDENTIFIER = 'apiKey';\nconst BROKER_DROPDOWN_IDENTIFIER = 'brokerDropdown';\nconst ETF_AUTOMATIC_PERCENTAGE_IDENTIFIER = 'etfAutomaticPercentage';\n\nfunction transformInputToInt(e) {\n    const intVal = parseInt(e.target.value.split(' ', 1));\n    return isNaN(intVal) ? 0 : intVal;\n}\n\nfunction transformInputToFloat(e) {\n    const floatVal = parseFloat(e.target.value);\n    return isNaN(floatVal) ? 0 : floatVal;\n}\n\nfunction isPercentage(val) {\n    return !Number.isNaN(val) && val >= 0 && val <= 1;\n}\n\nfunction isPositiveInt(val) {\n    return !Number.isNaN(val) && Number.isInteger(val) && val >= 0;\n}\n\nfunction constructVisualizationProps(state) {\n    const props = {};\n    for (const identifier in state) {\n        props[identifier] = state[identifier].value;\n    }\n    Object.assign(props, { etfProperties: state[ETF_DROPDOWN_SELECTION_IDENTIFIER].elements });\n    props.isValid = state.isValid;\n    return props;\n}\n\nfunction recalculateETFPercentages(state) {\n    let numberOfSelectedETFs = 0;\n    for (const etfIdentifier in state[ETF_DROPDOWN_SELECTION_IDENTIFIER].elements) {\n        if (state[ETF_DROPDOWN_SELECTION_IDENTIFIER].elements[etfIdentifier].selected) {\n            numberOfSelectedETFs++;\n        }\n    }\n    const newPercentage = 1.0 / Math.max(1, numberOfSelectedETFs);\n    for (const etfIdentifier in state[ETF_DROPDOWN_SELECTION_IDENTIFIER].elements) {\n        state[ETF_DROPDOWN_SELECTION_IDENTIFIER].elements[etfIdentifier].percentage = newPercentage;\n    }\n    return state;\n}\n\nexport class App extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.handleTextChange = this.handleTextChange.bind(this);\n        this.handleCheckBoxChange = this.handleCheckBoxChange.bind(this);\n        this.handleBrokerChange = this.handleBrokerChange.bind(this);\n        this.handleGraphDetailChange = this.handleGraphDetailChange.bind(this);\n        this.handleETFSelectionChange = this.handleETFSelectionChange.bind(this);\n        this.handleETFShareChange = this.handleETFShareChange.bind(this);\n        this.handleAPIKeyConfirm = this.handleAPIKeyConfirm.bind(this);\n\n        this.state = getInitialInputFormState(this);\n    }\n\n    handleTextChange(changedValue, changedStateIdentifier) {\n        const state = { ...this.state };\n        state[changedStateIdentifier].value = changedValue;\n        this.validateAndSetState(state);\n    }\n\n    handleCheckBoxChange(changedStateIdentifier) {\n        const state = { ...this.state };\n        state[changedStateIdentifier].value = !state[changedStateIdentifier].value;\n        if (changedStateIdentifier === TRANSACTION_COSTS_TYPE_IDENTIFIER) {\n            state[TRANSACTION_COSTS_IDENTIFIER].value = state[changedStateIdentifier].value ? 5 : 0.015;\n            state[TRANSACTION_COSTS_IDENTIFIER].textAppending = state[changedStateIdentifier].value ? '€' : '%';\n            state[TRANSACTION_COSTS_IDENTIFIER].transformFunction = state[changedStateIdentifier].value\n                ? transformInputToInt\n                : transformInputToFloat;\n        } else if (\n            changedStateIdentifier === ETF_AUTOMATIC_PERCENTAGE_IDENTIFIER &&\n            state[changedStateIdentifier].value\n        ) {\n            recalculateETFPercentages(state);\n        }\n        this.validateAndSetState(state);\n    }\n\n    handleBrokerChange(brokerProperties) {\n        const state = { ...this.state };\n        state[TRANSACTION_COSTS_IDENTIFIER].value =\n            brokerProperties.percentageCosts > 0 ? brokerProperties.percentageCosts : brokerProperties.fixedCosts;\n        state[TRANSACTION_COSTS_TYPE_IDENTIFIER].value = brokerProperties.percentageCosts > 0 ? false : true;\n        this.validateAndSetState(state);\n    }\n\n    handleGraphDetailChange(detailProperties) {\n        const state = { ...this.state };\n        state[DETAILED_GRAPH_DROPDOWN_IDENTIFIER].value = detailProperties.value;\n        this.validateAndSetState(state);\n    }\n\n    handleETFSelectionChange(etfProperties) {\n        const state = { ...this.state };\n        state[ETF_DROPDOWN_SELECTION_IDENTIFIER].elements[etfProperties.identifier].selected = !state[\n            ETF_DROPDOWN_SELECTION_IDENTIFIER\n        ].elements[etfProperties.identifier].selected;\n        if (state[ETF_AUTOMATIC_PERCENTAGE_IDENTIFIER].value) {\n            recalculateETFPercentages(state);\n        }\n        this.validateAndSetState(state);\n    }\n\n    handleETFShareChange(changedValue, changedETFIdentifier) {\n        const state = { ...this.state };\n        state[ETF_DROPDOWN_SELECTION_IDENTIFIER].elements[changedETFIdentifier].percentage = changedValue;\n        this.validateAndSetState(state);\n    }\n\n    async handleAPIKeyConfirm() {\n        const apiKey = this.state[API_KEY_IDENTIFIER].value;\n        const apiValues = { ...this.state[API_KEY_IDENTIFIER] };\n        try {\n            await ForecastModelSingleton.loadHistoricData(\n                apiKey,\n                this.state[ETF_DROPDOWN_SELECTION_IDENTIFIER].elements\n            );\n            apiValues.error = false;\n            apiValues.displayOverlay = false;\n        } catch (e) {\n            apiValues.error = true;\n        }\n        this.setState({ [API_KEY_IDENTIFIER]: apiValues });\n        this.forceUpdate();\n    }\n\n    validateAndSetState(state) {\n        const positiveIntIdentifier = [\n            MONTHLY_INVESTMENT_IDENTIFIER,\n            MONTHLY_PAYOUT_IDENTIFIER,\n            STARTING_CAPITAL_IDENTIFIER,\n            AGE_IDENTIFIER,\n            LIFE_EXPECTATION_IDENTIFIER,\n            SAVING_PHASE_IDENTIFIER,\n            TAX_FREE_AMOUNT_IDENTIFIER,\n        ];\n        state.isValid = true;\n\n        for (const identifier of positiveIntIdentifier) {\n            state[identifier].isValid = isPositiveInt(state[identifier].value);\n            state[identifier].errorMessage = 'Please enter a positive number.';\n            state.isValid = state[identifier].isValid && state.isValid;\n        }\n\n        // Check the year values.\n        const leftoverYears = state[LIFE_EXPECTATION_IDENTIFIER].value - state[AGE_IDENTIFIER].value;\n        if (state[AGE_IDENTIFIER].value >= state[LIFE_EXPECTATION_IDENTIFIER].value) {\n            state[AGE_IDENTIFIER].errorMessage = 'You cannot be older than the life expectation';\n            state[AGE_IDENTIFIER].isValid = false;\n            state.isValid = false;\n        } else if (leftoverYears <= state[SAVING_PHASE_IDENTIFIER].value) {\n            state[SAVING_PHASE_IDENTIFIER].errorMessage =\n                'You cannot have a saving phase that lasts longer than your life.';\n            state[SAVING_PHASE_IDENTIFIER].isValid = false;\n            state.isValid = false;\n        }\n\n        // Check Cost values.\n        if (state[TRANSACTION_COSTS_TYPE_IDENTIFIER].value) {\n            state[TRANSACTION_COSTS_IDENTIFIER].isValid = isPositiveInt(state[TRANSACTION_COSTS_IDENTIFIER].value);\n            state[TRANSACTION_COSTS_IDENTIFIER].errorMessage = 'Please enter a positive number.';\n        } else {\n            state[TRANSACTION_COSTS_IDENTIFIER].isValid = isPercentage(state[TRANSACTION_COSTS_IDENTIFIER].value);\n            state[TRANSACTION_COSTS_IDENTIFIER].errorMessage = 'Please enter a valid percentage.';\n        }\n        state.isValid = state[TRANSACTION_COSTS_IDENTIFIER].isValid && state.isValid;\n\n        // Check the etf percentages.\n        let sumOfPercentages = 0;\n        let foundOneSelectedEtf = false;\n        for (const etfIdentifier in state[ETF_DROPDOWN_SELECTION_IDENTIFIER].elements) {\n            if (state[ETF_DROPDOWN_SELECTION_IDENTIFIER].elements[etfIdentifier].selected) {\n                sumOfPercentages += state[ETF_DROPDOWN_SELECTION_IDENTIFIER].elements[etfIdentifier].percentage;\n                foundOneSelectedEtf = true;\n            }\n        }\n        if (!foundOneSelectedEtf) {\n            state[ETF_DROPDOWN_SELECTION_IDENTIFIER].isValid = false;\n            state[ETF_DROPDOWN_SELECTION_IDENTIFIER].errorMessage = 'Please select at least one ETF.';\n            state.isValid = false;\n        } else if (sumOfPercentages !== 1.0) {\n            state[ETF_DROPDOWN_SELECTION_IDENTIFIER].isValid = false;\n            state[ETF_DROPDOWN_SELECTION_IDENTIFIER].errorMessage = 'The sum of all selected ETF needs to be 100%';\n            state.isValid = false;\n        } else {\n            state[ETF_DROPDOWN_SELECTION_IDENTIFIER].isValid = true;\n        }\n\n        this.setState(state);\n    }\n\n    render() {\n        const visualizationProps = constructVisualizationProps(this.state);\n        return (\n            <div className=\"container-fluid\">\n                <Overlay {...this.state[API_KEY_IDENTIFIER]} />\n                <div className=\"row\">\n                    <nav id=\"sidebarMenu\" className=\"col-md-3 col-lg-2 bg-light sidebar\">\n                        <form className=\"position-sticky needs-validation\" noValidate>\n                            {/* Money Options */}\n                            <SidebarSectionHeading title=\"Money Options\" />\n                            <TextInputElement\n                                key={STARTING_CAPITAL_IDENTIFIER}\n                                {...this.state[STARTING_CAPITAL_IDENTIFIER]}\n                            />\n                            <TextInputElement\n                                key={MONTHLY_INVESTMENT_IDENTIFIER}\n                                {...this.state[MONTHLY_INVESTMENT_IDENTIFIER]}\n                            />\n                            <TextInputElement\n                                key={MONTHLY_PAYOUT_IDENTIFIER}\n                                {...this.state[MONTHLY_PAYOUT_IDENTIFIER]}\n                            />\n                            <TextInputElement\n                                key={TAX_FREE_AMOUNT_IDENTIFIER}\n                                {...this.state[TAX_FREE_AMOUNT_IDENTIFIER]}\n                            />\n                            {/* Time Options */}\n                            <SidebarSectionHeading title=\"Time Options\" />\n                            <TextInputElement key={AGE_IDENTIFIER} {...this.state[AGE_IDENTIFIER]} />\n                            <TextInputElement\n                                key={LIFE_EXPECTATION_IDENTIFIER}\n                                {...this.state[LIFE_EXPECTATION_IDENTIFIER]}\n                            />\n                            <TextInputElement key={SAVING_PHASE_IDENTIFIER} {...this.state[SAVING_PHASE_IDENTIFIER]} />\n                            {/* Cost Options */}\n                            <SidebarSectionHeading title=\"Cost Options\" />\n                            <TextInputElement\n                                key={TRANSACTION_COSTS_IDENTIFIER}\n                                {...this.state[TRANSACTION_COSTS_IDENTIFIER]}\n                            />\n                            <CheckboxInputElement\n                                key={TRANSACTION_COSTS_TYPE_IDENTIFIER}\n                                {...this.state[TRANSACTION_COSTS_TYPE_IDENTIFIER]}\n                            />\n                            <BrokerDropDown\n                                key={BROKER_DROPDOWN_IDENTIFIER}\n                                fixedCosts={\n                                    this.state[TRANSACTION_COSTS_TYPE_IDENTIFIER].value\n                                        ? this.state[TRANSACTION_COSTS_IDENTIFIER].value\n                                        : 0\n                                }\n                                percentageCosts={\n                                    this.state[TRANSACTION_COSTS_TYPE_IDENTIFIER].value\n                                        ? 0\n                                        : this.state[TRANSACTION_COSTS_IDENTIFIER].value\n                                }\n                                {...this.state[BROKER_DROPDOWN_IDENTIFIER]}\n                            />\n                            {/* Visualization Options */}\n                            <SidebarSectionHeading title=\"Visualization Options\" />\n                            <div className=\"d-grid gap-0\">\n                                <div className=\"p-1\">\n                                    <GraphDetailDropDown\n                                        key={DETAILED_GRAPH_DROPDOWN_IDENTIFIER}\n                                        {...this.state[DETAILED_GRAPH_DROPDOWN_IDENTIFIER]}\n                                    />\n                                </div>\n                                <CheckboxInputElement\n                                    key={ETF_AUTOMATIC_PERCENTAGE_IDENTIFIER}\n                                    {...this.state[ETF_AUTOMATIC_PERCENTAGE_IDENTIFIER]}\n                                />\n                                <div className=\"p-1\">\n                                    <ETFSelectionDropDown\n                                        key={ETF_DROPDOWN_SELECTION_IDENTIFIER}\n                                        autoPercentage={this.state[ETF_AUTOMATIC_PERCENTAGE_IDENTIFIER].value}\n                                        {...this.state[ETF_DROPDOWN_SELECTION_IDENTIFIER]}\n                                    />\n                                </div>\n                            </div>\n                        </form>\n                    </nav>\n                    <main className=\"col-md-9 col-lg-10 ms-sm-auto\">\n                        <h1>Etf Pension Plan Visualization</h1>\n                        <Visualization {...visualizationProps} />\n                    </main>\n                </div>\n            </div>\n        );\n    }\n}\n\nfunction getInitialInputFormState(caller) {\n    return {\n        isValid: true,\n        // simple ui elements.\n        [STARTING_CAPITAL_IDENTIFIER]: {\n            value: 1000,\n            label: 'Starting Capital',\n            errorMessage: '',\n            textAppending: '€',\n            isValid: true,\n            identifier: STARTING_CAPITAL_IDENTIFIER,\n            transformFunction: transformInputToInt,\n            onValueChange: caller.handleTextChange,\n        },\n        [MONTHLY_INVESTMENT_IDENTIFIER]: {\n            value: 100,\n            label: 'Monthly Investment',\n            errorMessage: 'Please enter a positive Money amount.',\n            textAppending: '€',\n            isValid: true,\n            identifier: MONTHLY_INVESTMENT_IDENTIFIER,\n            transformFunction: transformInputToInt,\n            onValueChange: caller.handleTextChange,\n        },\n        [MONTHLY_PAYOUT_IDENTIFIER]: {\n            value: 1000,\n            label: 'Monthly Payout',\n            errorMessage: '',\n            textAppending: '€',\n            isValid: true,\n            identifier: MONTHLY_PAYOUT_IDENTIFIER,\n            transformFunction: transformInputToInt,\n            onValueChange: caller.handleTextChange,\n        },\n        [TRANSACTION_COSTS_IDENTIFIER]: {\n            value: 0.015,\n            label: 'Transaction Costs',\n            errorMessage: '',\n            textAppending: '%',\n            isValid: true,\n            identifier: TRANSACTION_COSTS_IDENTIFIER,\n            transformFunction: transformInputToFloat,\n            onValueChange: caller.handleTextChange,\n        },\n        [TRANSACTION_COSTS_TYPE_IDENTIFIER]: {\n            value: false,\n            label: 'Fixed Amount',\n            identifier: TRANSACTION_COSTS_TYPE_IDENTIFIER,\n            onValueChange: caller.handleCheckBoxChange,\n        },\n        [SAVING_PHASE_IDENTIFIER]: {\n            value: 40,\n            label: 'Saving Phase',\n            errorMessage: '',\n            textAppending: 'Y',\n            isValid: true,\n            identifier: SAVING_PHASE_IDENTIFIER,\n            transformFunction: transformInputToInt,\n            onValueChange: caller.handleTextChange,\n        },\n        [AGE_IDENTIFIER]: {\n            value: 30,\n            label: 'Your Age',\n            textAppending: 'Y',\n            errorMessage: '',\n            isValid: true,\n            identifier: AGE_IDENTIFIER,\n            transformFunction: transformInputToInt,\n            onValueChange: caller.handleTextChange,\n        },\n        [LIFE_EXPECTATION_IDENTIFIER]: {\n            value: 80,\n            label: 'Life Expectation',\n            errorMessage: '',\n            isValid: true,\n            textAppending: 'Y',\n            identifier: LIFE_EXPECTATION_IDENTIFIER,\n            transformFunction: transformInputToInt,\n            onValueChange: caller.handleTextChange,\n        },\n        [TAX_FREE_AMOUNT_IDENTIFIER]: {\n            value: 801,\n            label: 'Tax Free Amount',\n            errorMessage: '',\n            isValid: true,\n            textAppending: '€',\n            identifier: TAX_FREE_AMOUNT_IDENTIFIER,\n            transformFunction: transformInputToInt,\n            onValueChange: caller.handleTextChange,\n        },\n        [ETF_AUTOMATIC_PERCENTAGE_IDENTIFIER]: {\n            value: false,\n            label: 'Automatic ETF Ratio',\n            identifier: ETF_AUTOMATIC_PERCENTAGE_IDENTIFIER,\n            onValueChange: caller.handleCheckBoxChange,\n        },\n        [API_KEY_IDENTIFIER]: {\n            displayOverlay: true,\n            value: '',\n            label: '',\n            errorMessage: '',\n            isValid: true,\n            textAppending: '',\n            identifier: API_KEY_IDENTIFIER,\n            transformFunction: e => e.target.value,\n            onValueChange: caller.handleTextChange,\n            handleAPIKeyConfirm: caller.handleAPIKeyConfirm,\n        },\n        // Complex UI elements.\n        [DETAILED_GRAPH_DROPDOWN_IDENTIFIER]: {\n            value: 1,\n            label: 'Graph Detail Level',\n            isValid: true,\n            handleChange: caller.handleGraphDetailChange,\n            elements: [\n                {\n                    identifier: '12',\n                    value: 12,\n                    label: 'All Months a Year (highest detail)',\n                },\n                {\n                    identifier: '6',\n                    value: 6,\n                    label: 'Every 2nd Month (higher detail)',\n                },\n                {\n                    identifier: '3',\n                    value: 3,\n                    label: 'Every 4th Month (lower detail)',\n                },\n                {\n                    identifier: '1',\n                    value: 1,\n                    label: 'One Month a Year (lowest detail) (default)',\n                },\n            ],\n        },\n        [BROKER_DROPDOWN_IDENTIFIER]: {\n            label: 'Broker',\n            isValid: true,\n            handleChange: caller.handleBrokerChange,\n            elements: [\n                {\n                    identifier: 'comdirect',\n                    label: 'comdirect',\n                    fixedCosts: 0,\n                    percentageCosts: 0.015,\n                },\n                {\n                    identifier: 'tradeRepublic',\n                    label: 'Trade Republic',\n                    fixedCosts: 0,\n                    percentageCosts: 0.01,\n                },\n                {\n                    identifier: 'eToro',\n                    label: 'eToro',\n                    fixedCosts: 0,\n                    percentageCosts: 0.0,\n                },\n            ],\n        },\n        [ETF_DROPDOWN_SELECTION_IDENTIFIER]: {\n            label: 'ETF Selection',\n            isValid: true,\n            identifier: ETF_DROPDOWN_SELECTION_IDENTIFIER,\n            errorMessage: '',\n            handleSelectionChange: caller.handleETFSelectionChange,\n            handleShareChange: caller.handleETFShareChange,\n            elements: {\n                S_and_P_500: {\n                    identifier: 'S_and_P_500',\n                    symbol: 'SP5C.PAR',\n                    percentage: 1.0,\n                    label: 'S & P 500',\n                    selected: true,\n                },\n                iShare: {\n                    identifier: 'iShare',\n                    symbol: 'ESGE',\n                    percentage: 1.0,\n                    label: 'iShare',\n                    selected: false,\n                },\n                msciUSA: {\n                    identifier: 'msciUSA',\n                    symbol: 'SUSA',\n                    percentage: 1.0,\n                    label: 'MSCI USA ESG',\n                    selected: false,\n                },\n            },\n        },\n    };\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './scss/main.scss';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}