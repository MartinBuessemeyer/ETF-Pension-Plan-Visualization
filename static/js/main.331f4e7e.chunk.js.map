{"version":3,"sources":["helpers/utils.ts","model/ForecastModel.ts","model/InvestmentModel.ts","renderer/D3ChartStrategy.ts","renderer/AreaChartD3.ts","renderer/CashflowBarChartD3.ts","components/Visualization.tsx","components/ErrorMessageComponent.tsx","components/TextInputElement.tsx","components/CheckboxInputElement.tsx","components/APIKeyOverlay.tsx","components/SidebarSectionHeadingComponent.tsx","components/BrokerDropDown.tsx","components/GraphDetailDropDown.tsx","components/ETFSelectionDropDown.tsx","components/App.tsx","reportWebVitals.js","index.js"],"names":["timeDiffIgnoreDivisor","numberOfMonthsOfAYear","isFirstMonthOfAYear","date","getMonth","percentageToFloatValue","val","loadHistoricalETFData","etfIdentifier","apiKey","a","d3","entry","undefined","timestamp","Error","Date","toString","dividend","parseFloat","course","historicalData","sort","b","valueOf","etfHistoricalToCourseForecastArray","map","dateToTimestamp","etfHistoricalToDividendForecastArray","currentYear","getFullYear","dividendForecastArray","forEach","length","push","Math","floor","getTime","generateHistoricalDataNotPresentException","roundDateToBeginningOfMonth","month","year","currentDayOfMonth","getDate","maxDayOfMonth","monthOffset","round","ForecastModelSingleton","coursePredictors","dividendPredictors","this","courseForecastArray","maxTimestampBeforeCoursePredictorRepetition","_calculateTimestampForPredictorRepetition","maxYearBeforeDividendPredictorRepetition","history","predictors","forecastArray","lastTimestampToIncludeInPrediction","abs","backCastTimeFactor","backCastTimestampConstant","filteredForecastArray","filter","regression","linear","order","precision","lastYearToIncludeInPrediction","_courseDateToPredictorTimestampAndDateTimestamp","predictorTimestamp","_createCoursePredictorIfNotPresent","predict","predictorYear","_dividendYearToPredictorYear","_createDividendPredictorIfNotPresent","max","backCastTimeConstant","backCastTimeDate","setMonth","instance","getInstance","etfProperties","configure","forecast","_loadAndCacheHistoricalETFData","symbol","console","log","firstTimestamp","lastTimestamp","corporateTaxRatio","getTotalShareValue","investmentStep","totalShares","sharePrizes","getTotalDividendShareValue","dividendTotalShares","getNewShareValue","newShares","getNextMonthDate","newDate","calculateDividend","isLastMonthOfAYear","dividendAmount","predictDividend","sharePrize","predictCourse","calculateCosts","amount","costConfiguration","costs","percentageCosts","fixedCosts","amountWithoutCosts","subtractTaxFreeGain","taxAmount","taxFreeAmount","calculateAndAddInflation","initialDate","sumTotalValues","sum","Object","keys","sumOfTotalValues","timeFactor","inflation","pow","calculateAmountIncrease","percentageIncrease","numberOfMonths","yearsSinceStart","calculateVorabpauschaleTaxes","investmentSteps","leftoverTaxFreeAmount","etfToRatio","value","min","summedTaxes","decemberInvestmentStep","firstInvestmentStepOfThisYear","accumulatedBasicProfit","i","profitOverAllTime","totalInvestedMoney","profitOfPreviousYears","amountToApplyTaxes","addAccumulationMonth","investment","configOptions","prevInvestmentStep","newInvestmentStep","dividendNewShares","totalCosts","newInvestedMoney","newInvestment","totalTaxes","totalPayout","newPayout","investmentOfEtfWithCosts","costConfig","investmentOfEtfWithoutCosts","etfSharePrize","dividendPayoutMoneyPerShare","newSharesByDividend","newTaxes","addPayoutMonth","sellingAmount","leftoverAlreadyPaidTaxes","payoutStats","taxes","investmentStepsIdx","amountToSell","amountAlreadySold","costsToPay","alreadyPaidCosts","payoutInvestmentStepIdxForFIFO","currentSharesLeft","alreadySoldShares","currentInvestmentStepForFIFO","leftoverAmountToSell","currentValueOfShares","amountToSellWithCosts","amountOfSharesToSell","amountToSellWithoutCosts","initialValueOfShares","amountToPayTaxes","taxesToPay","payoutAmount","amountOfDividendSharesLeft","amountOfDividendSharesSold","generateEmptyInvestmentStep","dummyData","ESGE","SUSA","emptyInvestmentStep","InvestmentModel","startCapital","monthlyInvestment","yearlyInvestmentIncrease","monthlyPayout","yearlyPayoutIncrease","savingPhaseLength","age","expectationOfLife","savingDates","payoutDates","_calculateDatesForModel","_calculateModel","lifeExpectation","fadeOutYears","yearsLeft","now","beginningDate","endSavingPhaseDate","setFullYear","endDate","calculateForecastInterval","startDate","currentDate","slice","numberOfEntriesPerYear","Number","isInteger","selectedInvestmentSteps","numberOfMonthsToMerge","adjustedInvestmentStep","cloneDeep","offset","FIVE_MILLION","ONE_MILLION","generateLabelWithValueText","name","charAt","toUpperCase","D3ChartStrategy","renderDivRef","payoutPhaseStartDate","svgID","tooltipDate","yExtent","width","height","marginW","marginH","lineStrokeWidth","standardFontSize","labelValueIdentifier","dateExtent","maxIndex","minIndex","yScale","xScale","dataArray","textProperties","svg","fadeOutGradientID","faceOutYearsLength","hoverLine","interaction","textGroup","constructor","activeStrategies","innerHTML","append","attr","_prepareData","_calculateExtents","_createScales","_drawContent","_drawFadeOut","_prepareText","_drawText","_drawAxis","_addInteraction","_updateAllDiagrams","hasToBePositive","labelDivisionFactor","numberIndicator","toLocaleString","maximumFractionDigits","d","lastImportantDateForYScale","filteredDataArrayForYMax","e","filteredDataArrayForYMin","maxVal","yStart","minVal","yEnd","domain","range","style","call","tickFormat","valueToDisplayText","ticks","on","_setInteractionDisplayForActiveDiagrams","mouseEvent","_handleTooltipEvent","x","invert","investmentStepIndex","firstDate","secondDate","numberOfMonthsSinceStartDate","numberOfMonthsPerInvestmentStep","calculateInvestmentStepIndexForDate","activeDiagram","_updateTooltip","_updateDiagram","selectAll","data","values","enter","text","y","fontSize","fontWeight","textAnchor","color","savingPhaseMid","payoutPhaseMid","yPos","savingBold","savingPhase","payoutBold","payoutPhase","fadeOutGroup","fadeOutStartDate","gradient","displayOption","generateEtfValueText","investmentValue","totalValue","AreaChartD3","etfRatio","etfLineColors","total","invested","colors","lineOpacity","negativeLabels","investedIdentifier","capitalIdentifier","etfIdentifiers","dataToIndex","ratio","currentIdx","heightOffset","totalShareValue","totalDividendShareValue","datum","_drawArea","curve","y0","y1","paddingW","paddingH","ETF_SYMBOL_TO_NAME","investedValue","updatedValueText","negativeLabel","getSumNewPayout","sumNewPayout","CashflowBarChart","barPaddingPercentage","payout","first","second","rectWidth","startYear","colorIdentifier","payoutX","payoutY","payoutIdentifier","investedX","investedY","payoutValue","needToSkipLastBar","barArray","Visualization","firstSVGRef","React","createRef","secondSVGRef","areaChart","barChart","investmentModel","etfIdentifierToRatio","props","etfDropdownSelection","elements","selected","percentage","TAX_FREE_AMOUNT_IDENTIFIER","generateCostConfig","STARTING_CAPITAL_IDENTIFIER","MONTHLY_INVESTMENT_IDENTIFIER","YEARLY_INVESTMENT_INCREASE_IDENTIFIER","MONTHLY_PAYOUT_IDENTIFIER","YEARLY_PAYOUT_INCREASE_IDENTIFIER","SAVING_PHASE_IDENTIFIER","AGE_IDENTIFIER","LIFE_EXPECTATION_IDENTIFIER","diagram","Y_AXIS_LOCK_IDENTIFIER","reset","isValid","current","_getETFIdentifierToRatio","_getInvestmentModel","firstPayoutPhaseDate","getPayoutPhaseBeginDate","correctLevelOfDetailInvestmentSteps","getInvestmentSteps","DETAILED_GRAPH_DROPDOWN_IDENTIFIER","_getTooltipDate","_getYAxisExtent","render","error","_drawVisualization","Fragment","ref","Component","ErrorMessage","id","identifier","className","visibility","errorMessage","TextInputElement","htmlFor","label","type","textAppending","onChange","onValueChange","transformFunction","disabled","StringTextInputElement","ETFPercentageInputElement","CheckboxInputElement","Overlay","displayOverlay","href","target","rel","onClick","handleAPIKeyConfirm","SidebarSectionHeading","titleID","title","replace","data-bs-toggle","data-bs-target","aria-expanded","initiallyCollapsed","aria-controls","children","costsOfElementMatchUIValues","element","BrokerDropDown","aria-labelledby","handleChange","GraphDetailDropDown","percentageTransformFunction","floatVal","isNaN","ETFSelectionDropDown","elementIdentifier","handleSelectionChange","handleShareChange","autoPercentage","TRANSACTION_COSTS_IDENTIFIER","TRANSACTION_COSTS_TYPE_IDENTIFIER","ETF_DROPDOWN_SELECTION_IDENTIFIER","API_KEY_IDENTIFIER","BROKER_DROPDOWN_IDENTIFIER","ETF_AUTOMATIC_PERCENTAGE_IDENTIFIER","transformInputToInt","valueWithoutTextAppending","split","intVal","parseInt","transformInputToFloat","isPercentage","isPositiveInt","state","recalculateETFPercentages","numberOfSelectedETFs","newPercentage","App","handleTextChange","bind","handleCheckBoxChange","handleBrokerChange","handleGraphDetailChange","handleETFSelectionChange","handleETFShareChange","caller","S_and_P_500","iShare","msciUSA","getInitialInputFormState","changedValue","changedStateIdentifier","_validateAndSetState","brokerProperties","detailProperties","changedETFIdentifier","apiValues","loadHistoricData","setState","forceUpdate","positiveIntIdentifiers","percentageIdentifiers","leftoverYears","sumOfPercentages","foundOneSelectedEtf","noValidate","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.331f4e7e.chunk.js","sourcesContent":["import * as d3 from 'd3';\n\nimport { DataPoint } from 'regression';\n\n// Ignore milliseconds, seconds, minutes, hours.\nconst timeDiffIgnoreDivisor = 1000 * 60 * 60 * 24;\n\nexport const timestampIndexOfForecastArray = 0;\nexport const courseIndexOfForecastArray = 1;\nexport const numberOfMonthsOfAYear = 12;\nexport const inflationRate = 0.01;\n\nexport interface IHistoricEntry {\n    date: Date;\n    dividend: number;\n    course: number;\n}\n\n/**\n * Checks if the date is the last month of a year i.e. December.\n *\n * @param date The date to check.\n * @returns Is the date in December.\n */\nexport function isLastMonthOfAYear(date: Date): boolean {\n    return date.getMonth() === numberOfMonthsOfAYear - 1;\n}\n\n/**\n * Checks if the date is the first month of a year i.e. January.\n *\n * @param date The concerning date.\n * @returns Is the date in January.\n */\nexport function isFirstMonthOfAYear(date: Date): boolean {\n    return date.getMonth() === 0;\n}\n\n/**\n * Clamps the given value into the given min-max range.\n *\n * @param value Value to clamp.\n * @param min Minimum value.\n * @param max Maximum value.\n * @returns\n */\nexport function clamp(value: number, min: number, max: number): number {\n    return Math.max(min, Math.min(value, max));\n}\n\n/**\n * Converts a percentage value to a usual float by dividing by 100.\n *\n * @param val The percentage value.\n * @returns The normal float representation of the percentage value.\n */\nexport function percentageToFloatValue(val: number): number {\n    return val / 100.0;\n}\n\n/**\n * Loads the historic data of the ETF by downloading and parsing it from the [Alphavantage](https://www.alphavantage.co/) API.\n *\n * @param etfIdentifier The ETF identifier (symbol) by [Alphavantage](https://www.alphavantage.co/).\n * @param apiKey The personal API [Alphavantage](https://www.alphavantage.co/) key.\n * @returns The sorted array with the historic entries.\n */\nexport async function loadHistoricalETFData(etfIdentifier: string, apiKey: string): Promise<IHistoricEntry[]> {\n    const historicalData = await d3.csv(\n        `https://www.alphavantage.co/query?function=TIME_SERIES_MONTHLY_ADJUSTED&symbol=${etfIdentifier}&apikey=${apiKey}&datatype=csv`,\n        entry => {\n            if (\n                entry.timestamp === undefined ||\n                entry['dividend amount'] === undefined ||\n                entry['adjusted close'] === undefined\n            ) {\n                throw new Error(`The history of ${etfIdentifier} contained an undefined field.`);\n            }\n            return {\n                date: new Date(entry.timestamp.toString()),\n                dividend: parseFloat(entry['dividend amount']),\n                course: parseFloat(entry['adjusted close']),\n            };\n        }\n    );\n    historicalData.sort((a, b) => a.date.valueOf() - b.date.valueOf());\n    return historicalData;\n}\n\n/**\n * Constructs a course forecasting array which consists of [Date, CourseValue] pairs.\n * The historical data needs to be sorted by the date. Which is already done when loading.\n *\n * @param historicalData The historical data array that should be used for the course forecasting array.\n * @returns The forecasting Array of [Date, CourseValue] pairs.\n */\nexport function etfHistoricalToCourseForecastArray(historicalData: IHistoricEntry[]): DataPoint[] {\n    return historicalData.map(entry => [dateToTimestamp(entry.date), entry.course]);\n}\n\n/**\n * Constructs a dividend forecasting array which consists of [Year, CourseValue] pairs.\n * The historical data needs to be sorted by the date. Which is already done when loading.\n *\n * @param historicalData The historical data array that should be used for the course forecasting array.\n * @returns The forecasting Array of [Year, CourseValue] pairs.\n */\nexport function etfHistoricalToDividendForecastArray(historicalData: IHistoricEntry[]): DataPoint[] {\n    let currentYear = historicalData[0].date.getFullYear();\n    const dividendForecastArray: DataPoint[] = [[currentYear, 0]];\n    historicalData.forEach(entry => {\n        if (entry.date.getFullYear() === currentYear) {\n            dividendForecastArray[dividendForecastArray.length - 1][courseIndexOfForecastArray] += entry.dividend;\n        } else {\n            currentYear = entry.date.getFullYear();\n            dividendForecastArray.push([currentYear, entry.dividend]);\n        }\n    });\n    dividendForecastArray.sort((a, b) => a[timestampIndexOfForecastArray] - b[timestampIndexOfForecastArray]);\n    return dividendForecastArray;\n}\n\n/**\n * Converts the date to a timestamp in the used format.\n * A timestamp is a unix timestamp which counts days instead of milliseconds.\n *\n * @param date The concerning Date.\n * @returns The corresponding timestamp.\n */\nexport function dateToTimestamp(date: Date): number {\n    return Math.floor(date.getTime() / timeDiffIgnoreDivisor);\n}\n\n/**\n * Converts the timestamp to a Date in the used format.\n * A timestamp is a unix timestamp which counts days instead of milliseconds.\n *\n * @param date The concerning timestamp.\n * @returns The corresponding Date.\n */\nexport function timestampToDate(timestamp: number): Date {\n    return new Date(timestamp * timeDiffIgnoreDivisor);\n}\n\n/**\n * Generates a specific error for the given ETF identifier which is used to\n * indicate that the historic data needs to be loaded before forecasting for that etf is available.\n *\n * @param etfIdentifier The Identifier of the ETF.\n * @returns The error object.\n */\nexport function generateHistoricalDataNotPresentException(etfIdentifier: string): Error {\n    return new Error(`First call loadHistoricalDataIfNotPresent() before predicting: ${etfIdentifier}`);\n}\n\n/**\n * Calculates the number of days in the given month and year.\n * Based on: https://stackoverflow.com/a/315767\n *\n * @param month The concerning Month.\n * @param year The concerning Year.\n * @returns The number of days of that month.\n */\nfunction daysInMonth(month: number, year: number): number {\n    return new Date(year, month + 1, 0).getDate();\n}\n\n/**\n * Rounds the given date to the first day of that or the next month.\n *\n * @param date The concerning date.\n * @returns The rounded Date.\n */\nexport function roundDateToBeginningOfMonth(date: Date): Date {\n    const currentDayOfMonth = date.getDate();\n    const maxDayOfMonth = daysInMonth(date.getMonth(), date.getFullYear());\n    const monthOffset = Math.round(currentDayOfMonth / maxDayOfMonth);\n    return new Date(date.getFullYear(), date.getMonth() + monthOffset);\n}\n","import regression from 'regression';\nimport { DataPoint } from 'regression';\nimport {\n    dateToTimestamp,\n    etfHistoricalToCourseForecastArray,\n    etfHistoricalToDividendForecastArray,\n    loadHistoricalETFData,\n    timestampIndexOfForecastArray,\n    courseIndexOfForecastArray,\n    generateHistoricalDataNotPresentException,\n    IHistoricEntry,\n} from '../helpers/utils';\n\ninterface IDividendPredictor {\n    [timestamp: number]: regression.Result;\n}\n\ninterface IDividendPredictors {\n    maxYearBeforeDividendPredictorRepetition: number;\n    predictors: IDividendPredictor;\n}\n\ninterface ICoursePredictors {\n    maxTimestampBeforeCoursePredictorRepetition: number;\n    predictors: ICoursePredictor;\n}\n\ninterface ICoursePredictor {\n    [timestamp: number]: regression.Result;\n}\n\ninterface IETFCoursePredictors {\n    [etfIdentifier: string]: ICoursePredictors;\n}\n\ninterface IETFDividendPredictors {\n    [etfIdentifier: string]: IDividendPredictors;\n}\n\ninterface IHistoricData {\n    [etfIdentifier: string]: IHistoricDataOfETF;\n}\n\ninterface IHistoricDataOfETF {\n    courseForecastArray: DataPoint[];\n    dividendForecastArray: DataPoint[];\n    history: IHistoricEntry[];\n}\n\ninterface IETFProperty {\n    identifier: string;\n    symbol: string;\n    label: string;\n    percentage: number;\n    selected: boolean;\n}\n\ninterface IETFProperties {\n    [etfIdentifier: string]: IETFProperty;\n}\n\n/**\n * Singleton class that provided course and dividend forecasting of ETFs.\n * It uses [Alphavantage](https://www.alphavantage.co/) to load historic data which\n * are used by a linear regression model for forecasting.\n * The father the forecast day is in the future the more historic data is used to fit the linear regression.\n * The historic data needs to be loaded before a forecast can be done.\n * Dividends are accumulated and predicted per year.\n *\n * Example Code:\n * ```typescript\n * await ForecastModelSingleton.loadHistoricData(apiKey, etfProperties);\n * const instance = ForecastModelSingleton.getInstance();\n * const predictedCourse = instance.predictCourse(etfIdentifier, futureDate);\n * const predictedDividend = instance.predictCourse(etfIdentifier, futureYear);\n * ```\n */\nexport class ForecastModelSingleton {\n    private static instance: null | ForecastModelSingleton = null;\n    private static apiKey: string = '';\n    private static backCastTimestampConstant: number = 7;\n    private static backCastTimeFactor: number = 2;\n\n    private historicalData: IHistoricData = {};\n    private coursePredictors: IETFCoursePredictors = {};\n    private dividendPredictors: IETFDividendPredictors = {};\n\n    private constructor() {}\n\n    /**\n     * Configures the forecasting by setting the concerning values and resetting the present predictors.\n     *\n     * @param apiKey The [Alphavantage](https://www.alphavantage.co/) API Key.\n     * @param backCastTimeFactor Linear forecast factor. The number of dates used for prediction is increase linear towards this factor.\n     * @param backCastTimeConstant Constant forecast Offset. Constantly increases the number of dates used for prediction.\n     */\n    static configure(apiKey: string, backCastTimeFactor = 2, backCastTimeConstant = 7): void {\n        ForecastModelSingleton.apiKey = apiKey;\n        ForecastModelSingleton.backCastTimeFactor = backCastTimeFactor;\n\n        const backCastTimeDate = new Date(0);\n        backCastTimeDate.setMonth(backCastTimeConstant);\n        ForecastModelSingleton.backCastTimestampConstant = dateToTimestamp(backCastTimeDate);\n\n        // reset predictors if present.\n        if (ForecastModelSingleton.instance != null) {\n            const instance = ForecastModelSingleton.getInstance();\n            for (const etfIdentifier in instance.coursePredictors) {\n                instance.coursePredictors[\n                    etfIdentifier\n                ].maxTimestampBeforeCoursePredictorRepetition = ForecastModelSingleton._calculateTimestampForPredictorRepetition(\n                    instance.historicalData[etfIdentifier].courseForecastArray\n                );\n            }\n            for (const etfIdentifier in instance.dividendPredictors) {\n                instance.dividendPredictors[\n                    etfIdentifier\n                ].maxYearBeforeDividendPredictorRepetition = ForecastModelSingleton._calculateTimestampForPredictorRepetition(\n                    instance.historicalData[etfIdentifier].dividendForecastArray\n                );\n            }\n        }\n    }\n\n    /**\n     * Configures the Forecasting with the api key and default forecast values.\n     * Loads the historic data from all ETFs in the etfProperties.\n     *\n     * @param apiKey The [Alphavantage](https://www.alphavantage.co/) API Key.\n     * @param etfProperties The etfProperties.\n     */\n    static async loadHistoricData(apiKey: string, etfProperties: IETFProperties): Promise<void> {\n        ForecastModelSingleton.configure(apiKey);\n        const forecast = ForecastModelSingleton.getInstance();\n        for (const etfIdentifier in etfProperties) {\n            await forecast._loadAndCacheHistoricalETFData(etfProperties[etfIdentifier].symbol);\n        }\n        console.log('Finished loading the historic data.');\n    }\n\n    /**\n     * Returns the Singleton instance of this class.\n     *\n     * @returns The singleton instance.\n     */\n    static getInstance(): ForecastModelSingleton {\n        if (ForecastModelSingleton.instance == null) {\n            ForecastModelSingleton.instance = new ForecastModelSingleton();\n        }\n        return ForecastModelSingleton.instance;\n    }\n\n    /**\n     * Calculates the timestamp at which point all predictors are the same since they use all data points.\n     *\n     * @param forecastArray The concerning forecast array.\n     * @returns The timestamp where the repetition starts.\n     */\n    private static _calculateTimestampForPredictorRepetition(forecastArray: DataPoint[]): number {\n        const firstTimestamp = forecastArray[0][timestampIndexOfForecastArray];\n        const lastTimestamp = forecastArray[forecastArray.length - 1][timestampIndexOfForecastArray];\n        return lastTimestamp + (lastTimestamp - firstTimestamp) / ForecastModelSingleton.backCastTimeFactor;\n    }\n\n    /**\n     * Loads the historic data for the provided etfIdentifier and sets up the predictors.\n     *\n     * @param etfIdentifier The concerning ETFIdentifier.\n     * @returns -\n     */\n    private async _loadAndCacheHistoricalETFData(etfIdentifier: string): Promise<void> {\n        if (etfIdentifier in this.historicalData) {\n            return;\n        }\n        const historicalData = await loadHistoricalETFData(etfIdentifier, ForecastModelSingleton.apiKey);\n\n        const courseForecastArray = etfHistoricalToCourseForecastArray(historicalData);\n        const maxTimestampBeforeCoursePredictorRepetition = ForecastModelSingleton._calculateTimestampForPredictorRepetition(\n            courseForecastArray\n        );\n\n        const dividendForecastArray = etfHistoricalToDividendForecastArray(historicalData);\n        const maxYearBeforeDividendPredictorRepetition = ForecastModelSingleton._calculateTimestampForPredictorRepetition(\n            dividendForecastArray\n        );\n\n        this.historicalData[etfIdentifier] = {\n            history: historicalData,\n            courseForecastArray: courseForecastArray,\n            dividendForecastArray: dividendForecastArray,\n        };\n        this.coursePredictors[etfIdentifier] = {\n            maxTimestampBeforeCoursePredictorRepetition: maxTimestampBeforeCoursePredictorRepetition,\n            predictors: {},\n        };\n        this.dividendPredictors[etfIdentifier] = {\n            maxYearBeforeDividendPredictorRepetition: maxYearBeforeDividendPredictorRepetition,\n            predictors: {},\n        };\n    }\n\n    /**\n     * Creates the course predictor for the etfIdentifier and the given timestamp if not already present.\n     *\n     * @param etfIdentifier The concerning etfIdentifier.\n     * @param timestamp The concerning timestamp.\n     * @returns\n     */\n    private _createCoursePredictorIfNotPresent(etfIdentifier: string, timestamp: number) {\n        // Skip if already exists.\n        if (timestamp in this.coursePredictors[etfIdentifier]) {\n            return;\n        }\n        const forecastArray = this.historicalData[etfIdentifier].courseForecastArray;\n        const lastTimestampToIncludeInPrediction =\n            forecastArray[forecastArray.length - 1][timestampIndexOfForecastArray] -\n            Math.abs(forecastArray[forecastArray.length - 1][timestampIndexOfForecastArray] - timestamp) *\n                ForecastModelSingleton.backCastTimeFactor -\n            ForecastModelSingleton.backCastTimestampConstant;\n        const filteredForecastArray = forecastArray.filter(\n            entry => entry[timestampIndexOfForecastArray] >= lastTimestampToIncludeInPrediction\n        );\n        this.coursePredictors[etfIdentifier].predictors[timestamp] = regression.linear(filteredForecastArray, {\n            order: 2,\n            precision: 20,\n        });\n    }\n\n    /**\n     * Calculates the timestamp of the given date and the timestamp that should be used for the predictor.\n     * That means that the predictor timestamp is clamped to the timestamp where the predictor already uses all data points.\n     *\n     * @param date The concerning Date.\n     * @param etfIdentifier The concerning etfIdentifier.\n     * @returns The predictor timestamp and date timestamp.\n     */\n    private _courseDateToPredictorTimestampAndDateTimestamp(date: Date, etfIdentifier: string): [number, number] {\n        const timestamp = dateToTimestamp(date);\n        return [\n            timestamp > this.coursePredictors[etfIdentifier].maxTimestampBeforeCoursePredictorRepetition\n                ? this.coursePredictors[etfIdentifier].maxTimestampBeforeCoursePredictorRepetition\n                : timestamp,\n            timestamp,\n        ];\n    }\n\n    /**\n     * Creates the dividend predictor for the given etf and the year.\n     *\n     * @param etfIdentifier The concerning etfIdentifier.\n     * @param year The concerning year.\n     */\n    private _createDividendPredictorIfNotPresent(etfIdentifier: string, year: number): void {\n        // Skip if already exists.\n        if (year in this.dividendPredictors[etfIdentifier]) {\n            return;\n        }\n        const forecastArray = this.historicalData[etfIdentifier].dividendForecastArray;\n        const lastYearToIncludeInPrediction =\n            forecastArray[forecastArray.length - 1][timestampIndexOfForecastArray] -\n            Math.abs(forecastArray[forecastArray.length - 1][timestampIndexOfForecastArray] - year) *\n                ForecastModelSingleton.backCastTimeFactor -\n            ForecastModelSingleton.backCastTimestampConstant;\n        const filteredForecastArray = forecastArray.filter(\n            entry => entry[timestampIndexOfForecastArray] >= lastYearToIncludeInPrediction\n        );\n        this.dividendPredictors[etfIdentifier].predictors[year] = regression.linear(filteredForecastArray, {\n            order: 2,\n            precision: 20,\n        });\n    }\n\n    /**\n     * Clamps the given year to the year when all predictors would be the same\n     *  since all historic data of the given etf is already used.\n     *\n     * @param etfIdentifier The concerning etfIdentifier.\n     * @param year The concerning year.\n     * @returns The adjusted year.\n     */\n    private _dividendYearToPredictorYear(etfIdentifier: string, year: number): number {\n        return this.dividendPredictors[etfIdentifier].maxYearBeforeDividendPredictorRepetition < year\n            ? this.dividendPredictors[etfIdentifier].maxYearBeforeDividendPredictorRepetition\n            : year;\n    }\n\n    /**\n     * Predicts the course of the given ETF at the given date.\n     *\n     * @param etfIdentifier The concerning etfIdentifier\n     * @param date The concerning date.\n     * @returns The predicted course of the etf.\n     */\n    predictCourse(etfIdentifier: string, date: Date) {\n        if (!(etfIdentifier in this.coursePredictors)) {\n            throw generateHistoricalDataNotPresentException(etfIdentifier);\n        }\n        const [predictorTimestamp, timestamp] = this._courseDateToPredictorTimestampAndDateTimestamp(\n            date,\n            etfIdentifier\n        );\n        this._createCoursePredictorIfNotPresent(etfIdentifier, predictorTimestamp);\n        return this.coursePredictors[etfIdentifier].predictors[predictorTimestamp].predict(timestamp)[\n            courseIndexOfForecastArray\n        ];\n    }\n\n    /**\n     * Predicts the dividend amount of the given ETF at the given year.\n     *\n     * @param etfIdentifier The concerning etfIdentifier\n     * @param year The concerning year.\n     * @returns The predicted dividend amount of the etf.\n     */\n    predictDividend(etfIdentifier: string, year: number) {\n        if (!(etfIdentifier in this.dividendPredictors)) {\n            throw generateHistoricalDataNotPresentException(etfIdentifier);\n        }\n        const predictorYear = this._dividendYearToPredictorYear(etfIdentifier, year);\n        this._createDividendPredictorIfNotPresent(etfIdentifier, predictorYear);\n        return Math.max(\n            0,\n            this.dividendPredictors[etfIdentifier].predictors[predictorYear].predict(year)[courseIndexOfForecastArray]\n        );\n    }\n}\n","import { ForecastModelSingleton } from './ForecastModel';\nimport {\n    numberOfMonthsOfAYear,\n    isLastMonthOfAYear,\n    clamp,\n    isFirstMonthOfAYear,\n    percentageToFloatValue,\n} from '../helpers/utils';\nimport cloneDeep from 'lodash.clonedeep';\n\nimport { ICostConfiguration, IConfigOptions } from '../components/Visualization';\n\nexport type ETFIdentifier = 'SP5C.PAR' | 'ESGE' | 'SUSA';\n\ntype IETFShares = { [key in ETFIdentifier]: number };\n\nexport type ETFRatio = { [key in ETFIdentifier]?: number };\n\ntype ETFPrizes = IETFShares;\n\ntype ETFMoney = IETFShares;\n\nexport type NegativeInvestmentStepIdentifier = 'totalCosts' | 'totalTaxes' | 'inflation';\n\nexport interface InvestmentStep {\n    date: Date;\n    newShares: IETFShares;\n    totalShares: IETFShares;\n    dividendNewShares: IETFShares;\n    dividendTotalShares: IETFShares;\n    totalCosts: number;\n    sharePrizes: ETFPrizes;\n    totalInvestedMoney: ETFMoney;\n    newInvestedMoney: ETFMoney;\n    newInvestment: number;\n    totalTaxes: number;\n    totalPayout: ETFMoney;\n    newPayout: ETFMoney;\n    inflation: number;\n}\n\ntype IPayoutStats = { [key in ETFIdentifier]: IPayoutStat };\n\ninterface IPayoutStat {\n    investmentStepsIdx: number;\n    alreadySoldShares: number;\n}\n\nconst basicRateOfInterest = 0.007;\nconst partialExemption = 0.7;\nconst corporateTaxRatio = 0.26375;\nconst inflationRate = 0.01;\nconst defaultDividendAmount = 0.025;\n\n/**\n * Calculates the currency value of all shares of the etf for the given investment step.\n *\n * @param etfIdentifier The concerning etfIdentifier.\n * @param investmentStep The concerning InvestmentStep.\n * @returns The currency value of the total shares of the specified etf.\n */\nexport function getTotalShareValue(etfIdentifier: ETFIdentifier, investmentStep: InvestmentStep): number {\n    return investmentStep.totalShares[etfIdentifier] * investmentStep.sharePrizes[etfIdentifier];\n}\n\n/**\n * Calculates the currency value of all shares generated by dividends of the etf for the given investment step.\n *\n * @param etfIdentifier The concerning etfIdentifier.\n * @param investmentStep The concerning InvestmentStep.\n * @returns The currency value of the total shares generated by dividends. of the specified etf.\n */\nexport function getTotalDividendShareValue(etfIdentifier: ETFIdentifier, investmentStep: InvestmentStep): number {\n    return investmentStep.dividendTotalShares[etfIdentifier] * investmentStep.sharePrizes[etfIdentifier];\n}\n\n/**\n * Calculates the currency value of new shares of the etf for the given investment step.\n *\n * @param etfIdentifier The concerning etfIdentifier.\n * @param investmentStep The concerning InvestmentStep.\n * @returns The currency value of the new shares of the specified etf.\n */\nfunction getNewShareValue(etfIdentifier: ETFIdentifier, investmentStep: InvestmentStep): number {\n    return investmentStep.newShares[etfIdentifier] * investmentStep.sharePrizes[etfIdentifier];\n}\n\n/**\n * Creates a new date which is the given date + 1 month.\n *\n * @param date The concerning date.\n * @returns The given date increased by one month.\n */\nfunction getNextMonthDate(date: Date): Date {\n    const newDate = new Date(date);\n    newDate.setMonth(date.getMonth() + 1);\n    return newDate;\n}\n\n/**\n * Predicts the dividend for the etf at the given date.\n * If the date is not the last month of a year, zero is returned. Indicating that no divided payout has been done.\n * If the dividend prediction is 0 since all historic data is 0, then the defaultDividendAmount is used.\n *\n * @param etfIdentifier The concerning etfIdentifier.\n * @param date The concerning date.\n * @returns The predicted dividend for the given etf and date.\n */\nfunction calculateDividend(etfIdentifier: string, date: Date): number {\n    if (!isLastMonthOfAYear(date)) {\n        return 0;\n    } else {\n        const dividendAmount = ForecastModelSingleton.getInstance().predictDividend(etfIdentifier, date.getFullYear());\n        const sharePrize = ForecastModelSingleton.getInstance().predictCourse(etfIdentifier, date);\n        return dividendAmount > 0 ? dividendAmount : defaultDividendAmount * sharePrize;\n    }\n}\n\n/**\n * Calculates the cost for the given money amount regarding the cost configuration.\n *\n * @param amount The amount of money to which the costs need to be applied.\n * @param costConfiguration The cost configuration consisting of fixed and percentage costs.\n * @returns The amount minus the costs and the costs itself.\n */\nfunction calculateCosts(amount: number, costConfiguration: ICostConfiguration): [number, number] {\n    let costs = amount * costConfiguration.percentageCosts + costConfiguration.fixedCosts;\n    const amountWithoutCosts = Math.max(amount - costs, 0);\n    costs = amount - amountWithoutCosts;\n    return [amountWithoutCosts, costs];\n}\n\n/**\n * Subtracts the tax free amount from the tax amount and\n * returns the resulting leftover taxes and tax free amount.\n *\n * @param taxAmount The amount of taxes that need to be paid.\n * @param taxFreeAmount The tax free amount that is left and can be used.\n * @returns The leftover taxes and tax free amount.\n */\nfunction subtractTaxFreeGain(taxAmount: number, taxFreeAmount: number): [number, number] {\n    const leftoverTaxes = Math.max(0, taxAmount - taxFreeAmount);\n    const leftoverTaxFreeAmount = Math.max(0, taxFreeAmount - taxAmount);\n    return [leftoverTaxes, leftoverTaxFreeAmount];\n}\n\nfunction sumOfTotalValues(investmentStep: InvestmentStep): number {\n    let sum = 0;\n    for (const etfIdentifier of Object.keys(investmentStep.totalShares) as ETFIdentifier[]) {\n        sum += getTotalShareValue(etfIdentifier, investmentStep);\n    }\n    return sum;\n}\n\n/**\n * Calculates and adds the amount of effective money loss caused by inflation\n * between the initialDate and the date of the investment step.\n *\n * @param investmentStep The concerning investmentStep.\n * @param initialDate The initial date of the whole investment model.\n */\nfunction calculateAndAddInflation(investmentStep: InvestmentStep, initialDate: Date): void {\n    const sumTotalValues = sumOfTotalValues(investmentStep);\n    const date = investmentStep.date;\n    const timeFactor =\n        date.getFullYear() -\n        initialDate.getFullYear() +\n        (date.getMonth() - initialDate.getMonth()) / numberOfMonthsOfAYear;\n    investmentStep.inflation = sumTotalValues - sumTotalValues * Math.pow(1 - inflationRate, timeFactor);\n}\n\n/**\n * Calculates the amount increase in a accumulative fashion for every passed year.\n *\n * @param amount The initial amount.\n * @param percentageIncrease The percentage increase of the amount per year.\n * @param numberOfMonths The number of months passed since the investment model start.\n * @returns The amount increased by the percentage for every passed year in an accumulative way.\n */\nfunction calculateAmountIncrease(amount: number, percentageIncrease: number, numberOfMonths: number): number {\n    const yearsSinceStart = Math.floor(numberOfMonths / numberOfMonthsOfAYear);\n    return amount * Math.pow(1 + percentageIncrease, yearsSinceStart);\n}\n\n/**\n * Calculates the forecast interval of the model and all necessary dates.\n * Divides the interval in saving and payout phase. Adds the fade out years\n * to the life expectation to indicate that death is expected in that phase.\n *\n * @param age The age of the person.\n * @param lifeExpectation The life expectation of the person.\n * @param savingPhaseLength The saving phase length of the person.\n * @param fadeOutYears The length of the fade out years.\n * @returns The three dates indicating the start of the saving phase, the start of the payout phase and the end of the payout phase.\n */\nfunction calculateForecastInterval(\n    age: number,\n    lifeExpectation: number,\n    savingPhaseLength: number,\n    fadeOutYears: number = 10\n): [Date, Date, Date] {\n    const yearsLeft = lifeExpectation - age;\n    const now = new Date();\n    const beginningDate = new Date(now.getFullYear(), now.getMonth() + 1);\n    // start next month.\n    const endSavingPhaseDate = new Date(beginningDate);\n    endSavingPhaseDate.setFullYear(beginningDate.getFullYear() + savingPhaseLength);\n    const endDate = new Date(beginningDate);\n    endDate.setFullYear(beginningDate.getFullYear() + yearsLeft + fadeOutYears);\n    return [beginningDate, endSavingPhaseDate, endDate];\n}\n\n/**\n * Calculates the Vorabpauschale for the last year. Thus is zero if the month is not January.\n *\n * @param investmentSteps All investmentSteps already calculated for the model.\n * @param date The date of the concerning investment step.\n * @param leftoverTaxFreeAmount The leftover tax free amount.\n * @param etfToRatio The etfIdentifier mapping to the ratio.\n * @returns The amount of taxes to pay and the leftover tax free amount.\n */\nfunction calculateVorabpauschaleTaxes(\n    investmentSteps: InvestmentStep[],\n    date: Date,\n    leftoverTaxFreeAmount: number,\n    etfToRatio: ETFRatio\n): [number, number] {\n    if (!isFirstMonthOfAYear(date) || investmentSteps.length < 2) {\n        return [0, leftoverTaxFreeAmount];\n    }\n    let summedTaxes = 0;\n    const decemberInvestmentStep = investmentSteps[investmentSteps.length - 1];\n    // Use the second investment step if there are not enough meaning the investing started this year after january.\n    // The second is the true first investment step the first is a dummy.\n    const firstInvestmentStepOfThisYear =\n        investmentSteps.length - numberOfMonthsOfAYear > 1\n            ? investmentSteps[investmentSteps.length - numberOfMonthsOfAYear]\n            : investmentSteps[1];\n    for (const etfIdentifier of Object.keys(etfToRatio) as ETFIdentifier[]) {\n        // Sum up total Investment of the first date of this year.\n        let accumulatedBasicProfit =\n            (getTotalShareValue(etfIdentifier, firstInvestmentStepOfThisYear) *\n                (numberOfMonthsOfAYear - firstInvestmentStepOfThisYear.date.getMonth())) /\n            numberOfMonthsOfAYear;\n        // Sum up all new investments from february to december.\n        for (let i = 1; i < numberOfMonthsOfAYear && investmentSteps.length - i > 0; i++) {\n            const currentInvestmentStep = investmentSteps[investmentSteps.length - i];\n            accumulatedBasicProfit +=\n                (getNewShareValue(etfIdentifier, currentInvestmentStep) * i) / numberOfMonthsOfAYear;\n        }\n        accumulatedBasicProfit *= 0.7 * basicRateOfInterest;\n        const currentShareValues = getTotalShareValue(etfIdentifier, decemberInvestmentStep);\n        // Calculate profit of last year.\n        const profitOverAllTime = currentShareValues - decemberInvestmentStep.totalInvestedMoney[etfIdentifier];\n        let profitOfPreviousYears = 0;\n        if (investmentSteps.length > numberOfMonthsOfAYear) {\n            profitOfPreviousYears = Math.max(\n                0,\n                getTotalShareValue(etfIdentifier, investmentSteps[investmentSteps.length - 1 - numberOfMonthsOfAYear]) -\n                    investmentSteps[investmentSteps.length - 1 - numberOfMonthsOfAYear].totalInvestedMoney[\n                        etfIdentifier\n                    ]\n            );\n        }\n\n        const profitOfThisYear = profitOverAllTime - profitOfPreviousYears;\n        let amountToApplyTaxes = clamp(profitOfThisYear, 0, accumulatedBasicProfit);\n        [amountToApplyTaxes, leftoverTaxFreeAmount] = subtractTaxFreeGain(amountToApplyTaxes, leftoverTaxFreeAmount);\n        summedTaxes += amountToApplyTaxes * partialExemption * corporateTaxRatio;\n    }\n    return [summedTaxes, leftoverTaxFreeAmount];\n}\n\n/**\n * Adds an accumulating month to the investment model.\n *\n * @param investmentSteps The whole investment model.\n * @param investment The amount of money to invest this month.\n * @param date The date of the new investment step.\n * @param initialDate The initial date of the investment model.\n * @param etfToRatio The etfIdentifier mapping to the ratio.\n * @param configOptions The configuration options containing the tax free amount and cost configuration.\n */\nfunction addAccumulationMonth(\n    investmentSteps: InvestmentStep[],\n    investment: number,\n    date: Date,\n    initialDate: Date,\n    etfToRatio: ETFRatio,\n    configOptions: IConfigOptions\n): void {\n    const forecast = ForecastModelSingleton.getInstance();\n    let costs = 0;\n    const prevInvestmentStep = investmentSteps[investmentSteps.length - 1];\n    const newInvestmentStep: InvestmentStep = {\n        date: date,\n        newShares: { ...prevInvestmentStep.newShares },\n        totalShares: { ...prevInvestmentStep.totalShares },\n        dividendNewShares: { ...prevInvestmentStep.dividendNewShares },\n        dividendTotalShares: { ...prevInvestmentStep.dividendTotalShares },\n        totalCosts: prevInvestmentStep.totalCosts,\n        sharePrizes: { ...prevInvestmentStep.sharePrizes },\n        totalInvestedMoney: { ...prevInvestmentStep.totalInvestedMoney },\n        newInvestedMoney: { ...prevInvestmentStep.newInvestedMoney },\n        newInvestment: 0,\n        totalTaxes: prevInvestmentStep.totalTaxes,\n        totalPayout: { ...prevInvestmentStep.totalPayout },\n        newPayout: { ...prevInvestmentStep.newPayout },\n        inflation: 0,\n    };\n    for (const etfIdentifier of Object.keys(etfToRatio) as ETFIdentifier[]) {\n        // Handle investment amount and costs.\n        const investmentOfEtfWithCosts = (etfToRatio[etfIdentifier] as number) * investment;\n        newInvestmentStep.newInvestment += investmentOfEtfWithCosts;\n        const [investmentOfEtfWithoutCosts, newCosts] = calculateCosts(\n            investmentOfEtfWithCosts,\n            configOptions.costConfig\n        );\n        costs += newCosts;\n        newInvestmentStep.newInvestedMoney[etfIdentifier] = investmentOfEtfWithoutCosts;\n        newInvestmentStep.totalInvestedMoney[etfIdentifier] += investmentOfEtfWithoutCosts;\n\n        // Handle new shares and prize.\n        const etfSharePrize = forecast.predictCourse(etfIdentifier, date);\n        const newShares = investmentOfEtfWithoutCosts / etfSharePrize;\n        newInvestmentStep.sharePrizes[etfIdentifier] = etfSharePrize;\n        newInvestmentStep.newShares[etfIdentifier] = newShares;\n\n        // Handle dividend.\n        const dividendPayoutMoneyPerShare = calculateDividend(etfIdentifier, date);\n        const dividendPayoutMoney = newInvestmentStep.totalShares[etfIdentifier] * dividendPayoutMoneyPerShare;\n        const newSharesByDividend = dividendPayoutMoney / etfSharePrize;\n        newInvestmentStep.newShares[etfIdentifier] += newSharesByDividend;\n        newInvestmentStep.dividendNewShares[etfIdentifier] = newSharesByDividend;\n        newInvestmentStep.dividendTotalShares[etfIdentifier] += newSharesByDividend;\n\n        // Adjust other values.\n        newInvestmentStep.totalShares[etfIdentifier] += newInvestmentStep.newShares[etfIdentifier];\n        newInvestmentStep.newPayout[etfIdentifier] = 0;\n    }\n\n    // Handle costs, taxes and inflation.\n    newInvestmentStep.totalCosts += costs;\n    const [newTaxes, _] = calculateVorabpauschaleTaxes(investmentSteps, date, configOptions.taxFreeAmount, etfToRatio);\n    newInvestmentStep.totalTaxes += newTaxes;\n    calculateAndAddInflation(newInvestmentStep, initialDate);\n    investmentSteps.push(newInvestmentStep);\n}\n\n/**\n * Adds a payout month step to the investment model.\n *\n * @param investmentSteps The whole investment model.\n * @param sellingAmount The money amount of shares to sell this month.\n * @param etfToRatio The etfIdentifier mapping to the ratio.\n * @param date The date of the new payout step.\n * @param initialDate The initial date of the investment model.\n * @param configOptions The configuration options containing the tax free amount and cost configuration.\n * @param leftoverAlreadyPaidTaxes The leftover amount of taxes that have already been paid.\n * @param leftoverTaxFreeAmount The leftover tax free amount.\n * @param payoutStats The payout stats containing which investment step is next and what shares are left according to the FIFO principle.\n * @returns The updated leftoverAlreadyPaidTaxes and leftoverTaxFreeAmount.\n */\nfunction addPayoutMonth(\n    investmentSteps: InvestmentStep[],\n    sellingAmount: number,\n    etfToRatio: ETFRatio,\n    date: Date,\n    initialDate: Date,\n    configOptions: IConfigOptions,\n    leftoverAlreadyPaidTaxes: number,\n    leftoverTaxFreeAmount: number,\n    payoutStats: IPayoutStats\n) {\n    if (isFirstMonthOfAYear(date)) {\n        leftoverTaxFreeAmount = configOptions.taxFreeAmount;\n    }\n    const forecast = ForecastModelSingleton.getInstance();\n    let costs = 0;\n    let taxes = 0;\n    const prevInvestmentStep = investmentSteps[investmentSteps.length - 1];\n    const newInvestmentStep: InvestmentStep = {\n        date: date,\n        newShares: { ...prevInvestmentStep.newShares },\n        totalShares: { ...prevInvestmentStep.totalShares },\n        dividendNewShares: { ...prevInvestmentStep.dividendNewShares },\n        dividendTotalShares: { ...prevInvestmentStep.dividendTotalShares },\n        totalCosts: prevInvestmentStep.totalCosts,\n        sharePrizes: { ...prevInvestmentStep.sharePrizes },\n        totalInvestedMoney: { ...prevInvestmentStep.totalInvestedMoney },\n        newInvestedMoney: { ...prevInvestmentStep.newInvestedMoney },\n        newInvestment: 0,\n        totalTaxes: prevInvestmentStep.totalTaxes,\n        totalPayout: { ...prevInvestmentStep.totalPayout },\n        newPayout: { ...prevInvestmentStep.newPayout },\n        inflation: 0,\n    };\n    for (const etfIdentifier of Object.keys(etfToRatio) as ETFIdentifier[]) {\n        const etfSharePrize = forecast.predictCourse(etfIdentifier, date);\n        // Set default values.\n        newInvestmentStep.sharePrizes[etfIdentifier] = etfSharePrize;\n        newInvestmentStep.newPayout[etfIdentifier] = 0;\n        newInvestmentStep.newInvestedMoney[etfIdentifier] = 0;\n        // Skip payout if there are no shares left to sell.\n        if (payoutStats[etfIdentifier].investmentStepsIdx < investmentSteps.length) {\n            // Prepare amount and costs.\n            const amountToSell = (etfToRatio[etfIdentifier] as number) * sellingAmount;\n            let amountAlreadySold = 0;\n            const costsToPay = calculateCosts(amountToSell, configOptions.costConfig)[1];\n            let alreadyPaidCosts = 0;\n            let payoutInvestmentStepIdxForFIFO = payoutStats[etfIdentifier].investmentStepsIdx;\n            let currentSharesLeft =\n                investmentSteps[payoutInvestmentStepIdxForFIFO].newShares[etfIdentifier] -\n                payoutStats[etfIdentifier].alreadySoldShares;\n            // Iterate over all investment steps according to the FIFO principle and sell as much shares as needed.\n            for (; payoutInvestmentStepIdxForFIFO < investmentSteps.length; payoutInvestmentStepIdxForFIFO++) {\n                const currentInvestmentStepForFIFO = investmentSteps[payoutInvestmentStepIdxForFIFO];\n                const leftoverAmountToSell = amountToSell - amountAlreadySold;\n\n                // Calculate the amount of shares to sell and the leftover shares.\n                const currentValueOfShares =\n                    etfSharePrize *\n                    (payoutInvestmentStepIdxForFIFO === payoutStats[etfIdentifier].investmentStepsIdx\n                        ? currentInvestmentStepForFIFO.newShares[etfIdentifier] -\n                          payoutStats[etfIdentifier].alreadySoldShares\n                        : currentInvestmentStepForFIFO.newShares[etfIdentifier]);\n                const amountToSellWithCosts = Math.min(currentValueOfShares, leftoverAmountToSell);\n                const amountOfSharesToSell = amountToSellWithCosts / etfSharePrize;\n                currentSharesLeft = currentInvestmentStepForFIFO.newShares[etfIdentifier] - amountOfSharesToSell;\n                currentSharesLeft -=\n                    payoutInvestmentStepIdxForFIFO === payoutStats[etfIdentifier].investmentStepsIdx\n                        ? payoutStats[etfIdentifier].alreadySoldShares\n                        : 0;\n\n                // Apply costs to the sold shares.\n                const amountToSellWithoutCosts = Math.max(0, amountToSellWithCosts - (costsToPay - alreadyPaidCosts));\n                alreadyPaidCosts += Math.max(0, amountToSellWithCosts - amountToSellWithoutCosts);\n\n                // Calculate amount on which taxes need to be paid.\n                const initialValueOfShares =\n                    amountOfSharesToSell * currentInvestmentStepForFIFO.sharePrizes[etfIdentifier];\n                let amountToPayTaxes = Math.max(0, amountToSellWithoutCosts - initialValueOfShares);\n\n                // Apply taxes.\n                [amountToPayTaxes, leftoverTaxFreeAmount] = subtractTaxFreeGain(\n                    amountToPayTaxes,\n                    leftoverTaxFreeAmount\n                );\n                let taxesToPay = amountToPayTaxes * partialExemption * corporateTaxRatio;\n                [taxesToPay, leftoverAlreadyPaidTaxes] = subtractTaxFreeGain(taxesToPay, leftoverAlreadyPaidTaxes);\n                taxes += taxesToPay;\n                const payoutAmount = amountToSellWithoutCosts - taxesToPay;\n\n                // Set resulting values.\n                newInvestmentStep.newPayout[etfIdentifier] += payoutAmount;\n                newInvestmentStep.totalPayout[etfIdentifier] += payoutAmount;\n\n                newInvestmentStep.totalShares[etfIdentifier] -= amountOfSharesToSell;\n                amountAlreadySold += amountToSellWithCosts;\n\n                // Handle the decrease of the dividendShares.\n                let amountOfDividendSharesLeft = 0;\n                if (payoutInvestmentStepIdxForFIFO === payoutStats[etfIdentifier].investmentStepsIdx) {\n                    amountOfDividendSharesLeft = Math.max(\n                        0,\n                        currentInvestmentStepForFIFO.dividendNewShares[etfIdentifier] -\n                            payoutStats[etfIdentifier].alreadySoldShares\n                    );\n                } else {\n                    amountOfDividendSharesLeft = currentInvestmentStepForFIFO.dividendNewShares[etfIdentifier];\n                }\n                const amountOfDividendSharesSold = Math.min(amountOfDividendSharesLeft, amountOfSharesToSell);\n                newInvestmentStep.dividendTotalShares[etfIdentifier] -= amountOfDividendSharesSold;\n\n                // Use break in order to not change the value of payoutInvestmentStepIdxForFIFO.\n                if (amountAlreadySold >= amountToSell) {\n                    break;\n                }\n            }\n            // Handle update payoutStats.\n            costs += alreadyPaidCosts;\n            payoutStats[etfIdentifier].investmentStepsIdx = payoutInvestmentStepIdxForFIFO;\n            payoutStats[etfIdentifier].investmentStepsIdx += currentSharesLeft === 0 ? 1 : 0;\n\n            payoutStats[etfIdentifier].alreadySoldShares =\n                payoutInvestmentStepIdxForFIFO < investmentSteps.length\n                    ? investmentSteps[payoutInvestmentStepIdxForFIFO].newShares[etfIdentifier] - currentSharesLeft\n                    : 0;\n        }\n        // Handle dividend.\n        const dividendPayoutMoney =\n            newInvestmentStep.totalShares[etfIdentifier] * calculateDividend(etfIdentifier, date);\n        const newSharesByDividend = dividendPayoutMoney / etfSharePrize;\n        newInvestmentStep.newShares[etfIdentifier] = newSharesByDividend;\n        newInvestmentStep.totalShares[etfIdentifier] += newSharesByDividend;\n        newInvestmentStep.dividendNewShares[etfIdentifier] = newSharesByDividend;\n        newInvestmentStep.dividendTotalShares[etfIdentifier] += newSharesByDividend;\n\n        // Handle Vorabpauschale.\n        const [newTaxes, newLeftoverTaxFreeAmount] = calculateVorabpauschaleTaxes(\n            investmentSteps,\n            date,\n            leftoverTaxFreeAmount,\n            etfToRatio\n        );\n        leftoverTaxFreeAmount = newLeftoverTaxFreeAmount;\n        taxes += newTaxes;\n        leftoverAlreadyPaidTaxes += newTaxes;\n    }\n\n    // Set resulting values and inflation.\n    newInvestmentStep.totalCosts += costs;\n    newInvestmentStep.totalTaxes += taxes;\n    calculateAndAddInflation(newInvestmentStep, initialDate);\n    investmentSteps.push(newInvestmentStep);\n    return [leftoverAlreadyPaidTaxes, leftoverTaxFreeAmount];\n}\n\n/**\n * Creates a dummy investment step intended to be the first investment step in the model\n * in order to avoid if statements in the other investment methods checking whether this is the first step or not.\n *\n * @param etfToRatio The etfIdentifier mapping to the ratio.\n * @param date The starting date of the investment model.\n * @returns A dummy investment step.\n */\nfunction generateEmptyInvestmentStep(etfToRatio: ETFRatio, date: Date): InvestmentStep {\n    const forecast = ForecastModelSingleton.getInstance();\n    const dummyData: IETFShares = { 'SP5C.PAR': 0, ESGE: 0, SUSA: 0 };\n    const emptyInvestmentStep: InvestmentStep = {\n        date: date,\n        totalCosts: 0,\n        totalTaxes: 0,\n        newShares: { ...dummyData },\n        totalShares: { ...dummyData },\n        dividendNewShares: { ...dummyData },\n        dividendTotalShares: { ...dummyData },\n        totalInvestedMoney: { ...dummyData },\n        totalPayout: { ...dummyData },\n        newPayout: { ...dummyData },\n        sharePrizes: { ...dummyData },\n        newInvestedMoney: { ...dummyData },\n        newInvestment: 0,\n        inflation: 0,\n    };\n    for (const etfIdentifier of Object.keys(etfToRatio) as ETFIdentifier[]) {\n        emptyInvestmentStep.newShares[etfIdentifier] = 0;\n        emptyInvestmentStep.totalShares[etfIdentifier] = 0;\n        emptyInvestmentStep.dividendNewShares[etfIdentifier] = 0;\n        emptyInvestmentStep.dividendTotalShares[etfIdentifier] = 0;\n        emptyInvestmentStep.totalInvestedMoney[etfIdentifier] = 0;\n        emptyInvestmentStep.totalPayout[etfIdentifier] = 0;\n        emptyInvestmentStep.newPayout[etfIdentifier] = 0;\n        emptyInvestmentStep.newInvestedMoney[etfIdentifier] = 0;\n        emptyInvestmentStep.sharePrizes[etfIdentifier] = forecast.predictCourse(etfIdentifier, date);\n    }\n    return emptyInvestmentStep;\n}\n\n/**\n * Creates the investment model for the visualization which consists of arrays of an object\n *  which contain all important values for the visualization.\n * It can deliver the model with different levels of detail meaning that one step covers more than one month.\n *\n * Example code:\n * ```typescript\n * const investmentModel = new InvestmentModel(...uiParams);\n * // 2 => every investment step will cover 6 Months.\n * const dataVorTheVisualization = investmentModel.getInvestmentSteps(2);\n * ```\n */\nexport class InvestmentModel {\n    private startCapital: number;\n    private monthlyInvestment: number;\n    private yearlyInvestmentIncrease: number;\n    private monthlyPayout: number;\n    private yearlyPayoutIncrease: number;\n    private savingPhaseLength: number;\n    private etfToRatio: ETFRatio;\n    private configOptions: IConfigOptions;\n    private expectationOfLife: number;\n    private age: number;\n\n    private savingDates: Date[] = [];\n    private payoutDates: Date[] = [];\n    private initialDate: Date = new Date();\n    private investmentSteps: InvestmentStep[] = [];\n\n    /**\n     * Constructs and calculates the investment model.\n     *\n     * @param startCapital The starting capital.\n     * @param monthlyInvestment The monthly investment.\n     * @param yearlyInvestmentIncrease The yearly investment increase given as a percentage in float representation.\n     * @param monthlyPayout The monthly payout.\n     * @param yearlyPayoutIncrease The yearly payout increase given as a percentage in float representation.\n     * @param savingPhaseLength The length of the saving phase.\n     * @param etfToRatio The etfIdentifier mapping to the ratio.\n     * @param configOptions The config options containing the tax free amount and cost configuration.\n     * @param age The current age of the person.\n     * @param expectationOfLife The life expectation of the person.\n     */\n    constructor(\n        startCapital: number,\n        monthlyInvestment: number,\n        yearlyInvestmentIncrease: number,\n        monthlyPayout: number,\n        yearlyPayoutIncrease: number,\n        savingPhaseLength: number,\n        etfToRatio: ETFRatio,\n        configOptions: IConfigOptions,\n        age: number,\n        expectationOfLife: number\n    ) {\n        this.startCapital = startCapital;\n        this.monthlyInvestment = monthlyInvestment;\n        this.monthlyPayout = monthlyPayout;\n        this.savingPhaseLength = savingPhaseLength;\n        this.etfToRatio = etfToRatio;\n        this.configOptions = configOptions;\n        this.expectationOfLife = expectationOfLife;\n        this.age = age;\n        this.yearlyInvestmentIncrease = percentageToFloatValue(yearlyInvestmentIncrease);\n        this.yearlyPayoutIncrease = percentageToFloatValue(yearlyPayoutIncrease);\n\n        this._calculateDatesForModel();\n        this._calculateModel();\n    }\n\n    /**\n     * Calculates all necessary dates for the saving and payout phase.\n     */\n    private _calculateDatesForModel() {\n        const [startDate, endSavingPhaseDate, endDate] = calculateForecastInterval(\n            this.age,\n            this.expectationOfLife,\n            this.savingPhaseLength\n        );\n        const savingDates = [];\n        for (\n            let currentDate = startDate;\n            currentDate < endSavingPhaseDate;\n            currentDate = getNextMonthDate(currentDate)\n        ) {\n            savingDates.push(currentDate);\n        }\n        this.savingDates = savingDates;\n        const payoutDates = [];\n        for (let currentDate = endSavingPhaseDate; currentDate < endDate; currentDate = getNextMonthDate(currentDate)) {\n            payoutDates.push(currentDate);\n        }\n        this.payoutDates = payoutDates;\n        this.initialDate = startDate;\n    }\n\n    /**\n     * Calculates the investment model by first adding all investment and the payout dates.\n     */\n    private _calculateModel() {\n        let investmentSteps = [generateEmptyInvestmentStep(this.etfToRatio, this.savingDates[0])];\n        addAccumulationMonth(\n            investmentSteps,\n            this.monthlyInvestment + this.startCapital,\n            this.savingDates[0],\n            this.initialDate,\n            this.etfToRatio,\n            this.configOptions\n        );\n        for (let i = 1; i < this.savingDates.length; i++) {\n            const investmentAmount = calculateAmountIncrease(this.monthlyInvestment, this.yearlyInvestmentIncrease, i);\n            addAccumulationMonth(\n                investmentSteps,\n                investmentAmount,\n                this.savingDates[i],\n                this.initialDate,\n                this.etfToRatio,\n                this.configOptions\n            );\n        }\n        // Discard the empty investment step.\n        investmentSteps = investmentSteps.slice(1);\n\n        let leftoverAlreadyPaidTaxes = investmentSteps[investmentSteps.length - 1].totalTaxes;\n        let leftoverTaxFreeAmount = this.configOptions.taxFreeAmount;\n        const payoutStats: IPayoutStats = {\n            'SP5C.PAR': { investmentStepsIdx: 0, alreadySoldShares: 0 },\n            ESGE: { investmentStepsIdx: 0, alreadySoldShares: 0 },\n            SUSA: { investmentStepsIdx: 0, alreadySoldShares: 0 },\n        };\n        for (let i = 0; i < this.payoutDates.length; i++) {\n            const payoutAmount = calculateAmountIncrease(this.monthlyPayout, this.yearlyPayoutIncrease, i);\n            [leftoverAlreadyPaidTaxes, leftoverTaxFreeAmount] = addPayoutMonth(\n                investmentSteps,\n                payoutAmount,\n                this.etfToRatio,\n                this.payoutDates[i],\n                this.initialDate,\n                this.configOptions,\n                leftoverAlreadyPaidTaxes,\n                leftoverTaxFreeAmount,\n                payoutStats\n            );\n        }\n        this.investmentSteps = investmentSteps;\n    }\n\n    /**\n     * Returns the investment model with the given level of detail.\n     *\n     * numberOfEntriesPerYear = 1 will result in one investment Step per year and\n     * numberOfEntriesPerYear = 12 will change nothing on the model.\n     *\n     * NOTE: Only the newInvestment and newPayout values are adjusted when investment steps need to be merged\n     * since the current visualizations need no further adjustments.\n     *\n     * @param numberOfEntriesPerYear The number of investment steps per year.\n     * @returns\n     */\n    getInvestmentSteps(numberOfEntriesPerYear: number) {\n        if (!Number.isInteger(numberOfMonthsOfAYear / numberOfEntriesPerYear)) {\n            throw new Error(\n                `The numberOfEntriesPerYear need to be dividable by ${numberOfMonthsOfAYear} in order to make sense.`\n            );\n        }\n\n        if (numberOfEntriesPerYear === numberOfMonthsOfAYear) {\n            return this.investmentSteps;\n        }\n        const selectedInvestmentSteps = [];\n        const numberOfMonthsToMerge = numberOfMonthsOfAYear / numberOfEntriesPerYear;\n        for (let i = 0; i < this.investmentSteps.length; i += numberOfMonthsToMerge) {\n            // Take the start date of the period as the representation.\n            const adjustedInvestmentStep = cloneDeep(this.investmentSteps[i]);\n            for (let offset = 1; offset < numberOfMonthsToMerge; offset++) {\n                adjustedInvestmentStep.newInvestment += this.investmentSteps[i + offset].newInvestment;\n                for (const etfIdentifier of Object.keys(\n                    this.investmentSteps[i + offset].newPayout\n                ) as ETFIdentifier[]) {\n                    adjustedInvestmentStep.newPayout[etfIdentifier] += this.investmentSteps[i + offset].newPayout[\n                        etfIdentifier\n                    ];\n                }\n            }\n            selectedInvestmentSteps.push(adjustedInvestmentStep);\n        }\n        return selectedInvestmentSteps;\n    }\n\n    /**\n     * Returns the first payout date of the model.\n     * @returns The first payoutDate.\n     */\n    getPayoutPhaseBeginDate() {\n        return this.payoutDates[0];\n    }\n}\n","import * as d3 from 'd3';\nimport { roundDateToBeginningOfMonth, numberOfMonthsOfAYear } from '../helpers/utils';\nimport { InvestmentStep } from '../model/InvestmentModel';\n\ninterface ITextProperty {\n    text: string;\n    x: number;\n    y: number;\n    fontSize: number;\n    textAnchor: string;\n    fontWeight: string;\n    color: string;\n}\n\ninterface ITextProperties {\n    [textIdentifier: string]: ITextProperty;\n}\n\nexport interface DataArrayEntry {\n    yStart: number;\n    yEnd: number;\n    date: Date;\n    color: string;\n}\n\nexport type DataArray = DataArrayEntry[][];\n\nconst FIVE_MILLION = 5000000;\nconst ONE_THOUSAND = 1000;\nconst ONE_MILLION = 1000000;\nconst numberOfTicks = 7;\n\nexport function generateLabelWithValueText(name: string, value: string | undefined = undefined) {\n    return `${name.charAt(0).toUpperCase()}${name.slice(1)}: ${value == null ? '-' : value}`;\n}\n\nfunction calculateInvestmentStepIndexForDate(date: Date, investmentSteps: InvestmentStep[]) {\n    const firstDate = investmentSteps[0].date;\n    const secondDate = investmentSteps[1].date;\n    const numberOfMonthsSinceStartDate =\n        (date.getFullYear() - firstDate.getFullYear()) * numberOfMonthsOfAYear +\n        (date.getMonth() - firstDate.getMonth());\n    const numberOfMonthsPerInvestmentStep =\n        (secondDate.getFullYear() - firstDate.getFullYear()) * numberOfMonthsOfAYear +\n        (secondDate.getMonth() - firstDate.getMonth());\n\n    return Math.floor(numberOfMonthsSinceStartDate / numberOfMonthsPerInvestmentStep);\n}\n\nexport class D3ChartStrategy {\n    tooltipDate: Date;\n    yExtent: [number, number];\n\n    protected readonly lineStrokeWidth = 3;\n    protected readonly standardFontSize = 20;\n    protected readonly labelValueIdentifier = 'value';\n\n    protected investmentSteps: InvestmentStep[];\n    protected dateExtent: [Date, Date] = [new Date(), new Date()];\n    protected marginW: number;\n    protected marginH: number;\n    protected width: number;\n    protected height: number;\n    protected maxIndex = 0;\n    protected minIndex = 0;\n    protected yScale: d3.ScaleLinear<number, number, never> = d3.scaleLinear();\n    protected xScale: d3.ScaleTime<number, number, never> = d3.scaleTime();\n    protected dataArray: DataArray = [];\n    protected textProperties: ITextProperties = {};\n    protected payoutPhaseStartDate: Date;\n\n    protected svg: d3.Selection<SVGGElement, unknown, null, undefined>;\n\n    private static activeStrategies: D3ChartStrategy[] = [];\n\n    private readonly fadeOutGradientID = 'fadeOutGradient';\n\n    private faceOutYearsLength = 10;\n\n    private hoverLine: d3.Selection<SVGLineElement, unknown, null, undefined>;\n    private interaction: d3.Selection<SVGGElement, unknown, null, undefined>;\n    private textGroup: d3.Selection<SVGGElement, unknown, null, undefined>;\n\n    constructor(\n        investmentSteps: InvestmentStep[],\n        renderDivRef: HTMLDivElement,\n        payoutPhaseStartDate: Date,\n        svgID: string,\n        tooltipDate: Date | undefined,\n        yExtent: [number, number] | undefined,\n        width = 1100,\n        height = 300,\n        marginW = 200,\n        marginH = 40\n    ) {\n        if (this.constructor === D3ChartStrategy) {\n            throw new Error(\"Abstract classes can't be instantiated.\");\n        }\n        D3ChartStrategy.activeStrategies.push(this);\n        this.investmentSteps = investmentSteps;\n        this.payoutPhaseStartDate = payoutPhaseStartDate;\n        this.tooltipDate = tooltipDate != null ? tooltipDate : new Date(0);\n        this.yExtent = yExtent != null ? yExtent : [0, 0];\n\n        this.marginW = marginW;\n        this.marginH = marginH;\n        this.width = width;\n        this.height = height;\n\n        // Reset diagram by deletion.\n        renderDivRef.innerHTML = '';\n\n        this.svg = d3\n            .select(renderDivRef)\n            .append('svg')\n            .attr('id', svgID)\n            .attr('viewBox', `0 0 ${this.width + 2 * this.marginW} ${this.height + 2 * this.marginH}`)\n            .append('g')\n            .attr('transform', `translate(${[this.marginW / 2, this.marginH]})`);\n\n        // Set default values needed by typescript.\n        this.textGroup = this.svg;\n        this.interaction = this.svg;\n        this.hoverLine = this.svg.append('line');\n    }\n\n    static reset() {\n        D3ChartStrategy.activeStrategies = [];\n    }\n\n    private static _setInteractionDisplayForActiveDiagrams(displayOption: string) {\n        for (const activeDiagram of D3ChartStrategy.activeStrategies) {\n            activeDiagram.interaction.style('visibility', displayOption);\n        }\n    }\n\n    render() {\n        this._prepareData();\n        this._calculateExtents();\n        this._createScales();\n        this._drawContent();\n        this._drawFadeOut();\n        this._prepareText();\n        this._drawText();\n        this._drawAxis();\n        this._addInteraction();\n\n        if (this.tooltipDate >= this.dateExtent[0] && this.tooltipDate <= this.dateExtent[1]) {\n            this._updateAllDiagrams();\n        }\n    }\n\n    protected valueToDisplayText(value: number, hasToBePositive = false) {\n        const labelDivisionFactor =\n            Math.max(-this.yExtent[0], this.yExtent[1] as number) >= FIVE_MILLION ? ONE_MILLION : ONE_THOUSAND;\n        const numberIndicator = labelDivisionFactor === ONE_MILLION ? 'M' : 'K';\n        if (hasToBePositive) {\n            value = Math.abs(value);\n        }\n        return `${(value / labelDivisionFactor).toLocaleString(undefined, {\n            maximumFractionDigits: 2,\n        })}${numberIndicator} €`;\n    }\n\n    private _calculateExtents() {\n        this.dateExtent = d3.extent(this.dataArray[0], d => d.date) as [Date, Date];\n\n        const lastImportantDateForYScale = new Date(this.payoutPhaseStartDate);\n        lastImportantDateForYScale.setMonth(lastImportantDateForYScale.getMonth() + numberOfMonthsOfAYear);\n        // Only calculate the y extent when it is undefined. Meaning the y axis is not locked.\n        if (this.yExtent[0] === 0 && this.yExtent[1] === 0) {\n            const filteredDataArrayForYMax = this.dataArray[this.maxIndex].filter(\n                e => e.date <= lastImportantDateForYScale && e.date > this.dateExtent[0]\n            );\n            const filteredDataArrayForYMin = this.dataArray[this.minIndex].filter(\n                e => e.date <= lastImportantDateForYScale\n            );\n            const maxVal = d3.max(filteredDataArrayForYMax.map(e => e.yStart)) as number;\n            const minVal = d3.min(filteredDataArrayForYMin.map(e => e.yEnd)) as number;\n            this.yExtent = [minVal, maxVal];\n        }\n    }\n\n    private _createScales() {\n        this.yScale = d3.scaleLinear().domain(this.yExtent).range([this.height, 0]);\n        this.xScale = d3.scaleTime().domain(this.dateExtent).range([0, this.width]);\n    }\n\n    private _drawAxis() {\n        this.svg\n            .append('g')\n            .style('font-size', '20px')\n            .call(\n                d3\n                    .axisLeft(this.yScale)\n                    .tickFormat(d => this.valueToDisplayText(d as number))\n                    .ticks(numberOfTicks)\n            );\n\n        this.svg\n            .append('g')\n            .style('font-size', '20px')\n            .attr('transform', `translate(0, ${this.height})`)\n            .call(d3.axisBottom(this.xScale));\n\n        // Draw zero line.\n        this.svg\n            .append('g')\n            .append('line')\n            .attr('x1', this.xScale(this.dateExtent[0]))\n            .attr('y1', this.yScale(0))\n            .attr('x2', this.xScale(this.dateExtent[1]))\n            .attr('y2', this.yScale(0))\n            .style('stroke-width', this.lineStrokeWidth)\n            .style('stroke', 'black');\n\n        // Draw phase division line.\n        this.svg\n            .append('g')\n            .append('line')\n            .attr('x1', this.xScale(this.payoutPhaseStartDate) - this.lineStrokeWidth / 2)\n            .attr('y1', this.yScale(this.yExtent[0]))\n            .attr('x2', this.xScale(this.payoutPhaseStartDate) - this.lineStrokeWidth / 2)\n            .attr('y2', this.yScale(this.yExtent[1]))\n            .style('stroke-width', this.lineStrokeWidth)\n            .style('stroke', 'black');\n    }\n\n    private _addInteraction() {\n        const interactionClass = 'interaction';\n        const tooltipLineClass = 'tooltipLine';\n\n        this.interaction = this.svg\n            .append('g')\n            .attr('class', interactionClass)\n            .style('visibility', 'hidden')\n            .attr('transform', `translate(${[0, -this.marginH]})`);\n\n        this.hoverLine = this.interaction\n            .append('line')\n            .attr('class', tooltipLineClass)\n            .style('stroke', 'blue')\n            .style('stroke-dasharray', '3,3')\n            .style('opacity', 0.5)\n            .attr('y1', this.height + 2 * this.marginH)\n            .attr('y2', 0);\n\n        // Add rectangle to catch mouse events.\n        this.svg\n            .append('rect')\n            .attr('class', 'mouseEvent')\n            .attr('transform', `translate(${[0, -this.marginH]})`)\n            .attr('height', this.height + 2 * this.marginH)\n            .attr('width', this.width)\n            .attr('fill', 'none')\n            .style('pointer-events', 'all')\n            .on('mouseover', () => D3ChartStrategy._setInteractionDisplayForActiveDiagrams('visible'))\n            //.on('mouseout', () => D3ChartStrategy._setInteractionDisplayForActiveDiagrams('hidden'))\n            .on('mousemove', mouseEvent => this._handleTooltipEvent(mouseEvent));\n    }\n\n    // Interaction inspired by: http://www.d3noob.org/2014/07/my-favourite-tooltip-method-for-line.html\n    private _handleTooltipEvent(mouseEvent: any) {\n        const x = d3.pointer(mouseEvent)[0];\n        const date = this.xScale.invert(x);\n        this.tooltipDate = roundDateToBeginningOfMonth(date);\n        this._updateAllDiagrams();\n    }\n\n    private _updateAllDiagrams() {\n        const investmentStepIndex = calculateInvestmentStepIndexForDate(this.tooltipDate, this.investmentSteps);\n        D3ChartStrategy._setInteractionDisplayForActiveDiagrams('visible');\n        for (const activeDiagram of D3ChartStrategy.activeStrategies) {\n            activeDiagram.hoverLine.attr('x1', this.xScale(this.tooltipDate)).attr('x2', this.xScale(this.tooltipDate));\n            activeDiagram._updateTooltip(investmentStepIndex);\n            activeDiagram._updateDiagram();\n        }\n    }\n\n    private _drawText() {\n        this.textGroup = this.svg.append('g').attr('class', 'textGroup');\n        this.textGroup\n            .selectAll('text')\n            .data(Object.values(this.textProperties))\n            .enter()\n            .append('text')\n            .text(d => d.text)\n            .attr('x', d => d.x)\n            .attr('y', d => d.y)\n            .style('font-size', d => d.fontSize)\n            .style('font-weight', d => d.fontWeight)\n            .style('text-anchor', d => d.textAnchor)\n            .style('fill', d => d.color);\n    }\n\n    private _updateDiagram() {\n        this.textGroup.selectAll('text').text(d => (d as ITextProperty).text);\n    }\n\n    protected _prepareText() {\n        const savingPhaseMid =\n            this.xScale(this.dateExtent[0]) +\n            (this.xScale(this.payoutPhaseStartDate) - this.xScale(this.dateExtent[0])) / 2;\n\n        const payoutPhaseMid =\n            this.xScale(this.payoutPhaseStartDate) +\n            (this.xScale(this.dateExtent[1]) - this.xScale(this.payoutPhaseStartDate)) / 2;\n        const yPos = -10;\n        this.textProperties = {\n            savingBold: {\n                text: 'SAVING',\n                x: savingPhaseMid,\n                y: yPos,\n                fontSize: this.standardFontSize,\n                textAnchor: 'end',\n                fontWeight: 'bold',\n                color: 'black',\n            },\n            savingPhase: {\n                text: 'Phase',\n                x: savingPhaseMid,\n                y: yPos,\n                fontSize: this.standardFontSize,\n                textAnchor: 'start',\n                fontWeight: 'normal',\n                color: 'black',\n            },\n            payoutBold: {\n                text: 'PAYOUT',\n                x: payoutPhaseMid,\n                y: yPos,\n                fontSize: this.standardFontSize,\n                textAnchor: 'end',\n                fontWeight: 'bold',\n                color: 'black',\n            },\n            payoutPhase: {\n                text: 'Phase',\n                x: payoutPhaseMid,\n                y: yPos,\n                fontSize: this.standardFontSize,\n                textAnchor: 'start',\n                fontWeight: 'normal',\n                color: 'black',\n            },\n        };\n    }\n\n    private _drawFadeOut() {\n        const fadeOutGroup = this.svg.append('g').attr('class', 'fadeOut');\n        const fadeOutStartDate = new Date(this.dateExtent[1]);\n        fadeOutStartDate.setFullYear(fadeOutStartDate.getFullYear() - this.faceOutYearsLength);\n\n        const gradient = fadeOutGroup.append('linearGradient').attr('id', this.fadeOutGradientID);\n\n        gradient\n            .append('stop')\n            .attr('class', 'start')\n            .attr('offset', '0%')\n            .attr('stop-color', 'white')\n            .attr('stop-opacity', 0);\n\n        gradient\n            .append('stop')\n            .attr('class', 'end')\n            .attr('offset', '100%')\n            .attr('stop-color', 'white')\n            .attr('stop-opacity', 1);\n\n        fadeOutGroup\n            .append('rect')\n            .attr('x', this.xScale(fadeOutStartDate))\n            .attr('y', -this.marginH)\n            .attr('width', this.xScale(this.dateExtent[1]) - this.xScale(fadeOutStartDate) + 1)\n            .attr('height', this.yScale(this.yExtent[0]) - this.yScale(this.yExtent[1]) + this.marginH * 2)\n            .style('fill', `url(#${this.fadeOutGradientID})`);\n    }\n\n    protected _prepareData() {\n        throw new Error('Abstract method. Not Implemented');\n    }\n\n    protected _drawContent() {\n        throw new Error('Abstract method. Not Implemented');\n    }\n\n    protected _updateTooltip(investmentStepIndex: number) {\n        throw new Error('Abstract method. Not Implemented');\n    }\n}\n","import * as d3 from 'd3';\nimport {\n    getTotalShareValue,\n    getTotalDividendShareValue,\n    InvestmentStep,\n    NegativeInvestmentStepIdentifier,\n    ETFIdentifier,\n    ETFRatio,\n} from '../model/InvestmentModel';\nimport { D3ChartStrategy, generateLabelWithValueText, DataArrayEntry } from './D3ChartStrategy';\nimport { ETF_SYMBOL_TO_NAME } from '../components/App';\n\ninterface IDataToIndex {\n    [identifier: string]: number;\n}\n\ntype ETFIdentifierToColors = { [key in ETFIdentifier]: { total: string; invested: string } };\n\ntype NegativeInvestmentToColorMap = { [key in NegativeInvestmentStepIdentifier]: string };\n\nfunction generateEtfValueText(\n    investmentValue: string | undefined = undefined,\n    totalValue: string | undefined = undefined\n) {\n    return `Inv: ${investmentValue == null ? '-' : investmentValue}, Tot: ${totalValue == null ? '-' : totalValue}`;\n}\n\nexport class AreaChartD3 extends D3ChartStrategy {\n    private readonly etfLineColors: ETFIdentifierToColors = {\n        'SP5C.PAR': { total: '#0562a0', invested: '#71c1f7' },\n        ESGE: { total: '#ff1eff', invested: '#ff63ff' },\n        SUSA: { total: '#23ff01', invested: '#7dff69' },\n    };\n    private readonly colors: NegativeInvestmentToColorMap = {\n        inflation: '#ff7f00',\n        totalCosts: '#be3bff',\n        totalTaxes: '#e31a1c',\n    };\n    private readonly lineOpacity = 0.7;\n    private readonly negativeLabels: NegativeInvestmentStepIdentifier[] = ['totalCosts', 'totalTaxes', 'inflation'];\n    private readonly investedIdentifier = 'invested';\n    private readonly capitalIdentifier = 'capital';\n\n    private etfIdentifiers: ETFIdentifier[];\n    private dataToIndex: IDataToIndex = {};\n\n    constructor(\n        investmentSteps: InvestmentStep[],\n        renderDivRef: HTMLDivElement,\n        payoutPhaseStartDate: Date,\n        tooltipDate: Date | undefined,\n        yExtent: [number, number] | undefined,\n        etfRatio: ETFRatio\n    ) {\n        super(investmentSteps, renderDivRef, payoutPhaseStartDate, 'firstSVG', tooltipDate, yExtent);\n\n        this.etfIdentifiers = [];\n        for (const etfIdentifier of Object.keys(etfRatio) as ETFIdentifier[]){\n            const ratio = etfRatio[etfIdentifier];\n            if (ratio!= null && ratio > 0.0){\n                this.etfIdentifiers.push(etfIdentifier);\n            }\n        }\n    }\n\n    _prepareData() {\n        this.dataToIndex = {\n            totalCosts: 0,\n            totalTaxes: 1,\n            inflation: 2,\n        };\n\n        let currentIdx = 3;\n        for (const etfIdentifier of this.etfIdentifiers) {\n            this.dataToIndex[etfIdentifier + this.investedIdentifier] = currentIdx++;\n            this.dataToIndex[etfIdentifier + this.capitalIdentifier] = currentIdx++;\n        }\n\n        this.minIndex = this.dataToIndex.inflation;\n        this.maxIndex = currentIdx - 1;\n\n        this.dataArray = [];\n        for (let i = 0; i < currentIdx; i++) {\n            this.dataArray.push([]);\n        }\n        for (const investmentStep of this.investmentSteps) {\n            this.dataArray[this.dataToIndex.totalCosts].push({\n                yStart: 0,\n                yEnd: -investmentStep.totalCosts,\n                date: investmentStep.date,\n                color: this.colors.totalCosts,\n            });\n            this.dataArray[this.dataToIndex.totalTaxes].push({\n                yStart: -investmentStep.totalCosts,\n                yEnd: -investmentStep.totalCosts - investmentStep.totalTaxes,\n                date: investmentStep.date,\n                color: this.colors.totalTaxes,\n            });\n            this.dataArray[this.dataToIndex.inflation].push({\n                yStart: -investmentStep.totalCosts - investmentStep.totalTaxes,\n                yEnd: -investmentStep.totalCosts - investmentStep.totalTaxes - investmentStep.inflation,\n                date: investmentStep.date,\n                color: this.colors.inflation,\n            });\n            let heightOffset = 0;\n            for (const etfIdentifier of this.etfIdentifiers) {\n                const totalShareValue = getTotalShareValue(etfIdentifier, investmentStep);\n                const totalDividendShareValue = getTotalDividendShareValue(etfIdentifier, investmentStep);\n                this.dataArray[this.dataToIndex[etfIdentifier + this.capitalIdentifier]].push({\n                    yStart: totalShareValue + heightOffset,\n                    yEnd: totalShareValue - totalDividendShareValue + heightOffset,\n                    date: investmentStep.date,\n                    color: this.etfLineColors[etfIdentifier].total,\n                });\n                this.dataArray[this.dataToIndex[etfIdentifier + this.investedIdentifier]].push({\n                    yStart: totalShareValue - totalDividendShareValue + heightOffset,\n                    yEnd: heightOffset,\n                    date: investmentStep.date,\n                    color: this.etfLineColors[etfIdentifier].invested,\n                });\n                heightOffset += totalShareValue;\n            }\n        }\n    }\n\n    _drawLines() {\n        // Draw line chart.\n        for (let i = 0; i < this.dataArray.length; i++) {\n            this.svg\n                .append('path')\n                .datum(this.dataArray[i])\n                .style('stroke', d => d[0].color)\n                .style('stroke-width', this.lineStrokeWidth)\n                .style('opacity', this.lineOpacity)\n                .style('fill', 'none')\n                .attr(\n                    'd',\n                    d3\n                        .line<DataArrayEntry>()\n                        .x(d => this.xScale(d.date))\n                        .y(d => this.yScale(d.yStart))\n                );\n        }\n    }\n    _drawContent() {\n        this._drawArea();\n    }\n\n    _drawArea() {\n        // Draw stacked area chart.\n        for (let i = 0; i < this.dataArray.length; i++) {\n            this.svg\n                .append('g')\n                .attr('class', 'area')\n                .append('path')\n                .datum(this.dataArray[i])\n                .style('opacity', this.lineOpacity)\n                .style('fill', d => d[0].color)\n                .attr(\n                    'd',\n                    d3\n                        .area<DataArrayEntry>()\n                        .curve(d3.curveMonotoneX)\n                        .x(d => this.xScale(d.date))\n                        .y0(d => this.yScale(d.yEnd))\n                        .y1(d => this.yScale(d.yStart))\n                );\n        }\n    }\n\n    _prepareText() {\n        super._prepareText();\n        const paddingW = this.width * 0.005;\n        const paddingH = this.standardFontSize * 0.3;\n\n        for (let i = 0; i < this.negativeLabels.length; i++) {\n            this.textProperties[this.negativeLabels[i]] = {\n                text: generateLabelWithValueText(this.negativeLabels[i]),\n                x: this.xScale(this.dateExtent[1]) + paddingW,\n                y: this.yScale(0) + (this.standardFontSize + paddingH) * i + this.standardFontSize,\n                fontSize: this.standardFontSize,\n                textAnchor: 'start',\n                fontWeight: 'normal',\n                color: this.colors[this.negativeLabels[i]],\n            };\n        }\n\n        // Add ETF Labels.\n        for (let i = 0; i < this.etfIdentifiers.length; i++) {\n            this.textProperties[this.etfIdentifiers[i]] = {\n                text: ETF_SYMBOL_TO_NAME[this.etfIdentifiers[i]],\n                x: this.xScale(this.dateExtent[1]) + paddingW,\n                y: this.yScale(0) - (this.standardFontSize + paddingH) * i * 2 - 2 * this.standardFontSize,\n                fontSize: this.standardFontSize,\n                textAnchor: 'start',\n                fontWeight: 'normal',\n                color: this.etfLineColors[this.etfIdentifiers[i]].total,\n            };\n        }\n\n        // Add ETF values of Labels.\n        for (let i = 0; i < this.etfIdentifiers.length; i++) {\n            this.textProperties[this.etfIdentifiers[i] + this.labelValueIdentifier] = {\n                text: generateEtfValueText(),\n                x: this.xScale(this.dateExtent[1]) + paddingW,\n                y: this.yScale(0) - (this.standardFontSize + paddingH) * i * 2 - 1 * this.standardFontSize,\n                fontSize: this.standardFontSize,\n                textAnchor: 'start',\n                fontWeight: 'normal',\n                color: this.etfLineColors[this.etfIdentifiers[i]].total,\n            };\n        }\n    }\n\n    _updateTooltip(investmentStepIndex: number) {\n        for (const etfIdentifier of this.etfIdentifiers) {\n            const totalValue = getTotalShareValue(etfIdentifier, this.investmentSteps[investmentStepIndex]);\n            const totalDividendValue = getTotalDividendShareValue(\n                etfIdentifier,\n                this.investmentSteps[investmentStepIndex]\n            );\n            const investedValue = totalValue - totalDividendValue;\n            const updatedValueText = generateEtfValueText(\n                this.valueToDisplayText(investedValue, true),\n                this.valueToDisplayText(totalValue, true)\n            );\n            this.textProperties[etfIdentifier + this.labelValueIdentifier].text = updatedValueText;\n        }\n        for (const negativeLabel of this.negativeLabels) {\n            const value = this.investmentSteps[investmentStepIndex][negativeLabel];\n            const updatedValueText = generateLabelWithValueText(negativeLabel, this.valueToDisplayText(value, true));\n            this.textProperties[negativeLabel].text = updatedValueText;\n        }\n    }\n}\n","import { InvestmentStep, ETFIdentifier } from '../model/InvestmentModel';\nimport { D3ChartStrategy, generateLabelWithValueText } from './D3ChartStrategy';\n\nfunction getSumNewPayout(investmentStep: InvestmentStep) {\n    let sumNewPayout = 0;\n    for (const etfIdentifier of Object.keys(investmentStep.newPayout) as ETFIdentifier[]) {\n        sumNewPayout += investmentStep.newPayout[etfIdentifier];\n    }\n    return sumNewPayout;\n}\n\nexport class CashflowBarChart extends D3ChartStrategy {\n    private readonly barPaddingPercentage = 0.9;\n    private readonly colors = {\n        payout: { first: '#3acc5c', second: '#2d9e45' },\n        invested: { first: '#ff3e58', second: '#c32f46' },\n    };\n\n    private rectWidth = 0;\n\n    constructor(\n        investmentSteps: InvestmentStep[],\n        renderDivRef: HTMLDivElement,\n        payoutPhaseStartDate: Date,\n        tooltipDate: Date | undefined,\n        yExtent: [number, number] | undefined\n    ) {\n        super(investmentSteps, renderDivRef, payoutPhaseStartDate, 'secondSVG', tooltipDate, yExtent);\n    }\n\n    render() {\n        super.render();\n    }\n\n    _prepareData() {\n        // Create line array.\n        const dataToIndex = {\n            invested: 0,\n            payout: 1,\n        };\n\n        this.minIndex = dataToIndex.invested;\n        this.maxIndex = dataToIndex.payout;\n\n        this.dataArray = [[], []];\n        const startYear = this.investmentSteps[0].date.getFullYear();\n        for (const investmentStep of this.investmentSteps) {\n            let sumNewPayout = getSumNewPayout(investmentStep);\n            const colorIdentifier = (investmentStep.date.getFullYear() - startYear) % 2 === 0 ? 'first' : 'second';\n\n            this.dataArray[dataToIndex.invested].push({\n                yStart: 0,\n                yEnd: -investmentStep.newInvestment,\n                date: investmentStep.date,\n                color: this.colors.invested[colorIdentifier],\n            });\n            this.dataArray[dataToIndex.payout].push({\n                yStart: sumNewPayout,\n                yEnd: 0,\n                date: investmentStep.date,\n                color: this.colors.payout[colorIdentifier],\n            });\n        }\n\n        this.rectWidth = (this.width / this.dataArray[dataToIndex.invested].length) * this.barPaddingPercentage;\n    }\n\n    _prepareText() {\n        super._prepareText();\n\n        const payoutX =\n            this.xScale(this.payoutPhaseStartDate) +\n            (this.xScale(this.dateExtent[1]) - this.xScale(this.payoutPhaseStartDate)) / 2;\n        const payoutY = this.yScale(0) + (this.yScale(this.yExtent[0]) - this.yScale(0)) / 2;\n\n        const payoutIdentifier = 'payout';\n        this.textProperties[payoutIdentifier] = {\n            text: generateLabelWithValueText(payoutIdentifier),\n            x: payoutX,\n            y: payoutY,\n            fontSize: this.standardFontSize,\n            textAnchor: 'middle',\n            fontWeight: 'normal',\n            color: this.colors[payoutIdentifier].first,\n        };\n\n        const investedX =\n            this.xScale(this.dateExtent[0]) +\n            (this.xScale(this.payoutPhaseStartDate) - this.xScale(this.dateExtent[0])) / 2;\n        const investedY = this.yScale(0) - (this.yScale(0) - this.yScale(this.yExtent[1])) / 2;\n\n        const investedIdentifier = 'invested';\n        this.textProperties[investedIdentifier] = {\n            text: generateLabelWithValueText(investedIdentifier),\n            x: investedX,\n            y: investedY,\n            fontSize: this.standardFontSize,\n            textAnchor: 'middle',\n            fontWeight: 'normal',\n            color: this.colors[investedIdentifier].first,\n        };\n    }\n\n    _updateTooltip(investmentStepIndex: number) {\n        const payoutValue = getSumNewPayout(this.investmentSteps[investmentStepIndex]);\n        const investedValue = this.investmentSteps[investmentStepIndex].newInvestment;\n        this.textProperties.payout.text = generateLabelWithValueText('payout', this.valueToDisplayText(payoutValue));\n        this.textProperties.invested.text = generateLabelWithValueText(\n            'invested',\n            this.valueToDisplayText(investedValue)\n        );\n    }\n\n    _drawContent() {\n        // Skip the last bar if it is outside the graph.\n        const needToSkipLastBar = this.dataArray[0][this.dataArray[0].length - 1].date === this.dateExtent[1];\n        for (let barArray of this.dataArray) {\n            if (needToSkipLastBar) {\n                barArray = barArray.slice(0, -1);\n            }\n\n            this.svg\n                .append('g')\n                .attr('class', 'bars')\n                .selectAll(`rect.none`)\n                .data(barArray)\n                .enter()\n                .append('rect')\n                .style('fill', d => d.color)\n                .attr('x', d => this.xScale(d.date))\n                .attr('width', this.rectWidth)\n                .attr('y', d => this.yScale(d.yStart))\n                .attr('height', d => this.yScale(d.yEnd) - this.yScale(d.yStart));\n        }\n    }\n}\n","import React from 'react';\nimport {\n    STARTING_CAPITAL_IDENTIFIER,\n    MONTHLY_INVESTMENT_IDENTIFIER,\n    YEARLY_INVESTMENT_INCREASE_IDENTIFIER,\n    SAVING_PHASE_IDENTIFIER,\n    AGE_IDENTIFIER,\n    TAX_FREE_AMOUNT_IDENTIFIER,\n    MONTHLY_PAYOUT_IDENTIFIER,\n    YEARLY_PAYOUT_INCREASE_IDENTIFIER,\n    LIFE_EXPECTATION_IDENTIFIER,\n    DETAILED_GRAPH_DROPDOWN_IDENTIFIER,\n    Y_AXIS_LOCK_IDENTIFIER,\n    generateCostConfig,\n} from './App';\nimport { InvestmentModel, ETFRatio } from '../model/InvestmentModel';\nimport { AreaChartD3 } from '../renderer/AreaChartD3';\nimport { CashflowBarChart } from '../renderer/CashflowBarChartD3';\nimport { D3ChartStrategy } from '../renderer/D3ChartStrategy';\nimport { IAppState } from './App';\n\nexport interface IConfigOptions {\n    costConfig: ICostConfiguration;\n    taxFreeAmount: number;\n}\n\nexport interface ICostConfiguration {\n    percentageCosts: number;\n    fixedCosts: number;\n}\n\nexport class Visualization extends React.Component<IAppState, {}> {\n    private firstSVGRef = React.createRef<HTMLDivElement>();\n    private secondSVGRef = React.createRef<HTMLDivElement>();\n\n    private areaChart: AreaChartD3 | undefined = undefined;\n    private barChart: CashflowBarChart | undefined = undefined;\n\n    private investmentModel: InvestmentModel | undefined = undefined;\n\n    private _getETFIdentifierToRatio() {\n        const etfIdentifierToRatio: ETFRatio = {};\n        const etfProperties = this.props.etfDropdownSelection.elements;\n        for (const etfIdentifier in etfProperties) {\n            if (etfProperties[etfIdentifier].selected) {\n                etfIdentifierToRatio[etfProperties[etfIdentifier].symbol] = etfProperties[etfIdentifier].percentage;\n            }\n        }\n        return etfIdentifierToRatio;\n    }\n\n    private _getInvestmentModel(etfIdentifierToRatio: ETFRatio) {\n        const configOptions: IConfigOptions = {\n            taxFreeAmount: this.props[TAX_FREE_AMOUNT_IDENTIFIER].value,\n            costConfig: generateCostConfig(this.props),\n        };\n\n        return new InvestmentModel(\n            this.props[STARTING_CAPITAL_IDENTIFIER].value,\n            this.props[MONTHLY_INVESTMENT_IDENTIFIER].value,\n            this.props[YEARLY_INVESTMENT_INCREASE_IDENTIFIER].value,\n            this.props[MONTHLY_PAYOUT_IDENTIFIER].value,\n            this.props[YEARLY_PAYOUT_INCREASE_IDENTIFIER].value,\n            this.props[SAVING_PHASE_IDENTIFIER].value,\n            etfIdentifierToRatio,\n            configOptions,\n            this.props[AGE_IDENTIFIER].value,\n            this.props[LIFE_EXPECTATION_IDENTIFIER].value\n        );\n    }\n\n    private _getTooltipDate() {\n        if (this.areaChart != null) {\n            return this.areaChart.tooltipDate;\n        } else if (this.barChart != null) {\n            return this.barChart.tooltipDate;\n        } else {\n            return undefined;\n        }\n    }\n\n    private _getYAxisExtent(diagram: D3ChartStrategy | undefined) {\n        return diagram != null && this.props[Y_AXIS_LOCK_IDENTIFIER].value ? diagram.yExtent : undefined;\n    }\n\n    private _drawVisualization() {\n        D3ChartStrategy.reset();\n        try {\n            if (\n                this.props.isValid != null &&\n                this.props.isValid &&\n                this.firstSVGRef.current != null &&\n                this.secondSVGRef.current != null\n            ) {\n                const etfIdentifierToRatio = this._getETFIdentifierToRatio();\n                this.investmentModel = this._getInvestmentModel(etfIdentifierToRatio);\n                const firstPayoutPhaseDate = this.investmentModel.getPayoutPhaseBeginDate();\n                const correctLevelOfDetailInvestmentSteps = this.investmentModel.getInvestmentSteps(\n                    this.props[DETAILED_GRAPH_DROPDOWN_IDENTIFIER].value\n                );\n                let tooltipDate = this._getTooltipDate();\n                this.areaChart = new AreaChartD3(\n                    correctLevelOfDetailInvestmentSteps,\n                    this.firstSVGRef.current,\n                    firstPayoutPhaseDate,\n                    tooltipDate,\n                    this._getYAxisExtent(this.areaChart),\n                    etfIdentifierToRatio\n                );\n                this.areaChart.render();\n                this.barChart = new CashflowBarChart(\n                    correctLevelOfDetailInvestmentSteps,\n                    this.secondSVGRef.current,\n                    firstPayoutPhaseDate,\n                    tooltipDate,\n                    this._getYAxisExtent(this.barChart)\n                );\n                this.barChart.render();\n            }\n        } catch (e) {\n            console.error(e);\n        }\n    }\n\n    async componentDidMount() {\n        this._drawVisualization();\n    }\n\n    componentDidUpdate() {\n        this._drawVisualization();\n    }\n    render() {\n        return (\n            <React.Fragment>\n                <div ref={this.secondSVGRef}></div>\n                <div ref={this.firstSVGRef}></div>\n            </React.Fragment>\n        );\n    }\n}\n","interface IErrorMessage {\n    identifier: string;\n    isValid: boolean;\n    errorMessage: string;\n}\n\nexport function ErrorMessage(props: IErrorMessage) {\n    return (\n        <div\n            id={props.identifier + 'Feedback'}\n            className=\"invalid-tooltip\"\n            style={{ visibility: props.isValid ? 'hidden' : 'visible' }}>\n            {props.errorMessage}\n        </div>\n    );\n}\n","import { ChangeEvent } from 'react';\nimport { ErrorMessage } from './ErrorMessageComponent';\n\nexport interface ITextInputState {\n    value: number;\n    label: string;\n    errorMessage: string;\n    textAppending: string;\n    isValid: boolean;\n    disabled: boolean;\n    identifier: NumberInputStateIdentifier;\n    transformFunction: (e: ChangeEvent<HTMLInputElement>) => number;\n    onValueChange: (changedValue: number, changedStateIdentifier: NumberInputStateIdentifier) => void;\n}\n\nexport interface IStringTextInputState {\n    value: string;\n    label: string;\n    errorMessage: string;\n    textAppending: string;\n    isValid: boolean;\n    disabled: boolean;\n    identifier: TextInputStateIdentifier;\n    transformFunction: (e: ChangeEvent<HTMLInputElement>) => string;\n    onValueChange: (changedValue: string, changedStateIdentifier: TextInputStateIdentifier) => void;\n}\n\nexport interface IETFPercentageInputState {\n    value: number;\n    label: string;\n    errorMessage: string;\n    textAppending: string;\n    isValid: boolean;\n    disabled: boolean;\n    identifier: string;\n    transformFunction: (e: ChangeEvent<HTMLInputElement>) => number;\n    onValueChange: (changedValue: number, changedStateIdentifier: string) => void;\n}\n\nexport type NumberInputStateIdentifier =\n    | 'startingCapital'\n    | 'monthlyInvestment'\n    | 'monthlyPayout'\n    | 'transactionCosts'\n    | 'savingPhase'\n    | 'age'\n    | 'lifeExpectation'\n    | 'taxFreeAmount'\n    | 'yearlyInvestmentIncrease'\n    | 'yearlyPayoutIncrease';\n\nexport type TextInputStateIdentifier = NumberInputStateIdentifier | 'apiKey';\n\nexport function TextInputElement(props: ITextInputState) {\n    return (\n        <div className=\"position-relative\">\n            <label className=\"form-label\" htmlFor={props.identifier}>\n                {props.label}\n            </label>\n            <input\n                className={'form-control ' + (props.isValid ? '' : 'is-invalid')}\n                id={props.identifier}\n                type=\"text\"\n                value={props.value.toString() + (props.textAppending !== '' ? ' ' + props.textAppending : '')}\n                onChange={e => props.onValueChange(props.transformFunction(e), props.identifier)}\n                disabled={props.disabled}\n            />\n            <ErrorMessage {...props} />\n        </div>\n    );\n}\n\nexport function StringTextInputElement(props: IStringTextInputState) {\n    return (\n        <div className=\"position-relative\">\n            <label className=\"form-label\" htmlFor={props.identifier}>\n                {props.label}\n            </label>\n            <input\n                className={'form-control ' + (props.isValid ? '' : 'is-invalid')}\n                id={props.identifier}\n                type=\"text\"\n                value={props.value.toString() + (props.textAppending !== '' ? ' ' + props.textAppending : '')}\n                onChange={e => props.onValueChange(props.transformFunction(e), props.identifier)}\n                disabled={props.disabled}\n            />\n            <ErrorMessage {...props} />\n        </div>\n    );\n}\n\nexport function ETFPercentageInputElement(props: IETFPercentageInputState) {\n    return (\n        <div className=\"position-relative\">\n            <label className=\"form-label\" htmlFor={props.identifier}>\n                {props.label}\n            </label>\n            <input\n                className={'form-control ' + (props.isValid ? '' : 'is-invalid')}\n                id={props.identifier}\n                type=\"text\"\n                value={props.value.toString() + (props.textAppending !== '' ? ' ' + props.textAppending : '')}\n                onChange={e => props.onValueChange(props.transformFunction(e), props.identifier)}\n                disabled={props.disabled}\n            />\n            <ErrorMessage {...props} />\n        </div>\n    );\n}\n","export interface ICheckboxState {\n    value: boolean;\n    label: string;\n    identifier: ICheckBoxStateIdentifier;\n    onValueChange: (changedStateIdentifier: ICheckBoxStateIdentifier) => void;\n}\n\nexport type ICheckBoxStateIdentifier = 'transactionCostsType' | 'etfAutomaticPercentage' | 'yAxisLock';\n\nexport function CheckboxInputElement(props: ICheckboxState) {\n    return (\n        <div className=\"checkbox-element\">\n            <input\n                className=\"form-check-input\"\n                id={props.identifier}\n                type=\"checkbox\"\n                value={props.value.toString()}\n                onChange={() => props.onValueChange(props.identifier)}\n            />\n            <label className=\"form-check-label\" htmlFor={props.identifier}>\n                {props.label}\n            </label>\n        </div>\n    );\n}\n","import { ChangeEvent } from 'react';\nimport { StringTextInputElement, TextInputStateIdentifier } from './TextInputElement';\n\nexport interface IAPIKey {\n    displayOverlay: boolean;\n    value: string;\n    label: string;\n    errorMessage: string;\n    isValid: boolean;\n    textAppending: string;\n    identifier: TextInputStateIdentifier;\n    transformFunction: (e: ChangeEvent<HTMLInputElement>) => string;\n    onValueChange: (changedValue: string, changedStateIdentifier: TextInputStateIdentifier) => void;\n    handleAPIKeyConfirm: () => void;\n    error: boolean;\n}\n\nexport function Overlay(props: IAPIKey) {\n    return (\n        <div className=\"row\">\n            <div className=\"col-12 p-0\">\n                <div className=\"d-grid gap-0\">\n                    <div\n                        className=\"overlay min-vh-100 text-center m-0 d-flex flex-column justify-content-center\"\n                        style={{ visibility: props.displayOverlay ? 'visible' : 'hidden' }}>\n                        <h1 className=\"p-5\">\n                            Enter your personal{' '}\n                            <a\n                                href=\"https://www.alphavantage.co/support/#api-key\"\n                                target=\"_blank\"\n                                rel=\"noopener noreferrer\">\n                                {' '}\n                                Alphavantage API Key\n                            </a>{' '}\n                        </h1>\n                        <StringTextInputElement {...props} disabled={!props.displayOverlay} />\n                        <button type=\"button\" className=\"btn btn-primary my-5\" onClick={props.handleAPIKeyConfirm}>\n                            Confirm\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}\n","interface ISidebarSectionHeading {\n    title: string;\n    initiallyCollapsed: boolean;\n    children: JSX.Element[];\n}\n\ninterface IErrorMessage {\n    identifier: string;\n    isValid: boolean;\n    errorMessage: string;\n}\n\nexport function SidebarSectionHeading(props: ISidebarSectionHeading) {\n    const titleID = props.title.replace(/\\W/g, '_');\n    return (\n        <div className=\"position-relative my-4 mb-1\">\n            <div className=\"d-flex my-3\">\n                <button\n                    className={'btn btn-secondary hamburgerButton mt-0 mb-0 pt-0 pb-0 me-4'}\n                    type=\"button\"\n                    data-bs-toggle=\"collapse\"\n                    data-bs-target={`#${titleID}`}\n                    aria-expanded={props.initiallyCollapsed ? 'false' : 'true'}\n                    aria-controls={titleID}>\n                    ☰\n                </button>\n                <h6 className=\"sidebar-heading m-0 my-auto\">{props.title}</h6>\n            </div>\n            <div className={'collapse ' + (props.initiallyCollapsed ? '' : 'show')} id={titleID}>\n                {props.children}\n            </div>\n        </div>\n    );\n}\n\nexport function ErrorMessage(props: IErrorMessage) {\n    return (\n        <div\n            id={props.identifier + 'Feedback'}\n            className=\"invalid-tooltip\"\n            style={{ visibility: props.isValid ? 'hidden' : 'visible' }}>\n            {props.errorMessage}\n        </div>\n    );\n}\n","import { ICostConfiguration } from './Visualization';\n\nexport interface BrokerProperties {\n    identifier: string;\n    label: string;\n    fixedCosts: number;\n    percentageCosts: number;\n}\n\nexport interface IBrokerDropDown {\n    label: string;\n    isValid: boolean;\n    handleChange: (brokerProperties: BrokerProperties) => void;\n    elements: BrokerProperties[];\n}\n\ntype BrokerDropDownProps = ICostConfiguration & IBrokerDropDown;\n\nfunction costsOfElementMatchUIValues(props: BrokerDropDownProps, element: BrokerProperties) {\n    return element.fixedCosts === props.fixedCosts && element.percentageCosts === props.percentageCosts;\n}\n\nexport function BrokerDropDown(props: BrokerDropDownProps) {\n    return (\n        <div className=\"dropdown\">\n            <button\n                className=\"btn btn-secondary dropdown-toggle\"\n                type=\"button\"\n                id=\"BrokerDropDown\"\n                data-bs-toggle=\"dropdown\"\n                aria-expanded=\"false\">\n                {props.label}\n            </button>\n            <ul className=\"dropdown-menu\" aria-labelledby=\"BrokerDropDown\">\n                {props.elements.map(element => (\n                    <li key={element.identifier}>\n                        <button\n                            className={\n                                costsOfElementMatchUIValues(props, element) ? 'dropdown-item active' : 'dropdown-item'\n                            }\n                            type=\"button\"\n                            onClick={e => props.handleChange(element)}>\n                            {element.label}\n                        </button>\n                    </li>\n                ))}\n            </ul>\n        </div>\n    );\n}\n","export interface IGraphDetailLevel {\n    identifier: string;\n    value: number;\n    label: string;\n}\n\nexport interface IGraphDetailDropDown {\n    value: number;\n    label: string;\n    isValid: boolean;\n    handleChange: (detailProperties: IGraphDetailLevel) => void;\n    elements: IGraphDetailLevel[];\n}\n\nexport function GraphDetailDropDown(props: IGraphDetailDropDown) {\n    return (\n        <div className=\"dropdown\">\n            <button\n                className=\"btn btn-secondary dropdown-toggle\"\n                type=\"button\"\n                id=\"GraphDetailDropDown\"\n                data-bs-toggle=\"dropdown\"\n                aria-expanded=\"false\">\n                {props.label}\n            </button>\n            <ul className=\"dropdown-menu\" aria-labelledby=\"GraphDetailDropDown\">\n                {props.elements.map(element => (\n                    <li key={element.identifier}>\n                        <button\n                            className={props.value === element.value ? 'dropdown-item active' : 'dropdown-item'}\n                            type=\"button\"\n                            onClick={e => props.handleChange(element)}>\n                            {element.label}\n                        </button>\n                    </li>\n                ))}\n            </ul>\n        </div>\n    );\n}\n","import { ChangeEvent, MouseEvent } from 'react';\n\nimport { ETFPercentageInputElement } from './TextInputElement';\nimport { ErrorMessage } from './ErrorMessageComponent';\n\nimport { ETFIdentifier } from '../model/InvestmentModel';\n\nexport interface IETFProperties {\n    identifier: string;\n    symbol: ETFIdentifier;\n    label: string;\n    percentage: number;\n    selected: boolean;\n}\n\ninterface IETFIndex {\n    [etfIdentifier: string]: IETFProperties;\n}\n\nexport interface IETFSelection {\n    label: string;\n    isValid: boolean;\n    identifier: string;\n    errorMessage: string;\n    handleSelectionChange: (etfProperties: IETFProperties) => void;\n    handleShareChange: (changedValue: number, changedStateIdentifier: string) => void;\n    elements: IETFIndex;\n}\n\ntype ETFSelectionDropDownProps = IETFSelection & { autoPercentage: boolean };\n\nfunction percentageTransformFunction(e: ChangeEvent<HTMLInputElement>) {\n    const floatVal = parseFloat(e.target.value) / 100;\n    return isNaN(floatVal) ? 0 : floatVal;\n}\n\nexport function ETFSelectionDropDown(props: ETFSelectionDropDownProps) {\n    return (\n        <div className=\"dropdown position-relative\">\n            <button\n                className=\"btn btn-secondary dropdown-toggle is-invalid\"\n                type=\"button\"\n                id=\"ETFSelectionDropDown\"\n                data-bs-toggle=\"dropdown\"\n                aria-expanded=\"false\">\n                {props.label}\n            </button>\n            <ErrorMessage {...props} />\n            <ul className=\"dropdown-menu\" aria-labelledby=\"ETFSelectionDropDown\">\n                {Object.keys(props.elements).map(elementIdentifier => (\n                    <li key={elementIdentifier}>\n                        <button\n                            className={\n                                props.elements[elementIdentifier].selected ? 'dropdown-item active' : 'dropdown-item'\n                            }\n                            type=\"button\"\n                            onClick={(e: MouseEvent<HTMLButtonElement>) => {\n                                //if (e.target.type !== 'text') {\n                                props.handleSelectionChange(props.elements[elementIdentifier]);\n                                //}\n                            }}>\n                            <ETFPercentageInputElement\n                                {...props.elements[elementIdentifier]}\n                                value={Math.round(props.elements[elementIdentifier].percentage * 100)}\n                                textAppending=\"%\"\n                                onValueChange={props.handleShareChange}\n                                transformFunction={percentageTransformFunction}\n                                disabled={props.autoPercentage}\n                                isValid={true}\n                                errorMessage=\"\"\n                            />\n                        </button>\n                    </li>\n                ))}\n            </ul>\n        </div>\n    );\n}\n","import React, { ChangeEvent } from 'react';\nimport { Visualization, ICostConfiguration } from './Visualization';\nimport {\n    TextInputElement,\n    ITextInputState,\n    TextInputStateIdentifier,\n    NumberInputStateIdentifier,\n} from './TextInputElement';\nimport { CheckboxInputElement, ICheckboxState, ICheckBoxStateIdentifier } from './CheckboxInputElement';\nimport { Overlay, IAPIKey } from './APIKeyOverlay';\nimport { SidebarSectionHeading } from './SidebarSectionHeadingComponent';\nimport { BrokerDropDown, BrokerProperties, IBrokerDropDown } from './BrokerDropDown';\nimport { GraphDetailDropDown, IGraphDetailDropDown, IGraphDetailLevel } from './GraphDetailDropDown';\nimport { ETFSelectionDropDown, IETFProperties, IETFSelection } from './ETFSelectionDropDown';\nimport { ForecastModelSingleton } from '../model/ForecastModel';\nimport { ETFIdentifier } from '../model/InvestmentModel';\nimport { percentageToFloatValue } from '../helpers/utils';\n\nexport const STARTING_CAPITAL_IDENTIFIER = 'startingCapital';\nexport const MONTHLY_INVESTMENT_IDENTIFIER = 'monthlyInvestment';\nexport const YEARLY_INVESTMENT_INCREASE_IDENTIFIER = 'yearlyInvestmentIncrease';\nexport const TRANSACTION_COSTS_IDENTIFIER = 'transactionCosts';\nexport const TRANSACTION_COSTS_TYPE_IDENTIFIER = 'transactionCostsType';\nexport const SAVING_PHASE_IDENTIFIER = 'savingPhase';\nexport const AGE_IDENTIFIER = 'age';\nexport const TAX_FREE_AMOUNT_IDENTIFIER = 'taxFreeAmount';\nexport const MONTHLY_PAYOUT_IDENTIFIER = 'monthlyPayout';\nexport const YEARLY_PAYOUT_INCREASE_IDENTIFIER = 'yearlyPayoutIncrease';\nexport const LIFE_EXPECTATION_IDENTIFIER = 'lifeExpectation';\nexport const DETAILED_GRAPH_DROPDOWN_IDENTIFIER = 'detailedGraph';\nexport const ETF_DROPDOWN_SELECTION_IDENTIFIER = 'etfDropdownSelection';\nexport const API_KEY_IDENTIFIER = 'apiKey';\nexport const Y_AXIS_LOCK_IDENTIFIER = 'yAxisLock';\n\nconst BROKER_DROPDOWN_IDENTIFIER = 'brokerDropdown';\nconst ETF_AUTOMATIC_PERCENTAGE_IDENTIFIER = 'etfAutomaticPercentage';\n\nexport interface IAppState {\n    isValid: boolean;\n    startingCapital: ITextInputState;\n    monthlyInvestment: ITextInputState;\n    yearlyInvestmentIncrease: ITextInputState;\n    monthlyPayout: ITextInputState;\n    yearlyPayoutIncrease: ITextInputState;\n    transactionCosts: ITextInputState;\n    savingPhase: ITextInputState;\n    age: ITextInputState;\n    lifeExpectation: ITextInputState;\n    taxFreeAmount: ITextInputState;\n\n    apiKey: IAPIKey;\n\n    transactionCostsType: ICheckboxState;\n    etfAutomaticPercentage: ICheckboxState;\n    yAxisLock: ICheckboxState;\n\n    detailedGraph: IGraphDetailDropDown;\n    brokerDropdown: IBrokerDropDown;\n    etfDropdownSelection: IETFSelection;\n}\n\ntype ETFIdentifierToString = { [key in ETFIdentifier]: string };\n\nexport const ETF_SYMBOL_TO_NAME: ETFIdentifierToString = {\n    'SP5C.PAR': 'S & P 500',\n    ESGE: 'iShare',\n    SUSA: 'MSCI USA ESG',\n};\n\nfunction transformInputToInt(e: ChangeEvent<HTMLInputElement>) {\n    const valueWithoutTextAppending = e.target.value.split(' ')[0];\n    const intVal = parseInt(valueWithoutTextAppending);\n    return isNaN(intVal) ? 0 : intVal;\n}\n\nfunction transformInputToFloat(e: ChangeEvent<HTMLInputElement>) {\n    const floatVal = parseFloat(e.target.value);\n    return isNaN(floatVal) ? 0 : floatVal;\n}\n\nfunction isPercentage(val: number) {\n    return !Number.isNaN(val) && val >= 0 && val <= 100;\n}\n\nfunction isPositiveInt(val: number) {\n    return !Number.isNaN(val) && Number.isInteger(val) && val >= 0;\n}\n\nexport function generateCostConfig(state: IAppState): ICostConfiguration {\n    if (state[TRANSACTION_COSTS_TYPE_IDENTIFIER].value) {\n        return { percentageCosts: 0.0, fixedCosts: state[TRANSACTION_COSTS_IDENTIFIER].value };\n    } else {\n        return { percentageCosts: percentageToFloatValue(state[TRANSACTION_COSTS_IDENTIFIER].value), fixedCosts: 0.0 };\n    }\n}\n\nfunction recalculateETFPercentages(state: IAppState) {\n    let numberOfSelectedETFs = 0;\n    for (const etfIdentifier in state[ETF_DROPDOWN_SELECTION_IDENTIFIER].elements) {\n        if (state[ETF_DROPDOWN_SELECTION_IDENTIFIER].elements[etfIdentifier].selected) {\n            numberOfSelectedETFs++;\n        }\n    }\n    const newPercentage = 1.0 / Math.max(1, numberOfSelectedETFs);\n    for (const etfIdentifier in state[ETF_DROPDOWN_SELECTION_IDENTIFIER].elements) {\n        state[ETF_DROPDOWN_SELECTION_IDENTIFIER].elements[etfIdentifier].percentage = newPercentage;\n    }\n    return state;\n}\n\nexport class App extends React.Component<{}, IAppState> {\n    constructor(props: {}) {\n        super(props);\n\n        this.handleTextChange = this.handleTextChange.bind(this);\n        this.handleCheckBoxChange = this.handleCheckBoxChange.bind(this);\n        this.handleBrokerChange = this.handleBrokerChange.bind(this);\n        this.handleGraphDetailChange = this.handleGraphDetailChange.bind(this);\n        this.handleETFSelectionChange = this.handleETFSelectionChange.bind(this);\n        this.handleETFShareChange = this.handleETFShareChange.bind(this);\n        this.handleAPIKeyConfirm = this.handleAPIKeyConfirm.bind(this);\n\n        this.state = getInitialInputFormState(this);\n    }\n\n    handleTextChange(changedValue: number | string, changedStateIdentifier: TextInputStateIdentifier) {\n        const state = { ...this.state };\n        state[changedStateIdentifier].value = changedValue;\n        this._validateAndSetState(state);\n    }\n\n    handleCheckBoxChange(changedStateIdentifier: ICheckBoxStateIdentifier) {\n        const state = { ...this.state };\n        state[changedStateIdentifier].value = !state[changedStateIdentifier].value;\n        if (changedStateIdentifier === TRANSACTION_COSTS_TYPE_IDENTIFIER) {\n            state[TRANSACTION_COSTS_IDENTIFIER].value = state[changedStateIdentifier].value ? 5 : 0.015;\n            state[TRANSACTION_COSTS_IDENTIFIER].textAppending = state[changedStateIdentifier].value ? '€' : '%';\n            state[TRANSACTION_COSTS_IDENTIFIER].transformFunction = state[changedStateIdentifier].value\n                ? transformInputToInt\n                : transformInputToFloat;\n        } else if (\n            changedStateIdentifier === ETF_AUTOMATIC_PERCENTAGE_IDENTIFIER &&\n            state[changedStateIdentifier].value\n        ) {\n            recalculateETFPercentages(state);\n        }\n        this._validateAndSetState(state);\n    }\n\n    handleBrokerChange(brokerProperties: BrokerProperties) {\n        const state = { ...this.state };\n        state[TRANSACTION_COSTS_IDENTIFIER].value =\n            brokerProperties.percentageCosts > 0 ? brokerProperties.percentageCosts : brokerProperties.fixedCosts;\n        state[TRANSACTION_COSTS_TYPE_IDENTIFIER].value = brokerProperties.percentageCosts > 0 ? false : true;\n        this._validateAndSetState(state);\n    }\n\n    handleGraphDetailChange(detailProperties: IGraphDetailLevel) {\n        const state = { ...this.state };\n        state[DETAILED_GRAPH_DROPDOWN_IDENTIFIER].value = detailProperties.value;\n        this._validateAndSetState(state);\n    }\n\n    handleETFSelectionChange(etfProperties: IETFProperties) {\n        const state = { ...this.state };\n        state[ETF_DROPDOWN_SELECTION_IDENTIFIER].elements[etfProperties.identifier].selected = !state[\n            ETF_DROPDOWN_SELECTION_IDENTIFIER\n        ].elements[etfProperties.identifier].selected;\n        if (state[ETF_AUTOMATIC_PERCENTAGE_IDENTIFIER].value) {\n            recalculateETFPercentages(state);\n        }\n        this._validateAndSetState(state);\n    }\n\n    handleETFShareChange(changedValue: number, changedETFIdentifier: string) {\n        const state = { ...this.state };\n        state[ETF_DROPDOWN_SELECTION_IDENTIFIER].elements[changedETFIdentifier].percentage = changedValue;\n        this._validateAndSetState(state);\n    }\n\n    async handleAPIKeyConfirm() {\n        const apiKey = this.state[API_KEY_IDENTIFIER].value;\n        const apiValues = { ...this.state[API_KEY_IDENTIFIER] };\n        try {\n            await ForecastModelSingleton.loadHistoricData(\n                apiKey,\n                this.state[ETF_DROPDOWN_SELECTION_IDENTIFIER].elements\n            );\n            apiValues.error = false;\n            apiValues.displayOverlay = false;\n        } catch (e) {\n            apiValues.error = true;\n        }\n        this.setState({ [API_KEY_IDENTIFIER]: apiValues });\n        this.forceUpdate();\n    }\n\n    private _validateAndSetState(state: IAppState) {\n        const positiveIntIdentifiers: NumberInputStateIdentifier[] = [\n            MONTHLY_INVESTMENT_IDENTIFIER,\n            MONTHLY_PAYOUT_IDENTIFIER,\n            STARTING_CAPITAL_IDENTIFIER,\n            AGE_IDENTIFIER,\n            LIFE_EXPECTATION_IDENTIFIER,\n            SAVING_PHASE_IDENTIFIER,\n            TAX_FREE_AMOUNT_IDENTIFIER,\n        ];\n\n        const percentageIdentifiers: NumberInputStateIdentifier[] = [\n            YEARLY_INVESTMENT_INCREASE_IDENTIFIER,\n            YEARLY_PAYOUT_INCREASE_IDENTIFIER,\n        ];\n\n        state.isValid = true;\n\n        for (const identifier of positiveIntIdentifiers) {\n            state[identifier].isValid = isPositiveInt(state[identifier].value);\n            state[identifier].errorMessage = 'Please enter a positive number.';\n            state.isValid = state[identifier].isValid && state.isValid;\n        }\n\n        for (const identifier of percentageIdentifiers) {\n            state[identifier].isValid = isPercentage(state[identifier].value);\n            state[identifier].errorMessage = 'Please enter a valid percentage between 0 and 100 %.';\n            state.isValid = state[identifier].isValid && state.isValid;\n        }\n\n        // Check the year values.\n        const leftoverYears = state[LIFE_EXPECTATION_IDENTIFIER].value - state[AGE_IDENTIFIER].value;\n        if (state[AGE_IDENTIFIER].value >= state[LIFE_EXPECTATION_IDENTIFIER].value) {\n            state[AGE_IDENTIFIER].errorMessage = 'You cannot be older than the life expectation';\n            state[AGE_IDENTIFIER].isValid = false;\n            state.isValid = false;\n        } else if (leftoverYears <= state[SAVING_PHASE_IDENTIFIER].value) {\n            state[SAVING_PHASE_IDENTIFIER].errorMessage =\n                'You cannot have a saving phase that lasts longer than your life.';\n            state[SAVING_PHASE_IDENTIFIER].isValid = false;\n            state.isValid = false;\n        }\n\n        // Check Cost values.\n        if (state[TRANSACTION_COSTS_TYPE_IDENTIFIER].value) {\n            state[TRANSACTION_COSTS_IDENTIFIER].isValid = isPositiveInt(state[TRANSACTION_COSTS_IDENTIFIER].value);\n            state[TRANSACTION_COSTS_IDENTIFIER].errorMessage = 'Please enter a positive number.';\n        } else {\n            state[TRANSACTION_COSTS_IDENTIFIER].isValid = isPercentage(state[TRANSACTION_COSTS_IDENTIFIER].value);\n            state[TRANSACTION_COSTS_IDENTIFIER].errorMessage = 'Please enter a valid percentage.';\n        }\n        state.isValid = state[TRANSACTION_COSTS_IDENTIFIER].isValid && state.isValid;\n\n        // Check the etf percentages.\n        let sumOfPercentages = 0;\n        let foundOneSelectedEtf = false;\n        for (const etfIdentifier in state[ETF_DROPDOWN_SELECTION_IDENTIFIER].elements) {\n            if (state[ETF_DROPDOWN_SELECTION_IDENTIFIER].elements[etfIdentifier].selected) {\n                sumOfPercentages += state[ETF_DROPDOWN_SELECTION_IDENTIFIER].elements[etfIdentifier].percentage;\n                foundOneSelectedEtf = true;\n            }\n        }\n        if (!foundOneSelectedEtf) {\n            state[ETF_DROPDOWN_SELECTION_IDENTIFIER].isValid = false;\n            state[ETF_DROPDOWN_SELECTION_IDENTIFIER].errorMessage = 'Please select at least one ETF.';\n            state.isValid = false;\n        } else if (sumOfPercentages !== 1.0) {\n            state[ETF_DROPDOWN_SELECTION_IDENTIFIER].isValid = false;\n            state[ETF_DROPDOWN_SELECTION_IDENTIFIER].errorMessage = 'The sum of all selected ETF needs to be 100%';\n            state.isValid = false;\n        } else {\n            state[ETF_DROPDOWN_SELECTION_IDENTIFIER].isValid = true;\n        }\n\n        this.setState(state);\n    }\n\n    render() {\n        const costConfig = generateCostConfig(this.state);\n        return (\n            <div className=\"container-fluid\">\n                <Overlay {...this.state[API_KEY_IDENTIFIER]} />\n                <div className=\"row\">\n                    <nav id=\"sidebarMenu\" className=\"col-md-3 col-lg-2 bg-light sidebar\">\n                        <form className=\"position-sticky needs-validation\" noValidate>\n                            {/* Money Options */}\n                            <SidebarSectionHeading title=\"Money Options\" initiallyCollapsed={false}>\n                                <TextInputElement {...this.state[STARTING_CAPITAL_IDENTIFIER]} />\n                                <TextInputElement {...this.state[MONTHLY_INVESTMENT_IDENTIFIER]} />\n                                <TextInputElement {...this.state[YEARLY_INVESTMENT_INCREASE_IDENTIFIER]} />\n                                <TextInputElement {...this.state[MONTHLY_PAYOUT_IDENTIFIER]} />\n                                <TextInputElement {...this.state[YEARLY_PAYOUT_INCREASE_IDENTIFIER]} />\n                                <TextInputElement {...this.state[TAX_FREE_AMOUNT_IDENTIFIER]} />\n                            </SidebarSectionHeading>\n                            {/* Time Options */}\n                            <SidebarSectionHeading title=\"Time Options\" initiallyCollapsed={false}>\n                                <TextInputElement {...this.state[AGE_IDENTIFIER]} />\n                                <TextInputElement {...this.state[LIFE_EXPECTATION_IDENTIFIER]} />\n                                <TextInputElement {...this.state[SAVING_PHASE_IDENTIFIER]} />\n                            </SidebarSectionHeading>\n                            {/* Cost Options */}\n                            <SidebarSectionHeading title=\"Cost Options\" initiallyCollapsed={true}>\n                                <BrokerDropDown {...costConfig} {...this.state[BROKER_DROPDOWN_IDENTIFIER]} />\n                                <TextInputElement\n                                    key={TRANSACTION_COSTS_IDENTIFIER}\n                                    {...this.state[TRANSACTION_COSTS_IDENTIFIER]}\n                                />\n                                <CheckboxInputElement {...this.state[TRANSACTION_COSTS_TYPE_IDENTIFIER]} />\n                            </SidebarSectionHeading>\n                            {/* Visualization Options */}\n                            <SidebarSectionHeading title=\"Visualization Options\" initiallyCollapsed={true}>\n                                <GraphDetailDropDown {...this.state[DETAILED_GRAPH_DROPDOWN_IDENTIFIER]} />\n                                <CheckboxInputElement {...this.state[Y_AXIS_LOCK_IDENTIFIER]} />\n                                <CheckboxInputElement {...this.state[ETF_AUTOMATIC_PERCENTAGE_IDENTIFIER]} />\n                                <ETFSelectionDropDown\n                                    autoPercentage={this.state[ETF_AUTOMATIC_PERCENTAGE_IDENTIFIER].value}\n                                    {...this.state[ETF_DROPDOWN_SELECTION_IDENTIFIER]}\n                                />\n                            </SidebarSectionHeading>\n                        </form>\n                    </nav>\n                    <main className=\"col-md-9 col-lg-10 ms-sm-auto\">\n                        <h1>Etf Pension Plan Visualization</h1>\n                        <Visualization {...this.state} />\n                    </main>\n                </div>\n            </div>\n        );\n    }\n}\n\nfunction getInitialInputFormState(caller: App): IAppState {\n    return {\n        isValid: true,\n        // simple ui elements.\n        [STARTING_CAPITAL_IDENTIFIER]: {\n            value: 1000,\n            label: 'Starting Capital',\n            errorMessage: '',\n            textAppending: '€',\n            isValid: true,\n            identifier: STARTING_CAPITAL_IDENTIFIER,\n            transformFunction: transformInputToInt,\n            onValueChange: caller.handleTextChange,\n            disabled: false,\n        },\n        [MONTHLY_INVESTMENT_IDENTIFIER]: {\n            value: 100,\n            label: 'Monthly Investment',\n            errorMessage: 'Please enter a positive Money amount.',\n            textAppending: '€',\n            isValid: true,\n            identifier: MONTHLY_INVESTMENT_IDENTIFIER,\n            transformFunction: transformInputToInt,\n            onValueChange: caller.handleTextChange,\n            disabled: false,\n        },\n        [YEARLY_INVESTMENT_INCREASE_IDENTIFIER]: {\n            value: 0.0,\n            label: 'Monthly Investment Increase',\n            errorMessage: '',\n            textAppending: '%',\n            isValid: true,\n            identifier: YEARLY_INVESTMENT_INCREASE_IDENTIFIER,\n            transformFunction: transformInputToFloat,\n            onValueChange: caller.handleTextChange,\n            disabled: false,\n        },\n        [MONTHLY_PAYOUT_IDENTIFIER]: {\n            value: 1000,\n            label: 'Monthly Payout',\n            errorMessage: '',\n            textAppending: '€',\n            isValid: true,\n            identifier: MONTHLY_PAYOUT_IDENTIFIER,\n            transformFunction: transformInputToInt,\n            onValueChange: caller.handleTextChange,\n            disabled: false,\n        },\n        [YEARLY_PAYOUT_INCREASE_IDENTIFIER]: {\n            value: 0.0,\n            label: 'Monthly Payout Increase',\n            errorMessage: '',\n            textAppending: '%',\n            isValid: true,\n            identifier: YEARLY_PAYOUT_INCREASE_IDENTIFIER,\n            transformFunction: transformInputToFloat,\n            onValueChange: caller.handleTextChange,\n            disabled: false,\n        },\n        [TRANSACTION_COSTS_IDENTIFIER]: {\n            value: 1.5,\n            label: 'Transaction Costs',\n            errorMessage: '',\n            textAppending: '%',\n            isValid: true,\n            identifier: TRANSACTION_COSTS_IDENTIFIER,\n            transformFunction: transformInputToFloat,\n            onValueChange: caller.handleTextChange,\n            disabled: false,\n        },\n        [SAVING_PHASE_IDENTIFIER]: {\n            value: 40,\n            label: 'Saving Phase',\n            errorMessage: '',\n            textAppending: 'Y',\n            isValid: true,\n            identifier: SAVING_PHASE_IDENTIFIER,\n            transformFunction: transformInputToInt,\n            onValueChange: caller.handleTextChange,\n            disabled: false,\n        },\n        [AGE_IDENTIFIER]: {\n            value: 30,\n            label: 'Your Age',\n            textAppending: 'Y',\n            errorMessage: '',\n            isValid: true,\n            identifier: AGE_IDENTIFIER,\n            transformFunction: transformInputToInt,\n            onValueChange: caller.handleTextChange,\n            disabled: false,\n        },\n        [LIFE_EXPECTATION_IDENTIFIER]: {\n            value: 80,\n            label: 'Life Expectation',\n            errorMessage: '',\n            isValid: true,\n            textAppending: 'Y',\n            identifier: LIFE_EXPECTATION_IDENTIFIER,\n            transformFunction: transformInputToInt,\n            onValueChange: caller.handleTextChange,\n            disabled: false,\n        },\n        [TAX_FREE_AMOUNT_IDENTIFIER]: {\n            value: 801,\n            label: 'Tax Free Amount',\n            errorMessage: '',\n            isValid: true,\n            textAppending: '€',\n            identifier: TAX_FREE_AMOUNT_IDENTIFIER,\n            transformFunction: transformInputToInt,\n            onValueChange: caller.handleTextChange,\n            disabled: false,\n        },\n        [TRANSACTION_COSTS_TYPE_IDENTIFIER]: {\n            value: false,\n            label: 'Fixed Amount',\n            identifier: TRANSACTION_COSTS_TYPE_IDENTIFIER,\n            onValueChange: caller.handleCheckBoxChange,\n        },\n        [ETF_AUTOMATIC_PERCENTAGE_IDENTIFIER]: {\n            value: false,\n            label: 'Automatic ETF Ratio',\n            identifier: ETF_AUTOMATIC_PERCENTAGE_IDENTIFIER,\n            onValueChange: caller.handleCheckBoxChange,\n        },\n        [Y_AXIS_LOCK_IDENTIFIER]: {\n            value: false,\n            label: 'Lock Y Axis Extent',\n            identifier: Y_AXIS_LOCK_IDENTIFIER,\n            onValueChange: caller.handleCheckBoxChange,\n        },\n        [API_KEY_IDENTIFIER]: {\n            displayOverlay: true,\n            error: false,\n            value: '',\n            label: '',\n            errorMessage: '',\n            isValid: true,\n            textAppending: '',\n            identifier: API_KEY_IDENTIFIER,\n            transformFunction: (e: ChangeEvent<HTMLInputElement>) => (e.target as HTMLInputElement).value,\n            onValueChange: caller.handleTextChange,\n            handleAPIKeyConfirm: caller.handleAPIKeyConfirm,\n        },\n        // Complex UI elements.\n        [DETAILED_GRAPH_DROPDOWN_IDENTIFIER]: {\n            value: 1,\n            label: 'Graph Detail Level',\n            isValid: true,\n            handleChange: caller.handleGraphDetailChange,\n            elements: [\n                {\n                    identifier: '12',\n                    value: 12,\n                    label: 'All Months a Year (highest detail)',\n                },\n                {\n                    identifier: '6',\n                    value: 6,\n                    label: 'Every 2nd Month (higher detail)',\n                },\n                {\n                    identifier: '3',\n                    value: 3,\n                    label: 'Every 4th Month (lower detail)',\n                },\n                {\n                    identifier: '1',\n                    value: 1,\n                    label: 'One Month a Year (lowest detail) (default)',\n                },\n            ],\n        },\n        [BROKER_DROPDOWN_IDENTIFIER]: {\n            label: 'Broker',\n            isValid: true,\n            handleChange: caller.handleBrokerChange,\n            elements: [\n                {\n                    identifier: 'comdirect',\n                    label: 'comdirect',\n                    fixedCosts: 0,\n                    percentageCosts: 1.5,\n                },\n                {\n                    identifier: 'tradeRepublic',\n                    label: 'Trade Republic',\n                    fixedCosts: 0,\n                    percentageCosts: 1.0,\n                },\n                {\n                    identifier: 'eToro',\n                    label: 'eToro',\n                    fixedCosts: 0,\n                    percentageCosts: 0.0,\n                },\n            ],\n        },\n        [ETF_DROPDOWN_SELECTION_IDENTIFIER]: {\n            label: 'ETF Selection',\n            isValid: true,\n            identifier: ETF_DROPDOWN_SELECTION_IDENTIFIER,\n            errorMessage: '',\n            handleSelectionChange: caller.handleETFSelectionChange,\n            handleShareChange: caller.handleETFShareChange,\n            elements: {\n                S_and_P_500: {\n                    identifier: 'S_and_P_500',\n                    symbol: 'SP5C.PAR',\n                    label: ETF_SYMBOL_TO_NAME['SP5C.PAR'],\n                    percentage: 1.0,\n                    selected: true,\n                },\n                iShare: {\n                    identifier: 'iShare',\n                    symbol: 'ESGE',\n                    label: ETF_SYMBOL_TO_NAME['ESGE'],\n                    percentage: 1.0,\n                    selected: false,\n                },\n                msciUSA: {\n                    identifier: 'msciUSA',\n                    symbol: 'SUSA',\n                    label: ETF_SYMBOL_TO_NAME['SUSA'],\n                    percentage: 1.0,\n                    selected: false,\n                },\n            },\n        },\n    };\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './scss/main.scss';\nimport { App } from './components/App';\nimport reportWebVitals from './reportWebVitals';\n// Needed to make the drop downs work.\nimport { Dropdown, Tooltip } from 'bootstrap'; // eslint-disable-line no-unused-vars\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}