{"version":3,"sources":["helpers/utils.ts","model/ForecastModel.ts","model/InvestmentModel.ts","renderer/D3ChartStrategy.ts","renderer/AreaChartD3.ts","renderer/CashflowBarChartD3.ts","components/Visualization.tsx","components/ErrorMessageComponent.tsx","components/TextInputElement.tsx","components/CheckboxInputElement.tsx","components/APIKeyOverlay.tsx","components/SidebarSectionHeadingComponent.tsx","components/BrokerDropDown.tsx","components/GraphDetailDropDown.tsx","components/ETFSelectionDropDown.tsx","components/App.tsx","reportWebVitals.js","index.js"],"names":["timeDiffIgnoreDivisor","numberOfMonthsOfAYear","percentageToFloatValue","val","isFirstMonthOfAYear","date","getMonth","loadHistoricalETFData","etfIdentifier","apiKey","a","d3","entry","undefined","timestamp","Error","Date","toString","dividend","parseFloat","course","historicalData","sort","b","valueOf","etfHistoricalToCourseForecastArray","map","dateToTimestamp","etfHistoricalToDividendForecastArray","currentYear","getFullYear","dividendForecastArray","forEach","length","push","Math","floor","getTime","generateHistoricalDataNotPresentException","roundDateToBeginningOfMonth","month","year","currentDayOfMonth","getDate","maxDayOfMonth","monthOffset","round","ForecastModelSingleton","coursePredictors","dividendPredictors","this","courseForecastArray","maxTimestampBeforeCoursePredictorRepetition","_calculateMaxTimestampBeforePredictorRepetition","maxYearBeforeDividendPredictorRepetition","history","predictors","forecastArray","lastTimestampToIncludeInPrediction","abs","backCastTimeFactor","backCastTimestampConstant","filteredForecastArray","filter","regression","linear","order","precision","lastYearToIncludeInPrediction","_courseDateToPredictorTimestampAndDateTimestamp","predictorTimestamp","_createCoursePredictorIfNotPresent","predict","predictorYear","_dividendYearToPredictorYear","_createDividendPredictorIfNotPresent","max","backCastTimeConstant","backCastTimeDate","setMonth","instance","getInstance","etfProperties","configure","forecast","_loadAndCacheHistoricalETFData","symbol","console","log","firstTimestamp","lastTimestamp","corporateTaxRatio","getTotalShareValue","investmentStep","totalShares","sharePrizes","getTotalDividenShareValue","dividendTotalShares","getNextMonthDate","newDate","calculateDividend","isLastMonthOfAYear","dividendAmount","predictDividend","sharePrize","predictCourse","calculateCosts","amount","costConfiguration","costs","percentageCosts","fixedCosts","amountWithoutCosts","subtractTaxFreeGain","taxAmount","taxFreeAmount","getNewShareValue","newShares","calculateAndAddInflation","initialDate","endDate","sumTotalValues","sum","Object","keys","sumOfTotalValues","timeFactor","inflation","pow","calculateAmountIncrease","percentageIncrease","numberOfMonth","yearsSinceStart","addAccumulationMonth","investmentSteps","investment","etfToRatio","configOptions","prevInvestmentStep","newInvestmentStep","dividendNewShares","totalCosts","totalInvestedMoney","newInvestedMoney","newInvestment","totalTaxes","totalPayout","newPayout","investmentOfEtfWithCosts","costConfig","investmentOfEtfWithoutCosts","etfSharePrize","dividendPayoutMoneyPerShare","newSharesByDividend","leftoverTaxFreeAmount","value","min","summedTaxes","decemberInvestmentStep","firstInvestmentStepOfThisYear","accumulatedBasicProfit","i","profitOverAllTime","profitOfPreviousYears","amountToApplyTaxes","calculateTaxes","newTaxes","newLeftoverTaxFreeAmount","addPayoutMonth","sellingAmount","leftoverAlreadyPaidTaxes","payoutStats","taxes","investmentStepsIdx","amountToSell","amountAlreadySold","costsToPay","alreadyPaidCosts","payoutInvestmentStepIdxForFIFO","currentSharesLeft","alreadySoldShares","leftoverAmountToSell","currentInvestmentStepForFIFO","currentValueOfShares","amountToSellWithCosts","amountOfSharesToSell","amountToSellWithoutCosts","initialValueOfShares","amountToPayTaxes","taxesToPay","payoutAmount","amountOfDividendSharesLeft","amountOfDividendSharesSold","generateEmptyInvestmentStep","dummyData","ESGE","SUSA","emptyInvestmentStep","InvestmentModel","startCapital","monthlyInvestment","yearlyInvestmentIncrease","monthlyPayout","yearlyPayoutIncrease","savingPhaseLength","age","expectationOfLife","savingDates","payoutDates","_calculateTimestampsForModel","_calculateModel","lifeExpectation","fadeOutYears","yearsLeft","now","beginningDate","endSavingPhaseDate","setFullYear","calculateForecastInterval","startDate","currentDate","slice","numberOfEntriesPerYear","Number","isInteger","selectedInvestmentSteps","numberOfMonthsToMerge","adjustedInvestmentStep","cloneDeep","offset","FIVE_MILLION","ONE_MILLION","generateLabelWithValueText","name","charAt","toUpperCase","D3ChartStrategy","renderDivRef","payoutPhaseStartDate","svgID","tooltipDate","yExtent","width","height","marginW","marginH","lineStrokeWidth","standardFontSize","labelValueIdentifier","dateExtent","maxIndex","minIndex","yScale","xScale","dataArray","textProperties","svg","fadeOutGradientID","faceOutYearsLength","hoverLine","interaction","textGroup","constructor","activeStrategies","innerHTML","append","attr","_prepareData","_calculateExtents","_createScales","_drawContent","_drawFadeOut","_prepareText","_drawText","_drawAxis","_addInteraction","_updateAllDiagrams","hasToBePositive","labelDivisionFactor","numberIndicator","toLocaleString","maximumFractionDigits","d","lastImportantDateForYScale","filteredDataArrayForYMax","e","filteredDataArrayForYMin","maxVal","yStart","minVal","yEnd","domain","range","style","call","tickFormat","valueToDisplayText","ticks","on","_setInteractionDisplayForActiveDiagrams","mouseEvent","_handleTooltipEvent","x","invert","investmentStepIndex","firstDate","secondDate","numberOfMonthsSinceStartDate","numberOfMonthsPerInvestmentStep","calculateInvestmentStepIndexForDate","activeDiagram","_updateTooltip","_updateDiagram","selectAll","data","values","enter","text","y","fontSize","fontWeight","textAnchor","color","savingPhaseMid","payoutPhaseMid","yPos","savingBold","savingPhase","payoutBold","payoutPhase","fadeOutGroup","fadeOutStartDate","gradient","displayOption","generateEtfValueText","investmentValue","totalValue","AreaChartD3","etfRatio","etfLineColors","total","invested","colors","lineOpacity","negativeLabels","investedIdentifier","capitalIdentifier","etfIdentifiers","dataToIndex","ratio","currentIdx","heightOffset","totalShareValue","totalDividendShareValue","datum","_drawArea","curve","y0","y1","paddingW","paddingH","ETF_SYMBOL_TO_NAME","investedValue","updatedValueText","negativeLabel","getSumNewPayout","sumNewPayout","CashflowBarChart","barPaddingPercentage","payout","rectWidth","payoutX","payoutY","payoutIdentifier","investedX","investedY","payoutValue","needToSkipLastBar","barArray","Visualization","firstSVGRef","React","createRef","secondSVGRef","areaChart","barChart","investmentModel","etfIdentifierToRatio","props","etfDropdownSelection","elements","selected","percentage","TAX_FREE_AMOUNT_IDENTIFIER","generateCostConfig","STARTING_CAPITAL_IDENTIFIER","MONTHLY_INVESTMENT_IDENTIFIER","YEARLY_INVESTMENT_INCREASE_IDENTIFIER","MONTHLY_PAYOUT_IDENTIFIER","YEARLY_PAYOUT_INCREASE_IDENTIFIER","SAVING_PHASE_IDENTIFIER","AGE_IDENTIFIER","LIFE_EXPECTATION_IDENTIFIER","diagram","Y_AXIS_LOCK_IDENTIFIER","reset","isValid","current","_getETFIdentifierToRatio","_getInvestmentModel","firstPayoutPhaseDate","getPayoutPhaseBeginDate","correctLevelOfDetailInvestmentSteps","getInvestmentSteps","DETAILED_GRAPH_DROPDOWN_IDENTIFIER","_getTooltipDate","_getYAxisExtent","render","error","_drawVisualization","Fragment","ref","Component","ErrorMessage","id","identifier","className","visibility","errorMessage","TextInputElement","htmlFor","label","type","textAppending","onChange","onValueChange","transformFunction","disabled","StringTextInputElement","ETFPercentageInputElement","CheckboxInputElement","Overlay","displayOverlay","href","target","rel","onClick","handleAPIKeyConfirm","SidebarSectionHeading","titleID","title","replace","data-bs-toggle","data-bs-target","aria-expanded","initiallyCollapsed","aria-controls","children","costsOfElementMatchUIValues","element","BrokerDropDown","aria-labelledby","handleChange","GraphDetailDropDown","percentageTransformFunction","floatVal","isNaN","ETFSelectionDropDown","elementIdentifier","handleSelectionChange","handleShareChange","autoPercentage","TRANSACTION_COSTS_IDENTIFIER","TRANSACTION_COSTS_TYPE_IDENTIFIER","ETF_DROPDOWN_SELECTION_IDENTIFIER","API_KEY_IDENTIFIER","BROKER_DROPDOWN_IDENTIFIER","ETF_AUTOMATIC_PERCENTAGE_IDENTIFIER","transformInputToInt","valueWithoutTextAppending","split","intVal","parseInt","transformInputToFloat","isPercentage","isPositiveInt","state","recalculateETFPercentages","numberOfSelectedETFs","newPercentage","App","handleTextChange","bind","handleCheckBoxChange","handleBrokerChange","handleGraphDetailChange","handleETFSelectionChange","handleETFShareChange","caller","S_and_P_500","iShare","msciUSA","getInitialInputFormState","changedValue","changedStateIdentifier","_validateAndSetState","brokerProperties","detailProperties","changedETFIdentifier","apiValues","loadHistoricData","setState","forceUpdate","positiveIntIdentifiers","percentageIdentifiers","leftoverYears","sumOfPercentages","foundOneSelectedEtf","noValidate","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"wSAKMA,EAAwB,MAIjBC,EAAwB,GAS9B,SAASC,EAAuBC,GACnC,OAAOA,EAAM,IAWV,SAASC,EAAoBC,GAChC,OAA2B,IAApBA,EAAKC,WAGT,SAAeC,EAAtB,oC,4CAAO,WAAqCC,EAAuBC,GAA5D,eAAAC,EAAA,sEAC0BC,IAAA,yFACyDH,EADzD,mBACiFC,EADjF,kBAEzB,SAAAG,GACI,QACwBC,IAApBD,EAAME,gBACuBD,IAA7BD,EAAM,yBACsBC,IAA5BD,EAAM,kBAEN,MAAM,IAAIG,MAAJ,yBAA4BP,EAA5B,mCAEV,MAAO,CACHH,KAAM,IAAIW,KAAKJ,EAAME,UAAUG,YAC/BC,SAAUC,WAAWP,EAAM,oBAC3BQ,OAAQD,WAAWP,EAAM,uBAdlC,cACGS,EADH,QAkBYC,MAAK,SAACZ,EAAGa,GAAJ,OAAUb,EAAEL,KAAKmB,UAAYD,EAAElB,KAAKmB,aAlBrD,kBAmBIH,GAnBJ,4C,sBAsBA,SAASI,EAAmCJ,GAC/C,OAAOA,EAAeK,KAAI,SAAAd,GAAK,MAAI,CAACe,EAAgBf,EAAMP,MAAOO,EAAMQ,WAIpE,SAASQ,EAAqCP,GACjD,IAAIQ,EAAcR,EAAe,GAAGhB,KAAKyB,cACnCC,EAAqC,CAAC,CAACF,EAAa,IAU1D,OATAR,EAAeW,SAAQ,SAAApB,GACfA,EAAMP,KAAKyB,gBAAkBD,EAC7BE,EAAsBA,EAAsBE,OAAS,GA1DvB,IA0DyDrB,EAAMM,UAE7FW,EAAcjB,EAAMP,KAAKyB,cACzBC,EAAsBG,KAAK,CAACL,EAAajB,EAAMM,eAGvDa,EAAsBT,MAAK,SAACZ,EAAGa,GAAJ,OAAUb,EAjEI,GAiE+Ba,EAjE/B,MAkElCQ,EAGJ,SAASJ,EAAgBtB,GAC5B,OAAO8B,KAAKC,MAAM/B,EAAKgC,UAAYrC,GAOhC,SAASsC,EAA0C9B,GACtD,OAAO,IAAIO,MAAJ,yEAA4EP,IAQhF,SAAS+B,EAA4BlC,GACxC,IALiBmC,EAAeC,EAK1BC,EAAoBrC,EAAKsC,UACzBC,GANWJ,EAMiBnC,EAAKC,WANPmC,EAMmBpC,EAAKyB,cALjD,IAAId,KAAKyB,EAAMD,EAAQ,EAAG,GAAGG,WAM9BE,EAAcV,KAAKW,MAAMJ,EAAoBE,GACnD,OAAO,IAAI5B,KAAKX,EAAKyB,cAAezB,EAAKC,WAAauC,GClCnD,IAAME,EAAb,WAUI,aAAuB,yBAJf1B,eAAgC,GAIlB,KAHd2B,iBAAyC,GAG3B,KAFdC,mBAA6C,GARzD,yGA8DI,WAA6CzC,GAA7C,oFACQA,KAAiB0C,KAAK7B,gBAD9B,iEAIiCd,EAAsBC,EAAeuC,EAAuBtC,QAJ7F,OAIUY,EAJV,OAMU8B,EAAsB1B,EAAmCJ,GACzD+B,EAA8CL,EAAuBM,gDACvEF,GAGEpB,EAAwBH,EAAqCP,GAC7DiC,EAA2CP,EAAuBM,gDACpEtB,GAGJmB,KAAK7B,eAAeb,GAAiB,CACjC+C,QAASlC,EACT8B,oBAAqBA,EACrBpB,sBAAuBA,GAE3BmB,KAAKF,iBAAiBxC,GAAiB,CACnC4C,4CAA6CA,EAC7CI,WAAY,IAEhBN,KAAKD,mBAAmBzC,GAAiB,CACrC8C,yCAA0CA,EAC1CE,WAAY,IA3BpB,iDA9DJ,uGA6FI,SAA2ChD,EAAuBM,GAE9D,KAAIA,KAAaoC,KAAKF,iBAAiBxC,IAAvC,CAGA,IAAMiD,EAAgBP,KAAK7B,eAAeb,GAAe2C,oBACnDO,EACFD,EAAcA,EAAcxB,OAAS,GD5JJ,GC6JjCE,KAAKwB,IAAIF,EAAcA,EAAcxB,OAAS,GD7Jb,GC6JiDnB,GAC9EiC,EAAuBa,mBAC3Bb,EAAuBc,0BACrBC,EAAwBL,EAAcM,QACxC,SAAAnD,GAAK,OAAIA,EDjKwB,ICiKgB8C,KAErDR,KAAKF,iBAAiBxC,GAAegD,WAAW1C,GAAakD,IAAWC,OAAOH,EAAuB,CAClGI,MAAO,EACPC,UAAW,QA7GvB,6DAiHI,SAAwD9D,EAAYG,GAChE,IAAMM,EAAYa,EAAgBtB,GAClC,MAAO,CACHS,EAAYoC,KAAKF,iBAAiBxC,GAAe4C,4CAC3CF,KAAKF,iBAAiBxC,GAAe4C,4CACrCtC,EACNA,KAvHZ,kDA2HI,SAA6CN,EAAuBiC,GAEhE,KAAIA,KAAQS,KAAKD,mBAAmBzC,IAApC,CAGA,IAAMiD,EAAgBP,KAAK7B,eAAeb,GAAeuB,sBACnDqC,EACFX,EAAcA,EAAcxB,OAAS,GD1LJ,GC2LjCE,KAAKwB,IAAIF,EAAcA,EAAcxB,OAAS,GD3Lb,GC2LiDQ,GAC9EM,EAAuBa,mBAC3Bb,EAAuBc,0BACrBC,EAAwBL,EAAcM,QACxC,SAAAnD,GAAK,OAAIA,ED/LwB,IC+LgBwD,KAErDlB,KAAKD,mBAAmBzC,GAAegD,WAAWf,GAAQuB,IAAWC,OAAOH,EAAuB,CAC/FI,MAAO,EACPC,UAAW,QA3IvB,0CA+II,SAAqC3D,EAAuBiC,GACxD,OAAOS,KAAKD,mBAAmBzC,GAAe8C,yCAA2Cb,EACnFS,KAAKD,mBAAmBzC,GAAe8C,yCACvCb,IAlJd,2BAqJI,SAAcjC,EAAuBH,GACjC,KAAMG,KAAiB0C,KAAKF,kBACxB,MAAMV,EAA0C9B,GAFP,MAIL0C,KAAKmB,gDACzChE,EACAG,GANyC,mBAItC8D,EAJsC,KAIlBxD,EAJkB,KAS7C,OADAoC,KAAKqB,mCAAmC/D,EAAe8D,GAChDpB,KAAKF,iBAAiBxC,GAAegD,WAAWc,GAAoBE,QAAQ1D,GDrNjD,KCuD1C,6BAmKI,SAAgBN,EAAuBiC,GACnC,KAAMjC,KAAiB0C,KAAKD,oBACxB,MAAMX,EAA0C9B,GAEpD,IAAMiE,EAAgBvB,KAAKwB,6BAA6BlE,EAAeiC,GAEvE,OADAS,KAAKyB,qCAAqCnE,EAAeiE,GAClDtC,KAAKyC,IACR,EACA1B,KAAKD,mBAAmBzC,GAAegD,WAAWiB,GAAeD,QAAQ/B,GDlO3C,OCuD1C,wBAYI,SAAiBhC,GAAmE,IAAnDmD,EAAkD,uDAA7B,EAAGiB,EAA0B,uDAAH,EAC5E9B,EAAuBtC,OAASA,EAChCsC,EAAuBa,mBAAqBA,EAE5C,IAAMkB,EAAmB,IAAI9D,KAAK,GAKlC,GAJA8D,EAAiBC,SAASF,GAC1B9B,EAAuBc,0BAA4BlC,EAAgBmD,GAG5B,MAAnC/B,EAAuBiC,SAAkB,CACzC,IAAMA,EAAWjC,EAAuBkC,cACxC,IAAK,IAAMzE,KAAiBwE,EAAShC,iBACjCgC,EAAShC,iBACLxC,GACF4C,4CAA8CL,EAAuBM,gDACnE2B,EAAS3D,eAAeb,GAAe2C,qBAG/C,IAAK,IAAM3C,KAAiBwE,EAAS/B,mBACjC+B,EAAS/B,mBACLzC,GACF8C,yCAA2CP,EAAuBM,gDAChE2B,EAAS3D,eAAeb,GAAeuB,0BAlC3D,qEAwCI,WAA8BtB,EAAgByE,GAA9C,yEACInC,EAAuBoC,UAAU1E,GAC3B2E,EAAWrC,EAAuBkC,cAF5C,cAGgCC,GAHhC,oDAGe1E,EAHf,oBAIc4E,EAASC,+BAA+BH,EAAc1E,GAAe8E,QAJnF,6BAMIC,QAAQC,IAAI,uCANhB,4CAxCJ,kFAiDI,WAII,OAHuC,MAAnCzC,EAAuBiC,WACvBjC,EAAuBiC,SAAW,IAAIjC,GAEnCA,EAAuBiC,WArDtC,6DAwDI,SAA+DvB,GAC3D,IAAMgC,EAAiBhC,EAAc,GDjHA,GCkH/BiC,EAAgBjC,EAAcA,EAAcxB,OAAS,GDlHtB,GCmHrC,OAAOyD,GAAiBA,EAAgBD,GAAkB1C,EAAuBa,uBA3DzF,KAAab,EACMiC,SAA0C,KADhDjC,EAEMtC,OAAiB,GAFvBsC,EAGMc,0BAAoC,EAH1Cd,EAIMa,mBAA6B,E,qBCjB1C+B,EAAoB,OAInB,SAASC,EAAmBpF,EAA8BqF,GAC7D,OAAOA,EAAeC,YAAYtF,GAAiBqF,EAAeE,YAAYvF,GAG3E,SAASwF,EAA0BxF,EAA8BqF,GACpE,OAAOA,EAAeI,oBAAoBzF,GAAiBqF,EAAeE,YAAYvF,GAG1F,SAAS0F,EAAiB7F,GACtB,IAAM8F,EAAU,IAAInF,KAAKX,GAEzB,OADA8F,EAAQpB,SAAS1E,EAAKC,WAAa,GAC5B6F,EAGX,SAASC,EAAkB5F,EAAuBH,GAC9C,GF/CG,SAA4BA,GAC/B,OAA2BJ,KAApBI,EAAKC,WE8CP+F,CAAmBhG,GAEjB,CACH,IAAMiG,EAAiBvD,EAAuBkC,cAAcsB,gBAAgB/F,EAAeH,EAAKyB,eAC1F0E,EAAazD,EAAuBkC,cAAcwB,cAAcjG,EAAeH,GACrF,OAAOiG,EAAiB,EAAIA,EAtBN,KAsB+CE,EAJrE,OAAO,EAQf,SAASE,EAAeC,EAAgBC,GACpC,IAAIC,EAAQF,EAASC,EAAkBE,gBAAkBF,EAAkBG,WACrEC,EAAqB7E,KAAKyC,IAAI+B,EAASE,EAAO,GAEpD,MAAO,CAACG,EADRH,EAAQF,EAASK,GAIrB,SAASC,EAAoBC,EAAmBC,GAG5C,MAAO,CAFehF,KAAKyC,IAAI,EAAGsC,EAAYC,GAChBhF,KAAKyC,IAAI,EAAGuC,EAAgBD,IAI9D,SAASE,EAAiB5G,EAA8BqF,GACpD,OAAOA,EAAewB,UAAU7G,GAAiBqF,EAAeE,YAAYvF,GAWhF,SAAS8G,EAAyBzB,EAAgC0B,EAAmBC,GAEjF,IAAMC,EAVV,SAA0B5B,GACtB,IADsD,EAClD6B,EAAM,EAD4C,cAE1BC,OAAOC,KAAK/B,EAAeC,cAFD,IAEtD,2BACI4B,GAAO9B,EAD6E,QAC3CC,GAHS,8BAKtD,OAAO6B,EAKgBG,CAAiBhC,GAClCiC,EACFN,EAAQ1F,cACRyF,EAAYzF,eACX0F,EAAQlH,WAAaiH,EAAYjH,YAAcL,EACpD4F,EAAekC,UAAYN,EAAiBA,EAAiBtF,KAAK6F,IAAI,IAAmBF,GAG7F,SAASG,EAAwBtB,EAAgBuB,EAA4BC,GACzE,IAAMC,EAAkBjG,KAAKC,MAAM+F,EAAgBlI,GACnD,OAAO0G,EAASxE,KAAK6F,IAAI,EAAIE,EAAoBE,GAyErD,SAASC,EACLC,EACAC,EACAlI,EACAkH,EACAiB,EACAC,GAEA,IADF,EACQrD,EAAWrC,EAAuBkC,cACpC4B,EAAQ,EACN6B,EAAqBJ,EAAgBA,EAAgBrG,OAAS,GAC9D0G,EAAoC,CACtCtI,KAAMA,EACNgH,UAAU,eAAMqB,EAAmBrB,WACnCvB,YAAY,eAAM4C,EAAmB5C,aACrC8C,kBAAkB,eAAMF,EAAmBE,mBAC3C3C,oBAAoB,eAAMyC,EAAmBzC,qBAC7C4C,WAAYH,EAAmBG,WAC/B9C,YAAY,eAAM2C,EAAmB3C,aACrC+C,mBAAmB,eAAMJ,EAAmBI,oBAC5CC,iBAAiB,eAAML,EAAmBK,kBAC1CC,cAAe,EACfC,WAAYP,EAAmBO,WAC/BC,YAAY,eAAMR,EAAmBQ,aACrCC,UAAU,eAAMT,EAAmBS,WACnCpB,UAAW,GAlBjB,cAoB8BJ,OAAOC,KAAKY,IApB1C,IAoBE,2BAAwE,CAAC,IAA9DhI,EAA6D,QAC9D4I,EAA4BZ,EAAWhI,GAA4B+H,EACzEI,EAAkBK,eAAiBI,EAFiC,MAGpB1C,EAC5C0C,EACAX,EAAcY,YALkD,mBAG7DC,EAH6D,KAOpEzC,GAPoE,KAQpE8B,EAAkBI,iBAAiBvI,GAAiB8I,EACpDX,EAAkBG,mBAAmBtI,IAAkB8I,EAEvD,IAAMC,EAAgBnE,EAASqB,cAAcjG,EAAeH,GACtDgH,EAAYiC,EAA8BC,EAChDZ,EAAkB5C,YAAYvF,GAAiB+I,EAC/CZ,EAAkBtB,UAAU7G,GAAiB6G,EAE7C,IAAMmC,EAA8BpD,EAAkB5F,EAAeH,GAE/DoJ,EADsBd,EAAkB7C,YAAYtF,GAAiBgJ,EACzBD,EAClDZ,EAAkBtB,UAAU7G,IAAkBiJ,EAC9Cd,EAAkBC,kBAAkBpI,GAAiBiJ,EACrDd,EAAkB1C,oBAAoBzF,IAAkBiJ,EAExDd,EAAkB7C,YAAYtF,IAAkBmI,EAAkBtB,UAAU7G,GAC5EmI,EAAkBQ,UAAU3I,GAAiB,GA5CnD,8BA8CEmI,EAAkBE,YAAchC,EA9ClC,MA5DF,SACIyB,EACAjI,EACAqJ,EACAlB,GAEA,IAAKpI,EAAoBC,IAASiI,EAAgBrG,OAAS,EACvD,MAAO,CAAC,EAAGyH,GAEf,IAJF,EFlHoBC,EAAeC,EAAahF,EEsH1CiF,EAAc,EACZC,EAAyBxB,EAAgBA,EAAgBrG,OAAS,GAGlE8H,EACFzB,EAAgBrG,OAAShC,EAAwB,EAC3CqI,EAAgBA,EAAgBrG,OAAShC,GACzCqI,EAAgB,GAX5B,cAY8BX,OAAOC,KAAKY,IAZ1C,IAYE,2BAAwE,CAGpE,IAHqE,IAA9DhI,EAA6D,QAChEwJ,EAAyB,EAEpBC,EAAI,EAAGA,EAAIhK,GAAyBqI,EAAgBrG,OAASgI,EAAI,EAAGA,IAEzED,GACK5C,EAAiB5G,EAFQ8H,EAAgBA,EAAgBrG,OAASgI,IAETA,EAAKhK,EAGvE+J,GACKpE,EAAmBpF,EAAeuJ,IAC9B9J,EAAwB8J,EAA8B1J,KAAKC,YAChEL,EACJ+J,GAA0B,MAC1B,IAEME,EAFqBtE,EAAmBpF,EAAesJ,GAEdA,EAAuBhB,mBAAmBtI,GACrF2J,EAAwB,EACxB7B,EAAgBrG,OAAShC,IACzBkK,EAAwBhI,KAAKyC,IACzB,EACAgB,EAAmBpF,EAAe8H,EAAgBA,EAAgBrG,OAAS,EAAIhC,IAC3EqI,EAAgBA,EAAgBrG,OAAS,EAAIhC,GAAuB6I,mBAChEtI,KAKhB,IACI4J,GF3JUT,EE0JWO,EAAoBC,EF1JhBP,EE2JoB,EF3JPhF,EE2JUoF,EF1JjD7H,KAAKyC,IAAIgF,EAAKzH,KAAKyH,IAAID,EAAO/E,KE6HmC,EA8BtBqC,EAAoBmD,EAAoBV,GA9BlB,mBA8BnEU,EA9BmE,KA8B/CV,EA9B+C,KA+BpEG,GAtIiB,GAsIFO,EAAwCzE,GA3C7D,8BA6CE,MAAO,CAACkE,EAAaH,GAyDwBW,CACzC/B,EACAjI,EACAoI,EAActB,cACdqB,GAnDN,mBA+CS8B,EA/CT,KA+CmBC,EA/CnB,KAyDE,OAJA5B,EAAkBM,YAAcqB,EAChChD,EAAyBqB,EAAmBpB,EAAalH,GACzDiI,EAAgBpG,KAAKyG,GAEd4B,EAGX,SAASC,EACLlC,EACAmC,EACAjC,EACAnI,EACAkH,EACAkB,EACAiC,EACAhB,EACAiB,GAEIvK,EAAoBC,KACpBqJ,EAAwBjB,EAActB,eAE1C,IAJF,EAIQ/B,EAAWrC,EAAuBkC,cACpC4B,EAAQ,EACR+D,EAAQ,EACNlC,EAAqBJ,EAAgBA,EAAgBrG,OAAS,GAC9D0G,EAAoC,CACtCtI,KAAMA,EACNgH,UAAU,eAAMqB,EAAmBrB,WACnCvB,YAAY,eAAM4C,EAAmB5C,aACrC8C,kBAAkB,eAAMF,EAAmBE,mBAC3C3C,oBAAoB,eAAMyC,EAAmBzC,qBAC7C4C,WAAYH,EAAmBG,WAC/B9C,YAAY,eAAM2C,EAAmB3C,aACrC+C,mBAAmB,eAAMJ,EAAmBI,oBAC5CC,iBAAiB,eAAML,EAAmBK,kBAC1CC,cAAe,EACfC,WAAYP,EAAmBO,WAC/BC,YAAY,eAAMR,EAAmBQ,aACrCC,UAAU,eAAMT,EAAmBS,WACnCpB,UAAW,GAtBjB,cAwB8BJ,OAAOC,KAAKY,IAxB1C,IAwBE,2BAAwE,CAAC,IAA9DhI,EAA6D,QAC9D+I,EAAgBnE,EAASqB,cAAcjG,EAAeH,GAK5D,GAJAsI,EAAkB5C,YAAYvF,GAAiB+I,EAC/CZ,EAAkBQ,UAAU3I,GAAiB,EAC7CmI,EAAkBI,iBAAiBvI,GAAiB,EAEhDmK,EAAYnK,GAAeqK,mBAAqBvC,EAAgBrG,OAAQ,CAUxE,IARA,IAAM6I,EAAgBtC,EAAWhI,GAA4BiK,EACzDM,EAAoB,EAClBC,EAAatE,EAAeoE,EAAcrC,EAAcY,YAAY,GACtE4B,EAAmB,EACnBC,EAAiCP,EAAYnK,GAAeqK,mBAC5DM,EACA7C,EAAgB4C,GAAgC7D,UAAU7G,GAC1DmK,EAAYnK,GAAe4K,kBACxBF,EAAiC5C,EAAgBrG,OAAQiJ,IAAkC,CAC9F,IAAMG,EAAuBP,EAAeC,EACtCO,EAA+BhD,EAAgB4C,GAE/CK,EACFhC,GACC2B,IAAmCP,EAAYnK,GAAeqK,mBACzDS,EAA6BjE,UAAU7G,GACvCmK,EAAYnK,GAAe4K,kBAC3BE,EAA6BjE,UAAU7G,IAC3CgL,EAAwBrJ,KAAKyH,IAAI2B,EAAsBF,GACvDI,EAAuBD,EAAwBjC,EACrD4B,EAAoBG,EAA6BjE,UAAU7G,GAAiBiL,EAC5EN,GACID,IAAmCP,EAAYnK,GAAeqK,mBACxDF,EAAYnK,GAAe4K,kBAC3B,EAEV,IAAMM,EAA2BvJ,KAAKyC,IAAI,EAAG4G,GAAyBR,EAAaC,IACnFA,GAAoB9I,KAAKyC,IAAI,EAAG4G,EAAwBE,GAExD,IAAMC,EACFF,EAAuBH,EAA6BvF,YAAYvF,GAChEoL,EAAmBzJ,KAAKyC,IAAI,EAAG8G,EAA2BC,GAvBgC,EAyBlD1E,EACxC2E,EACAlC,GA3B0F,mBAyB7FkC,EAzB6F,KAyB3ElC,EAzB2E,KA6B9F,IAAImC,EA7RK,GA6RQD,EAAsCjG,EA7BuC,EA8BrDsB,EAAoB4E,EAAYnB,GA9BqB,mBA8B7FmB,EA9B6F,KA8BjFnB,EA9BiF,KA+B9FE,GAASiB,EACT,IAAMC,EAAeJ,EAA2BG,EAEhDlD,EAAkBQ,UAAU3I,IAAkBsL,EAC9CnD,EAAkBO,YAAY1I,IAAkBsL,EAEhDnD,EAAkB7C,YAAYtF,IAAkBiL,EAChDV,GAAqBS,EAGrB,IAAIO,EAA6B,EAE7BA,EADAb,IAAmCP,EAAYnK,GAAeqK,mBACjC1I,KAAKyC,IAC9B,EACA0G,EAA6B1C,kBAAkBpI,GAC3CmK,EAAYnK,GAAe4K,mBAGNE,EAA6B1C,kBAAkBpI,GAEhF,IAAMwL,EAA6B7J,KAAKyH,IAAImC,EAA4BN,GAIxE,GAHA9C,EAAkB1C,oBAAoBzF,IAAkBwL,EAGpDjB,GAAqBD,EACrB,MAGRjE,GAASoE,EAETN,EAAYnK,GAAeqK,mBAAqBK,EAChDP,EAAYnK,GAAeqK,oBAA4C,IAAtBM,EAA0B,EAAI,EAE/ER,EAAYnK,GAAe4K,kBACvBF,EAAiC5C,EAAgBrG,OAC3CqG,EAAgB4C,GAAgC7D,UAAU7G,GAAiB2K,EAC3E,EAId,IAEM1B,EADFd,EAAkB7C,YAAYtF,GAAiB4F,EAAkB5F,EAAeH,GAClCkJ,EAClDZ,EAAkBtB,UAAU7G,GAAiBiJ,EAC7Cd,EAAkB7C,YAAYtF,IAAkBiJ,EAChDd,EAAkBC,kBAAkBpI,GAAiBiJ,EACrDd,EAAkB1C,oBAAoBzF,IAAkBiJ,GArH9D,8BA4HE,OAJAd,EAAkBE,YAAchC,EAChC8B,EAAkBM,YAAc2B,EAChCtD,EAAyBqB,EAAmBpB,EAAalH,GACzDiI,EAAgBpG,KAAKyG,GACd,CAAC+B,EAA0BhB,GAGtC,SAASuC,EAA4BzD,EAAsBnI,GACvD,IADmE,EAC7D+E,EAAWrC,EAAuBkC,cAClCiH,EAAwB,CAAE,WAAY,EAAGC,KAAM,EAAGC,KAAM,GACxDC,EAAsC,CACxChM,KAAMA,EACNwI,WAAY,EACZI,WAAY,EACZ5B,UAAU,eAAM6E,GAChBpG,YAAY,eAAMoG,GAClBtD,kBAAkB,eAAMsD,GACxBjG,oBAAoB,eAAMiG,GAC1BpD,mBAAmB,eAAMoD,GACzBhD,YAAY,eAAMgD,GAClB/C,UAAU,eAAM+C,GAChBnG,YAAY,eAAMmG,GAClBnD,iBAAiB,eAAMmD,GACvBlD,cAAe,EACfjB,UAAW,GAjBoD,cAmBvCJ,OAAOC,KAAKY,IAnB2B,IAmBnE,2BAAwE,CAAC,IAA9DhI,EAA6D,QACpE6L,EAAoBhF,UAAU7G,GAAiB,EAC/C6L,EAAoBvG,YAAYtF,GAAiB,EACjD6L,EAAoBzD,kBAAkBpI,GAAiB,EACvD6L,EAAoBpG,oBAAoBzF,GAAiB,EACzD6L,EAAoBvD,mBAAmBtI,GAAiB,EACxD6L,EAAoBnD,YAAY1I,GAAiB,EACjD6L,EAAoBlD,UAAU3I,GAAiB,EAC/C6L,EAAoBtD,iBAAiBvI,GAAiB,EACtD6L,EAAoBtG,YAAYvF,GAAiB4E,EAASqB,cAAcjG,EAAeH,IA5BxB,8BA8BnE,OAAOgM,EAGJ,IAAMC,EAAb,WAiBI,WACIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACApE,EACAC,EACAoE,EACAC,GACD,yBA3BKP,kBA2BN,OA1BMC,uBA0BN,OAzBMC,8BAyBN,OAxBMC,mBAwBN,OAvBMC,0BAuBN,OAtBMC,uBAsBN,OArBMpE,gBAqBN,OApBMC,mBAoBN,OAnBMqE,uBAmBN,OAlBMD,SAkBN,OAhBME,YAAsB,GAgB5B,KAfMC,YAAsB,GAe5B,KAdMzF,YAAoB,IAAIvG,KAc9B,KAbMsH,gBAAoC,GAcxCpF,KAAKqJ,aAAeA,EACpBrJ,KAAKsJ,kBAAoBA,EACzBtJ,KAAKwJ,cAAgBA,EACrBxJ,KAAK0J,kBAAoBA,EACzB1J,KAAKsF,WAAaA,EAClBtF,KAAKuF,cAAgBA,EACrBvF,KAAK4J,kBAAoBA,EACzB5J,KAAK2J,IAAMA,EACX3J,KAAKuJ,yBAA2BvM,EAAuBuM,GACvDvJ,KAAKyJ,qBAAuBzM,EAAuByM,GAEnDzJ,KAAK+J,+BACL/J,KAAKgK,kBAzCb,gEA4CI,WAOI,IAPoC,IAAD,EA/V3C,SACIL,EACAM,EACAP,GAED,IADCQ,EACF,uDADyB,GAEjBC,EAAYF,EAAkBN,EAC9BS,EAAM,IAAItM,KACVuM,EAAgB,IAAIvM,KAAKsM,EAAIxL,cAAewL,EAAIhN,WAAa,GAE7DkN,EAAqB,IAAIxM,KAAKuM,GACpCC,EAAmBC,YAAYF,EAAczL,cAAgB8K,GAC7D,IAAMpF,EAAU,IAAIxG,KAAKuM,GAEzB,OADA/F,EAAQiG,YAAYF,EAAczL,cAAgBuL,EAAYD,GACvD,CAACG,EAAeC,EAAoBhG,GAkVUkG,CAC7CxK,KAAK2J,IACL3J,KAAK4J,kBACL5J,KAAK0J,mBAJ0B,mBAC5Be,EAD4B,KACjBH,EADiB,KACGhG,EADH,KAM7BuF,EAAc,GAEZa,EAAcD,EAClBC,EAAcJ,EACdI,EAAc1H,EAAiB0H,GAE/Bb,EAAY7K,KAAK0L,GAErB1K,KAAK6J,YAAcA,EAEnB,IADA,IAAMC,EAAc,GACXY,EAAcJ,EAAoBI,EAAcpG,EAASoG,EAAc1H,EAAiB0H,GAC7FZ,EAAY9K,KAAK0L,GAErB1K,KAAK8J,YAAcA,EACnB9J,KAAKqE,YAAcoG,IAhE3B,6BAmEI,WACI,IAAIrF,EAAkB,CAAC2D,EAA4B/I,KAAKsF,WAAYtF,KAAK6J,YAAY,KACrF1E,EACIC,EACApF,KAAKsJ,kBAAoBtJ,KAAKqJ,aAC9BrJ,KAAK6J,YAAY,GACjB7J,KAAKqE,YACLrE,KAAKsF,WACLtF,KAAKuF,eAET,IAAK,IAAIwB,EAAI,EAAGA,EAAI/G,KAAK6J,YAAY9K,OAAQgI,IAAK,CAE9C5B,EACIC,EAFqBL,EAAwB/E,KAAKsJ,kBAAmBtJ,KAAKuJ,yBAA0BxC,GAIpG/G,KAAK6J,YAAY9C,GACjB/G,KAAKqE,YACLrE,KAAKsF,WACLtF,KAAKuF,eAab,IAPA,IAAIiC,GAFJpC,EAAkBA,EAAgBuF,MAAM,IAEOvF,EAAgBrG,OAAS,GAAGgH,WACvES,EAAwBxG,KAAKuF,cAActB,cACzCwD,EAA4B,CAC9B,WAAY,CAAEE,mBAAoB,EAAGO,kBAAmB,GACxDe,KAAM,CAAEtB,mBAAoB,EAAGO,kBAAmB,GAClDgB,KAAM,CAAEvB,mBAAoB,EAAGO,kBAAmB,IAE7CnB,EAAI,EAAGA,EAAI/G,KAAK8J,YAAY/K,OAAQgI,IAAK,CAC9C,IAD8C,EAEMO,EAChDlC,EAFiBL,EAAwB/E,KAAKwJ,cAAexJ,KAAKyJ,qBAAsB1C,GAIxF/G,KAAKsF,WACLtF,KAAK8J,YAAY/C,GACjB/G,KAAKqE,YACLrE,KAAKuF,cACLiC,EACAhB,EACAiB,GAX0C,mBAE7CD,EAF6C,KAEnBhB,EAFmB,KAclDxG,KAAKoF,gBAAkBA,IAhH/B,gCAmHI,SAAmBwF,GACf,IAAKC,OAAOC,UAAU/N,EAAwB6N,GAC1C,MAAM,IAAI/M,MAAJ,6DACoDd,EADpD,6BAKV,GAAI6N,IAA2B7N,EAC3B,OAAOiD,KAAKoF,gBAIhB,IAFA,IAAM2F,EAA0B,GAC1BC,EAAwBjO,EAAwB6N,EAC7C7D,EAAI,EAAGA,EAAI/G,KAAKoF,gBAAgBrG,OAAQgI,GAAKiE,EAAuB,CAGzE,IADA,IAAMC,EAAyBC,IAAUlL,KAAKoF,gBAAgB2B,IACrDoE,EAAS,EAAGA,EAASH,EAAuBG,IAAU,CAC3DF,EAAuBnF,eAAiB9F,KAAKoF,gBAAgB2B,EAAIoE,GAAQrF,cADd,oBAE/BrB,OAAOC,KAC/B1E,KAAKoF,gBAAgB2B,EAAIoE,GAAQlF,YAHsB,IAE3D,2BAEsB,CAAC,IAFZ3I,EAEW,QAClB2N,EAAuBhF,UAAU3I,IAAkB0C,KAAKoF,gBAAgB2B,EAAIoE,GAAQlF,UAChF3I,IANmD,+BAU/DyN,EAAwB/L,KAAKiM,GAEjC,OAAOF,IA9If,qCAiJI,WACI,OAAO/K,KAAK8J,YAAY,OAlJhC,K,eC9YMsB,EAAe,IAEfC,EAAc,IAGb,SAASC,GAA2BC,GAAsD,IAAxC9E,EAAuC,4DAAX9I,EACjF,MAAM,GAAN,OAAU4N,EAAKC,OAAO,GAAGC,eAAzB,OAAyCF,EAAKZ,MAAM,GAApD,aAAoE,MAATlE,EAAgB,IAAMA,GAgB9E,IAAMiF,GAAb,WAkCI,WACItG,EACAuG,EACAC,EACAC,EACAC,EACAC,GAKD,IAJCC,EAIF,uDAJU,KACRC,EAGF,uDAHW,IACTC,EAEF,uDAFY,IACVC,EACF,uDADY,GAEV,GADF,yBA5CFL,iBA4CE,OA3CFC,aA2CE,OAzCiBK,gBAAkB,EAyCnC,KAxCiBC,iBAAmB,GAwCpC,KAvCiBC,qBAAuB,QAuCxC,KArCQlH,qBAqCR,OApCQmH,WAA2B,CAAC,IAAIzO,KAAQ,IAAIA,MAoCpD,KAnCQoO,aAmCR,OAlCQC,aAkCR,OAjCQH,WAiCR,OAhCQC,YAgCR,OA/BQO,SAAW,EA+BnB,KA9BQC,SAAW,EA8BnB,KA7BQC,OAAgDjP,MA6BxD,KA5BQkP,OAA8ClP,MA4BtD,KA3BQmP,UAAuB,GA2B/B,KA1BQC,eAAkC,GA0B1C,KAzBQjB,0BAyBR,OAvBQkB,SAuBR,OAnBeC,kBAAoB,kBAmBnC,KAjBMC,mBAAqB,GAiB3B,KAfMC,eAeN,OAdMC,iBAcN,OAbMC,eAaN,EACMnN,KAAKoN,cAAgB1B,EACrB,MAAM,IAAI7N,MAAM,2CAEpB6N,EAAgB2B,iBAAiBrO,KAAKgB,MACtCA,KAAKoF,gBAAkBA,EACvBpF,KAAK4L,qBAAuBA,EAC5B5L,KAAK8L,YAA6B,MAAfA,EAAsBA,EAAc,IAAIhO,KAAK,GAChEkC,KAAK+L,QAAqB,MAAXA,EAAkBA,EAAU,CAAC,EAAG,GAE/C/L,KAAKkM,QAAUA,EACflM,KAAKmM,QAAUA,EACfnM,KAAKgM,MAAQA,EACbhM,KAAKiM,OAASA,EAGdN,EAAa2B,UAAY,GAEzBtN,KAAK8M,IAAMrP,IACCkO,GACP4B,OAAO,OACPC,KAAK,KAAM3B,GACX2B,KAAK,UAJC,cAIiBxN,KAAKgM,MAAQ,EAAIhM,KAAKkM,QAJvC,YAIkDlM,KAAKiM,OAAS,EAAIjM,KAAKmM,UAC/EoB,OAAO,KACPC,KAAK,YANC,oBAMyB,CAACxN,KAAKkM,QAAU,EAAGlM,KAAKmM,SANjD,MASXnM,KAAKmN,UAAYnN,KAAK8M,IACtB9M,KAAKkN,YAAclN,KAAK8M,IACxB9M,KAAKiN,UAAYjN,KAAK8M,IAAIS,OAAO,QA1EzC,0CAuFI,WACIvN,KAAKyN,eACLzN,KAAK0N,oBACL1N,KAAK2N,gBACL3N,KAAK4N,eACL5N,KAAK6N,eACL7N,KAAK8N,eACL9N,KAAK+N,YACL/N,KAAKgO,YACLhO,KAAKiO,kBAEDjO,KAAK8L,aAAe9L,KAAKuM,WAAW,IAAMvM,KAAK8L,aAAe9L,KAAKuM,WAAW,IAC9EvM,KAAKkO,uBAnGjB,gCAuGI,SAA6BzH,GAAyC,IAA1B0H,EAAyB,wDAC3DC,EACFnP,KAAKyC,KAAK1B,KAAK+L,QAAQ,GAAI/L,KAAK+L,QAAQ,KAAiBX,EAAeC,EA9H/D,IA+HPgD,EAAkBD,IAAwB/C,EAAc,IAAM,IAIpE,OAHI8C,IACA1H,EAAQxH,KAAKwB,IAAIgG,IAEf,GAAN,QAAWA,EAAQ2H,GAAqBE,oBAAe3Q,EAAW,CAC9D4Q,sBAAuB,KAD3B,OAEKF,EAFL,aA9GR,+BAmHI,WAA6B,IAAD,OACxBrO,KAAKuM,WAAa9O,IAAUuC,KAAK4M,UAAU,IAAI,SAAA4B,GAAC,OAAIA,EAAErR,QAEtD,IAAMsR,EAA6B,IAAI3Q,KAAKkC,KAAK4L,sBAGjD,GAFA6C,EAA2B5M,SAAS4M,EAA2BrR,WAAaL,GAEpD,IAApBiD,KAAK+L,QAAQ,IAAgC,IAApB/L,KAAK+L,QAAQ,GAAU,CAChD,IAAM2C,EAA2B1O,KAAK4M,UAAU5M,KAAKwM,UAAU3L,QAC3D,SAAA8N,GAAC,OAAIA,EAAExR,MAAQsR,GAA8BE,EAAExR,KAAO,EAAKoP,WAAW,MAEpEqC,EAA2B5O,KAAK4M,UAAU5M,KAAKyM,UAAU5L,QAC3D,SAAA8N,GAAC,OAAIA,EAAExR,MAAQsR,KAEbI,EAASpR,IAAOiR,EAAyBlQ,KAAI,SAAAmQ,GAAC,OAAIA,EAAEG,WACpDC,EAAStR,IAAOmR,EAAyBpQ,KAAI,SAAAmQ,GAAC,OAAIA,EAAEK,SAC1DhP,KAAK+L,QAAU,CAACgD,EAAQF,MAlIpC,2BAsII,WACI7O,KAAK0M,OAASjP,MAAiBwR,OAAOjP,KAAK+L,SAASmD,MAAM,CAAClP,KAAKiM,OAAQ,IACxEjM,KAAK2M,OAASlP,MAAewR,OAAOjP,KAAKuM,YAAY2C,MAAM,CAAC,EAAGlP,KAAKgM,UAxI5E,uBA2II,WAAqB,IAAD,OAChBhM,KAAK8M,IACAS,OAAO,KACP4B,MAAM,YAAa,QACnBC,KACG3R,IACcuC,KAAK0M,QACd2C,YAAW,SAAAb,GAAC,OAAI,EAAKc,mBAAmBd,MACxCe,MAtKC,IAyKdvP,KAAK8M,IACAS,OAAO,KACP4B,MAAM,YAAa,QACnB3B,KAAK,YAHV,uBAGuCxN,KAAKiM,OAH5C,MAIKmD,KAAK3R,IAAcuC,KAAK2M,SAG7B3M,KAAK8M,IACAS,OAAO,KACPA,OAAO,QACPC,KAAK,KAAMxN,KAAK2M,OAAO3M,KAAKuM,WAAW,KACvCiB,KAAK,KAAMxN,KAAK0M,OAAO,IACvBc,KAAK,KAAMxN,KAAK2M,OAAO3M,KAAKuM,WAAW,KACvCiB,KAAK,KAAMxN,KAAK0M,OAAO,IACvByC,MAAM,eAAgBnP,KAAKoM,iBAC3B+C,MAAM,SAAU,SAGrBnP,KAAK8M,IACAS,OAAO,KACPA,OAAO,QACPC,KAAK,KAAMxN,KAAK2M,OAAO3M,KAAK4L,sBAAwB5L,KAAKoM,gBAAkB,GAC3EoB,KAAK,KAAMxN,KAAK0M,OAAO1M,KAAK+L,QAAQ,KACpCyB,KAAK,KAAMxN,KAAK2M,OAAO3M,KAAK4L,sBAAwB5L,KAAKoM,gBAAkB,GAC3EoB,KAAK,KAAMxN,KAAK0M,OAAO1M,KAAK+L,QAAQ,KACpCoD,MAAM,eAAgBnP,KAAKoM,iBAC3B+C,MAAM,SAAU,WAhL7B,6BAmLI,WAA2B,IAAD,OAItBnP,KAAKkN,YAAclN,KAAK8M,IACnBS,OAAO,KACPC,KAAK,QALe,eAMpB2B,MAAM,aAAc,UACpB3B,KAAK,YAJS,oBAIiB,CAAC,GAAIxN,KAAKmM,SAJ3B,MAMnBnM,KAAKiN,UAAYjN,KAAKkN,YACjBK,OAAO,QACPC,KAAK,QAVe,eAWpB2B,MAAM,SAAU,QAChBA,MAAM,mBAAoB,OAC1BA,MAAM,UAAW,IACjB3B,KAAK,KAAMxN,KAAKiM,OAAS,EAAIjM,KAAKmM,SAClCqB,KAAK,KAAM,GAGhBxN,KAAK8M,IACAS,OAAO,QACPC,KAAK,QAAS,cACdA,KAAK,YAHV,oBAGoC,CAAC,GAAIxN,KAAKmM,SAH9C,MAIKqB,KAAK,SAAUxN,KAAKiM,OAAS,EAAIjM,KAAKmM,SACtCqB,KAAK,QAASxN,KAAKgM,OACnBwB,KAAK,OAAQ,QACb2B,MAAM,iBAAkB,OACxBK,GAAG,aAAa,kBAAM9D,EAAgB+D,wCAAwC,cAC9ED,GAAG,YAAY,kBAAM9D,EAAgB+D,wCAAwC,aAC7ED,GAAG,aAAa,SAAAE,GAAU,OAAI,EAAKC,oBAAoBD,QAjNpE,iCAqNI,SAA4BA,GACxB,IAAME,EAAInS,IAAWiS,GAAY,GAC3BvS,EAAO6C,KAAK2M,OAAOkD,OAAOD,GAChC5P,KAAK8L,YAAczM,EAA4BlC,GAC/C6C,KAAKkO,uBAzNb,gCA4NI,WACI,IADyB,EACnB4B,EA1Od,SAA6C3S,EAAYiI,GACrD,IAAM2K,EAAY3K,EAAgB,GAAGjI,KAC/B6S,EAAa5K,EAAgB,GAAGjI,KAChC8S,GACD9S,EAAKyB,cAAgBmR,EAAUnR,eAAiB7B,GAChDI,EAAKC,WAAa2S,EAAU3S,YAC3B8S,GACDF,EAAWpR,cAAgBmR,EAAUnR,eAAiB7B,GACtDiT,EAAW5S,WAAa2S,EAAU3S,YAEvC,OAAO6B,KAAKC,MAAM+Q,EAA+BC,GAgOjBC,CAAoCnQ,KAAK8L,YAAa9L,KAAKoF,iBAD9D,cAEGsG,EAAgB2B,kBAFnB,IAEzB,2BAA8D,CAAC,IAApD+C,EAAmD,QAC1DA,EAAcnD,UAAUO,KAAK,KAAMxN,KAAK2M,OAAO3M,KAAK8L,cAAc0B,KAAK,KAAMxN,KAAK2M,OAAO3M,KAAK8L,cAC9FsE,EAAcC,eAAeP,GAC7BM,EAAcE,kBALO,iCA5NjC,uBAqOI,WACItQ,KAAKmN,UAAYnN,KAAK8M,IAAIS,OAAO,KAAKC,KAAK,QAAS,aACpDxN,KAAKmN,UACAoD,UAAU,QACVC,KAAK/L,OAAOgM,OAAOzQ,KAAK6M,iBACxB6D,QACAnD,OAAO,QACPoD,MAAK,SAAAnC,GAAC,OAAIA,EAAEmC,QACZnD,KAAK,KAAK,SAAAgB,GAAC,OAAIA,EAAEoB,KACjBpC,KAAK,KAAK,SAAAgB,GAAC,OAAIA,EAAEoC,KACjBzB,MAAM,aAAa,SAAAX,GAAC,OAAIA,EAAEqC,YAC1B1B,MAAM,eAAe,SAAAX,GAAC,OAAIA,EAAEsC,cAC5B3B,MAAM,eAAe,SAAAX,GAAC,OAAIA,EAAEuC,cAC5B5B,MAAM,QAAQ,SAAAX,GAAC,OAAIA,EAAEwC,WAlPlC,4BAqPI,WACIhR,KAAKmN,UAAUoD,UAAU,QAAQI,MAAK,SAAAnC,GAAC,OAAKA,EAAoBmC,UAtPxE,0BAyPI,WACI,IAAMM,EACFjR,KAAK2M,OAAO3M,KAAKuM,WAAW,KAC3BvM,KAAK2M,OAAO3M,KAAK4L,sBAAwB5L,KAAK2M,OAAO3M,KAAKuM,WAAW,KAAO,EAE3E2E,EACFlR,KAAK2M,OAAO3M,KAAK4L,uBAChB5L,KAAK2M,OAAO3M,KAAKuM,WAAW,IAAMvM,KAAK2M,OAAO3M,KAAK4L,uBAAyB,EAC3EuF,GAAQ,GACdnR,KAAK6M,eAAiB,CAClBuE,WAAY,CACRT,KAAM,SACNf,EAAGqB,EACHL,EAAGO,EACHN,SAAU7Q,KAAKqM,iBACf0E,WAAY,MACZD,WAAY,OACZE,MAAO,SAEXK,YAAa,CACTV,KAAM,QACNf,EAAGqB,EACHL,EAAGO,EACHN,SAAU7Q,KAAKqM,iBACf0E,WAAY,QACZD,WAAY,SACZE,MAAO,SAEXM,WAAY,CACRX,KAAM,SACNf,EAAGsB,EACHN,EAAGO,EACHN,SAAU7Q,KAAKqM,iBACf0E,WAAY,MACZD,WAAY,OACZE,MAAO,SAEXO,YAAa,CACTZ,KAAM,QACNf,EAAGsB,EACHN,EAAGO,EACHN,SAAU7Q,KAAKqM,iBACf0E,WAAY,QACZD,WAAY,SACZE,MAAO,YArSvB,0BA0SI,WACI,IAAMQ,EAAexR,KAAK8M,IAAIS,OAAO,KAAKC,KAAK,QAAS,WAClDiE,EAAmB,IAAI3T,KAAKkC,KAAKuM,WAAW,IAClDkF,EAAiBlH,YAAYkH,EAAiB7S,cAAgBoB,KAAKgN,oBAEnE,IAAM0E,EAAWF,EAAajE,OAAO,kBAAkBC,KAAK,KAAMxN,KAAK+M,mBAEvE2E,EACKnE,OAAO,QACPC,KAAK,QAAS,SACdA,KAAK,SAAU,MACfA,KAAK,aAAc,SACnBA,KAAK,eAAgB,GAE1BkE,EACKnE,OAAO,QACPC,KAAK,QAAS,OACdA,KAAK,SAAU,QACfA,KAAK,aAAc,SACnBA,KAAK,eAAgB,GAE1BgE,EACKjE,OAAO,QACPC,KAAK,IAAKxN,KAAK2M,OAAO8E,IACtBjE,KAAK,IAAoB,EAAfxN,KAAKmM,SAAe,GAC9BqB,KAAK,QAASxN,KAAK2M,OAAO3M,KAAKuM,WAAW,IAAMvM,KAAK2M,OAAO8E,IAC5DjE,KAAK,SAAUxN,KAAK0M,OAAO1M,KAAK+L,QAAQ,IAAM/L,KAAK0M,OAAO1M,KAAK+L,QAAQ,IAAqB,EAAf/L,KAAKmM,SAClFgD,MAAM,OANX,eAM2BnP,KAAK+M,kBANhC,QA/TR,0BAwUI,WACI,MAAM,IAAIlP,MAAM,sCAzUxB,0BA4UI,WACI,MAAM,IAAIA,MAAM,sCA7UxB,4BAgVI,SAAyBiS,GACrB,MAAM,IAAIjS,MAAM,uCAjVxB,oBA6EI,WACI6N,EAAgB2B,iBAAmB,KA9E3C,qDAiFI,SAAuDsE,GAAwB,IAAD,gBAC9CjG,EAAgB2B,kBAD8B,IAC1E,2BAA8D,SAC5CH,YAAYiC,MAAM,aAAcwC,IAFwB,mCAjFlF,KC7BA,SAASC,KAGN,IAFCC,EAEF,4DAFwClU,EACtCmU,EACF,4DADmCnU,EAEjC,MAAM,QAAN,OAAkC,MAAnBkU,EAA0B,IAAMA,EAA/C,kBAAsF,MAAdC,EAAqB,IAAMA,GDyB1FpG,GAwBM2B,iBAAsC,GC9ClD,IAAM0E,GAAb,kDAmBI,WACI3M,EACAuG,EACAC,EACAE,EACAC,EACAiG,GACD,IAAD,uBACE,cAAM5M,EAAiBuG,EAAcC,EAAsB,WAAYE,EAAaC,IA1BvEkG,cAAuC,CACpD,WAAY,CAAEC,MAAO,UAAWC,SAAU,WAC1ClJ,KAAM,CAAEiJ,MAAO,UAAWC,SAAU,WACpCjJ,KAAM,CAAEgJ,MAAO,UAAWC,SAAU,YAsBtC,EApBeC,OAAuC,CACpDvN,UAAW,UACXc,WAAY,UACZI,WAAY,WAiBd,EAfesM,YAAc,GAe7B,EAdeC,eAAqD,CAAC,aAAc,aAAc,aAcjG,EAbeC,mBAAqB,WAapC,EAZeC,kBAAoB,UAYnC,EAVMC,oBAUN,IATMC,YAA4B,GAYhC,EAAKD,eAAiB,GAHxB,oBAI8BhO,OAAOC,KAAKsN,IAJ1C,IAIE,2BAAqE,CAAC,IAA3D1U,EAA0D,QAC3DqV,EAAQX,EAAS1U,GACX,MAARqV,GAAgBA,EAAQ,GACxB,EAAKF,eAAezT,KAAK1B,IAPnC,uCA1BN,gDAsCI,WACI0C,KAAK0S,YAAc,CACf/M,WAAY,EACZI,WAAY,EACZlB,UAAW,GAGf,IAPW,EAOP+N,EAAa,EAPN,cAQiB5S,KAAKyS,gBARtB,IAQX,2BAAiD,CAAC,IAAvCnV,EAAsC,QAC7C0C,KAAK0S,YAAYpV,EAAgB0C,KAAKuS,oBAAsBK,IAC5D5S,KAAK0S,YAAYpV,EAAgB0C,KAAKwS,mBAAqBI,KAVpD,8BAaX5S,KAAKyM,SAAWzM,KAAK0S,YAAY7N,UACjC7E,KAAKwM,SAAWoG,EAAa,EAE7B5S,KAAK4M,UAAY,GACjB,IAAK,IAAI7F,EAAI,EAAGA,EAAI6L,EAAY7L,IAC5B/G,KAAK4M,UAAU5N,KAAK,IAlBb,oBAoBkBgB,KAAKoF,iBApBvB,IAoBX,2BAAmD,CAAC,IAAzCzC,EAAwC,QAC/C3C,KAAK4M,UAAU5M,KAAK0S,YAAY/M,YAAY3G,KAAK,CAC7C8P,OAAQ,EACRE,MAAOrM,EAAegD,WACtBxI,KAAMwF,EAAexF,KACrB6T,MAAOhR,KAAKoS,OAAOzM,aAEvB3F,KAAK4M,UAAU5M,KAAK0S,YAAY3M,YAAY/G,KAAK,CAC7C8P,QAASnM,EAAegD,WACxBqJ,MAAOrM,EAAegD,WAAahD,EAAeoD,WAClD5I,KAAMwF,EAAexF,KACrB6T,MAAOhR,KAAKoS,OAAOrM,aAEvB/F,KAAK4M,UAAU5M,KAAK0S,YAAY7N,WAAW7F,KAAK,CAC5C8P,QAASnM,EAAegD,WAAahD,EAAeoD,WACpDiJ,MAAOrM,EAAegD,WAAahD,EAAeoD,WAAapD,EAAekC,UAC9E1H,KAAMwF,EAAexF,KACrB6T,MAAOhR,KAAKoS,OAAOvN,YAEvB,IAnB+C,EAmB3CgO,EAAe,EAnB4B,cAoBnB7S,KAAKyS,gBApBc,IAoB/C,2BAAiD,CAAC,IAAvCnV,EAAsC,QACvCwV,EAAkBpQ,EAAmBpF,EAAeqF,GACpDoQ,EAA0BjQ,EAA0BxF,EAAeqF,GACzE3C,KAAK4M,UAAU5M,KAAK0S,YAAYpV,EAAgB0C,KAAKwS,oBAAoBxT,KAAK,CAC1E8P,OAAQgE,EAAkBD,EAC1B7D,KAAM8D,EAAkBC,EAA0BF,EAClD1V,KAAMwF,EAAexF,KACrB6T,MAAOhR,KAAKiS,cAAc3U,GAAe4U,QAE7ClS,KAAK4M,UAAU5M,KAAK0S,YAAYpV,EAAgB0C,KAAKuS,qBAAqBvT,KAAK,CAC3E8P,OAAQgE,EAAkBC,EAA0BF,EACpD7D,KAAM6D,EACN1V,KAAMwF,EAAexF,KACrB6T,MAAOhR,KAAKiS,cAAc3U,GAAe6U,WAE7CU,GAAgBC,GAnC2B,gCApBxC,iCAtCnB,wBAkGI,WAEI,IAFU,IAAD,OAEA/L,EAAI,EAAGA,EAAI/G,KAAK4M,UAAU7N,OAAQgI,IACvC/G,KAAK8M,IACAS,OAAO,QACPyF,MAAMhT,KAAK4M,UAAU7F,IACrBoI,MAAM,UAAU,SAAAX,GAAC,OAAIA,EAAE,GAAGwC,SAC1B7B,MAAM,eAAgBnP,KAAKoM,iBAC3B+C,MAAM,UAAWnP,KAAKqS,aACtBlD,MAAM,OAAQ,QACd3B,KACG,IACA/P,MAEKmS,GAAE,SAAApB,GAAC,OAAI,EAAK7B,OAAO6B,EAAErR,SACrByT,GAAE,SAAApC,GAAC,OAAI,EAAK9B,OAAO8B,EAAEM,cAjH9C,0BAqHI,WACI9O,KAAKiT,cAtHb,uBAyHI,WAEI,IAFS,IAAD,OAEClM,EAAI,EAAGA,EAAI/G,KAAK4M,UAAU7N,OAAQgI,IACvC/G,KAAK8M,IACAS,OAAO,KACPC,KAAK,QAAS,QACdD,OAAO,QACPyF,MAAMhT,KAAK4M,UAAU7F,IACrBoI,MAAM,UAAWnP,KAAKqS,aACtBlD,MAAM,QAAQ,SAAAX,GAAC,OAAIA,EAAE,GAAGwC,SACxBxD,KACG,IACA/P,MAEKyV,MAAMzV,KACNmS,GAAE,SAAApB,GAAC,OAAI,EAAK7B,OAAO6B,EAAErR,SACrBgW,IAAG,SAAA3E,GAAC,OAAI,EAAK9B,OAAO8B,EAAEQ,SACtBoE,IAAG,SAAA5E,GAAC,OAAI,EAAK9B,OAAO8B,EAAEM,cA1I/C,0BA+II,WACI,qEAIA,IAHA,IAAMuE,EAAwB,KAAbrT,KAAKgM,MAChBsH,EAAmC,GAAxBtT,KAAKqM,iBAEbtF,EAAI,EAAGA,EAAI/G,KAAKsS,eAAevT,OAAQgI,IAC5C/G,KAAK6M,eAAe7M,KAAKsS,eAAevL,IAAM,CAC1C4J,KAAMrF,GAA2BtL,KAAKsS,eAAevL,IACrD6I,EAAG5P,KAAK2M,OAAO3M,KAAKuM,WAAW,IAAM8G,EACrCzC,EAAG5Q,KAAK0M,OAAO,IAAM1M,KAAKqM,iBAAmBiH,GAAYvM,EAAI/G,KAAKqM,iBAClEwE,SAAU7Q,KAAKqM,iBACf0E,WAAY,QACZD,WAAY,SACZE,MAAOhR,KAAKoS,OAAOpS,KAAKsS,eAAevL,KAK/C,IAAK,IAAIA,EAAI,EAAGA,EAAI/G,KAAKyS,eAAe1T,OAAQgI,IAC5C/G,KAAK6M,eAAe7M,KAAKyS,eAAe1L,IAAM,CAC1C4J,KAAM4C,GAAmBvT,KAAKyS,eAAe1L,IAC7C6I,EAAG5P,KAAK2M,OAAO3M,KAAKuM,WAAW,IAAM8G,EACrCzC,EAAG5Q,KAAK0M,OAAO,IAAM1M,KAAKqM,iBAAmBiH,GAAYvM,EAAI,EAAI,EAAI/G,KAAKqM,iBAC1EwE,SAAU7Q,KAAKqM,iBACf0E,WAAY,QACZD,WAAY,SACZE,MAAOhR,KAAKiS,cAAcjS,KAAKyS,eAAe1L,IAAImL,OAK1D,IAAK,IAAInL,EAAI,EAAGA,EAAI/G,KAAKyS,eAAe1T,OAAQgI,IAC5C/G,KAAK6M,eAAe7M,KAAKyS,eAAe1L,GAAK/G,KAAKsM,sBAAwB,CACtEqE,KAAMiB,KACNhC,EAAG5P,KAAK2M,OAAO3M,KAAKuM,WAAW,IAAM8G,EACrCzC,EAAG5Q,KAAK0M,OAAO,IAAM1M,KAAKqM,iBAAmBiH,GAAYvM,EAAI,EAAI,EAAI/G,KAAKqM,iBAC1EwE,SAAU7Q,KAAKqM,iBACf0E,WAAY,QACZD,WAAY,SACZE,MAAOhR,KAAKiS,cAAcjS,KAAKyS,eAAe1L,IAAImL,SAtLlE,4BA2LI,SAAepC,GAA8B,IAAD,gBACZ9P,KAAKyS,gBADO,IACxC,2BAAiD,CAAC,IAAvCnV,EAAsC,QACvCwU,EAAapP,EAAmBpF,EAAe0C,KAAKoF,gBAAgB0K,IAKpE0D,EAAgB1B,EAJKhP,EACvBxF,EACA0C,KAAKoF,gBAAgB0K,IAGnB2D,EAAmB7B,GACrB5R,KAAKsP,mBAAmBkE,GAAe,GACvCxT,KAAKsP,mBAAmBwC,GAAY,IAExC9R,KAAK6M,eAAevP,EAAgB0C,KAAKsM,sBAAsBqE,KAAO8C,GAZlC,kDAcZzT,KAAKsS,gBAdO,IAcxC,2BAAiD,CAAC,IAAvCoB,EAAsC,QACvCjN,EAAQzG,KAAKoF,gBAAgB0K,GAAqB4D,GAClDD,EAAmBnI,GAA2BoI,EAAe1T,KAAKsP,mBAAmB7I,GAAO,IAClGzG,KAAK6M,eAAe6G,GAAe/C,KAAO8C,GAjBN,mCA3LhD,GAAiC/H,ICxBjC,SAASiI,GAAgBhR,GACrB,IADqD,EACjDiR,EAAe,EADkC,cAEzBnP,OAAOC,KAAK/B,EAAesD,YAFF,IAErD,2BAAsF,CAAC,IAA5E3I,EAA2E,QAClFsW,GAAgBjR,EAAesD,UAAU3I,IAHQ,8BAKrD,OAAOsW,EAGJ,IAAMC,GAAb,kDAMI,WACIzO,EACAuG,EACAC,EACAE,EACAC,GACD,IAAD,8BACE,cAAM3G,EAAiBuG,EAAcC,EAAsB,YAAaE,EAAaC,IAZxE+H,qBAAuB,GAWtC,EAVe1B,OAAS,CAAE2B,OAAQ,UAAW5B,SAAU,WAUvD,EARM6B,UAAY,EAQlB,EAZN,0CAgBI,WACI,iEAjBR,0BAoBI,WAEI,IAAMtB,EACQ,EADRA,EAEM,EAGZ1S,KAAKyM,SAAWiG,EAChB1S,KAAKwM,SAAWkG,EAEhB1S,KAAK4M,UAAY,CAAC,GAAI,IAVX,oBAWkB5M,KAAKoF,iBAXvB,IAWX,2BAAmD,CAAC,IAAzCzC,EAAwC,QAC3CiR,EAAeD,GAAgBhR,GAEnC3C,KAAK4M,UAAU8F,GAAsB1T,KAAK,CACtC8P,OAAQ,EACRE,MAAOrM,EAAemD,cACtB3I,KAAMwF,EAAexF,KACrB6T,MAAOhR,KAAKoS,OAAOD,WAEvBnS,KAAK4M,UAAU8F,GAAoB1T,KAAK,CACpC8P,OAAQ8E,EACR5E,KAAM,EACN7R,KAAMwF,EAAexF,KACrB6T,MAAOhR,KAAKoS,OAAO2B,UAxBhB,8BA4BX/T,KAAKgU,UAAahU,KAAKgM,MAAQhM,KAAK4M,UAAU8F,GAAsB3T,OAAUiB,KAAK8T,uBAhD3F,0BAmDI,WACI,qEAEA,IAAMG,EACFjU,KAAK2M,OAAO3M,KAAK4L,uBAChB5L,KAAK2M,OAAO3M,KAAKuM,WAAW,IAAMvM,KAAK2M,OAAO3M,KAAK4L,uBAAyB,EAC3EsI,EAAUlU,KAAK0M,OAAO,IAAM1M,KAAK0M,OAAO1M,KAAK+L,QAAQ,IAAM/L,KAAK0M,OAAO,IAAM,EAE7EyH,EAAmB,SACzBnU,KAAK6M,eAAL,OAAwC,CACpC8D,KAAMrF,GAA2B6I,GACjCvE,EAAGqE,EACHrD,EAAGsD,EACHrD,SAAU7Q,KAAKqM,iBACf0E,WAAY,SACZD,WAAY,SACZE,MAAOhR,KAAKoS,OAAL,QAGX,IAAMgC,EACFpU,KAAK2M,OAAO3M,KAAKuM,WAAW,KAC3BvM,KAAK2M,OAAO3M,KAAK4L,sBAAwB5L,KAAK2M,OAAO3M,KAAKuM,WAAW,KAAO,EAC3E8H,EAAYrU,KAAK0M,OAAO,IAAM1M,KAAK0M,OAAO,GAAK1M,KAAK0M,OAAO1M,KAAK+L,QAAQ,KAAO,EAE/EwG,EAAqB,WAC3BvS,KAAK6M,eAAL,SAA0C,CACtC8D,KAAMrF,GAA2BiH,GACjC3C,EAAGwE,EACHxD,EAAGyD,EACHxD,SAAU7Q,KAAKqM,iBACf0E,WAAY,SACZD,WAAY,SACZE,MAAOhR,KAAKoS,OAAL,YAnFnB,4BAuFI,SAAetC,GACX,IAAMwE,EAAcX,GAAgB3T,KAAKoF,gBAAgB0K,IACnD0D,EAAgBxT,KAAKoF,gBAAgB0K,GAAqBhK,cAChE9F,KAAK6M,eAAekH,OAAOpD,KAAOrF,GAA2B,SAAUtL,KAAKsP,mBAAmBgF,IAC/FtU,KAAK6M,eAAesF,SAASxB,KAAOrF,GAChC,WACAtL,KAAKsP,mBAAmBkE,MA7FpC,0BAiGI,WAAgB,IAAD,SAELe,EAAoBvU,KAAK4M,UAAU,GAAG5M,KAAK4M,UAAU,GAAG7N,OAAS,GAAG5B,OAAS6C,KAAKuM,WAAW,GAFxF,cAGUvM,KAAK4M,WAHf,IAGX,2BAAqC,CAAC,IAA7B4H,EAA4B,QAC7BD,IACAC,EAAWA,EAAS7J,MAAM,GAAI,IAGlC3K,KAAK8M,IACAS,OAAO,KACPC,KAAK,QAAS,QACd+C,UAHL,aAIKC,KAAKgE,GACL9D,QACAnD,OAAO,QACP4B,MAAM,QAAQ,SAAAX,GAAC,OAAIA,EAAEwC,SACrBxD,KAAK,KAAK,SAAAgB,GAAC,OAAI,EAAK7B,OAAO6B,EAAErR,SAC7BqQ,KAAK,QAASxN,KAAKgU,WACnBxG,KAAK,KAAK,SAAAgB,GAAC,OAAI,EAAK9B,OAAO8B,EAAEM,WAC7BtB,KAAK,UAAU,SAAAgB,GAAC,OAAI,EAAK9B,OAAO8B,EAAEQ,MAAQ,EAAKtC,OAAO8B,EAAEM,YAnBtD,mCAjGnB,GAAsCpD,I,QCoBzB+I,GAAb,4MACYC,YAAcC,IAAMC,YADhC,EAEYC,aAAeF,IAAMC,YAFjC,EAIYE,eAAqCnX,EAJjD,EAKYoX,cAAyCpX,EALrD,EAOYqX,qBAA+CrX,EAP3D,8DASI,WACI,IAAMsX,EAAiC,GACjCjT,EAAgBhC,KAAKkV,MAAMC,qBAAqBC,SACtD,IAAK,IAAM9X,KAAiB0E,EACpBA,EAAc1E,GAAe+X,WAC7BJ,EAAqBjT,EAAc1E,GAAe8E,QAAUJ,EAAc1E,GAAegY,YAGjG,OAAOL,IAjBf,iCAoBI,SAA4BA,GACxB,IAAM1P,EAAgC,CAClCtB,cAAejE,KAAKkV,MAAMK,IAA4B9O,MACtDN,WAAYqP,GAAmBxV,KAAKkV,QAGxC,OAAO,IAAI9L,EACPpJ,KAAKkV,MAAMO,IAA6BhP,MACxCzG,KAAKkV,MAAMQ,IAA+BjP,MAC1CzG,KAAKkV,MAAMS,IAAuClP,MAClDzG,KAAKkV,MAAMU,IAA2BnP,MACtCzG,KAAKkV,MAAMW,IAAmCpP,MAC9CzG,KAAKkV,MAAMY,IAAyBrP,MACpCwO,EACA1P,EACAvF,KAAKkV,MAAMa,IAAgBtP,MAC3BzG,KAAKkV,MAAMc,IAA6BvP,SApCpD,6BAwCI,WACI,OAAsB,MAAlBzG,KAAK8U,UACE9U,KAAK8U,UAAUhJ,YACE,MAAjB9L,KAAK+U,SACL/U,KAAK+U,SAASjJ,iBAErB,IA9CZ,6BAkDI,SAAwBmK,GACpB,OAAkB,MAAXA,GAAmBjW,KAAKkV,MAAMgB,IAAwBzP,MAAQwP,EAAQlK,aAAUpO,IAnD/F,gCAsDI,WACI+N,GAAgByK,QAChB,IACI,GAC0B,MAAtBnW,KAAKkV,MAAMkB,SACXpW,KAAKkV,MAAMkB,SACiB,MAA5BpW,KAAK0U,YAAY2B,SACY,MAA7BrW,KAAK6U,aAAawB,QACpB,CACE,IAAMpB,EAAuBjV,KAAKsW,2BAClCtW,KAAKgV,gBAAkBhV,KAAKuW,oBAAoBtB,GAChD,IAAMuB,EAAuBxW,KAAKgV,gBAAgByB,0BAC5CC,EAAsC1W,KAAKgV,gBAAgB2B,mBAC7D3W,KAAKkV,MAAM0B,IAAoCnQ,OAE/CqF,EAAc9L,KAAK6W,kBACvB7W,KAAK8U,UAAY,IAAI/C,GACjB2E,EACA1W,KAAK0U,YAAY2B,QACjBG,EACA1K,EACA9L,KAAK8W,gBAAgB9W,KAAK8U,WAC1BG,GAEJjV,KAAK8U,UAAUiC,SACf/W,KAAK+U,SAAW,IAAIlB,GAChB6C,EACA1W,KAAK6U,aAAawB,QAClBG,EACA1K,EACA9L,KAAK8W,gBAAgB9W,KAAK+U,WAE9B/U,KAAK+U,SAASgC,UAEpB,MAAOpI,GACLtM,QAAQ2U,MAAMrI,MAzF1B,sEA6FI,sBAAAnR,EAAA,sDACIwC,KAAKiX,qBADT,gDA7FJ,sFAiGI,WACIjX,KAAKiX,uBAlGb,oBAoGI,WACI,OACI,gBAAC,IAAMC,SAAP,WACI,sBAAKC,IAAKnX,KAAK6U,eACf,sBAAKsC,IAAKnX,KAAK0U,qBAxG/B,GAAmCC,IAAMyC,WCzBlC,SAASC,GAAanC,GACzB,OACI,sBACIoC,GAAIpC,EAAMqC,WAAa,WACvBC,UAAU,kBACVrI,MAAO,CAAEsI,WAAYvC,EAAMkB,QAAU,SAAW,WAHpD,SAIKlB,EAAMwC,eCyCZ,SAASC,GAAiBzC,GAC7B,OACI,uBAAKsC,UAAU,oBAAf,UACI,wBAAOA,UAAU,aAAaI,QAAS1C,EAAMqC,WAA7C,SACKrC,EAAM2C,QAEX,wBACIL,UAAW,iBAAmBtC,EAAMkB,QAAU,GAAK,cACnDkB,GAAIpC,EAAMqC,WACVO,KAAK,OACLrR,MAAOyO,EAAMzO,MAAM1I,YAAsC,KAAxBmX,EAAM6C,cAAuB,IAAM7C,EAAM6C,cAAgB,IAC1FC,SAAU,SAAArJ,GAAC,OAAIuG,EAAM+C,cAAc/C,EAAMgD,kBAAkBvJ,GAAIuG,EAAMqC,aACrEY,SAAUjD,EAAMiD,WAEpB,eAACd,GAAD,eAAkBnC,OAKvB,SAASkD,GAAuBlD,GACnC,OACI,uBAAKsC,UAAU,oBAAf,UACI,wBAAOA,UAAU,aAAaI,QAAS1C,EAAMqC,WAA7C,SACKrC,EAAM2C,QAEX,wBACIL,UAAW,iBAAmBtC,EAAMkB,QAAU,GAAK,cACnDkB,GAAIpC,EAAMqC,WACVO,KAAK,OACLrR,MAAOyO,EAAMzO,MAAM1I,YAAsC,KAAxBmX,EAAM6C,cAAuB,IAAM7C,EAAM6C,cAAgB,IAC1FC,SAAU,SAAArJ,GAAC,OAAIuG,EAAM+C,cAAc/C,EAAMgD,kBAAkBvJ,GAAIuG,EAAMqC,aACrEY,SAAUjD,EAAMiD,WAEpB,eAACd,GAAD,eAAkBnC,OAKvB,SAASmD,GAA0BnD,GACtC,OACI,uBAAKsC,UAAU,oBAAf,UACI,wBAAOA,UAAU,aAAaI,QAAS1C,EAAMqC,WAA7C,SACKrC,EAAM2C,QAEX,wBACIL,UAAW,iBAAmBtC,EAAMkB,QAAU,GAAK,cACnDkB,GAAIpC,EAAMqC,WACVO,KAAK,OACLrR,MAAOyO,EAAMzO,MAAM1I,YAAsC,KAAxBmX,EAAM6C,cAAuB,IAAM7C,EAAM6C,cAAgB,IAC1FC,SAAU,SAAArJ,GAAC,OAAIuG,EAAM+C,cAAc/C,EAAMgD,kBAAkBvJ,GAAIuG,EAAMqC,aACrEY,SAAUjD,EAAMiD,WAEpB,eAACd,GAAD,eAAkBnC,OChGvB,SAASoD,GAAqBpD,GACjC,OACI,uBAAKsC,UAAU,mBAAf,UACI,wBACIA,UAAU,mBACVF,GAAIpC,EAAMqC,WACVO,KAAK,WACLrR,MAAOyO,EAAMzO,MAAM1I,WACnBia,SAAU,kBAAM9C,EAAM+C,cAAc/C,EAAMqC,eAE9C,wBAAOC,UAAU,mBAAmBI,QAAS1C,EAAMqC,WAAnD,SACKrC,EAAM2C,WCHhB,SAASU,GAAQrD,GACpB,OACI,sBAAKsC,UAAU,MAAf,SACI,sBAAKA,UAAU,aAAf,SACI,sBAAKA,UAAU,eAAf,SACI,uBACIA,UAAU,+EACVrI,MAAO,CAAEsI,WAAYvC,EAAMsD,eAAiB,UAAY,UAF5D,UAGI,sBAAIhB,UAAU,MAAd,gCACwB,IACpB,qBACIiB,KAAK,+CACLC,OAAO,SACPC,IAAI,sBAHR,UAIK,IAJL,0BAMK,OAET,eAACP,GAAD,2BAA4BlD,GAA5B,IAAmCiD,UAAWjD,EAAMsD,kBACpD,yBAAQV,KAAK,SAASN,UAAU,uBAAuBoB,QAAS1D,EAAM2D,oBAAtE,8BCxBjB,SAASC,GAAsB5D,GAClC,IAAM6D,EAAU7D,EAAM8D,MAAMC,QAAQ,MAAO,KAC3C,OACI,uBAAKzB,UAAU,8BAAf,UACI,uBAAKA,UAAU,cAAf,UACI,yBACIA,UAAW,6DACXM,KAAK,SACLoB,iBAAe,WACfC,iBAAA,WAAoBJ,GACpBK,gBAAelE,EAAMmE,mBAAqB,QAAU,OACpDC,gBAAeP,EANnB,oBASA,qBAAIvB,UAAU,8BAAd,SAA6CtC,EAAM8D,WAEvD,sBAAKxB,UAAW,aAAetC,EAAMmE,mBAAqB,GAAK,QAAS/B,GAAIyB,EAA5E,SACK7D,EAAMqE,cCXvB,SAASC,GAA4BtE,EAA4BuE,GAC7D,OAAOA,EAAQ5V,aAAeqR,EAAMrR,YAAc4V,EAAQ7V,kBAAoBsR,EAAMtR,gBAGjF,SAAS8V,GAAexE,GAC3B,OACI,uBAAKsC,UAAU,WAAf,UACI,yBACIA,UAAU,oCACVM,KAAK,SACLR,GAAG,iBACH4B,iBAAe,WACfE,gBAAc,QALlB,SAMKlE,EAAM2C,QAEX,qBAAIL,UAAU,gBAAgBmC,kBAAgB,iBAA9C,SACKzE,EAAME,SAAS5W,KAAI,SAAAib,GAAO,OACvB,8BACI,yBACIjC,UACIgC,GAA4BtE,EAAOuE,GAAW,uBAAyB,gBAE3E3B,KAAK,SACLc,QAAS,SAAAjK,GAAC,OAAIuG,EAAM0E,aAAaH,IALrC,SAMKA,EAAQ5B,SAPR4B,EAAQlC,oBCrB9B,SAASsC,GAAoB3E,GAChC,OACI,uBAAKsC,UAAU,WAAf,UACI,yBACIA,UAAU,oCACVM,KAAK,SACLR,GAAG,sBACH4B,iBAAe,WACfE,gBAAc,QALlB,SAMKlE,EAAM2C,QAEX,qBAAIL,UAAU,gBAAgBmC,kBAAgB,sBAA9C,SACKzE,EAAME,SAAS5W,KAAI,SAAAib,GAAO,OACvB,8BACI,yBACIjC,UAAWtC,EAAMzO,QAAUgT,EAAQhT,MAAQ,uBAAyB,gBACpEqR,KAAK,SACLc,QAAS,SAAAjK,GAAC,OAAIuG,EAAM0E,aAAaH,IAHrC,SAIKA,EAAQ5B,SALR4B,EAAQlC,oBCIrC,SAASuC,GAA4BnL,GACjC,IAAMoL,EAAW9b,WAAW0Q,EAAE+J,OAAOjS,OAAS,IAC9C,OAAOuT,MAAMD,GAAY,EAAIA,EAG1B,SAASE,GAAqB/E,GACjC,OACI,uBAAKsC,UAAU,6BAAf,UACI,yBACIA,UAAU,+CACVM,KAAK,SACLR,GAAG,uBACH4B,iBAAe,WACfE,gBAAc,QALlB,SAMKlE,EAAM2C,QAEX,eAACR,GAAD,eAAkBnC,IAClB,qBAAIsC,UAAU,gBAAgBmC,kBAAgB,uBAA9C,SACKlV,OAAOC,KAAKwQ,EAAME,UAAU5W,KAAI,SAAA0b,GAAiB,OAC9C,8BACI,yBACI1C,UACItC,EAAME,SAAS8E,GAAmB7E,SAAW,uBAAyB,gBAE1EyC,KAAK,SACLc,QAAS,SAACjK,GAENuG,EAAMiF,sBAAsBjF,EAAME,SAAS8E,KAPnD,SAUI,eAAC7B,GAAD,2BACQnD,EAAME,SAAS8E,IADvB,IAEIzT,MAAOxH,KAAKW,MAAqD,IAA/CsV,EAAME,SAAS8E,GAAmB5E,YACpDyC,cAAc,IACdE,cAAe/C,EAAMkF,kBACrBlC,kBAAmB4B,GACnB3B,SAAUjD,EAAMmF,eAChBjE,SAAS,EACTsB,aAAa,SAnBhBwC,WChCtB,IAAMzE,GAA8B,kBAC9BC,GAAgC,oBAChCC,GAAwC,2BACxC2E,GAA+B,mBAC/BC,GAAoC,uBACpCzE,GAA0B,cAC1BC,GAAiB,MACjBR,GAA6B,gBAC7BK,GAA4B,gBAC5BC,GAAoC,uBACpCG,GAA8B,kBAC9BY,GAAqC,gBACrC4D,GAAoC,uBACpCC,GAAqB,SACrBvE,GAAyB,YAEhCwE,GAA6B,iBAC7BC,GAAsC,yBA4B/BpH,GAA4C,CACrD,WAAY,YACZtK,KAAM,SACNC,KAAM,gBAGV,SAAS0R,GAAoBjM,GACzB,IAAMkM,EAA4BlM,EAAE+J,OAAOjS,MAAMqU,MAAM,KAAK,GACtDC,EAASC,SAASH,GACxB,OAAOb,MAAMe,GAAU,EAAIA,EAG/B,SAASE,GAAsBtM,GAC3B,IAAMoL,EAAW9b,WAAW0Q,EAAE+J,OAAOjS,OACrC,OAAOuT,MAAMD,GAAY,EAAIA,EAGjC,SAASmB,GAAaje,GAClB,OAAQ4N,OAAOmP,MAAM/c,IAAQA,GAAO,GAAKA,GAAO,IAGpD,SAASke,GAAcle,GACnB,OAAQ4N,OAAOmP,MAAM/c,IAAQ4N,OAAOC,UAAU7N,IAAQA,GAAO,EAG1D,SAASuY,GAAmB4F,GAC/B,OAAIA,EAAK,qBAAoC3U,MAClC,CAAE7C,gBAAiB,EAAKC,WAAYuX,EAAK,iBAA+B3U,OAExE,CAAE7C,gBAAiB5G,EAAuBoe,EAAK,iBAA+B3U,OAAQ5C,WAAY,GAIjH,SAASwX,GAA0BD,GAC/B,IAAIE,EAAuB,EAC3B,IAAK,IAAMhe,KAAiB8d,EAAK,qBAAoChG,SAC7DgG,EAAK,qBAAoChG,SAAS9X,GAAe+X,UACjEiG,IAGR,IAAMC,EAAgB,EAAMtc,KAAKyC,IAAI,EAAG4Z,GACxC,IAAK,IAAMhe,KAAiB8d,EAAK,qBAAoChG,SACjEgG,EAAK,qBAAoChG,SAAS9X,GAAegY,WAAaiG,EAElF,OAAOH,EAGJ,IAAMI,GAAb,kDACI,WAAYtG,GAAY,IAAD,8BACnB,cAAMA,IAEDuG,iBAAmB,EAAKA,iBAAiBC,KAAtB,gBACxB,EAAKC,qBAAuB,EAAKA,qBAAqBD,KAA1B,gBAC5B,EAAKE,mBAAqB,EAAKA,mBAAmBF,KAAxB,gBAC1B,EAAKG,wBAA0B,EAAKA,wBAAwBH,KAA7B,gBAC/B,EAAKI,yBAA2B,EAAKA,yBAAyBJ,KAA9B,gBAChC,EAAKK,qBAAuB,EAAKA,qBAAqBL,KAA1B,gBAC5B,EAAK7C,oBAAsB,EAAKA,oBAAoB6C,KAAzB,gBAE3B,EAAKN,MA8Mb,SAAkCY,GAAyB,IAAD,EACtD,OAAO,EAAP,CACI5F,SAAS,GADb,cAGKX,GAA8B,CAC3BhP,MAAO,IACPoR,MAAO,mBACPH,aAAc,GACdK,cAAe,SACf3B,SAAS,EACTmB,WAAY9B,GACZyC,kBAAmB0C,GACnB3C,cAAe+D,EAAOP,iBACtBtD,UAAU,IAZlB,cAcKzC,GAAgC,CAC7BjP,MAAO,IACPoR,MAAO,qBACPH,aAAc,wCACdK,cAAe,SACf3B,SAAS,EACTmB,WAAY7B,GACZwC,kBAAmB0C,GACnB3C,cAAe+D,EAAOP,iBACtBtD,UAAU,IAvBlB,cAyBKxC,GAAwC,CACrClP,MAAO,EACPoR,MAAO,8BACPH,aAAc,GACdK,cAAe,IACf3B,SAAS,EACTmB,WAAY5B,GACZuC,kBAAmB+C,GACnBhD,cAAe+D,EAAOP,iBACtBtD,UAAU,IAlClB,cAoCKvC,GAA4B,CACzBnP,MAAO,IACPoR,MAAO,iBACPH,aAAc,GACdK,cAAe,SACf3B,SAAS,EACTmB,WAAY3B,GACZsC,kBAAmB0C,GACnB3C,cAAe+D,EAAOP,iBACtBtD,UAAU,IA7ClB,cA+CKtC,GAAoC,CACjCpP,MAAO,EACPoR,MAAO,0BACPH,aAAc,GACdK,cAAe,IACf3B,SAAS,EACTmB,WAAY1B,GACZqC,kBAAmB+C,GACnBhD,cAAe+D,EAAOP,iBACtBtD,UAAU,IAxDlB,cA0DKmC,GAA+B,CAC5B7T,MAAO,IACPoR,MAAO,oBACPH,aAAc,GACdK,cAAe,IACf3B,SAAS,EACTmB,WAAY+C,GACZpC,kBAAmB+C,GACnBhD,cAAe+D,EAAOP,iBACtBtD,UAAU,IAnElB,cAqEKrC,GAA0B,CACvBrP,MAAO,GACPoR,MAAO,eACPH,aAAc,GACdK,cAAe,IACf3B,SAAS,EACTmB,WAAYzB,GACZoC,kBAAmB0C,GACnB3C,cAAe+D,EAAOP,iBACtBtD,UAAU,IA9ElB,cAgFKpC,GAAiB,CACdtP,MAAO,GACPoR,MAAO,WACPE,cAAe,IACfL,aAAc,GACdtB,SAAS,EACTmB,WAAYxB,GACZmC,kBAAmB0C,GACnB3C,cAAe+D,EAAOP,iBACtBtD,UAAU,IAzFlB,cA2FKnC,GAA8B,CAC3BvP,MAAO,GACPoR,MAAO,mBACPH,aAAc,GACdtB,SAAS,EACT2B,cAAe,IACfR,WAAYvB,GACZkC,kBAAmB0C,GACnB3C,cAAe+D,EAAOP,iBACtBtD,UAAU,IApGlB,cAsGK5C,GAA6B,CAC1B9O,MAAO,IACPoR,MAAO,kBACPH,aAAc,GACdtB,SAAS,EACT2B,cAAe,SACfR,WAAYhC,GACZ2C,kBAAmB0C,GACnB3C,cAAe+D,EAAOP,iBACtBtD,UAAU,IA/GlB,cAiHKoC,GAAoC,CACjC9T,OAAO,EACPoR,MAAO,eACPN,WAAYgD,GACZtC,cAAe+D,EAAOL,uBArH9B,cAuHKhB,GAAsC,CACnClU,OAAO,EACPoR,MAAO,sBACPN,WAAYoD,GACZ1C,cAAe+D,EAAOL,uBA3H9B,cA6HKzF,GAAyB,CACtBzP,OAAO,EACPoR,MAAO,qBACPN,WAAYrB,GACZ+B,cAAe+D,EAAOL,uBAjI9B,cAmIKlB,GAAqB,CAClBjC,gBAAgB,EAChBxB,OAAO,EACPvQ,MAAO,GACPoR,MAAO,GACPH,aAAc,GACdtB,SAAS,EACT2B,cAAe,GACfR,WAAYkD,GACZvC,kBAAmB,SAACvJ,GAAD,OAAuCA,EAAE+J,OAA4BjS,OACxFwR,cAAe+D,EAAOP,iBACtB5C,oBAAqBmD,EAAOnD,sBA9IpC,cAiJKjC,GAAqC,CAClCnQ,MAAO,EACPoR,MAAO,qBACPzB,SAAS,EACTwD,aAAcoC,EAAOH,wBACrBzG,SAAU,CACN,CACImC,WAAY,KACZ9Q,MAAO,GACPoR,MAAO,sCAEX,CACIN,WAAY,IACZ9Q,MAAO,EACPoR,MAAO,mCAEX,CACIN,WAAY,IACZ9Q,MAAO,EACPoR,MAAO,kCAEX,CACIN,WAAY,IACZ9Q,MAAO,EACPoR,MAAO,iDAzKvB,cA6KK6C,GAA6B,CAC1B7C,MAAO,SACPzB,SAAS,EACTwD,aAAcoC,EAAOJ,mBACrBxG,SAAU,CACN,CACImC,WAAY,YACZM,MAAO,YACPhU,WAAY,EACZD,gBAAiB,MAErB,CACI2T,WAAY,gBACZM,MAAO,iBACPhU,WAAY,EACZD,gBAAiB,KAErB,CACI2T,WAAY,QACZM,MAAO,QACPhU,WAAY,EACZD,gBAAiB,MAlMjC,cAsMK4W,GAAoC,CACjC3C,MAAO,gBACPzB,SAAS,EACTmB,WAAYiD,GACZ9C,aAAc,GACdyC,sBAAuB6B,EAAOF,yBAC9B1B,kBAAmB4B,EAAOD,qBAC1B3G,SAAU,CACN6G,YAAa,CACT1E,WAAY,cACZnV,OAAQ,WACRyV,MAAOtE,GAAmB,YAC1B+B,WAAY,EACZD,UAAU,GAEd6G,OAAQ,CACJ3E,WAAY,SACZnV,OAAQ,OACRyV,MAAOtE,GAAkB,KACzB+B,WAAY,EACZD,UAAU,GAEd8G,QAAS,CACL5E,WAAY,UACZnV,OAAQ,OACRyV,MAAOtE,GAAkB,KACzB+B,WAAY,EACZD,UAAU,MAjO1B,EA/MiB+G,CAAyB,gBAXnB,EAD3B,oDAeI,SAAiBC,EAA+BC,GAC5C,IAAMlB,EAAK,eAAQpb,KAAKob,OACxBA,EAAMkB,GAAwB7V,MAAQ4V,EACtCrc,KAAKuc,qBAAqBnB,KAlBlC,kCAqBI,SAAqBkB,GACjB,IAAMlB,EAAK,eAAQpb,KAAKob,OACxBA,EAAMkB,GAAwB7V,OAAS2U,EAAMkB,GAAwB7V,MACjE6V,IAA2B/B,IAC3Ba,EAAK,iBAA+B3U,MAAQ2U,EAAMkB,GAAwB7V,MAAQ,EAAI,KACtF2U,EAAK,iBAA+BrD,cAAgBqD,EAAMkB,GAAwB7V,MAAQ,SAAM,IAChG2U,EAAK,iBAA+BlD,kBAAoBkD,EAAMkB,GAAwB7V,MAChFmU,GACAK,IAENqB,IAA2B3B,IAC3BS,EAAMkB,GAAwB7V,OAE9B4U,GAA0BD,GAE9Bpb,KAAKuc,qBAAqBnB,KApClC,gCAuCI,SAAmBoB,GACf,IAAMpB,EAAK,eAAQpb,KAAKob,OACxBA,EAAK,iBAA+B3U,MAChC+V,EAAiB5Y,gBAAkB,EAAI4Y,EAAiB5Y,gBAAkB4Y,EAAiB3Y,WAC/FuX,EAAK,qBAAoC3U,QAAQ+V,EAAiB5Y,gBAAkB,GACpF5D,KAAKuc,qBAAqBnB,KA5ClC,qCA+CI,SAAwBqB,GACpB,IAAMrB,EAAK,eAAQpb,KAAKob,OACxBA,EAAMxE,IAAoCnQ,MAAQgW,EAAiBhW,MACnEzG,KAAKuc,qBAAqBnB,KAlDlC,sCAqDI,SAAyBpZ,GACrB,IAAMoZ,EAAK,eAAQpb,KAAKob,OACxBA,EAAK,qBAAoChG,SAASpT,EAAcuV,YAAYlC,UAAY+F,EAAK,qBAE3FhG,SAASpT,EAAcuV,YAAYlC,SACjC+F,EAAK,uBAAsC3U,OAC3C4U,GAA0BD,GAE9Bpb,KAAKuc,qBAAqBnB,KA7DlC,kCAgEI,SAAqBiB,EAAsBK,GACvC,IAAMtB,EAAK,eAAQpb,KAAKob,OACxBA,EAAK,qBAAoChG,SAASsH,GAAsBpH,WAAa+G,EACrFrc,KAAKuc,qBAAqBnB,KAnElC,wEAsEI,8BAAA5d,EAAA,6DACUD,EAASyC,KAAKob,MAAL,OAA+B3U,MACxCkW,EAFV,eAE2B3c,KAAKob,MAAL,QAF3B,kBAIcvb,EAAuB+c,iBACzBrf,EACAyC,KAAKob,MAAL,qBAA8ChG,UAN1D,OAQQuH,EAAU3F,OAAQ,EAClB2F,EAAUnE,gBAAiB,EATnC,gDAWQmE,EAAU3F,OAAQ,EAX1B,QAaIhX,KAAK6c,SAAL,eAAiBpC,GAAqBkC,IACtC3c,KAAK8c,cAdT,yDAtEJ,wFAuFI,SAA6B1B,GACzB,IAAM2B,EAAuD,CACzDrH,GACAE,GACAH,GACAM,GACAC,GACAF,GACAP,IAGEyH,EAAsD,CACxDrH,GACAE,IAGJuF,EAAMhF,SAAU,EAEhB,cAAyB2G,EAAzB,eAAiD,CAA5C,IAAMxF,EAAU,KACjB6D,EAAM7D,GAAYnB,QAAU+E,GAAcC,EAAM7D,GAAY9Q,OAC5D2U,EAAM7D,GAAYG,aAAe,kCACjC0D,EAAMhF,QAAUgF,EAAM7D,GAAYnB,SAAWgF,EAAMhF,QAGvD,cAAyB4G,EAAzB,eAAgD,CAA3C,IAAMzF,EAAU,KACjB6D,EAAM7D,GAAYnB,QAAU8E,GAAaE,EAAM7D,GAAY9Q,OAC3D2U,EAAM7D,GAAYG,aAAe,uDACjC0D,EAAMhF,QAAUgF,EAAM7D,GAAYnB,SAAWgF,EAAMhF,QAIvD,IAAM6G,EAAgB7B,EAAMpF,IAA6BvP,MAAQ2U,EAAMrF,IAAgBtP,MACnF2U,EAAMrF,IAAgBtP,OAAS2U,EAAMpF,IAA6BvP,OAClE2U,EAAMrF,IAAgB2B,aAAe,gDACrC0D,EAAMrF,IAAgBK,SAAU,EAChCgF,EAAMhF,SAAU,GACT6G,GAAiB7B,EAAMtF,IAAyBrP,QACvD2U,EAAMtF,IAAyB4B,aAC3B,mEACJ0D,EAAMtF,IAAyBM,SAAU,EACzCgF,EAAMhF,SAAU,GAIhBgF,EAAK,qBAAoC3U,OACzC2U,EAAK,iBAA+BhF,QAAU+E,GAAcC,EAAK,iBAA+B3U,OAChG2U,EAAK,iBAA+B1D,aAAe,oCAEnD0D,EAAK,iBAA+BhF,QAAU8E,GAAaE,EAAK,iBAA+B3U,OAC/F2U,EAAK,iBAA+B1D,aAAe,oCAEvD0D,EAAMhF,QAAUgF,EAAK,iBAA+BhF,SAAWgF,EAAMhF,QAGrE,IAAI8G,EAAmB,EACnBC,GAAsB,EAC1B,IAAK,IAAM7f,KAAiB8d,EAAK,qBAAoChG,SAC7DgG,EAAK,qBAAoChG,SAAS9X,GAAe+X,WACjE6H,GAAoB9B,EAAK,qBAAoChG,SAAS9X,GAAegY,WACrF6H,GAAsB,GAGzBA,EAI2B,IAArBD,GACP9B,EAAK,qBAAoChF,SAAU,EACnDgF,EAAK,qBAAoC1D,aAAe,+CACxD0D,EAAMhF,SAAU,GAEhBgF,EAAK,qBAAoChF,SAAU,GARnDgF,EAAK,qBAAoChF,SAAU,EACnDgF,EAAK,qBAAoC1D,aAAe,kCACxD0D,EAAMhF,SAAU,GASpBpW,KAAK6c,SAASzB,KAjKtB,oBAoKI,WACI,IAAMjV,EAAaqP,GAAmBxV,KAAKob,OAC3C,OACI,uBAAK5D,UAAU,kBAAf,UACI,eAACe,GAAD,eAAavY,KAAKob,MAAL,SACb,uBAAK5D,UAAU,MAAf,UACI,sBAAKF,GAAG,cAAcE,UAAU,qCAAhC,SACI,wBAAMA,UAAU,mCAAmC4F,YAAU,EAA7D,UAEI,gBAACtE,GAAD,CAAuBE,MAAM,gBAAgBK,oBAAoB,EAAjE,UACI,eAAC1B,GAAD,eAAsB3X,KAAKob,MAAM3F,MACjC,eAACkC,GAAD,eAAsB3X,KAAKob,MAAM1F,MACjC,eAACiC,GAAD,eAAsB3X,KAAKob,MAAMzF,MACjC,eAACgC,GAAD,eAAsB3X,KAAKob,MAAMxF,MACjC,eAAC+B,GAAD,eAAsB3X,KAAKob,MAAMvF,MACjC,eAAC8B,GAAD,eAAsB3X,KAAKob,MAAM7F,SAGrC,gBAACuD,GAAD,CAAuBE,MAAM,eAAeK,oBAAoB,EAAhE,UACI,eAAC1B,GAAD,eAAsB3X,KAAKob,MAAMrF,MACjC,eAAC4B,GAAD,eAAsB3X,KAAKob,MAAMpF,MACjC,eAAC2B,GAAD,eAAsB3X,KAAKob,MAAMtF,SAGrC,gBAACgD,GAAD,CAAuBE,MAAM,eAAeK,oBAAoB,EAAhE,UACI,eAAC1B,GAAD,eAEQ3X,KAAKob,MAAL,kBADCd,IAGT,eAAChC,GAAD,eAA0BtY,KAAKob,MAAL,uBAC1B,eAAC1B,GAAD,2BAAoBvT,GAAgBnG,KAAKob,MAAL,oBAGxC,gBAACtC,GAAD,CAAuBE,MAAM,wBAAwBK,oBAAoB,EAAzE,UACI,eAACQ,GAAD,eAAyB7Z,KAAKob,MAAMxE,MACpC,eAAC0B,GAAD,eAA0BtY,KAAKob,MAAMlF,MACrC,eAACoC,GAAD,eAA0BtY,KAAKob,MAAL,yBAC1B,eAACnB,GAAD,aACII,eAAgBra,KAAKob,MAAL,uBAAgD3U,OAC5DzG,KAAKob,MAAL,+BAKpB,wBAAM5D,UAAU,gCAAhB,UACI,iEACA,eAAC,GAAD,eAAmBxX,KAAKob,qBAlNhD,GAAyBzG,IAAMyC,WC9G/B,IAYeiG,GAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,OCCdQ,IAAS/G,OACL,eAAC,IAAMgH,WAAP,UACI,eAAC,GAAD,MAEJC,SAASC,eAAe,SAM5BZ,O","file":"static/js/main.66884f34.chunk.js","sourcesContent":["import * as d3 from 'd3';\n\nimport { DataPoint } from 'regression';\n\n// Ignore milliseconds, seconds, minutes.\nconst timeDiffIgnoreDivisor = 1000 * 60 * 60 * 24;\n\nexport const timestampIndexOfForecastArray = 0;\nexport const courseIndexOfForecastArray = 1;\nexport const numberOfMonthsOfAYear = 12;\nexport const inflationRate = 0.01;\n\nexport interface IHistoricEntry {\n    date: Date;\n    dividend: number;\n    course: number;\n}\n\nexport function percentageToFloatValue(val: number) {\n    return val / 100.0;\n}\n\nexport function isLastMonthOfAYear(date: Date) {\n    return date.getMonth() === numberOfMonthsOfAYear - 1;\n}\n\nexport function clamp(value: number, min: number, max: number) {\n    return Math.max(min, Math.min(value, max));\n}\n\nexport function isFirstMonthOfAYear(date: Date) {\n    return date.getMonth() === 0;\n}\n\nexport async function loadHistoricalETFData(etfIdentifier: string, apiKey: string): Promise<IHistoricEntry[]> {\n    const historicalData = await d3.csv(\n        `https://www.alphavantage.co/query?function=TIME_SERIES_MONTHLY_ADJUSTED&symbol=${etfIdentifier}&apikey=${apiKey}&datatype=csv`,\n        entry => {\n            if (\n                entry.timestamp === undefined ||\n                entry['dividend amount'] === undefined ||\n                entry['adjusted close'] === undefined\n            ) {\n                throw new Error(`The history of ${etfIdentifier} contained an undefined field.`);\n            }\n            return {\n                date: new Date(entry.timestamp.toString()),\n                dividend: parseFloat(entry['dividend amount']),\n                course: parseFloat(entry['adjusted close']),\n            };\n        }\n    );\n    historicalData.sort((a, b) => a.date.valueOf() - b.date.valueOf());\n    return historicalData;\n}\n\nexport function etfHistoricalToCourseForecastArray(historicalData: IHistoricEntry[]): DataPoint[] {\n    return historicalData.map(entry => [dateToTimestamp(entry.date), entry.course]);\n}\n\n// Requires sorted historical data. Note it is sorted by default. Do not change the order.\nexport function etfHistoricalToDividendForecastArray(historicalData: IHistoricEntry[]): DataPoint[] {\n    let currentYear = historicalData[0].date.getFullYear();\n    const dividendForecastArray: DataPoint[] = [[currentYear, 0]];\n    historicalData.forEach(entry => {\n        if (entry.date.getFullYear() === currentYear) {\n            dividendForecastArray[dividendForecastArray.length - 1][courseIndexOfForecastArray] += entry.dividend;\n        } else {\n            currentYear = entry.date.getFullYear();\n            dividendForecastArray.push([currentYear, entry.dividend]);\n        }\n    });\n    dividendForecastArray.sort((a, b) => a[timestampIndexOfForecastArray] - b[timestampIndexOfForecastArray]);\n    return dividendForecastArray;\n}\n\nexport function dateToTimestamp(date: Date) {\n    return Math.floor(date.getTime() / timeDiffIgnoreDivisor);\n}\n\nexport function timestampToDate(timestamp: number) {\n    return new Date(timestamp * timeDiffIgnoreDivisor);\n}\n\nexport function generateHistoricalDataNotPresentException(etfIdentifier: string) {\n    return new Error(`First call loadHistoricalDataIfNotPresent() before predicting: ${etfIdentifier}`);\n}\n\n// Slightly manipulated. Original: https://stackoverflow.com/a/315767\nfunction daysInMonth(month: number, year: number) {\n    return new Date(year, month + 1, 0).getDate();\n}\n\nexport function roundDateToBeginningOfMonth(date: Date) {\n    const currentDayOfMonth = date.getDate();\n    const maxDayOfMonth = daysInMonth(date.getMonth(), date.getFullYear());\n    const monthOffset = Math.round(currentDayOfMonth / maxDayOfMonth);\n    return new Date(date.getFullYear(), date.getMonth() + monthOffset);\n}\n","import regression from 'regression';\nimport { DataPoint } from 'regression';\nimport {\n    dateToTimestamp,\n    etfHistoricalToCourseForecastArray,\n    etfHistoricalToDividendForecastArray,\n    loadHistoricalETFData,\n    timestampIndexOfForecastArray,\n    courseIndexOfForecastArray,\n    generateHistoricalDataNotPresentException,\n    IHistoricEntry,\n} from '../helpers/utils';\n\ninterface IDividendPredictor {\n    [timestamp: number]: regression.Result;\n}\n\ninterface IDividendPredictors {\n    maxYearBeforeDividendPredictorRepetition: number;\n    predictors: IDividendPredictor;\n}\n\ninterface ICoursePredictors {\n    maxTimestampBeforeCoursePredictorRepetition: number;\n    predictors: ICoursePredictor;\n}\n\ninterface ICoursePredictor {\n    [timestamp: number]: regression.Result;\n}\n\ninterface IETFCoursePredictors {\n    [etfIdentifier: string]: ICoursePredictors;\n}\n\ninterface IETFDividendPredictors {\n    [etfIdentifier: string]: IDividendPredictors;\n}\n\ninterface IHistoricData {\n    [etfIdentifier: string]: IHistoricDataOfETF;\n}\n\ninterface IHistoricDataOfETF {\n    courseForecastArray: DataPoint[];\n    dividendForecastArray: DataPoint[];\n    history: IHistoricEntry[];\n}\n\ninterface IETFProperty {\n    identifier: string;\n    symbol: string;\n    label: string;\n    percentage: number;\n    selected: boolean;\n}\n\ninterface IETFProperties {\n    [etfIdentifier: string]: IETFProperty;\n}\n\n// USAGE: first call configure to set required static vars. Then the singleton can be accessed via getInstance. Never call the Constructor on your own.\n// Always call loadAndCacheHistoricalETFData of an etf before calling predict on that etf.\nexport class ForecastModelSingleton {\n    private static instance: null | ForecastModelSingleton = null;\n    private static apiKey: string = '';\n    private static backCastTimestampConstant: number = 7;\n    private static backCastTimeFactor: number = 2;\n\n    private historicalData: IHistoricData = {};\n    private coursePredictors: IETFCoursePredictors = {};\n    private dividendPredictors: IETFDividendPredictors = {};\n\n    private constructor() {}\n\n    static configure(apiKey: string, backCastTimeFactor = 2, backCastTimeConstant = 7) {\n        ForecastModelSingleton.apiKey = apiKey;\n        ForecastModelSingleton.backCastTimeFactor = backCastTimeFactor;\n\n        const backCastTimeDate = new Date(0);\n        backCastTimeDate.setMonth(backCastTimeConstant);\n        ForecastModelSingleton.backCastTimestampConstant = dateToTimestamp(backCastTimeDate);\n\n        // reset predictors if present.\n        if (ForecastModelSingleton.instance != null) {\n            const instance = ForecastModelSingleton.getInstance();\n            for (const etfIdentifier in instance.coursePredictors) {\n                instance.coursePredictors[\n                    etfIdentifier\n                ].maxTimestampBeforeCoursePredictorRepetition = ForecastModelSingleton._calculateMaxTimestampBeforePredictorRepetition(\n                    instance.historicalData[etfIdentifier].courseForecastArray\n                );\n            }\n            for (const etfIdentifier in instance.dividendPredictors) {\n                instance.dividendPredictors[\n                    etfIdentifier\n                ].maxYearBeforeDividendPredictorRepetition = ForecastModelSingleton._calculateMaxTimestampBeforePredictorRepetition(\n                    instance.historicalData[etfIdentifier].dividendForecastArray\n                );\n            }\n        }\n    }\n\n    static async loadHistoricData(apiKey: string, etfProperties: IETFProperties) {\n        ForecastModelSingleton.configure(apiKey);\n        const forecast = ForecastModelSingleton.getInstance();\n        for (const etfIdentifier in etfProperties) {\n            await forecast._loadAndCacheHistoricalETFData(etfProperties[etfIdentifier].symbol);\n        }\n        console.log('Finished loading the historic data.');\n    }\n\n    static getInstance() {\n        if (ForecastModelSingleton.instance == null) {\n            ForecastModelSingleton.instance = new ForecastModelSingleton();\n        }\n        return ForecastModelSingleton.instance;\n    }\n\n    private static _calculateMaxTimestampBeforePredictorRepetition(forecastArray: DataPoint[]) {\n        const firstTimestamp = forecastArray[0][timestampIndexOfForecastArray];\n        const lastTimestamp = forecastArray[forecastArray.length - 1][timestampIndexOfForecastArray];\n        return lastTimestamp + (lastTimestamp - firstTimestamp) / ForecastModelSingleton.backCastTimeFactor;\n    }\n\n    private async _loadAndCacheHistoricalETFData(etfIdentifier: string) {\n        if (etfIdentifier in this.historicalData) {\n            return;\n        }\n        const historicalData = await loadHistoricalETFData(etfIdentifier, ForecastModelSingleton.apiKey);\n\n        const courseForecastArray = etfHistoricalToCourseForecastArray(historicalData);\n        const maxTimestampBeforeCoursePredictorRepetition = ForecastModelSingleton._calculateMaxTimestampBeforePredictorRepetition(\n            courseForecastArray\n        );\n\n        const dividendForecastArray = etfHistoricalToDividendForecastArray(historicalData);\n        const maxYearBeforeDividendPredictorRepetition = ForecastModelSingleton._calculateMaxTimestampBeforePredictorRepetition(\n            dividendForecastArray\n        );\n\n        this.historicalData[etfIdentifier] = {\n            history: historicalData,\n            courseForecastArray: courseForecastArray,\n            dividendForecastArray: dividendForecastArray,\n        };\n        this.coursePredictors[etfIdentifier] = {\n            maxTimestampBeforeCoursePredictorRepetition: maxTimestampBeforeCoursePredictorRepetition,\n            predictors: {},\n        };\n        this.dividendPredictors[etfIdentifier] = {\n            maxYearBeforeDividendPredictorRepetition: maxYearBeforeDividendPredictorRepetition,\n            predictors: {},\n        };\n    }\n\n    private _createCoursePredictorIfNotPresent(etfIdentifier: string, timestamp: number) {\n        // Skip if already exists.\n        if (timestamp in this.coursePredictors[etfIdentifier]) {\n            return;\n        }\n        const forecastArray = this.historicalData[etfIdentifier].courseForecastArray;\n        const lastTimestampToIncludeInPrediction =\n            forecastArray[forecastArray.length - 1][timestampIndexOfForecastArray] -\n            Math.abs(forecastArray[forecastArray.length - 1][timestampIndexOfForecastArray] - timestamp) *\n                ForecastModelSingleton.backCastTimeFactor -\n            ForecastModelSingleton.backCastTimestampConstant;\n        const filteredForecastArray = forecastArray.filter(\n            entry => entry[timestampIndexOfForecastArray] >= lastTimestampToIncludeInPrediction\n        );\n        this.coursePredictors[etfIdentifier].predictors[timestamp] = regression.linear(filteredForecastArray, {\n            order: 2,\n            precision: 20,\n        });\n    }\n\n    private _courseDateToPredictorTimestampAndDateTimestamp(date: Date, etfIdentifier: string) {\n        const timestamp = dateToTimestamp(date);\n        return [\n            timestamp > this.coursePredictors[etfIdentifier].maxTimestampBeforeCoursePredictorRepetition\n                ? this.coursePredictors[etfIdentifier].maxTimestampBeforeCoursePredictorRepetition\n                : timestamp,\n            timestamp,\n        ];\n    }\n\n    private _createDividendPredictorIfNotPresent(etfIdentifier: string, year: number) {\n        // Skip if already exists.\n        if (year in this.dividendPredictors[etfIdentifier]) {\n            return;\n        }\n        const forecastArray = this.historicalData[etfIdentifier].dividendForecastArray;\n        const lastYearToIncludeInPrediction =\n            forecastArray[forecastArray.length - 1][timestampIndexOfForecastArray] -\n            Math.abs(forecastArray[forecastArray.length - 1][timestampIndexOfForecastArray] - year) *\n                ForecastModelSingleton.backCastTimeFactor -\n            ForecastModelSingleton.backCastTimestampConstant;\n        const filteredForecastArray = forecastArray.filter(\n            entry => entry[timestampIndexOfForecastArray] >= lastYearToIncludeInPrediction\n        );\n        this.dividendPredictors[etfIdentifier].predictors[year] = regression.linear(filteredForecastArray, {\n            order: 2,\n            precision: 20,\n        });\n    }\n\n    private _dividendYearToPredictorYear(etfIdentifier: string, year: number) {\n        return this.dividendPredictors[etfIdentifier].maxYearBeforeDividendPredictorRepetition < year\n            ? this.dividendPredictors[etfIdentifier].maxYearBeforeDividendPredictorRepetition\n            : year;\n    }\n\n    predictCourse(etfIdentifier: string, date: Date) {\n        if (!(etfIdentifier in this.coursePredictors)) {\n            throw generateHistoricalDataNotPresentException(etfIdentifier);\n        }\n        const [predictorTimestamp, timestamp] = this._courseDateToPredictorTimestampAndDateTimestamp(\n            date,\n            etfIdentifier\n        );\n        this._createCoursePredictorIfNotPresent(etfIdentifier, predictorTimestamp);\n        return this.coursePredictors[etfIdentifier].predictors[predictorTimestamp].predict(timestamp)[\n            courseIndexOfForecastArray\n        ];\n    }\n\n    predictDividend(etfIdentifier: string, year: number) {\n        if (!(etfIdentifier in this.dividendPredictors)) {\n            throw generateHistoricalDataNotPresentException(etfIdentifier);\n        }\n        const predictorYear = this._dividendYearToPredictorYear(etfIdentifier, year);\n        this._createDividendPredictorIfNotPresent(etfIdentifier, predictorYear);\n        return Math.max(\n            0,\n            this.dividendPredictors[etfIdentifier].predictors[predictorYear].predict(year)[courseIndexOfForecastArray]\n        );\n    }\n}\n","import { ForecastModelSingleton } from './ForecastModel';\nimport {\n    numberOfMonthsOfAYear,\n    isLastMonthOfAYear,\n    clamp,\n    isFirstMonthOfAYear,\n    percentageToFloatValue,\n} from '../helpers/utils';\nimport cloneDeep from 'lodash.clonedeep';\n\nimport { ICostConfiguration, IConfigOptions } from '../components/Visualization';\n\nexport type ETFIdentifier = 'SP5C.PAR' | 'ESGE' | 'SUSA';\n\ntype IETFShares = { [key in ETFIdentifier]: number };\n\nexport type ETFRatio = { [key in ETFIdentifier]?: number };\n\ntype ETFPrizes = IETFShares;\n\ntype ETFMoney = IETFShares;\n\nexport type NegativeInvestmentStepIdentifier = 'totalCosts' | 'totalTaxes' | 'inflation';\n\nexport interface InvestmentStep {\n    date: Date;\n    newShares: IETFShares;\n    totalShares: IETFShares;\n    dividendNewShares: IETFShares;\n    dividendTotalShares: IETFShares;\n    totalCosts: number;\n    sharePrizes: ETFPrizes;\n    totalInvestedMoney: ETFMoney;\n    newInvestedMoney: ETFMoney;\n    newInvestment: number;\n    totalTaxes: number;\n    totalPayout: ETFMoney;\n    newPayout: ETFMoney;\n    inflation: number;\n}\n\ntype IPayoutStats = { [key in ETFIdentifier]: IPayoutStat };\n\ninterface IPayoutStat {\n    investmentStepsIdx: number;\n    alreadySoldShares: number;\n}\n\nconst basicRateOfInterest = 0.007;\nconst partialExemption = 0.7;\nconst corporateTaxRatio = 0.26375;\nconst inflationRate = 0.01;\nconst defaultDividendAmount = 0.025;\n\nexport function getTotalShareValue(etfIdentifier: ETFIdentifier, investmentStep: InvestmentStep) {\n    return investmentStep.totalShares[etfIdentifier] * investmentStep.sharePrizes[etfIdentifier];\n}\n\nexport function getTotalDividenShareValue(etfIdentifier: ETFIdentifier, investmentStep: InvestmentStep) {\n    return investmentStep.dividendTotalShares[etfIdentifier] * investmentStep.sharePrizes[etfIdentifier];\n}\n\nfunction getNextMonthDate(date: Date) {\n    const newDate = new Date(date);\n    newDate.setMonth(date.getMonth() + 1);\n    return newDate;\n}\n\nfunction calculateDividend(etfIdentifier: string, date: Date) {\n    if (!isLastMonthOfAYear(date)) {\n        return 0;\n    } else {\n        const dividendAmount = ForecastModelSingleton.getInstance().predictDividend(etfIdentifier, date.getFullYear());\n        const sharePrize = ForecastModelSingleton.getInstance().predictCourse(etfIdentifier, date);\n        return dividendAmount > 0 ? dividendAmount : defaultDividendAmount * sharePrize;\n    }\n}\n\nfunction calculateCosts(amount: number, costConfiguration: ICostConfiguration) {\n    let costs = amount * costConfiguration.percentageCosts + costConfiguration.fixedCosts;\n    const amountWithoutCosts = Math.max(amount - costs, 0);\n    costs = amount - amountWithoutCosts;\n    return [amountWithoutCosts, costs];\n}\n\nfunction subtractTaxFreeGain(taxAmount: number, taxFreeAmount: number) {\n    const leftoverTaxes = Math.max(0, taxAmount - taxFreeAmount);\n    const leftoverTaxFreeAmount = Math.max(0, taxFreeAmount - taxAmount);\n    return [leftoverTaxes, leftoverTaxFreeAmount];\n}\n\nfunction getNewShareValue(etfIdentifier: ETFIdentifier, investmentStep: InvestmentStep) {\n    return investmentStep.newShares[etfIdentifier] * investmentStep.sharePrizes[etfIdentifier];\n}\n\nfunction sumOfTotalValues(investmentStep: InvestmentStep) {\n    let sum = 0;\n    for (const etfIdentifier of Object.keys(investmentStep.totalShares) as ETFIdentifier[]) {\n        sum += getTotalShareValue(etfIdentifier, investmentStep);\n    }\n    return sum;\n}\n\nfunction calculateAndAddInflation(investmentStep: InvestmentStep, initialDate: Date, endDate: Date) {\n    // TODO predict inflationRate??? if so how should I predict it?\n    const sumTotalValues = sumOfTotalValues(investmentStep);\n    const timeFactor =\n        endDate.getFullYear() -\n        initialDate.getFullYear() +\n        (endDate.getMonth() - initialDate.getMonth()) / numberOfMonthsOfAYear;\n    investmentStep.inflation = sumTotalValues - sumTotalValues * Math.pow(1 - inflationRate, timeFactor);\n}\n\nfunction calculateAmountIncrease(amount: number, percentageIncrease: number, numberOfMonth: number) {\n    const yearsSinceStart = Math.floor(numberOfMonth / numberOfMonthsOfAYear);\n    return amount * Math.pow(1 + percentageIncrease, yearsSinceStart);\n}\n\nfunction calculateForecastInterval(\n    age: number,\n    lifeExpectation: number,\n    savingPhaseLength: number,\n    fadeOutYears: number = 10\n) {\n    const yearsLeft = lifeExpectation - age;\n    const now = new Date();\n    const beginningDate = new Date(now.getFullYear(), now.getMonth() + 1);\n    // start next month.\n    const endSavingPhaseDate = new Date(beginningDate);\n    endSavingPhaseDate.setFullYear(beginningDate.getFullYear() + savingPhaseLength);\n    const endDate = new Date(beginningDate);\n    endDate.setFullYear(beginningDate.getFullYear() + yearsLeft + fadeOutYears);\n    return [beginningDate, endSavingPhaseDate, endDate];\n}\n\nfunction calculateTaxes(\n    investmentSteps: InvestmentStep[],\n    date: Date,\n    leftoverTaxFreeAmount: number,\n    etfToRatio: ETFRatio\n) {\n    if (!isFirstMonthOfAYear(date) || investmentSteps.length < 2) {\n        return [0, leftoverTaxFreeAmount];\n    }\n    let summedTaxes = 0;\n    const decemberInvestmentStep = investmentSteps[investmentSteps.length - 1];\n    // Use the second investment step if there are not enough meaning the investing started this year after january.\n    // The second is the true first investment step the first is a dummy.\n    const firstInvestmentStepOfThisYear =\n        investmentSteps.length - numberOfMonthsOfAYear > 1\n            ? investmentSteps[investmentSteps.length - numberOfMonthsOfAYear]\n            : investmentSteps[1];\n    for (const etfIdentifier of Object.keys(etfToRatio) as ETFIdentifier[]) {\n        let accumulatedBasicProfit = 0;\n        // Sum up all new investments from february to december.\n        for (let i = 1; i < numberOfMonthsOfAYear && investmentSteps.length - i > 0; i++) {\n            const currentInvestmentStep = investmentSteps[investmentSteps.length - i];\n            accumulatedBasicProfit +=\n                (getNewShareValue(etfIdentifier, currentInvestmentStep) * i) / numberOfMonthsOfAYear;\n        }\n        // Sum up total Investment of the first date of this year.\n        accumulatedBasicProfit +=\n            (getTotalShareValue(etfIdentifier, firstInvestmentStepOfThisYear) *\n                (numberOfMonthsOfAYear - firstInvestmentStepOfThisYear.date.getMonth())) /\n            numberOfMonthsOfAYear;\n        accumulatedBasicProfit *= 0.7 * basicRateOfInterest;\n        const currentShareValues = getTotalShareValue(etfIdentifier, decemberInvestmentStep);\n        // Calculate profit of last year.\n        const profitOverAllTime = currentShareValues - decemberInvestmentStep.totalInvestedMoney[etfIdentifier];\n        let profitOfPreviousYears = 0;\n        if (investmentSteps.length > numberOfMonthsOfAYear) {\n            profitOfPreviousYears = Math.max(\n                0,\n                getTotalShareValue(etfIdentifier, investmentSteps[investmentSteps.length - 1 - numberOfMonthsOfAYear]) -\n                    investmentSteps[investmentSteps.length - 1 - numberOfMonthsOfAYear].totalInvestedMoney[\n                        etfIdentifier\n                    ]\n            );\n        }\n\n        const profitOfThisYear = profitOverAllTime - profitOfPreviousYears;\n        let amountToApplyTaxes = clamp(profitOfThisYear, 0, accumulatedBasicProfit);\n        [amountToApplyTaxes, leftoverTaxFreeAmount] = subtractTaxFreeGain(amountToApplyTaxes, leftoverTaxFreeAmount);\n        summedTaxes += amountToApplyTaxes * partialExemption * corporateTaxRatio;\n    }\n    return [summedTaxes, leftoverTaxFreeAmount];\n}\n\nfunction addAccumulationMonth(\n    investmentSteps: InvestmentStep[],\n    investment: number,\n    date: Date,\n    initialDate: Date,\n    etfToRatio: ETFRatio,\n    configOptions: IConfigOptions\n) {\n    const forecast = ForecastModelSingleton.getInstance();\n    let costs = 0;\n    const prevInvestmentStep = investmentSteps[investmentSteps.length - 1];\n    const newInvestmentStep: InvestmentStep = {\n        date: date,\n        newShares: { ...prevInvestmentStep.newShares },\n        totalShares: { ...prevInvestmentStep.totalShares },\n        dividendNewShares: { ...prevInvestmentStep.dividendNewShares },\n        dividendTotalShares: { ...prevInvestmentStep.dividendTotalShares },\n        totalCosts: prevInvestmentStep.totalCosts,\n        sharePrizes: { ...prevInvestmentStep.sharePrizes },\n        totalInvestedMoney: { ...prevInvestmentStep.totalInvestedMoney },\n        newInvestedMoney: { ...prevInvestmentStep.newInvestedMoney },\n        newInvestment: 0,\n        totalTaxes: prevInvestmentStep.totalTaxes,\n        totalPayout: { ...prevInvestmentStep.totalPayout },\n        newPayout: { ...prevInvestmentStep.newPayout },\n        inflation: 0,\n    };\n    for (const etfIdentifier of Object.keys(etfToRatio) as ETFIdentifier[]) {\n        const investmentOfEtfWithCosts = (etfToRatio[etfIdentifier] as number) * investment;\n        newInvestmentStep.newInvestment += investmentOfEtfWithCosts;\n        const [investmentOfEtfWithoutCosts, newCosts] = calculateCosts(\n            investmentOfEtfWithCosts,\n            configOptions.costConfig\n        );\n        costs += newCosts;\n        newInvestmentStep.newInvestedMoney[etfIdentifier] = investmentOfEtfWithoutCosts;\n        newInvestmentStep.totalInvestedMoney[etfIdentifier] += investmentOfEtfWithoutCosts;\n\n        const etfSharePrize = forecast.predictCourse(etfIdentifier, date);\n        const newShares = investmentOfEtfWithoutCosts / etfSharePrize;\n        newInvestmentStep.sharePrizes[etfIdentifier] = etfSharePrize;\n        newInvestmentStep.newShares[etfIdentifier] = newShares;\n\n        const dividendPayoutMoneyPerShare = calculateDividend(etfIdentifier, date);\n        const dividendPayoutMoney = newInvestmentStep.totalShares[etfIdentifier] * dividendPayoutMoneyPerShare;\n        const newSharesByDividend = dividendPayoutMoney / etfSharePrize;\n        newInvestmentStep.newShares[etfIdentifier] += newSharesByDividend;\n        newInvestmentStep.dividendNewShares[etfIdentifier] = newSharesByDividend;\n        newInvestmentStep.dividendTotalShares[etfIdentifier] += newSharesByDividend;\n\n        newInvestmentStep.totalShares[etfIdentifier] += newInvestmentStep.newShares[etfIdentifier];\n        newInvestmentStep.newPayout[etfIdentifier] = 0;\n    }\n    newInvestmentStep.totalCosts += costs;\n    const [newTaxes, newLeftoverTaxFreeAmount] = calculateTaxes(\n        investmentSteps,\n        date,\n        configOptions.taxFreeAmount,\n        etfToRatio\n    );\n    newInvestmentStep.totalTaxes += newTaxes;\n    calculateAndAddInflation(newInvestmentStep, initialDate, date);\n    investmentSteps.push(newInvestmentStep);\n\n    return newLeftoverTaxFreeAmount;\n}\n\nfunction addPayoutMonth(\n    investmentSteps: InvestmentStep[],\n    sellingAmount: number,\n    etfToRatio: ETFRatio,\n    date: Date,\n    initialDate: Date,\n    configOptions: IConfigOptions,\n    leftoverAlreadyPaidTaxes: number,\n    leftoverTaxFreeAmount: number,\n    payoutStats: IPayoutStats\n) {\n    if (isFirstMonthOfAYear(date)) {\n        leftoverTaxFreeAmount = configOptions.taxFreeAmount;\n    }\n    const forecast = ForecastModelSingleton.getInstance();\n    let costs = 0;\n    let taxes = 0;\n    const prevInvestmentStep = investmentSteps[investmentSteps.length - 1];\n    const newInvestmentStep: InvestmentStep = {\n        date: date,\n        newShares: { ...prevInvestmentStep.newShares },\n        totalShares: { ...prevInvestmentStep.totalShares },\n        dividendNewShares: { ...prevInvestmentStep.dividendNewShares },\n        dividendTotalShares: { ...prevInvestmentStep.dividendTotalShares },\n        totalCosts: prevInvestmentStep.totalCosts,\n        sharePrizes: { ...prevInvestmentStep.sharePrizes },\n        totalInvestedMoney: { ...prevInvestmentStep.totalInvestedMoney },\n        newInvestedMoney: { ...prevInvestmentStep.newInvestedMoney },\n        newInvestment: 0,\n        totalTaxes: prevInvestmentStep.totalTaxes,\n        totalPayout: { ...prevInvestmentStep.totalPayout },\n        newPayout: { ...prevInvestmentStep.newPayout },\n        inflation: 0,\n    };\n    for (const etfIdentifier of Object.keys(etfToRatio) as ETFIdentifier[]) {\n        const etfSharePrize = forecast.predictCourse(etfIdentifier, date);\n        newInvestmentStep.sharePrizes[etfIdentifier] = etfSharePrize;\n        newInvestmentStep.newPayout[etfIdentifier] = 0;\n        newInvestmentStep.newInvestedMoney[etfIdentifier] = 0;\n        // Skip payout if there are no shares left to sell.\n        if (payoutStats[etfIdentifier].investmentStepsIdx < investmentSteps.length) {\n            // Handle payout.\n            const amountToSell = (etfToRatio[etfIdentifier] as number) * sellingAmount;\n            let amountAlreadySold = 0;\n            const costsToPay = calculateCosts(amountToSell, configOptions.costConfig)[1];\n            let alreadyPaidCosts = 0;\n            let payoutInvestmentStepIdxForFIFO = payoutStats[etfIdentifier].investmentStepsIdx;\n            let currentSharesLeft =\n                investmentSteps[payoutInvestmentStepIdxForFIFO].newShares[etfIdentifier] -\n                payoutStats[etfIdentifier].alreadySoldShares;\n            for (; payoutInvestmentStepIdxForFIFO < investmentSteps.length; payoutInvestmentStepIdxForFIFO++) {\n                const leftoverAmountToSell = amountToSell - amountAlreadySold;\n                const currentInvestmentStepForFIFO = investmentSteps[payoutInvestmentStepIdxForFIFO];\n\n                const currentValueOfShares =\n                    etfSharePrize *\n                    (payoutInvestmentStepIdxForFIFO === payoutStats[etfIdentifier].investmentStepsIdx\n                        ? currentInvestmentStepForFIFO.newShares[etfIdentifier] -\n                          payoutStats[etfIdentifier].alreadySoldShares\n                        : currentInvestmentStepForFIFO.newShares[etfIdentifier]);\n                const amountToSellWithCosts = Math.min(currentValueOfShares, leftoverAmountToSell);\n                const amountOfSharesToSell = amountToSellWithCosts / etfSharePrize;\n                currentSharesLeft = currentInvestmentStepForFIFO.newShares[etfIdentifier] - amountOfSharesToSell;\n                currentSharesLeft -=\n                    payoutInvestmentStepIdxForFIFO === payoutStats[etfIdentifier].investmentStepsIdx\n                        ? payoutStats[etfIdentifier].alreadySoldShares\n                        : 0;\n\n                const amountToSellWithoutCosts = Math.max(0, amountToSellWithCosts - (costsToPay - alreadyPaidCosts));\n                alreadyPaidCosts += Math.max(0, amountToSellWithCosts - amountToSellWithoutCosts);\n\n                const initialValueOfShares =\n                    amountOfSharesToSell * currentInvestmentStepForFIFO.sharePrizes[etfIdentifier];\n                let amountToPayTaxes = Math.max(0, amountToSellWithoutCosts - initialValueOfShares);\n\n                [amountToPayTaxes, leftoverTaxFreeAmount] = subtractTaxFreeGain(\n                    amountToPayTaxes,\n                    leftoverTaxFreeAmount\n                );\n                let taxesToPay = amountToPayTaxes * partialExemption * corporateTaxRatio;\n                [taxesToPay, leftoverAlreadyPaidTaxes] = subtractTaxFreeGain(taxesToPay, leftoverAlreadyPaidTaxes);\n                taxes += taxesToPay;\n                const payoutAmount = amountToSellWithoutCosts - taxesToPay;\n\n                newInvestmentStep.newPayout[etfIdentifier] += payoutAmount;\n                newInvestmentStep.totalPayout[etfIdentifier] += payoutAmount;\n\n                newInvestmentStep.totalShares[etfIdentifier] -= amountOfSharesToSell;\n                amountAlreadySold += amountToSellWithCosts;\n\n                // Handle the decrease of the dividendShares.\n                let amountOfDividendSharesLeft = 0;\n                if (payoutInvestmentStepIdxForFIFO === payoutStats[etfIdentifier].investmentStepsIdx) {\n                    amountOfDividendSharesLeft = Math.max(\n                        0,\n                        currentInvestmentStepForFIFO.dividendNewShares[etfIdentifier] -\n                            payoutStats[etfIdentifier].alreadySoldShares\n                    );\n                } else {\n                    amountOfDividendSharesLeft = currentInvestmentStepForFIFO.dividendNewShares[etfIdentifier];\n                }\n                const amountOfDividendSharesSold = Math.min(amountOfDividendSharesLeft, amountOfSharesToSell);\n                newInvestmentStep.dividendTotalShares[etfIdentifier] -= amountOfDividendSharesSold;\n\n                // Use break in order to not change the value of payoutInvestmentStepIdxForFIFO.\n                if (amountAlreadySold >= amountToSell) {\n                    break;\n                }\n            }\n            costs += alreadyPaidCosts;\n            // Handle update payoutStats.\n            payoutStats[etfIdentifier].investmentStepsIdx = payoutInvestmentStepIdxForFIFO;\n            payoutStats[etfIdentifier].investmentStepsIdx += currentSharesLeft === 0 ? 1 : 0;\n\n            payoutStats[etfIdentifier].alreadySoldShares =\n                payoutInvestmentStepIdxForFIFO < investmentSteps.length\n                    ? investmentSteps[payoutInvestmentStepIdxForFIFO].newShares[etfIdentifier] - currentSharesLeft\n                    : 0;\n        }\n\n        // Handle dividend.\n        const dividendPayoutMoney =\n            newInvestmentStep.totalShares[etfIdentifier] * calculateDividend(etfIdentifier, date);\n        const newSharesByDividend = dividendPayoutMoney / etfSharePrize;\n        newInvestmentStep.newShares[etfIdentifier] = newSharesByDividend;\n        newInvestmentStep.totalShares[etfIdentifier] += newSharesByDividend;\n        newInvestmentStep.dividendNewShares[etfIdentifier] = newSharesByDividend;\n        newInvestmentStep.dividendTotalShares[etfIdentifier] += newSharesByDividend;\n    }\n\n    newInvestmentStep.totalCosts += costs;\n    newInvestmentStep.totalTaxes += taxes;\n    calculateAndAddInflation(newInvestmentStep, initialDate, date);\n    investmentSteps.push(newInvestmentStep);\n    return [leftoverAlreadyPaidTaxes, leftoverTaxFreeAmount];\n}\n\nfunction generateEmptyInvestmentStep(etfToRatio: ETFRatio, date: Date) {\n    const forecast = ForecastModelSingleton.getInstance();\n    const dummyData: IETFShares = { 'SP5C.PAR': 0, ESGE: 0, SUSA: 0 };\n    const emptyInvestmentStep: InvestmentStep = {\n        date: date,\n        totalCosts: 0,\n        totalTaxes: 0,\n        newShares: { ...dummyData },\n        totalShares: { ...dummyData },\n        dividendNewShares: { ...dummyData },\n        dividendTotalShares: { ...dummyData },\n        totalInvestedMoney: { ...dummyData },\n        totalPayout: { ...dummyData },\n        newPayout: { ...dummyData },\n        sharePrizes: { ...dummyData },\n        newInvestedMoney: { ...dummyData },\n        newInvestment: 0,\n        inflation: 0,\n    };\n    for (const etfIdentifier of Object.keys(etfToRatio) as ETFIdentifier[]) {\n        emptyInvestmentStep.newShares[etfIdentifier] = 0;\n        emptyInvestmentStep.totalShares[etfIdentifier] = 0;\n        emptyInvestmentStep.dividendNewShares[etfIdentifier] = 0;\n        emptyInvestmentStep.dividendTotalShares[etfIdentifier] = 0;\n        emptyInvestmentStep.totalInvestedMoney[etfIdentifier] = 0;\n        emptyInvestmentStep.totalPayout[etfIdentifier] = 0;\n        emptyInvestmentStep.newPayout[etfIdentifier] = 0;\n        emptyInvestmentStep.newInvestedMoney[etfIdentifier] = 0;\n        emptyInvestmentStep.sharePrizes[etfIdentifier] = forecast.predictCourse(etfIdentifier, date);\n    }\n    return emptyInvestmentStep;\n}\n\nexport class InvestmentModel {\n    private startCapital: number;\n    private monthlyInvestment: number;\n    private yearlyInvestmentIncrease: number;\n    private monthlyPayout: number;\n    private yearlyPayoutIncrease: number;\n    private savingPhaseLength: number;\n    private etfToRatio: ETFRatio;\n    private configOptions: IConfigOptions;\n    private expectationOfLife: number;\n    private age: number;\n\n    private savingDates: Date[] = [];\n    private payoutDates: Date[] = [];\n    private initialDate: Date = new Date();\n    private investmentSteps: InvestmentStep[] = [];\n\n    constructor(\n        startCapital: number,\n        monthlyInvestment: number,\n        yearlyInvestmentIncrease: number,\n        monthlyPayout: number,\n        yearlyPayoutIncrease: number,\n        savingPhaseLength: number,\n        etfToRatio: ETFRatio,\n        configOptions: IConfigOptions,\n        age: number,\n        expectationOfLife: number\n    ) {\n        this.startCapital = startCapital;\n        this.monthlyInvestment = monthlyInvestment;\n        this.monthlyPayout = monthlyPayout;\n        this.savingPhaseLength = savingPhaseLength;\n        this.etfToRatio = etfToRatio;\n        this.configOptions = configOptions;\n        this.expectationOfLife = expectationOfLife;\n        this.age = age;\n        this.yearlyInvestmentIncrease = percentageToFloatValue(yearlyInvestmentIncrease);\n        this.yearlyPayoutIncrease = percentageToFloatValue(yearlyPayoutIncrease);\n\n        this._calculateTimestampsForModel();\n        this._calculateModel();\n    }\n\n    private _calculateTimestampsForModel() {\n        const [startDate, endSavingPhaseDate, endDate] = calculateForecastInterval(\n            this.age,\n            this.expectationOfLife,\n            this.savingPhaseLength\n        );\n        const savingDates = [];\n        for (\n            let currentDate = startDate;\n            currentDate < endSavingPhaseDate;\n            currentDate = getNextMonthDate(currentDate)\n        ) {\n            savingDates.push(currentDate);\n        }\n        this.savingDates = savingDates;\n        const payoutDates = [];\n        for (let currentDate = endSavingPhaseDate; currentDate < endDate; currentDate = getNextMonthDate(currentDate)) {\n            payoutDates.push(currentDate);\n        }\n        this.payoutDates = payoutDates;\n        this.initialDate = startDate;\n    }\n\n    private _calculateModel() {\n        let investmentSteps = [generateEmptyInvestmentStep(this.etfToRatio, this.savingDates[0])];\n        addAccumulationMonth(\n            investmentSteps,\n            this.monthlyInvestment + this.startCapital,\n            this.savingDates[0],\n            this.initialDate,\n            this.etfToRatio,\n            this.configOptions\n        );\n        for (let i = 1; i < this.savingDates.length; i++) {\n            const investmentAmount = calculateAmountIncrease(this.monthlyInvestment, this.yearlyInvestmentIncrease, i);\n            addAccumulationMonth(\n                investmentSteps,\n                investmentAmount,\n                this.savingDates[i],\n                this.initialDate,\n                this.etfToRatio,\n                this.configOptions\n            );\n        }\n        // Discard the empty investment step.\n        investmentSteps = investmentSteps.slice(1);\n\n        let leftoverAlreadyPaidTaxes = investmentSteps[investmentSteps.length - 1].totalTaxes;\n        let leftoverTaxFreeAmount = this.configOptions.taxFreeAmount;\n        const payoutStats: IPayoutStats = {\n            'SP5C.PAR': { investmentStepsIdx: 0, alreadySoldShares: 0 },\n            ESGE: { investmentStepsIdx: 0, alreadySoldShares: 0 },\n            SUSA: { investmentStepsIdx: 0, alreadySoldShares: 0 },\n        };\n        for (let i = 0; i < this.payoutDates.length; i++) {\n            const payoutAmount = calculateAmountIncrease(this.monthlyPayout, this.yearlyPayoutIncrease, i);\n            [leftoverAlreadyPaidTaxes, leftoverTaxFreeAmount] = addPayoutMonth(\n                investmentSteps,\n                payoutAmount,\n                this.etfToRatio,\n                this.payoutDates[i],\n                this.initialDate,\n                this.configOptions,\n                leftoverAlreadyPaidTaxes,\n                leftoverTaxFreeAmount,\n                payoutStats\n            );\n        }\n        this.investmentSteps = investmentSteps;\n    }\n\n    getInvestmentSteps(numberOfEntriesPerYear: number) {\n        if (!Number.isInteger(numberOfMonthsOfAYear / numberOfEntriesPerYear)) {\n            throw new Error(\n                `The numberOfEntriesPerYear need to be dividable by ${numberOfMonthsOfAYear} in order to make sense.`\n            );\n        }\n\n        if (numberOfEntriesPerYear === numberOfMonthsOfAYear) {\n            return this.investmentSteps;\n        }\n        const selectedInvestmentSteps = [];\n        const numberOfMonthsToMerge = numberOfMonthsOfAYear / numberOfEntriesPerYear;\n        for (let i = 0; i < this.investmentSteps.length; i += numberOfMonthsToMerge) {\n            // Take the start date as representative.\n            const adjustedInvestmentStep = cloneDeep(this.investmentSteps[i]);\n            for (let offset = 1; offset < numberOfMonthsToMerge; offset++) {\n                adjustedInvestmentStep.newInvestment += this.investmentSteps[i + offset].newInvestment;\n                for (const etfIdentifier of Object.keys(\n                    this.investmentSteps[i + offset].newPayout\n                ) as ETFIdentifier[]) {\n                    adjustedInvestmentStep.newPayout[etfIdentifier] += this.investmentSteps[i + offset].newPayout[\n                        etfIdentifier\n                    ];\n                }\n            }\n            selectedInvestmentSteps.push(adjustedInvestmentStep);\n        }\n        return selectedInvestmentSteps;\n    }\n\n    getPayoutPhaseBeginDate() {\n        return this.payoutDates[0];\n    }\n}\n","import * as d3 from 'd3';\nimport { roundDateToBeginningOfMonth, numberOfMonthsOfAYear } from '../helpers/utils';\nimport { InvestmentStep } from '../model/InvestmentModel';\n\ninterface ITextProperty {\n    text: string;\n    x: number;\n    y: number;\n    fontSize: number;\n    textAnchor: string;\n    fontWeight: string;\n    color: string;\n}\n\ninterface ITextProperties {\n    [textIdentifier: string]: ITextProperty;\n}\n\nexport interface DataArrayEntry {\n    yStart: number;\n    yEnd: number;\n    date: Date;\n    color: string;\n}\n\nexport type DataArray = DataArrayEntry[][];\n\nconst FIVE_MILLION = 5000000;\nconst ONE_THOUSAND = 1000;\nconst ONE_MILLION = 1000000;\nconst numberOfTicks = 7;\n\nexport function generateLabelWithValueText(name: string, value: string | undefined = undefined) {\n    return `${name.charAt(0).toUpperCase()}${name.slice(1)}: ${value == null ? '-' : value}`;\n}\n\nfunction calculateInvestmentStepIndexForDate(date: Date, investmentSteps: InvestmentStep[]) {\n    const firstDate = investmentSteps[0].date;\n    const secondDate = investmentSteps[1].date;\n    const numberOfMonthsSinceStartDate =\n        (date.getFullYear() - firstDate.getFullYear()) * numberOfMonthsOfAYear +\n        (date.getMonth() - firstDate.getMonth());\n    const numberOfMonthsPerInvestmentStep =\n        (secondDate.getFullYear() - firstDate.getFullYear()) * numberOfMonthsOfAYear +\n        (secondDate.getMonth() - firstDate.getMonth());\n\n    return Math.floor(numberOfMonthsSinceStartDate / numberOfMonthsPerInvestmentStep);\n}\n\nexport class D3ChartStrategy {\n    tooltipDate: Date;\n    yExtent: [number, number];\n\n    protected readonly lineStrokeWidth = 3;\n    protected readonly standardFontSize = 20;\n    protected readonly labelValueIdentifier = 'value';\n\n    protected investmentSteps: InvestmentStep[];\n    protected dateExtent: [Date, Date] = [new Date(), new Date()];\n    protected marginW: number;\n    protected marginH: number;\n    protected width: number;\n    protected height: number;\n    protected maxIndex = 0;\n    protected minIndex = 0;\n    protected yScale: d3.ScaleLinear<number, number, never> = d3.scaleLinear();\n    protected xScale: d3.ScaleTime<number, number, never> = d3.scaleTime();\n    protected dataArray: DataArray = [];\n    protected textProperties: ITextProperties = {};\n    protected payoutPhaseStartDate: Date;\n\n    protected svg: d3.Selection<SVGGElement, unknown, null, undefined>;\n\n    private static activeStrategies: D3ChartStrategy[] = [];\n\n    private readonly fadeOutGradientID = 'fadeOutGradient';\n\n    private faceOutYearsLength = 10;\n\n    private hoverLine: d3.Selection<SVGLineElement, unknown, null, undefined>;\n    private interaction: d3.Selection<SVGGElement, unknown, null, undefined>;\n    private textGroup: d3.Selection<SVGGElement, unknown, null, undefined>;\n\n    constructor(\n        investmentSteps: InvestmentStep[],\n        renderDivRef: HTMLDivElement,\n        payoutPhaseStartDate: Date,\n        svgID: string,\n        tooltipDate: Date | undefined,\n        yExtent: [number, number] | undefined,\n        width = 1100,\n        height = 300,\n        marginW = 200,\n        marginH = 40\n    ) {\n        if (this.constructor === D3ChartStrategy) {\n            throw new Error(\"Abstract classes can't be instantiated.\");\n        }\n        D3ChartStrategy.activeStrategies.push(this);\n        this.investmentSteps = investmentSteps;\n        this.payoutPhaseStartDate = payoutPhaseStartDate;\n        this.tooltipDate = tooltipDate != null ? tooltipDate : new Date(0);\n        this.yExtent = yExtent != null ? yExtent : [0, 0];\n\n        this.marginW = marginW;\n        this.marginH = marginH;\n        this.width = width;\n        this.height = height;\n\n        // Reset diagram by deletion.\n        renderDivRef.innerHTML = '';\n\n        this.svg = d3\n            .select(renderDivRef)\n            .append('svg')\n            .attr('id', svgID)\n            .attr('viewBox', `0 0 ${this.width + 2 * this.marginW} ${this.height + 2 * this.marginH}`)\n            .append('g')\n            .attr('transform', `translate(${[this.marginW / 2, this.marginH]})`);\n\n        // Set default values needed by typescript.\n        this.textGroup = this.svg;\n        this.interaction = this.svg;\n        this.hoverLine = this.svg.append('line');\n    }\n\n    static reset() {\n        D3ChartStrategy.activeStrategies = [];\n    }\n\n    private static _setInteractionDisplayForActiveDiagrams(displayOption: string) {\n        for (const activeDiagram of D3ChartStrategy.activeStrategies) {\n            activeDiagram.interaction.style('visibility', displayOption);\n        }\n    }\n\n    render() {\n        this._prepareData();\n        this._calculateExtents();\n        this._createScales();\n        this._drawContent();\n        this._drawFadeOut();\n        this._prepareText();\n        this._drawText();\n        this._drawAxis();\n        this._addInteraction();\n\n        if (this.tooltipDate >= this.dateExtent[0] && this.tooltipDate <= this.dateExtent[1]) {\n            this._updateAllDiagrams();\n        }\n    }\n\n    protected valueToDisplayText(value: number, hasToBePositive = false) {\n        const labelDivisionFactor =\n            Math.max(-this.yExtent[0], this.yExtent[1] as number) >= FIVE_MILLION ? ONE_MILLION : ONE_THOUSAND;\n        const numberIndicator = labelDivisionFactor === ONE_MILLION ? 'M' : 'K';\n        if (hasToBePositive) {\n            value = Math.abs(value);\n        }\n        return `${(value / labelDivisionFactor).toLocaleString(undefined, {\n            maximumFractionDigits: 2,\n        })}${numberIndicator} €`;\n    }\n\n    private _calculateExtents() {\n        this.dateExtent = d3.extent(this.dataArray[0], d => d.date) as [Date, Date];\n\n        const lastImportantDateForYScale = new Date(this.payoutPhaseStartDate);\n        lastImportantDateForYScale.setMonth(lastImportantDateForYScale.getMonth() + numberOfMonthsOfAYear);\n        // Only calculate the y extent when it is undefined. Meaning the y axis is not locked.\n        if (this.yExtent[0] === 0 && this.yExtent[1] === 0) {\n            const filteredDataArrayForYMax = this.dataArray[this.maxIndex].filter(\n                e => e.date <= lastImportantDateForYScale && e.date > this.dateExtent[0]\n            );\n            const filteredDataArrayForYMin = this.dataArray[this.minIndex].filter(\n                e => e.date <= lastImportantDateForYScale\n            );\n            const maxVal = d3.max(filteredDataArrayForYMax.map(e => e.yStart)) as number;\n            const minVal = d3.min(filteredDataArrayForYMin.map(e => e.yEnd)) as number;\n            this.yExtent = [minVal, maxVal];\n        }\n    }\n\n    private _createScales() {\n        this.yScale = d3.scaleLinear().domain(this.yExtent).range([this.height, 0]);\n        this.xScale = d3.scaleTime().domain(this.dateExtent).range([0, this.width]);\n    }\n\n    private _drawAxis() {\n        this.svg\n            .append('g')\n            .style('font-size', '20px')\n            .call(\n                d3\n                    .axisLeft(this.yScale)\n                    .tickFormat(d => this.valueToDisplayText(d as number))\n                    .ticks(numberOfTicks)\n            );\n\n        this.svg\n            .append('g')\n            .style('font-size', '20px')\n            .attr('transform', `translate(0, ${this.height})`)\n            .call(d3.axisBottom(this.xScale));\n\n        // Draw zero line.\n        this.svg\n            .append('g')\n            .append('line')\n            .attr('x1', this.xScale(this.dateExtent[0]))\n            .attr('y1', this.yScale(0))\n            .attr('x2', this.xScale(this.dateExtent[1]))\n            .attr('y2', this.yScale(0))\n            .style('stroke-width', this.lineStrokeWidth)\n            .style('stroke', 'black');\n\n        // Draw phase division line.\n        this.svg\n            .append('g')\n            .append('line')\n            .attr('x1', this.xScale(this.payoutPhaseStartDate) - this.lineStrokeWidth / 2)\n            .attr('y1', this.yScale(this.yExtent[0]))\n            .attr('x2', this.xScale(this.payoutPhaseStartDate) - this.lineStrokeWidth / 2)\n            .attr('y2', this.yScale(this.yExtent[1]))\n            .style('stroke-width', this.lineStrokeWidth)\n            .style('stroke', 'black');\n    }\n\n    private _addInteraction() {\n        const interactionClass = 'interaction';\n        const tooltipLineClass = 'tooltipLine';\n\n        this.interaction = this.svg\n            .append('g')\n            .attr('class', interactionClass)\n            .style('visibility', 'hidden')\n            .attr('transform', `translate(${[0, -this.marginH]})`);\n\n        this.hoverLine = this.interaction\n            .append('line')\n            .attr('class', tooltipLineClass)\n            .style('stroke', 'blue')\n            .style('stroke-dasharray', '3,3')\n            .style('opacity', 0.5)\n            .attr('y1', this.height + 2 * this.marginH)\n            .attr('y2', 0);\n\n        // Add rectangle to catch mouse events.\n        this.svg\n            .append('rect')\n            .attr('class', 'mouseEvent')\n            .attr('transform', `translate(${[0, -this.marginH]})`)\n            .attr('height', this.height + 2 * this.marginH)\n            .attr('width', this.width)\n            .attr('fill', 'none')\n            .style('pointer-events', 'all')\n            .on('mouseover', () => D3ChartStrategy._setInteractionDisplayForActiveDiagrams('visible'))\n            .on('mouseout', () => D3ChartStrategy._setInteractionDisplayForActiveDiagrams('hidden'))\n            .on('mousemove', mouseEvent => this._handleTooltipEvent(mouseEvent));\n    }\n\n    // Interaction inspired by: http://www.d3noob.org/2014/07/my-favourite-tooltip-method-for-line.html\n    private _handleTooltipEvent(mouseEvent: any) {\n        const x = d3.pointer(mouseEvent)[0];\n        const date = this.xScale.invert(x);\n        this.tooltipDate = roundDateToBeginningOfMonth(date);\n        this._updateAllDiagrams();\n    }\n\n    private _updateAllDiagrams() {\n        const investmentStepIndex = calculateInvestmentStepIndexForDate(this.tooltipDate, this.investmentSteps);\n        for (const activeDiagram of D3ChartStrategy.activeStrategies) {\n            activeDiagram.hoverLine.attr('x1', this.xScale(this.tooltipDate)).attr('x2', this.xScale(this.tooltipDate));\n            activeDiagram._updateTooltip(investmentStepIndex);\n            activeDiagram._updateDiagram();\n        }\n    }\n\n    private _drawText() {\n        this.textGroup = this.svg.append('g').attr('class', 'textGroup');\n        this.textGroup\n            .selectAll('text')\n            .data(Object.values(this.textProperties))\n            .enter()\n            .append('text')\n            .text(d => d.text)\n            .attr('x', d => d.x)\n            .attr('y', d => d.y)\n            .style('font-size', d => d.fontSize)\n            .style('font-weight', d => d.fontWeight)\n            .style('text-anchor', d => d.textAnchor)\n            .style('fill', d => d.color);\n    }\n\n    private _updateDiagram() {\n        this.textGroup.selectAll('text').text(d => (d as ITextProperty).text);\n    }\n\n    protected _prepareText() {\n        const savingPhaseMid =\n            this.xScale(this.dateExtent[0]) +\n            (this.xScale(this.payoutPhaseStartDate) - this.xScale(this.dateExtent[0])) / 2;\n\n        const payoutPhaseMid =\n            this.xScale(this.payoutPhaseStartDate) +\n            (this.xScale(this.dateExtent[1]) - this.xScale(this.payoutPhaseStartDate)) / 2;\n        const yPos = -10;\n        this.textProperties = {\n            savingBold: {\n                text: 'SAVING',\n                x: savingPhaseMid,\n                y: yPos,\n                fontSize: this.standardFontSize,\n                textAnchor: 'end',\n                fontWeight: 'bold',\n                color: 'black',\n            },\n            savingPhase: {\n                text: 'Phase',\n                x: savingPhaseMid,\n                y: yPos,\n                fontSize: this.standardFontSize,\n                textAnchor: 'start',\n                fontWeight: 'normal',\n                color: 'black',\n            },\n            payoutBold: {\n                text: 'PAYOUT',\n                x: payoutPhaseMid,\n                y: yPos,\n                fontSize: this.standardFontSize,\n                textAnchor: 'end',\n                fontWeight: 'bold',\n                color: 'black',\n            },\n            payoutPhase: {\n                text: 'Phase',\n                x: payoutPhaseMid,\n                y: yPos,\n                fontSize: this.standardFontSize,\n                textAnchor: 'start',\n                fontWeight: 'normal',\n                color: 'black',\n            },\n        };\n    }\n\n    private _drawFadeOut() {\n        const fadeOutGroup = this.svg.append('g').attr('class', 'fadeOut');\n        const fadeOutStartDate = new Date(this.dateExtent[1]);\n        fadeOutStartDate.setFullYear(fadeOutStartDate.getFullYear() - this.faceOutYearsLength);\n\n        const gradient = fadeOutGroup.append('linearGradient').attr('id', this.fadeOutGradientID);\n\n        gradient\n            .append('stop')\n            .attr('class', 'start')\n            .attr('offset', '0%')\n            .attr('stop-color', 'white')\n            .attr('stop-opacity', 0);\n\n        gradient\n            .append('stop')\n            .attr('class', 'end')\n            .attr('offset', '100%')\n            .attr('stop-color', 'white')\n            .attr('stop-opacity', 1);\n\n        fadeOutGroup\n            .append('rect')\n            .attr('x', this.xScale(fadeOutStartDate))\n            .attr('y', this.marginH * 2 * -1)\n            .attr('width', this.xScale(this.dateExtent[1]) - this.xScale(fadeOutStartDate))\n            .attr('height', this.yScale(this.yExtent[0]) - this.yScale(this.yExtent[1]) + this.marginH * 2)\n            .style('fill', `url(#${this.fadeOutGradientID})`);\n    }\n\n    protected _prepareData() {\n        throw new Error('Abstract method. Not Implemented');\n    }\n\n    protected _drawContent() {\n        throw new Error('Abstract method. Not Implemented');\n    }\n\n    protected _updateTooltip(investmentStepIndex: number) {\n        throw new Error('Abstract method. Not Implemented');\n    }\n}\n","import * as d3 from 'd3';\nimport {\n    getTotalShareValue,\n    getTotalDividenShareValue,\n    InvestmentStep,\n    NegativeInvestmentStepIdentifier,\n    ETFIdentifier,\n    ETFRatio,\n} from '../model/InvestmentModel';\nimport { D3ChartStrategy, generateLabelWithValueText, DataArrayEntry } from './D3ChartStrategy';\nimport { ETF_SYMBOL_TO_NAME } from '../components/App';\n\ninterface IDataToIndex {\n    [identifier: string]: number;\n}\n\ntype ETFIdentifierToColors = { [key in ETFIdentifier]: { total: string; invested: string } };\n\ntype NegativeInvestmentToColorMap = { [key in NegativeInvestmentStepIdentifier]: string };\n\nfunction generateEtfValueText(\n    investmentValue: string | undefined = undefined,\n    totalValue: string | undefined = undefined\n) {\n    return `Inv: ${investmentValue == null ? '-' : investmentValue}, Tot: ${totalValue == null ? '-' : totalValue}`;\n}\n\nexport class AreaChartD3 extends D3ChartStrategy {\n    private readonly etfLineColors: ETFIdentifierToColors = {\n        'SP5C.PAR': { total: '#0562a0', invested: '#71c1f7' },\n        ESGE: { total: '#ff1eff', invested: '#ff63ff' },\n        SUSA: { total: '#23ff01', invested: '#7dff69' },\n    };\n    private readonly colors: NegativeInvestmentToColorMap = {\n        inflation: '#ff7f00',\n        totalCosts: '#be3bff',\n        totalTaxes: '#e31a1c',\n    };\n    private readonly lineOpacity = 0.7;\n    private readonly negativeLabels: NegativeInvestmentStepIdentifier[] = ['totalCosts', 'totalTaxes', 'inflation'];\n    private readonly investedIdentifier = 'invested';\n    private readonly capitalIdentifier = 'capital';\n\n    private etfIdentifiers: ETFIdentifier[];\n    private dataToIndex: IDataToIndex = {};\n\n    constructor(\n        investmentSteps: InvestmentStep[],\n        renderDivRef: HTMLDivElement,\n        payoutPhaseStartDate: Date,\n        tooltipDate: Date | undefined,\n        yExtent: [number, number] | undefined,\n        etfRatio: ETFRatio\n    ) {\n        super(investmentSteps, renderDivRef, payoutPhaseStartDate, 'firstSVG', tooltipDate, yExtent);\n\n        this.etfIdentifiers = [];\n        for (const etfIdentifier of Object.keys(etfRatio) as ETFIdentifier[]){\n            const ratio = etfRatio[etfIdentifier];\n            if (ratio!= null && ratio > 0.0){\n                this.etfIdentifiers.push(etfIdentifier);\n            }\n        }\n    }\n\n    _prepareData() {\n        this.dataToIndex = {\n            totalCosts: 0,\n            totalTaxes: 1,\n            inflation: 2,\n        };\n\n        let currentIdx = 3;\n        for (const etfIdentifier of this.etfIdentifiers) {\n            this.dataToIndex[etfIdentifier + this.investedIdentifier] = currentIdx++;\n            this.dataToIndex[etfIdentifier + this.capitalIdentifier] = currentIdx++;\n        }\n\n        this.minIndex = this.dataToIndex.inflation;\n        this.maxIndex = currentIdx - 1;\n\n        this.dataArray = [];\n        for (let i = 0; i < currentIdx; i++) {\n            this.dataArray.push([]);\n        }\n        for (const investmentStep of this.investmentSteps) {\n            this.dataArray[this.dataToIndex.totalCosts].push({\n                yStart: 0,\n                yEnd: -investmentStep.totalCosts,\n                date: investmentStep.date,\n                color: this.colors.totalCosts,\n            });\n            this.dataArray[this.dataToIndex.totalTaxes].push({\n                yStart: -investmentStep.totalCosts,\n                yEnd: -investmentStep.totalCosts - investmentStep.totalTaxes,\n                date: investmentStep.date,\n                color: this.colors.totalTaxes,\n            });\n            this.dataArray[this.dataToIndex.inflation].push({\n                yStart: -investmentStep.totalCosts - investmentStep.totalTaxes,\n                yEnd: -investmentStep.totalCosts - investmentStep.totalTaxes - investmentStep.inflation,\n                date: investmentStep.date,\n                color: this.colors.inflation,\n            });\n            let heightOffset = 0;\n            for (const etfIdentifier of this.etfIdentifiers) {\n                const totalShareValue = getTotalShareValue(etfIdentifier, investmentStep);\n                const totalDividendShareValue = getTotalDividenShareValue(etfIdentifier, investmentStep);\n                this.dataArray[this.dataToIndex[etfIdentifier + this.capitalIdentifier]].push({\n                    yStart: totalShareValue + heightOffset,\n                    yEnd: totalShareValue - totalDividendShareValue + heightOffset,\n                    date: investmentStep.date,\n                    color: this.etfLineColors[etfIdentifier].total,\n                });\n                this.dataArray[this.dataToIndex[etfIdentifier + this.investedIdentifier]].push({\n                    yStart: totalShareValue - totalDividendShareValue + heightOffset,\n                    yEnd: heightOffset,\n                    date: investmentStep.date,\n                    color: this.etfLineColors[etfIdentifier].invested,\n                });\n                heightOffset += totalShareValue;\n            }\n        }\n    }\n\n    _drawLines() {\n        // Draw line chart.\n        for (let i = 0; i < this.dataArray.length; i++) {\n            this.svg\n                .append('path')\n                .datum(this.dataArray[i])\n                .style('stroke', d => d[0].color)\n                .style('stroke-width', this.lineStrokeWidth)\n                .style('opacity', this.lineOpacity)\n                .style('fill', 'none')\n                .attr(\n                    'd',\n                    d3\n                        .line<DataArrayEntry>()\n                        .x(d => this.xScale(d.date))\n                        .y(d => this.yScale(d.yStart))\n                );\n        }\n    }\n    _drawContent() {\n        this._drawArea();\n    }\n\n    _drawArea() {\n        // Draw stacked area chart.\n        for (let i = 0; i < this.dataArray.length; i++) {\n            this.svg\n                .append('g')\n                .attr('class', 'area')\n                .append('path')\n                .datum(this.dataArray[i])\n                .style('opacity', this.lineOpacity)\n                .style('fill', d => d[0].color)\n                .attr(\n                    'd',\n                    d3\n                        .area<DataArrayEntry>()\n                        .curve(d3.curveMonotoneX)\n                        .x(d => this.xScale(d.date))\n                        .y0(d => this.yScale(d.yEnd))\n                        .y1(d => this.yScale(d.yStart))\n                );\n        }\n    }\n\n    _prepareText() {\n        super._prepareText();\n        const paddingW = this.width * 0.005;\n        const paddingH = this.standardFontSize * 0.3;\n\n        for (let i = 0; i < this.negativeLabels.length; i++) {\n            this.textProperties[this.negativeLabels[i]] = {\n                text: generateLabelWithValueText(this.negativeLabels[i]),\n                x: this.xScale(this.dateExtent[1]) + paddingW,\n                y: this.yScale(0) + (this.standardFontSize + paddingH) * i + this.standardFontSize,\n                fontSize: this.standardFontSize,\n                textAnchor: 'start',\n                fontWeight: 'normal',\n                color: this.colors[this.negativeLabels[i]],\n            };\n        }\n\n        // Add ETF Labels.\n        for (let i = 0; i < this.etfIdentifiers.length; i++) {\n            this.textProperties[this.etfIdentifiers[i]] = {\n                text: ETF_SYMBOL_TO_NAME[this.etfIdentifiers[i]],\n                x: this.xScale(this.dateExtent[1]) + paddingW,\n                y: this.yScale(0) - (this.standardFontSize + paddingH) * i * 2 - 2 * this.standardFontSize,\n                fontSize: this.standardFontSize,\n                textAnchor: 'start',\n                fontWeight: 'normal',\n                color: this.etfLineColors[this.etfIdentifiers[i]].total,\n            };\n        }\n\n        // Add ETF values of Labels.\n        for (let i = 0; i < this.etfIdentifiers.length; i++) {\n            this.textProperties[this.etfIdentifiers[i] + this.labelValueIdentifier] = {\n                text: generateEtfValueText(),\n                x: this.xScale(this.dateExtent[1]) + paddingW,\n                y: this.yScale(0) - (this.standardFontSize + paddingH) * i * 2 - 1 * this.standardFontSize,\n                fontSize: this.standardFontSize,\n                textAnchor: 'start',\n                fontWeight: 'normal',\n                color: this.etfLineColors[this.etfIdentifiers[i]].total,\n            };\n        }\n    }\n\n    _updateTooltip(investmentStepIndex: number) {\n        for (const etfIdentifier of this.etfIdentifiers) {\n            const totalValue = getTotalShareValue(etfIdentifier, this.investmentSteps[investmentStepIndex]);\n            const totalDividendValue = getTotalDividenShareValue(\n                etfIdentifier,\n                this.investmentSteps[investmentStepIndex]\n            );\n            const investedValue = totalValue - totalDividendValue;\n            const updatedValueText = generateEtfValueText(\n                this.valueToDisplayText(investedValue, true),\n                this.valueToDisplayText(totalValue, true)\n            );\n            this.textProperties[etfIdentifier + this.labelValueIdentifier].text = updatedValueText;\n        }\n        for (const negativeLabel of this.negativeLabels) {\n            const value = this.investmentSteps[investmentStepIndex][negativeLabel];\n            const updatedValueText = generateLabelWithValueText(negativeLabel, this.valueToDisplayText(value, true));\n            this.textProperties[negativeLabel].text = updatedValueText;\n        }\n    }\n}\n","import { InvestmentStep, ETFIdentifier } from '../model/InvestmentModel';\nimport { D3ChartStrategy, generateLabelWithValueText } from './D3ChartStrategy';\n\nfunction getSumNewPayout(investmentStep: InvestmentStep) {\n    let sumNewPayout = 0;\n    for (const etfIdentifier of Object.keys(investmentStep.newPayout) as ETFIdentifier[]) {\n        sumNewPayout += investmentStep.newPayout[etfIdentifier];\n    }\n    return sumNewPayout;\n}\n\nexport class CashflowBarChart extends D3ChartStrategy {\n    private readonly barPaddingPercentage = 0.9;\n    private readonly colors = { payout: '#3acc5c', invested: '#ff3e58' };\n\n    private rectWidth = 0; \n\n    constructor(\n        investmentSteps: InvestmentStep[],\n        renderDivRef: HTMLDivElement,\n        payoutPhaseStartDate: Date,\n        tooltipDate: Date | undefined,\n        yExtent: [number, number] | undefined\n    ) {\n        super(investmentSteps, renderDivRef, payoutPhaseStartDate, 'secondSVG', tooltipDate, yExtent);\n    }\n\n    render() {\n        super.render();\n    }\n\n    _prepareData() {\n        // Create line array.\n        const dataToIndex = {\n            invested: 0,\n            payout: 1,\n        };\n\n        this.minIndex = dataToIndex.invested;\n        this.maxIndex = dataToIndex.payout;\n\n        this.dataArray = [[], []];\n        for (const investmentStep of this.investmentSteps) {\n            let sumNewPayout = getSumNewPayout(investmentStep);\n\n            this.dataArray[dataToIndex.invested].push({\n                yStart: 0,\n                yEnd: -investmentStep.newInvestment,\n                date: investmentStep.date,\n                color: this.colors.invested,\n            });\n            this.dataArray[dataToIndex.payout].push({\n                yStart: sumNewPayout,\n                yEnd: 0,\n                date: investmentStep.date,\n                color: this.colors.payout,\n            });\n        }\n\n        this.rectWidth = (this.width / this.dataArray[dataToIndex.invested].length) * this.barPaddingPercentage;\n    }\n\n    _prepareText() {\n        super._prepareText();\n\n        const payoutX =\n            this.xScale(this.payoutPhaseStartDate) +\n            (this.xScale(this.dateExtent[1]) - this.xScale(this.payoutPhaseStartDate)) / 2;\n        const payoutY = this.yScale(0) + (this.yScale(this.yExtent[0]) - this.yScale(0)) / 2;\n\n        const payoutIdentifier = 'payout';\n        this.textProperties[payoutIdentifier] = {\n            text: generateLabelWithValueText(payoutIdentifier),\n            x: payoutX,\n            y: payoutY,\n            fontSize: this.standardFontSize,\n            textAnchor: 'middle',\n            fontWeight: 'normal',\n            color: this.colors[payoutIdentifier],\n        };\n\n        const investedX =\n            this.xScale(this.dateExtent[0]) +\n            (this.xScale(this.payoutPhaseStartDate) - this.xScale(this.dateExtent[0])) / 2;\n        const investedY = this.yScale(0) - (this.yScale(0) - this.yScale(this.yExtent[1])) / 2;\n\n        const investedIdentifier = 'invested';\n        this.textProperties[investedIdentifier] = {\n            text: generateLabelWithValueText(investedIdentifier),\n            x: investedX,\n            y: investedY,\n            fontSize: this.standardFontSize,\n            textAnchor: 'middle',\n            fontWeight: 'normal',\n            color: this.colors[investedIdentifier],\n        };\n    }\n\n    _updateTooltip(investmentStepIndex: number) {\n        const payoutValue = getSumNewPayout(this.investmentSteps[investmentStepIndex]);\n        const investedValue = this.investmentSteps[investmentStepIndex].newInvestment;\n        this.textProperties.payout.text = generateLabelWithValueText('payout', this.valueToDisplayText(payoutValue));\n        this.textProperties.invested.text = generateLabelWithValueText(\n            'invested',\n            this.valueToDisplayText(investedValue)\n        );\n    }\n\n    _drawContent() {\n        // Skip the last bar if it is outside the graph.\n        const needToSkipLastBar = this.dataArray[0][this.dataArray[0].length - 1].date === this.dateExtent[1];\n        for (let barArray of this.dataArray) {\n            if (needToSkipLastBar) {\n                barArray = barArray.slice(0, -1);\n            }\n\n            this.svg\n                .append('g')\n                .attr('class', 'bars')\n                .selectAll(`rect.none`)\n                .data(barArray)\n                .enter()\n                .append('rect')\n                .style('fill', d => d.color)\n                .attr('x', d => this.xScale(d.date))\n                .attr('width', this.rectWidth)\n                .attr('y', d => this.yScale(d.yStart))\n                .attr('height', d => this.yScale(d.yEnd) - this.yScale(d.yStart));\n        }\n    }\n}\n","import React from 'react';\nimport {\n    STARTING_CAPITAL_IDENTIFIER,\n    MONTHLY_INVESTMENT_IDENTIFIER,\n    YEARLY_INVESTMENT_INCREASE_IDENTIFIER,\n    SAVING_PHASE_IDENTIFIER,\n    AGE_IDENTIFIER,\n    TAX_FREE_AMOUNT_IDENTIFIER,\n    MONTHLY_PAYOUT_IDENTIFIER,\n    YEARLY_PAYOUT_INCREASE_IDENTIFIER,\n    LIFE_EXPECTATION_IDENTIFIER,\n    DETAILED_GRAPH_DROPDOWN_IDENTIFIER,\n    Y_AXIS_LOCK_IDENTIFIER,\n    generateCostConfig,\n} from './App';\nimport { InvestmentModel, ETFRatio } from '../model/InvestmentModel';\nimport { AreaChartD3 } from '../renderer/AreaChartD3';\nimport { CashflowBarChart } from '../renderer/CashflowBarChartD3';\nimport { D3ChartStrategy } from '../renderer/D3ChartStrategy';\nimport { IAppState } from './App';\n\nexport interface IConfigOptions {\n    costConfig: ICostConfiguration;\n    taxFreeAmount: number;\n}\n\nexport interface ICostConfiguration {\n    percentageCosts: number;\n    fixedCosts: number;\n}\n\nexport class Visualization extends React.Component<IAppState, {}> {\n    private firstSVGRef = React.createRef<HTMLDivElement>();\n    private secondSVGRef = React.createRef<HTMLDivElement>();\n\n    private areaChart: AreaChartD3 | undefined = undefined;\n    private barChart: CashflowBarChart | undefined = undefined;\n\n    private investmentModel: InvestmentModel | undefined = undefined;\n\n    private _getETFIdentifierToRatio() {\n        const etfIdentifierToRatio: ETFRatio = {};\n        const etfProperties = this.props.etfDropdownSelection.elements;\n        for (const etfIdentifier in etfProperties) {\n            if (etfProperties[etfIdentifier].selected) {\n                etfIdentifierToRatio[etfProperties[etfIdentifier].symbol] = etfProperties[etfIdentifier].percentage;\n            }\n        }\n        return etfIdentifierToRatio;\n    }\n\n    private _getInvestmentModel(etfIdentifierToRatio: ETFRatio) {\n        const configOptions: IConfigOptions = {\n            taxFreeAmount: this.props[TAX_FREE_AMOUNT_IDENTIFIER].value,\n            costConfig: generateCostConfig(this.props),\n        };\n\n        return new InvestmentModel(\n            this.props[STARTING_CAPITAL_IDENTIFIER].value,\n            this.props[MONTHLY_INVESTMENT_IDENTIFIER].value,\n            this.props[YEARLY_INVESTMENT_INCREASE_IDENTIFIER].value,\n            this.props[MONTHLY_PAYOUT_IDENTIFIER].value,\n            this.props[YEARLY_PAYOUT_INCREASE_IDENTIFIER].value,\n            this.props[SAVING_PHASE_IDENTIFIER].value,\n            etfIdentifierToRatio,\n            configOptions,\n            this.props[AGE_IDENTIFIER].value,\n            this.props[LIFE_EXPECTATION_IDENTIFIER].value\n        );\n    }\n\n    private _getTooltipDate() {\n        if (this.areaChart != null) {\n            return this.areaChart.tooltipDate;\n        } else if (this.barChart != null) {\n            return this.barChart.tooltipDate;\n        } else {\n            return undefined;\n        }\n    }\n\n    private _getYAxisExtent(diagram: D3ChartStrategy | undefined) {\n        return diagram != null && this.props[Y_AXIS_LOCK_IDENTIFIER].value ? diagram.yExtent : undefined;\n    }\n\n    private _drawVisualization() {\n        D3ChartStrategy.reset();\n        try {\n            if (\n                this.props.isValid != null &&\n                this.props.isValid &&\n                this.firstSVGRef.current != null &&\n                this.secondSVGRef.current != null\n            ) {\n                const etfIdentifierToRatio = this._getETFIdentifierToRatio();\n                this.investmentModel = this._getInvestmentModel(etfIdentifierToRatio);\n                const firstPayoutPhaseDate = this.investmentModel.getPayoutPhaseBeginDate();\n                const correctLevelOfDetailInvestmentSteps = this.investmentModel.getInvestmentSteps(\n                    this.props[DETAILED_GRAPH_DROPDOWN_IDENTIFIER].value\n                );\n                let tooltipDate = this._getTooltipDate();\n                this.areaChart = new AreaChartD3(\n                    correctLevelOfDetailInvestmentSteps,\n                    this.firstSVGRef.current,\n                    firstPayoutPhaseDate,\n                    tooltipDate,\n                    this._getYAxisExtent(this.areaChart),\n                    etfIdentifierToRatio\n                );\n                this.areaChart.render();\n                this.barChart = new CashflowBarChart(\n                    correctLevelOfDetailInvestmentSteps,\n                    this.secondSVGRef.current,\n                    firstPayoutPhaseDate,\n                    tooltipDate,\n                    this._getYAxisExtent(this.barChart)\n                );\n                this.barChart.render();\n            }\n        } catch (e) {\n            console.error(e);\n        }\n    }\n\n    async componentDidMount() {\n        this._drawVisualization();\n    }\n\n    componentDidUpdate() {\n        this._drawVisualization();\n    }\n    render() {\n        return (\n            <React.Fragment>\n                <div ref={this.secondSVGRef}></div>\n                <div ref={this.firstSVGRef}></div>\n            </React.Fragment>\n        );\n    }\n}\n","interface IErrorMessage {\n    identifier: string;\n    isValid: boolean;\n    errorMessage: string;\n}\n\nexport function ErrorMessage(props: IErrorMessage) {\n    return (\n        <div\n            id={props.identifier + 'Feedback'}\n            className=\"invalid-tooltip\"\n            style={{ visibility: props.isValid ? 'hidden' : 'visible' }}>\n            {props.errorMessage}\n        </div>\n    );\n}\n","import { ChangeEvent } from 'react';\nimport { ErrorMessage } from './ErrorMessageComponent';\n\nexport interface ITextInputState {\n    value: number;\n    label: string;\n    errorMessage: string;\n    textAppending: string;\n    isValid: boolean;\n    disabled: boolean;\n    identifier: NumberInputStateIdentifier;\n    transformFunction: (e: ChangeEvent<HTMLInputElement>) => number;\n    onValueChange: (changedValue: number, changedStateIdentifier: NumberInputStateIdentifier) => void;\n}\n\nexport interface IStringTextInputState {\n    value: string;\n    label: string;\n    errorMessage: string;\n    textAppending: string;\n    isValid: boolean;\n    disabled: boolean;\n    identifier: TextInputStateIdentifier;\n    transformFunction: (e: ChangeEvent<HTMLInputElement>) => string;\n    onValueChange: (changedValue: string, changedStateIdentifier: TextInputStateIdentifier) => void;\n}\n\nexport interface IETFPercentageInputState {\n    value: number;\n    label: string;\n    errorMessage: string;\n    textAppending: string;\n    isValid: boolean;\n    disabled: boolean;\n    identifier: string;\n    transformFunction: (e: ChangeEvent<HTMLInputElement>) => number;\n    onValueChange: (changedValue: number, changedStateIdentifier: string) => void;\n}\n\nexport type NumberInputStateIdentifier =\n    | 'startingCapital'\n    | 'monthlyInvestment'\n    | 'monthlyPayout'\n    | 'transactionCosts'\n    | 'savingPhase'\n    | 'age'\n    | 'lifeExpectation'\n    | 'taxFreeAmount'\n    | 'yearlyInvestmentIncrease'\n    | 'yearlyPayoutIncrease';\n\nexport type TextInputStateIdentifier = NumberInputStateIdentifier | 'apiKey';\n\nexport function TextInputElement(props: ITextInputState) {\n    return (\n        <div className=\"position-relative\">\n            <label className=\"form-label\" htmlFor={props.identifier}>\n                {props.label}\n            </label>\n            <input\n                className={'form-control ' + (props.isValid ? '' : 'is-invalid')}\n                id={props.identifier}\n                type=\"text\"\n                value={props.value.toString() + (props.textAppending !== '' ? ' ' + props.textAppending : '')}\n                onChange={e => props.onValueChange(props.transformFunction(e), props.identifier)}\n                disabled={props.disabled}\n            />\n            <ErrorMessage {...props} />\n        </div>\n    );\n}\n\nexport function StringTextInputElement(props: IStringTextInputState) {\n    return (\n        <div className=\"position-relative\">\n            <label className=\"form-label\" htmlFor={props.identifier}>\n                {props.label}\n            </label>\n            <input\n                className={'form-control ' + (props.isValid ? '' : 'is-invalid')}\n                id={props.identifier}\n                type=\"text\"\n                value={props.value.toString() + (props.textAppending !== '' ? ' ' + props.textAppending : '')}\n                onChange={e => props.onValueChange(props.transformFunction(e), props.identifier)}\n                disabled={props.disabled}\n            />\n            <ErrorMessage {...props} />\n        </div>\n    );\n}\n\nexport function ETFPercentageInputElement(props: IETFPercentageInputState) {\n    return (\n        <div className=\"position-relative\">\n            <label className=\"form-label\" htmlFor={props.identifier}>\n                {props.label}\n            </label>\n            <input\n                className={'form-control ' + (props.isValid ? '' : 'is-invalid')}\n                id={props.identifier}\n                type=\"text\"\n                value={props.value.toString() + (props.textAppending !== '' ? ' ' + props.textAppending : '')}\n                onChange={e => props.onValueChange(props.transformFunction(e), props.identifier)}\n                disabled={props.disabled}\n            />\n            <ErrorMessage {...props} />\n        </div>\n    );\n}\n","export interface ICheckboxState {\n    value: boolean;\n    label: string;\n    identifier: ICheckBoxStateIdentifier;\n    onValueChange: (changedStateIdentifier: ICheckBoxStateIdentifier) => void;\n}\n\nexport type ICheckBoxStateIdentifier = 'transactionCostsType' | 'etfAutomaticPercentage' | 'yAxisLock';\n\nexport function CheckboxInputElement(props: ICheckboxState) {\n    return (\n        <div className=\"checkbox-element\">\n            <input\n                className=\"form-check-input\"\n                id={props.identifier}\n                type=\"checkbox\"\n                value={props.value.toString()}\n                onChange={() => props.onValueChange(props.identifier)}\n            />\n            <label className=\"form-check-label\" htmlFor={props.identifier}>\n                {props.label}\n            </label>\n        </div>\n    );\n}\n","import { ChangeEvent } from 'react';\nimport { StringTextInputElement, TextInputStateIdentifier } from './TextInputElement';\n\nexport interface IAPIKey {\n    displayOverlay: boolean;\n    value: string;\n    label: string;\n    errorMessage: string;\n    isValid: boolean;\n    textAppending: string;\n    identifier: TextInputStateIdentifier;\n    transformFunction: (e: ChangeEvent<HTMLInputElement>) => string;\n    onValueChange: (changedValue: string, changedStateIdentifier: TextInputStateIdentifier) => void;\n    handleAPIKeyConfirm: () => void;\n    error: boolean;\n}\n\nexport function Overlay(props: IAPIKey) {\n    return (\n        <div className=\"row\">\n            <div className=\"col-12 p-0\">\n                <div className=\"d-grid gap-0\">\n                    <div\n                        className=\"overlay min-vh-100 text-center m-0 d-flex flex-column justify-content-center\"\n                        style={{ visibility: props.displayOverlay ? 'visible' : 'hidden' }}>\n                        <h1 className=\"p-5\">\n                            Enter your personal{' '}\n                            <a\n                                href=\"https://www.alphavantage.co/support/#api-key\"\n                                target=\"_blank\"\n                                rel=\"noopener noreferrer\">\n                                {' '}\n                                Alphavantage API Key\n                            </a>{' '}\n                        </h1>\n                        <StringTextInputElement {...props} disabled={!props.displayOverlay} />\n                        <button type=\"button\" className=\"btn btn-primary my-5\" onClick={props.handleAPIKeyConfirm}>\n                            Confirm\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}\n","interface ISidebarSectionHeading {\n    title: string;\n    initiallyCollapsed: boolean;\n    children: JSX.Element[];\n}\n\ninterface IErrorMessage {\n    identifier: string;\n    isValid: boolean;\n    errorMessage: string;\n}\n\nexport function SidebarSectionHeading(props: ISidebarSectionHeading) {\n    const titleID = props.title.replace(/\\W/g, '_');\n    return (\n        <div className=\"position-relative my-4 mb-1\">\n            <div className=\"d-flex my-3\">\n                <button\n                    className={'btn btn-secondary hamburgerButton mt-0 mb-0 pt-0 pb-0 me-4'}\n                    type=\"button\"\n                    data-bs-toggle=\"collapse\"\n                    data-bs-target={`#${titleID}`}\n                    aria-expanded={props.initiallyCollapsed ? 'false' : 'true'}\n                    aria-controls={titleID}>\n                    ☰\n                </button>\n                <h6 className=\"sidebar-heading m-0 my-auto\">{props.title}</h6>\n            </div>\n            <div className={'collapse ' + (props.initiallyCollapsed ? '' : 'show')} id={titleID}>\n                {props.children}\n            </div>\n        </div>\n    );\n}\n\nexport function ErrorMessage(props: IErrorMessage) {\n    return (\n        <div\n            id={props.identifier + 'Feedback'}\n            className=\"invalid-tooltip\"\n            style={{ visibility: props.isValid ? 'hidden' : 'visible' }}>\n            {props.errorMessage}\n        </div>\n    );\n}\n","import { ICostConfiguration } from './Visualization';\n\nexport interface BrokerProperties {\n    identifier: string;\n    label: string;\n    fixedCosts: number;\n    percentageCosts: number;\n}\n\nexport interface IBrokerDropDown {\n    label: string;\n    isValid: boolean;\n    handleChange: (brokerProperties: BrokerProperties) => void;\n    elements: BrokerProperties[];\n}\n\ntype BrokerDropDownProps = ICostConfiguration & IBrokerDropDown;\n\nfunction costsOfElementMatchUIValues(props: BrokerDropDownProps, element: BrokerProperties) {\n    return element.fixedCosts === props.fixedCosts && element.percentageCosts === props.percentageCosts;\n}\n\nexport function BrokerDropDown(props: BrokerDropDownProps) {\n    return (\n        <div className=\"dropdown\">\n            <button\n                className=\"btn btn-secondary dropdown-toggle\"\n                type=\"button\"\n                id=\"BrokerDropDown\"\n                data-bs-toggle=\"dropdown\"\n                aria-expanded=\"false\">\n                {props.label}\n            </button>\n            <ul className=\"dropdown-menu\" aria-labelledby=\"BrokerDropDown\">\n                {props.elements.map(element => (\n                    <li key={element.identifier}>\n                        <button\n                            className={\n                                costsOfElementMatchUIValues(props, element) ? 'dropdown-item active' : 'dropdown-item'\n                            }\n                            type=\"button\"\n                            onClick={e => props.handleChange(element)}>\n                            {element.label}\n                        </button>\n                    </li>\n                ))}\n            </ul>\n        </div>\n    );\n}\n","export interface IGraphDetailLevel {\n    identifier: string;\n    value: number;\n    label: string;\n}\n\nexport interface IGraphDetailDropDown {\n    value: number;\n    label: string;\n    isValid: boolean;\n    handleChange: (detailProperties: IGraphDetailLevel) => void;\n    elements: IGraphDetailLevel[];\n}\n\nexport function GraphDetailDropDown(props: IGraphDetailDropDown) {\n    return (\n        <div className=\"dropdown\">\n            <button\n                className=\"btn btn-secondary dropdown-toggle\"\n                type=\"button\"\n                id=\"GraphDetailDropDown\"\n                data-bs-toggle=\"dropdown\"\n                aria-expanded=\"false\">\n                {props.label}\n            </button>\n            <ul className=\"dropdown-menu\" aria-labelledby=\"GraphDetailDropDown\">\n                {props.elements.map(element => (\n                    <li key={element.identifier}>\n                        <button\n                            className={props.value === element.value ? 'dropdown-item active' : 'dropdown-item'}\n                            type=\"button\"\n                            onClick={e => props.handleChange(element)}>\n                            {element.label}\n                        </button>\n                    </li>\n                ))}\n            </ul>\n        </div>\n    );\n}\n","import { ChangeEvent, MouseEvent } from 'react';\n\nimport { ETFPercentageInputElement } from './TextInputElement';\nimport { ErrorMessage } from './ErrorMessageComponent';\n\nimport { ETFIdentifier } from '../model/InvestmentModel';\n\nexport interface IETFProperties {\n    identifier: string;\n    symbol: ETFIdentifier;\n    label: string;\n    percentage: number;\n    selected: boolean;\n}\n\ninterface IETFIndex {\n    [etfIdentifier: string]: IETFProperties;\n}\n\nexport interface IETFSelection {\n    label: string;\n    isValid: boolean;\n    identifier: string;\n    errorMessage: string;\n    handleSelectionChange: (etfProperties: IETFProperties) => void;\n    handleShareChange: (changedValue: number, changedStateIdentifier: string) => void;\n    elements: IETFIndex;\n}\n\ntype ETFSelectionDropDownProps = IETFSelection & { autoPercentage: boolean };\n\nfunction percentageTransformFunction(e: ChangeEvent<HTMLInputElement>) {\n    const floatVal = parseFloat(e.target.value) / 100;\n    return isNaN(floatVal) ? 0 : floatVal;\n}\n\nexport function ETFSelectionDropDown(props: ETFSelectionDropDownProps) {\n    return (\n        <div className=\"dropdown position-relative\">\n            <button\n                className=\"btn btn-secondary dropdown-toggle is-invalid\"\n                type=\"button\"\n                id=\"ETFSelectionDropDown\"\n                data-bs-toggle=\"dropdown\"\n                aria-expanded=\"false\">\n                {props.label}\n            </button>\n            <ErrorMessage {...props} />\n            <ul className=\"dropdown-menu\" aria-labelledby=\"ETFSelectionDropDown\">\n                {Object.keys(props.elements).map(elementIdentifier => (\n                    <li key={elementIdentifier}>\n                        <button\n                            className={\n                                props.elements[elementIdentifier].selected ? 'dropdown-item active' : 'dropdown-item'\n                            }\n                            type=\"button\"\n                            onClick={(e: MouseEvent<HTMLButtonElement>) => {\n                                //if (e.target.type !== 'text') {\n                                props.handleSelectionChange(props.elements[elementIdentifier]);\n                                //}\n                            }}>\n                            <ETFPercentageInputElement\n                                {...props.elements[elementIdentifier]}\n                                value={Math.round(props.elements[elementIdentifier].percentage * 100)}\n                                textAppending=\"%\"\n                                onValueChange={props.handleShareChange}\n                                transformFunction={percentageTransformFunction}\n                                disabled={props.autoPercentage}\n                                isValid={true}\n                                errorMessage=\"\"\n                            />\n                        </button>\n                    </li>\n                ))}\n            </ul>\n        </div>\n    );\n}\n","import React, { ChangeEvent } from 'react';\nimport { Visualization, ICostConfiguration } from './Visualization';\nimport {\n    TextInputElement,\n    ITextInputState,\n    TextInputStateIdentifier,\n    NumberInputStateIdentifier,\n} from './TextInputElement';\nimport { CheckboxInputElement, ICheckboxState, ICheckBoxStateIdentifier } from './CheckboxInputElement';\nimport { Overlay, IAPIKey } from './APIKeyOverlay';\nimport { SidebarSectionHeading } from './SidebarSectionHeadingComponent';\nimport { BrokerDropDown, BrokerProperties, IBrokerDropDown } from './BrokerDropDown';\nimport { GraphDetailDropDown, IGraphDetailDropDown, IGraphDetailLevel } from './GraphDetailDropDown';\nimport { ETFSelectionDropDown, IETFProperties, IETFSelection } from './ETFSelectionDropDown';\nimport { ForecastModelSingleton } from '../model/ForecastModel';\nimport { ETFIdentifier } from '../model/InvestmentModel';\nimport { percentageToFloatValue } from '../helpers/utils';\n\nexport const STARTING_CAPITAL_IDENTIFIER = 'startingCapital';\nexport const MONTHLY_INVESTMENT_IDENTIFIER = 'monthlyInvestment';\nexport const YEARLY_INVESTMENT_INCREASE_IDENTIFIER = 'yearlyInvestmentIncrease';\nexport const TRANSACTION_COSTS_IDENTIFIER = 'transactionCosts';\nexport const TRANSACTION_COSTS_TYPE_IDENTIFIER = 'transactionCostsType';\nexport const SAVING_PHASE_IDENTIFIER = 'savingPhase';\nexport const AGE_IDENTIFIER = 'age';\nexport const TAX_FREE_AMOUNT_IDENTIFIER = 'taxFreeAmount';\nexport const MONTHLY_PAYOUT_IDENTIFIER = 'monthlyPayout';\nexport const YEARLY_PAYOUT_INCREASE_IDENTIFIER = 'yearlyPayoutIncrease';\nexport const LIFE_EXPECTATION_IDENTIFIER = 'lifeExpectation';\nexport const DETAILED_GRAPH_DROPDOWN_IDENTIFIER = 'detailedGraph';\nexport const ETF_DROPDOWN_SELECTION_IDENTIFIER = 'etfDropdownSelection';\nexport const API_KEY_IDENTIFIER = 'apiKey';\nexport const Y_AXIS_LOCK_IDENTIFIER = 'yAxisLock';\n\nconst BROKER_DROPDOWN_IDENTIFIER = 'brokerDropdown';\nconst ETF_AUTOMATIC_PERCENTAGE_IDENTIFIER = 'etfAutomaticPercentage';\n\nexport interface IAppState {\n    isValid: boolean;\n    startingCapital: ITextInputState;\n    monthlyInvestment: ITextInputState;\n    yearlyInvestmentIncrease: ITextInputState;\n    monthlyPayout: ITextInputState;\n    yearlyPayoutIncrease: ITextInputState;\n    transactionCosts: ITextInputState;\n    savingPhase: ITextInputState;\n    age: ITextInputState;\n    lifeExpectation: ITextInputState;\n    taxFreeAmount: ITextInputState;\n\n    apiKey: IAPIKey;\n\n    transactionCostsType: ICheckboxState;\n    etfAutomaticPercentage: ICheckboxState;\n    yAxisLock: ICheckboxState;\n\n    detailedGraph: IGraphDetailDropDown;\n    brokerDropdown: IBrokerDropDown;\n    etfDropdownSelection: IETFSelection;\n}\n\ntype ETFIdentifierToString = { [key in ETFIdentifier]: string };\n\nexport const ETF_SYMBOL_TO_NAME: ETFIdentifierToString = {\n    'SP5C.PAR': 'S & P 500',\n    ESGE: 'iShare',\n    SUSA: 'MSCI USA ESG',\n};\n\nfunction transformInputToInt(e: ChangeEvent<HTMLInputElement>) {\n    const valueWithoutTextAppending = e.target.value.split(' ')[0];\n    const intVal = parseInt(valueWithoutTextAppending);\n    return isNaN(intVal) ? 0 : intVal;\n}\n\nfunction transformInputToFloat(e: ChangeEvent<HTMLInputElement>) {\n    const floatVal = parseFloat(e.target.value);\n    return isNaN(floatVal) ? 0 : floatVal;\n}\n\nfunction isPercentage(val: number) {\n    return !Number.isNaN(val) && val >= 0 && val <= 100;\n}\n\nfunction isPositiveInt(val: number) {\n    return !Number.isNaN(val) && Number.isInteger(val) && val >= 0;\n}\n\nexport function generateCostConfig(state: IAppState): ICostConfiguration {\n    if (state[TRANSACTION_COSTS_TYPE_IDENTIFIER].value) {\n        return { percentageCosts: 0.0, fixedCosts: state[TRANSACTION_COSTS_IDENTIFIER].value };\n    } else {\n        return { percentageCosts: percentageToFloatValue(state[TRANSACTION_COSTS_IDENTIFIER].value), fixedCosts: 0.0 };\n    }\n}\n\nfunction recalculateETFPercentages(state: IAppState) {\n    let numberOfSelectedETFs = 0;\n    for (const etfIdentifier in state[ETF_DROPDOWN_SELECTION_IDENTIFIER].elements) {\n        if (state[ETF_DROPDOWN_SELECTION_IDENTIFIER].elements[etfIdentifier].selected) {\n            numberOfSelectedETFs++;\n        }\n    }\n    const newPercentage = 1.0 / Math.max(1, numberOfSelectedETFs);\n    for (const etfIdentifier in state[ETF_DROPDOWN_SELECTION_IDENTIFIER].elements) {\n        state[ETF_DROPDOWN_SELECTION_IDENTIFIER].elements[etfIdentifier].percentage = newPercentage;\n    }\n    return state;\n}\n\nexport class App extends React.Component<{}, IAppState> {\n    constructor(props: {}) {\n        super(props);\n\n        this.handleTextChange = this.handleTextChange.bind(this);\n        this.handleCheckBoxChange = this.handleCheckBoxChange.bind(this);\n        this.handleBrokerChange = this.handleBrokerChange.bind(this);\n        this.handleGraphDetailChange = this.handleGraphDetailChange.bind(this);\n        this.handleETFSelectionChange = this.handleETFSelectionChange.bind(this);\n        this.handleETFShareChange = this.handleETFShareChange.bind(this);\n        this.handleAPIKeyConfirm = this.handleAPIKeyConfirm.bind(this);\n\n        this.state = getInitialInputFormState(this);\n    }\n\n    handleTextChange(changedValue: number | string, changedStateIdentifier: TextInputStateIdentifier) {\n        const state = { ...this.state };\n        state[changedStateIdentifier].value = changedValue;\n        this._validateAndSetState(state);\n    }\n\n    handleCheckBoxChange(changedStateIdentifier: ICheckBoxStateIdentifier) {\n        const state = { ...this.state };\n        state[changedStateIdentifier].value = !state[changedStateIdentifier].value;\n        if (changedStateIdentifier === TRANSACTION_COSTS_TYPE_IDENTIFIER) {\n            state[TRANSACTION_COSTS_IDENTIFIER].value = state[changedStateIdentifier].value ? 5 : 0.015;\n            state[TRANSACTION_COSTS_IDENTIFIER].textAppending = state[changedStateIdentifier].value ? '€' : '%';\n            state[TRANSACTION_COSTS_IDENTIFIER].transformFunction = state[changedStateIdentifier].value\n                ? transformInputToInt\n                : transformInputToFloat;\n        } else if (\n            changedStateIdentifier === ETF_AUTOMATIC_PERCENTAGE_IDENTIFIER &&\n            state[changedStateIdentifier].value\n        ) {\n            recalculateETFPercentages(state);\n        }\n        this._validateAndSetState(state);\n    }\n\n    handleBrokerChange(brokerProperties: BrokerProperties) {\n        const state = { ...this.state };\n        state[TRANSACTION_COSTS_IDENTIFIER].value =\n            brokerProperties.percentageCosts > 0 ? brokerProperties.percentageCosts : brokerProperties.fixedCosts;\n        state[TRANSACTION_COSTS_TYPE_IDENTIFIER].value = brokerProperties.percentageCosts > 0 ? false : true;\n        this._validateAndSetState(state);\n    }\n\n    handleGraphDetailChange(detailProperties: IGraphDetailLevel) {\n        const state = { ...this.state };\n        state[DETAILED_GRAPH_DROPDOWN_IDENTIFIER].value = detailProperties.value;\n        this._validateAndSetState(state);\n    }\n\n    handleETFSelectionChange(etfProperties: IETFProperties) {\n        const state = { ...this.state };\n        state[ETF_DROPDOWN_SELECTION_IDENTIFIER].elements[etfProperties.identifier].selected = !state[\n            ETF_DROPDOWN_SELECTION_IDENTIFIER\n        ].elements[etfProperties.identifier].selected;\n        if (state[ETF_AUTOMATIC_PERCENTAGE_IDENTIFIER].value) {\n            recalculateETFPercentages(state);\n        }\n        this._validateAndSetState(state);\n    }\n\n    handleETFShareChange(changedValue: number, changedETFIdentifier: string) {\n        const state = { ...this.state };\n        state[ETF_DROPDOWN_SELECTION_IDENTIFIER].elements[changedETFIdentifier].percentage = changedValue;\n        this._validateAndSetState(state);\n    }\n\n    async handleAPIKeyConfirm() {\n        const apiKey = this.state[API_KEY_IDENTIFIER].value;\n        const apiValues = { ...this.state[API_KEY_IDENTIFIER] };\n        try {\n            await ForecastModelSingleton.loadHistoricData(\n                apiKey,\n                this.state[ETF_DROPDOWN_SELECTION_IDENTIFIER].elements\n            );\n            apiValues.error = false;\n            apiValues.displayOverlay = false;\n        } catch (e) {\n            apiValues.error = true;\n        }\n        this.setState({ [API_KEY_IDENTIFIER]: apiValues });\n        this.forceUpdate();\n    }\n\n    private _validateAndSetState(state: IAppState) {\n        const positiveIntIdentifiers: NumberInputStateIdentifier[] = [\n            MONTHLY_INVESTMENT_IDENTIFIER,\n            MONTHLY_PAYOUT_IDENTIFIER,\n            STARTING_CAPITAL_IDENTIFIER,\n            AGE_IDENTIFIER,\n            LIFE_EXPECTATION_IDENTIFIER,\n            SAVING_PHASE_IDENTIFIER,\n            TAX_FREE_AMOUNT_IDENTIFIER,\n        ];\n\n        const percentageIdentifiers: NumberInputStateIdentifier[] = [\n            YEARLY_INVESTMENT_INCREASE_IDENTIFIER,\n            YEARLY_PAYOUT_INCREASE_IDENTIFIER,\n        ];\n\n        state.isValid = true;\n\n        for (const identifier of positiveIntIdentifiers) {\n            state[identifier].isValid = isPositiveInt(state[identifier].value);\n            state[identifier].errorMessage = 'Please enter a positive number.';\n            state.isValid = state[identifier].isValid && state.isValid;\n        }\n\n        for (const identifier of percentageIdentifiers) {\n            state[identifier].isValid = isPercentage(state[identifier].value);\n            state[identifier].errorMessage = 'Please enter a valid percentage between 0 and 100 %.';\n            state.isValid = state[identifier].isValid && state.isValid;\n        }\n\n        // Check the year values.\n        const leftoverYears = state[LIFE_EXPECTATION_IDENTIFIER].value - state[AGE_IDENTIFIER].value;\n        if (state[AGE_IDENTIFIER].value >= state[LIFE_EXPECTATION_IDENTIFIER].value) {\n            state[AGE_IDENTIFIER].errorMessage = 'You cannot be older than the life expectation';\n            state[AGE_IDENTIFIER].isValid = false;\n            state.isValid = false;\n        } else if (leftoverYears <= state[SAVING_PHASE_IDENTIFIER].value) {\n            state[SAVING_PHASE_IDENTIFIER].errorMessage =\n                'You cannot have a saving phase that lasts longer than your life.';\n            state[SAVING_PHASE_IDENTIFIER].isValid = false;\n            state.isValid = false;\n        }\n\n        // Check Cost values.\n        if (state[TRANSACTION_COSTS_TYPE_IDENTIFIER].value) {\n            state[TRANSACTION_COSTS_IDENTIFIER].isValid = isPositiveInt(state[TRANSACTION_COSTS_IDENTIFIER].value);\n            state[TRANSACTION_COSTS_IDENTIFIER].errorMessage = 'Please enter a positive number.';\n        } else {\n            state[TRANSACTION_COSTS_IDENTIFIER].isValid = isPercentage(state[TRANSACTION_COSTS_IDENTIFIER].value);\n            state[TRANSACTION_COSTS_IDENTIFIER].errorMessage = 'Please enter a valid percentage.';\n        }\n        state.isValid = state[TRANSACTION_COSTS_IDENTIFIER].isValid && state.isValid;\n\n        // Check the etf percentages.\n        let sumOfPercentages = 0;\n        let foundOneSelectedEtf = false;\n        for (const etfIdentifier in state[ETF_DROPDOWN_SELECTION_IDENTIFIER].elements) {\n            if (state[ETF_DROPDOWN_SELECTION_IDENTIFIER].elements[etfIdentifier].selected) {\n                sumOfPercentages += state[ETF_DROPDOWN_SELECTION_IDENTIFIER].elements[etfIdentifier].percentage;\n                foundOneSelectedEtf = true;\n            }\n        }\n        if (!foundOneSelectedEtf) {\n            state[ETF_DROPDOWN_SELECTION_IDENTIFIER].isValid = false;\n            state[ETF_DROPDOWN_SELECTION_IDENTIFIER].errorMessage = 'Please select at least one ETF.';\n            state.isValid = false;\n        } else if (sumOfPercentages !== 1.0) {\n            state[ETF_DROPDOWN_SELECTION_IDENTIFIER].isValid = false;\n            state[ETF_DROPDOWN_SELECTION_IDENTIFIER].errorMessage = 'The sum of all selected ETF needs to be 100%';\n            state.isValid = false;\n        } else {\n            state[ETF_DROPDOWN_SELECTION_IDENTIFIER].isValid = true;\n        }\n\n        this.setState(state);\n    }\n\n    render() {\n        const costConfig = generateCostConfig(this.state);\n        return (\n            <div className=\"container-fluid\">\n                <Overlay {...this.state[API_KEY_IDENTIFIER]} />\n                <div className=\"row\">\n                    <nav id=\"sidebarMenu\" className=\"col-md-3 col-lg-2 bg-light sidebar\">\n                        <form className=\"position-sticky needs-validation\" noValidate>\n                            {/* Money Options */}\n                            <SidebarSectionHeading title=\"Money Options\" initiallyCollapsed={false}>\n                                <TextInputElement {...this.state[STARTING_CAPITAL_IDENTIFIER]} />\n                                <TextInputElement {...this.state[MONTHLY_INVESTMENT_IDENTIFIER]} />\n                                <TextInputElement {...this.state[YEARLY_INVESTMENT_INCREASE_IDENTIFIER]} />\n                                <TextInputElement {...this.state[MONTHLY_PAYOUT_IDENTIFIER]} />\n                                <TextInputElement {...this.state[YEARLY_PAYOUT_INCREASE_IDENTIFIER]} />\n                                <TextInputElement {...this.state[TAX_FREE_AMOUNT_IDENTIFIER]} />\n                            </SidebarSectionHeading>\n                            {/* Time Options */}\n                            <SidebarSectionHeading title=\"Time Options\" initiallyCollapsed={false}>\n                                <TextInputElement {...this.state[AGE_IDENTIFIER]} />\n                                <TextInputElement {...this.state[LIFE_EXPECTATION_IDENTIFIER]} />\n                                <TextInputElement {...this.state[SAVING_PHASE_IDENTIFIER]} />\n                            </SidebarSectionHeading>\n                            {/* Cost Options */}\n                            <SidebarSectionHeading title=\"Cost Options\" initiallyCollapsed={true}>\n                                <TextInputElement\n                                    key={TRANSACTION_COSTS_IDENTIFIER}\n                                    {...this.state[TRANSACTION_COSTS_IDENTIFIER]}\n                                />\n                                <CheckboxInputElement {...this.state[TRANSACTION_COSTS_TYPE_IDENTIFIER]} />\n                                <BrokerDropDown {...costConfig} {...this.state[BROKER_DROPDOWN_IDENTIFIER]} />\n                            </SidebarSectionHeading>\n                            {/* Visualization Options */}\n                            <SidebarSectionHeading title=\"Visualization Options\" initiallyCollapsed={true}>\n                                <GraphDetailDropDown {...this.state[DETAILED_GRAPH_DROPDOWN_IDENTIFIER]} />\n                                <CheckboxInputElement {...this.state[Y_AXIS_LOCK_IDENTIFIER]} />\n                                <CheckboxInputElement {...this.state[ETF_AUTOMATIC_PERCENTAGE_IDENTIFIER]} />\n                                <ETFSelectionDropDown\n                                    autoPercentage={this.state[ETF_AUTOMATIC_PERCENTAGE_IDENTIFIER].value}\n                                    {...this.state[ETF_DROPDOWN_SELECTION_IDENTIFIER]}\n                                />\n                            </SidebarSectionHeading>\n                        </form>\n                    </nav>\n                    <main className=\"col-md-9 col-lg-10 ms-sm-auto\">\n                        <h1>Etf Pension Plan Visualization</h1>\n                        <Visualization {...this.state} />\n                    </main>\n                </div>\n            </div>\n        );\n    }\n}\n\nfunction getInitialInputFormState(caller: App): IAppState {\n    return {\n        isValid: true,\n        // simple ui elements.\n        [STARTING_CAPITAL_IDENTIFIER]: {\n            value: 1000,\n            label: 'Starting Capital',\n            errorMessage: '',\n            textAppending: '€',\n            isValid: true,\n            identifier: STARTING_CAPITAL_IDENTIFIER,\n            transformFunction: transformInputToInt,\n            onValueChange: caller.handleTextChange,\n            disabled: false,\n        },\n        [MONTHLY_INVESTMENT_IDENTIFIER]: {\n            value: 100,\n            label: 'Monthly Investment',\n            errorMessage: 'Please enter a positive Money amount.',\n            textAppending: '€',\n            isValid: true,\n            identifier: MONTHLY_INVESTMENT_IDENTIFIER,\n            transformFunction: transformInputToInt,\n            onValueChange: caller.handleTextChange,\n            disabled: false,\n        },\n        [YEARLY_INVESTMENT_INCREASE_IDENTIFIER]: {\n            value: 0.0,\n            label: 'Monthly Investment Increase',\n            errorMessage: '',\n            textAppending: '%',\n            isValid: true,\n            identifier: YEARLY_INVESTMENT_INCREASE_IDENTIFIER,\n            transformFunction: transformInputToFloat,\n            onValueChange: caller.handleTextChange,\n            disabled: false,\n        },\n        [MONTHLY_PAYOUT_IDENTIFIER]: {\n            value: 1000,\n            label: 'Monthly Payout',\n            errorMessage: '',\n            textAppending: '€',\n            isValid: true,\n            identifier: MONTHLY_PAYOUT_IDENTIFIER,\n            transformFunction: transformInputToInt,\n            onValueChange: caller.handleTextChange,\n            disabled: false,\n        },\n        [YEARLY_PAYOUT_INCREASE_IDENTIFIER]: {\n            value: 0.0,\n            label: 'Monthly Payout Increase',\n            errorMessage: '',\n            textAppending: '%',\n            isValid: true,\n            identifier: YEARLY_PAYOUT_INCREASE_IDENTIFIER,\n            transformFunction: transformInputToFloat,\n            onValueChange: caller.handleTextChange,\n            disabled: false,\n        },\n        [TRANSACTION_COSTS_IDENTIFIER]: {\n            value: 1.5,\n            label: 'Transaction Costs',\n            errorMessage: '',\n            textAppending: '%',\n            isValid: true,\n            identifier: TRANSACTION_COSTS_IDENTIFIER,\n            transformFunction: transformInputToFloat,\n            onValueChange: caller.handleTextChange,\n            disabled: false,\n        },\n        [SAVING_PHASE_IDENTIFIER]: {\n            value: 40,\n            label: 'Saving Phase',\n            errorMessage: '',\n            textAppending: 'Y',\n            isValid: true,\n            identifier: SAVING_PHASE_IDENTIFIER,\n            transformFunction: transformInputToInt,\n            onValueChange: caller.handleTextChange,\n            disabled: false,\n        },\n        [AGE_IDENTIFIER]: {\n            value: 30,\n            label: 'Your Age',\n            textAppending: 'Y',\n            errorMessage: '',\n            isValid: true,\n            identifier: AGE_IDENTIFIER,\n            transformFunction: transformInputToInt,\n            onValueChange: caller.handleTextChange,\n            disabled: false,\n        },\n        [LIFE_EXPECTATION_IDENTIFIER]: {\n            value: 80,\n            label: 'Life Expectation',\n            errorMessage: '',\n            isValid: true,\n            textAppending: 'Y',\n            identifier: LIFE_EXPECTATION_IDENTIFIER,\n            transformFunction: transformInputToInt,\n            onValueChange: caller.handleTextChange,\n            disabled: false,\n        },\n        [TAX_FREE_AMOUNT_IDENTIFIER]: {\n            value: 801,\n            label: 'Tax Free Amount',\n            errorMessage: '',\n            isValid: true,\n            textAppending: '€',\n            identifier: TAX_FREE_AMOUNT_IDENTIFIER,\n            transformFunction: transformInputToInt,\n            onValueChange: caller.handleTextChange,\n            disabled: false,\n        },\n        [TRANSACTION_COSTS_TYPE_IDENTIFIER]: {\n            value: false,\n            label: 'Fixed Amount',\n            identifier: TRANSACTION_COSTS_TYPE_IDENTIFIER,\n            onValueChange: caller.handleCheckBoxChange,\n        },\n        [ETF_AUTOMATIC_PERCENTAGE_IDENTIFIER]: {\n            value: false,\n            label: 'Automatic ETF Ratio',\n            identifier: ETF_AUTOMATIC_PERCENTAGE_IDENTIFIER,\n            onValueChange: caller.handleCheckBoxChange,\n        },\n        [Y_AXIS_LOCK_IDENTIFIER]: {\n            value: false,\n            label: 'Lock Y Axis Extent',\n            identifier: Y_AXIS_LOCK_IDENTIFIER,\n            onValueChange: caller.handleCheckBoxChange,\n        },\n        [API_KEY_IDENTIFIER]: {\n            displayOverlay: true,\n            error: false,\n            value: '',\n            label: '',\n            errorMessage: '',\n            isValid: true,\n            textAppending: '',\n            identifier: API_KEY_IDENTIFIER,\n            transformFunction: (e: ChangeEvent<HTMLInputElement>) => (e.target as HTMLInputElement).value,\n            onValueChange: caller.handleTextChange,\n            handleAPIKeyConfirm: caller.handleAPIKeyConfirm,\n        },\n        // Complex UI elements.\n        [DETAILED_GRAPH_DROPDOWN_IDENTIFIER]: {\n            value: 1,\n            label: 'Graph Detail Level',\n            isValid: true,\n            handleChange: caller.handleGraphDetailChange,\n            elements: [\n                {\n                    identifier: '12',\n                    value: 12,\n                    label: 'All Months a Year (highest detail)',\n                },\n                {\n                    identifier: '6',\n                    value: 6,\n                    label: 'Every 2nd Month (higher detail)',\n                },\n                {\n                    identifier: '3',\n                    value: 3,\n                    label: 'Every 4th Month (lower detail)',\n                },\n                {\n                    identifier: '1',\n                    value: 1,\n                    label: 'One Month a Year (lowest detail) (default)',\n                },\n            ],\n        },\n        [BROKER_DROPDOWN_IDENTIFIER]: {\n            label: 'Broker',\n            isValid: true,\n            handleChange: caller.handleBrokerChange,\n            elements: [\n                {\n                    identifier: 'comdirect',\n                    label: 'comdirect',\n                    fixedCosts: 0,\n                    percentageCosts: 0.015,\n                },\n                {\n                    identifier: 'tradeRepublic',\n                    label: 'Trade Republic',\n                    fixedCosts: 0,\n                    percentageCosts: 0.01,\n                },\n                {\n                    identifier: 'eToro',\n                    label: 'eToro',\n                    fixedCosts: 0,\n                    percentageCosts: 0.0,\n                },\n            ],\n        },\n        [ETF_DROPDOWN_SELECTION_IDENTIFIER]: {\n            label: 'ETF Selection',\n            isValid: true,\n            identifier: ETF_DROPDOWN_SELECTION_IDENTIFIER,\n            errorMessage: '',\n            handleSelectionChange: caller.handleETFSelectionChange,\n            handleShareChange: caller.handleETFShareChange,\n            elements: {\n                S_and_P_500: {\n                    identifier: 'S_and_P_500',\n                    symbol: 'SP5C.PAR',\n                    label: ETF_SYMBOL_TO_NAME['SP5C.PAR'],\n                    percentage: 1.0,\n                    selected: true,\n                },\n                iShare: {\n                    identifier: 'iShare',\n                    symbol: 'ESGE',\n                    label: ETF_SYMBOL_TO_NAME['ESGE'],\n                    percentage: 1.0,\n                    selected: false,\n                },\n                msciUSA: {\n                    identifier: 'msciUSA',\n                    symbol: 'SUSA',\n                    label: ETF_SYMBOL_TO_NAME['SUSA'],\n                    percentage: 1.0,\n                    selected: false,\n                },\n            },\n        },\n    };\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './scss/main.scss';\nimport { App } from './components/App';\nimport reportWebVitals from './reportWebVitals';\n// Needed to make the drop downs work.\nimport { Dropdown, Tooltip } from 'bootstrap'; // eslint-disable-line no-unused-vars\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}