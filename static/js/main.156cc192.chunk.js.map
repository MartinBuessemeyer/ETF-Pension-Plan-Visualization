{"version":3,"sources":["helpers/utils.ts","model/ForecastModel.ts","model/InvestmentModel.ts","renderer/D3ChartStrategy.ts","renderer/AreaChartD3.ts","renderer/CashflowBarChartD3.ts","components/Visualization.tsx","components/ErrorMessageComponent.tsx","components/TextInputElement.tsx","components/CheckboxInputElement.tsx","components/APIKeyOverlay.tsx","components/SidebarSectionHeadingComponent.tsx","components/BrokerDropDown.tsx","components/GraphDetailDropDown.tsx","components/ETFSelectionDropDown.tsx","components/App.tsx","reportWebVitals.js","index.js"],"names":["timeDiffIgnoreDivisor","numberOfMonthsOfAYear","stringToInt","value","int","Number","isNaN","isInteger","percentageStringToFloat","float","stringToFloat","isPercentage","val","isPositiveInt","isFirstMonthOfAYear","date","getMonth","loadHistoricalETFData","etfIdentifier","apiKey","a","d3","entry","undefined","timestamp","Error","Date","toString","dividend","parseFloat","course","historicalData","sort","b","valueOf","etfHistoricalToCourseForecastArray","map","dateToTimestamp","etfHistoricalToDividendForecastArray","currentYear","getFullYear","dividendForecastArray","forEach","length","push","Math","floor","getTime","generateHistoricalDataNotPresentException","roundDateToBeginningOfMonth","month","year","currentDayOfMonth","getDate","maxDayOfMonth","monthOffset","round","ForecastModelSingleton","coursePredictors","dividendPredictors","this","courseForecastArray","maxTimestampBeforeCoursePredictorRepetition","_calculateTimestampForPredictorRepetition","maxYearBeforeDividendPredictorRepetition","history","predictors","forecastArray","lastTimestampToIncludeInPrediction","abs","backCastTimeFactor","backCastTimestampConstant","filteredForecastArray","filter","regression","linear","order","precision","lastYearToIncludeInPrediction","_courseDateToPredictorTimestampAndDateTimestamp","predictorTimestamp","_createCoursePredictorIfNotPresent","predict","predictorYear","_dividendYearToPredictorYear","_createDividendPredictorIfNotPresent","max","backCastTimeConstant","backCastTimeDate","setMonth","instance","getInstance","etfProperties","configure","forecast","_loadAndCacheHistoricalETFData","symbol","console","log","firstTimestamp","lastTimestamp","corporateTaxRatio","getTotalShareValue","investmentStep","totalShares","sharePrizes","getTotalDividendShareValue","dividendTotalShares","getNewShareValue","newShares","getNextMonthDate","newDate","calculateDividend","isLastMonthOfAYear","dividendAmount","predictDividend","sharePrize","predictCourse","calculateCosts","amount","costConfiguration","costs","percentageCosts","fixedCosts","amountWithoutCosts","subtractTaxFreeGain","taxAmount","taxFreeAmount","calculateAndAddInflation","initialDate","sumTotalValues","sum","Object","keys","sumOfTotalValues","timeFactor","inflation","pow","calculateAmountIncrease","percentageIncrease","numberOfMonths","yearsSinceStart","calculateVorabpauschaleTaxes","investmentSteps","leftoverTaxFreeAmount","etfToRatio","min","summedTaxes","decemberInvestmentStep","firstInvestmentStepOfThisYear","accumulatedBasicProfit","i","profitOverAllTime","totalInvestedMoney","profitOfPreviousYears","amountToApplyTaxes","addAccumulationMonth","investment","configOptions","prevInvestmentStep","newInvestmentStep","dividendNewShares","totalCosts","newInvestedMoney","newInvestment","totalTaxes","totalPayout","newPayout","investmentOfEtfWithCosts","costConfig","investmentOfEtfWithoutCosts","etfSharePrize","dividendPayoutMoneyPerShare","newSharesByDividend","newTaxes","addPayoutMonth","sellingAmount","leftoverAlreadyPaidTaxes","payoutStats","taxes","investmentStepsIdx","amountToSell","amountAlreadySold","costsToPay","alreadyPaidCosts","payoutInvestmentStepIdxForFIFO","currentSharesLeft","alreadySoldShares","currentInvestmentStepForFIFO","leftoverAmountToSell","currentValueOfShares","amountToSellWithCosts","amountOfSharesToSell","amountToSellWithoutCosts","initialValueOfShares","amountToPayTaxes","taxesToPay","payoutAmount","amountOfDividendSharesLeft","amountOfDividendSharesSold","generateEmptyInvestmentStep","dummyData","ESGE","SUSA","emptyInvestmentStep","InvestmentModel","startCapital","monthlyInvestment","yearlyInvestmentIncrease","monthlyPayout","yearlyPayoutIncrease","savingPhaseLength","age","expectationOfLife","savingDates","payoutDates","_calculateDatesForModel","_calculateModel","lifeExpectation","fadeOutYears","yearsLeft","now","beginningDate","endSavingPhaseDate","setFullYear","endDate","calculateForecastInterval","startDate","currentDate","slice","numberOfEntriesPerYear","selectedInvestmentSteps","numberOfMonthsToMerge","adjustedInvestmentStep","cloneDeep","offset","FIVE_MILLION","ONE_MILLION","generateLabel","name","charAt","toUpperCase","replace","D3ChartStrategy","renderDivRef","payoutPhaseStartDate","svgID","tooltipDate","yExtent","width","height","marginW","marginH","lineStrokeWidth","standardFontSize","contentOpacity","labelValueIdentifier","monospaceFont","dateExtent","maxIndex","minIndex","yScale","xScale","dataArray","textProperties","svg","fadeOutGradientID","fadeOutYearsLength","gridOpacity","gridColor","gridStrokeWidth","hoverLine","interaction","textGroup","xAxis","yAxis","constructor","activeStrategies","innerHTML","append","attr","_prepareData","_calculateExtents","_createScales","_createAxis","_drawGrid","_drawContent","_drawFadeOut","_prepareText","_drawText","_drawAxis","_addInteraction","_updateAllDiagrams","hasToBePositive","labelDivisionFactor","numberIndicator","toLocaleString","maximumFractionDigits","minimumFractionDigits","d","lastImportantDateForYScale","filteredDataArrayForYMax","e","filteredDataArrayForYMin","maxVal","yStart","minVal","yEnd","domain","range","tickFormat","valueToDisplayText","ticks","gridGroup","yGridGroup","xGridGroup","selectAll","data","enter","style","call","on","_setInteractionVisibilityForActiveDiagrams","mouseEvent","_handleTooltipEvent","x","invert","investmentStepIndex","firstDate","secondDate","numberOfMonthsSinceStartDate","numberOfMonthsPerInvestmentStep","calculateInvestmentStepIndexForDate","activeDiagram","_updateTooltip","_updateDiagram","values","text","y","fontSize","fontFamily","fontWeight","textAnchor","color","savingPhaseMid","payoutPhaseMid","yPos","savingBold","savingPhase","payoutBold","payoutPhase","fadeOutGroup","fadeOutStartDate","gradient","displayOption","AreaChartD3","etfRatio","subtractInflationFromTotal","etfLineColors","total","invested","colors","valueTextOffset","negativeLabels","investedIdentifier","capitalIdentifier","totalIdentifier","totalColor","etfIdentifiers","dataToIndex","ratio","currentIdx","heightOffset","totalShareValue","totalDividendShareValue","datum","_drawArea","_drawLines","curve","y0","y1","paddingW","paddingH","ETF_SYMBOL_TO_NAME","totalValue","investedValue","negativeLabel","getSumNewPayout","sumNewPayout","CashflowBarChart","barPaddingPercentage","payoutIdentifier","maxNumberTextLength","payout","first","second","rectWidth","startYear","colorIdentifier","payoutX","payoutY","investedX","investedY","payoutValue","needToSkipLastBar","barArray","Visualization","firstSVGRef","React","createRef","secondSVGRef","areaChart","barChart","investmentModel","etfIdentifierToRatio","props","etfDropdownSelection","elements","selected","TAX_FREE_AMOUNT_IDENTIFIER","generateCostConfig","STARTING_CAPITAL_IDENTIFIER","MONTHLY_INVESTMENT_IDENTIFIER","YEARLY_INVESTMENT_INCREASE_IDENTIFIER","MONTHLY_PAYOUT_IDENTIFIER","YEARLY_PAYOUT_INCREASE_IDENTIFIER","SAVING_PHASE_IDENTIFIER","AGE_IDENTIFIER","LIFE_EXPECTATION_IDENTIFIER","diagram","Y_AXIS_LOCK_IDENTIFIER","reset","isValid","current","_getETFIdentifierToRatio","_getInvestmentModel","firstPayoutPhaseDate","getPayoutPhaseBeginDate","correctLevelOfDetailInvestmentSteps","getInvestmentSteps","DETAILED_GRAPH_DROPDOWN_IDENTIFIER","_getTooltipDate","_getYAxisExtent","INFLATION_USED_FOR_TOTAL","render","error","_drawVisualization","Fragment","ref","Component","ErrorMessage","id","identifier","className","visibility","errorMessage","TextInputElement","htmlFor","label","type","textAppending","onChange","onValueChange","target","split","disabled","ETFTextInputElement","CheckboxInputElement","Overlay","displayOverlay","href","rel","onClick","handleAPIKeyConfirm","SidebarSectionHeading","titleID","title","data-bs-toggle","data-bs-target","aria-expanded","initiallyCollapsed","aria-controls","children","costsOfElementMatchUIValues","element","BrokerDropDown","aria-labelledby","handleChange","GraphDetailDropDown","ETFSelectionDropDown","elementIdentifier","HTMLInputElement","handleSelectionChange","handleShareChange","autoPercentage","TRANSACTION_COSTS_IDENTIFIER","TRANSACTION_COSTS_TYPE_IDENTIFIER","ETF_DROPDOWN_SELECTION_IDENTIFIER","API_KEY_IDENTIFIER","BROKER_DROPDOWN_IDENTIFIER","ETF_AUTOMATIC_PERCENTAGE_IDENTIFIER","state","recalculateETFPercentages","numberOfSelectedETFs","newPercentage","App","handleTextChange","bind","handleCheckBoxChange","handleBrokerChange","handleGraphDetailChange","handleETFSelectionChange","handleETFShareChange","caller","S_and_P_500","iShare","msciUSA","getInitialInputFormState","changedValue","changedStateIdentifier","_validateAndSetState","brokerProperties","detailProperties","changedETFIdentifier","apiValues","loadHistoricData","setState","forceUpdate","positiveIntIdentifiers","percentageIdentifiers","leftoverYears","sumOfPercentages","foundOneSelectedEtf","noValidate","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"uSAKMA,EAAwB,MAIjBC,EAAwB,GAe9B,SAASC,EAAYC,GACxB,IAAMC,EAAMC,OAAOF,GACnB,OAAOE,OAAOC,MAAMF,KAASC,OAAOE,UAAUH,GAAO,EAAIA,EAoBtD,SAASI,EAAwBL,GACpC,OAZG,SAAuBA,GAC1B,IAAMM,EAAQJ,OAAOF,GACrB,OAAOE,OAAOC,MAAMG,GAAS,EAAMA,EAU5BC,CAAcP,GAAS,IAU3B,SAASQ,EAAaC,GACzB,IAAMH,EAAQJ,OAAOO,GAAO,IAC5B,OAAQP,OAAOC,MAAMG,IAAUA,GAAS,GAAKA,GAAS,EAUnD,SAASI,EAAcD,GAC1B,IAAMR,EAAMC,OAAOO,GACnB,OAAQP,OAAOC,MAAMF,IAAQC,OAAOE,UAAUH,IAAQA,GAAO,EAmB1D,SAASU,EAAoBC,GAChC,OAA2B,IAApBA,EAAKC,WAsBT,SAAeC,EAAtB,oC,4CAAO,WAAqCC,EAAuBC,GAA5D,eAAAC,EAAA,sEAC0BC,IAAA,yFACyDH,EADzD,mBACiFC,EADjF,kBAEzB,SAAAG,GACI,QACwBC,IAApBD,EAAME,gBACuBD,IAA7BD,EAAM,yBACsBC,IAA5BD,EAAM,kBAEN,MAAM,IAAIG,MAAJ,yBAA4BP,EAA5B,mCAEV,MAAO,CACHH,KAAM,IAAIW,KAAKJ,EAAME,UAAUG,YAC/BC,SAAUC,WAAWP,EAAM,oBAC3BQ,OAAQD,WAAWP,EAAM,uBAdlC,cACGS,EADH,QAkBYC,MAAK,SAACZ,EAAGa,GAAJ,OAAUb,EAAEL,KAAKmB,UAAYD,EAAElB,KAAKmB,aAlBrD,kBAmBIH,GAnBJ,4C,sBA6BA,SAASI,EAAmCJ,GAC/C,OAAOA,EAAeK,KAAI,SAAAd,GAAK,MAAI,CAACe,EAAgBf,EAAMP,MAAOO,EAAMQ,WAUpE,SAASQ,EAAqCP,GACjD,IAAIQ,EAAcR,EAAe,GAAGhB,KAAKyB,cACnCC,EAAqC,CAAC,CAACF,EAAa,IAU1D,OATAR,EAAeW,SAAQ,SAAApB,GACfA,EAAMP,KAAKyB,gBAAkBD,EAC7BE,EAAsBA,EAAsBE,OAAS,GAtJvB,IAsJyDrB,EAAMM,UAE7FW,EAAcjB,EAAMP,KAAKyB,cACzBC,EAAsBG,KAAK,CAACL,EAAajB,EAAMM,eAGvDa,EAAsBT,MAAK,SAACZ,EAAGa,GAAJ,OAAUb,EA7JI,GA6J+Ba,EA7J/B,MA8JlCQ,EAUJ,SAASJ,EAAgBtB,GAC5B,OAAO8B,KAAKC,MAAM/B,EAAKgC,UAAY/C,GAqBhC,SAASgD,EAA0C9B,GACtD,OAAO,IAAIO,MAAJ,yEAA4EP,IAqBhF,SAAS+B,EAA4BlC,GACxC,IAXiBmC,EAAeC,EAW1BC,EAAoBrC,EAAKsC,UACzBC,GAZWJ,EAYiBnC,EAAKC,WAZPmC,EAYmBpC,EAAKyB,cAXjD,IAAId,KAAKyB,EAAMD,EAAQ,EAAG,GAAGG,WAY9BE,EAAcV,KAAKW,MAAMJ,EAAoBE,GACnD,OAAO,IAAI5B,KAAKX,EAAKyB,cAAezB,EAAKC,WAAauC,GChJnD,IAAME,EAAb,WAUI,aAAuB,yBAJf1B,eAAgC,GAIlB,KAHd2B,iBAAyC,GAG3B,KAFdC,mBAA6C,GARzD,yGA6FI,WAA6CzC,GAA7C,oFACQA,KAAiB0C,KAAK7B,gBAD9B,iEAIiCd,EAAsBC,EAAeuC,EAAuBtC,QAJ7F,OAIUY,EAJV,OAMU8B,EAAsB1B,EAAmCJ,GACzD+B,EAA8CL,EAAuBM,0CACvEF,GAGEpB,EAAwBH,EAAqCP,GAC7DiC,EAA2CP,EAAuBM,0CACpEtB,GAGJmB,KAAK7B,eAAeb,GAAiB,CACjC+C,QAASlC,EACT8B,oBAAqBA,EACrBpB,sBAAuBA,GAE3BmB,KAAKF,iBAAiBxC,GAAiB,CACnC4C,4CAA6CA,EAC7CI,WAAY,IAEhBN,KAAKD,mBAAmBzC,GAAiB,CACrC8C,yCAA0CA,EAC1CE,WAAY,IA3BpB,iDA7FJ,uGAmII,SAA2ChD,EAAuBM,GAE9D,KAAIA,KAAaoC,KAAKF,iBAAiBxC,IAAvC,CAGA,IAAMiD,EAAgBP,KAAK7B,eAAeb,GAAe2C,oBACnDO,EACFD,EAAcA,EAAcxB,OAAS,GDlNJ,GCmNjCE,KAAKwB,IAAIF,EAAcA,EAAcxB,OAAS,GDnNb,GCmNiDnB,GAC9EiC,EAAuBa,mBAC3Bb,EAAuBc,0BACrBC,EAAwBL,EAAcM,QACxC,SAAAnD,GAAK,OAAIA,EDvNwB,ICuNgB8C,KAErDR,KAAKF,iBAAiBxC,GAAegD,WAAW1C,GAAakD,IAAWC,OAAOH,EAAuB,CAClGI,MAAO,EACPC,UAAW,QAnJvB,6DA+JI,SAAwD9D,EAAYG,GAChE,IAAMM,EAAYa,EAAgBtB,GAClC,MAAO,CACHS,EAAYoC,KAAKF,iBAAiBxC,GAAe4C,4CAC3CF,KAAKF,iBAAiBxC,GAAe4C,4CACrCtC,EACNA,KArKZ,kDA+KI,SAA6CN,EAAuBiC,GAEhE,KAAIA,KAAQS,KAAKD,mBAAmBzC,IAApC,CAGA,IAAMiD,EAAgBP,KAAK7B,eAAeb,GAAeuB,sBACnDqC,EACFX,EAAcA,EAAcxB,OAAS,GD9PJ,GC+PjCE,KAAKwB,IAAIF,EAAcA,EAAcxB,OAAS,GD/Pb,GC+PiDQ,GAC9EM,EAAuBa,mBAC3Bb,EAAuBc,0BACrBC,EAAwBL,EAAcM,QACxC,SAAAnD,GAAK,OAAIA,EDnQwB,ICmQgBwD,KAErDlB,KAAKD,mBAAmBzC,GAAegD,WAAWf,GAAQuB,IAAWC,OAAOH,EAAuB,CAC/FI,MAAO,EACPC,UAAW,QA/LvB,0CA2MI,SAAqC3D,EAAuBiC,GACxD,OAAOS,KAAKD,mBAAmBzC,GAAe8C,yCAA2Cb,EACnFS,KAAKD,mBAAmBzC,GAAe8C,yCACvCb,IA9Md,2BAwNI,SAAcjC,EAAuBH,GACjC,KAAMG,KAAiB0C,KAAKF,kBACxB,MAAMV,EAA0C9B,GAFP,MAIL0C,KAAKmB,gDACzChE,EACAG,GANyC,mBAItC8D,EAJsC,KAIlBxD,EAJkB,KAS7C,OADAoC,KAAKqB,mCAAmC/D,EAAe8D,GAChDpB,KAAKF,iBAAiBxC,GAAegD,WAAWc,GAAoBE,QAAQ1D,GDxSjD,KCuE1C,6BA6OI,SAAgBN,EAAuBiC,GACnC,KAAMjC,KAAiB0C,KAAKD,oBACxB,MAAMX,EAA0C9B,GAEpD,IAAMiE,EAAgBvB,KAAKwB,6BAA6BlE,EAAeiC,GAEvE,OADAS,KAAKyB,qCAAqCnE,EAAeiE,GAClDtC,KAAKyC,IACR,EACA1B,KAAKD,mBAAmBzC,GAAegD,WAAWiB,GAAeD,QAAQ/B,GD5T3C,OCuE1C,wBAmBI,SAAiBhC,GAAyE,IAAzDmD,EAAwD,uDAAnC,EAAGiB,EAAgC,uDAAT,EAC5E9B,EAAuBtC,OAASA,EAChCsC,EAAuBa,mBAAqBA,EAE5C,IAAMkB,EAAmB,IAAI9D,KAAK,GAKlC,GAJA8D,EAAiBC,SAASF,GAC1B9B,EAAuBc,0BAA4BlC,EAAgBmD,GAG5B,MAAnC/B,EAAuBiC,SAAkB,CACzC,IAAMA,EAAWjC,EAAuBkC,cACxC,IAAK,IAAMzE,KAAiBwE,EAAShC,iBACjCgC,EAAShC,iBACLxC,GACF4C,4CAA8CL,EAAuBM,0CACnE2B,EAAS3D,eAAeb,GAAe2C,qBAG/C,IAAK,IAAM3C,KAAiBwE,EAAS/B,mBACjC+B,EAAS/B,mBACLzC,GACF8C,yCAA2CP,EAAuBM,0CAChE2B,EAAS3D,eAAeb,GAAeuB,0BAzC3D,qEAsDI,WAA8BtB,EAAgByE,GAA9C,yEACInC,EAAuBoC,UAAU1E,GAC3B2E,EAAWrC,EAAuBkC,cAF5C,cAGgCC,GAHhC,oDAGe1E,EAHf,oBAIc4E,EAASC,+BAA+BH,EAAc1E,GAAe8E,QAJnF,6BAMIC,QAAQC,IAAI,uCANhB,4CAtDJ,kFAoEI,WAII,OAHuC,MAAnCzC,EAAuBiC,WACvBjC,EAAuBiC,SAAW,IAAIjC,GAEnCA,EAAuBiC,WAxEtC,uDAiFI,SAAyDvB,GACrD,IAAMgC,EAAiBhC,EAAc,GD1JA,GC2J/BiC,EAAgBjC,EAAcA,EAAcxB,OAAS,GD3JtB,GC4JrC,OAAOyD,GAAiBA,EAAgBD,GAAkB1C,EAAuBa,uBApFzF,KAAab,EACMiC,SAA0C,KADhDjC,EAEMtC,OAAiB,GAFvBsC,EAGMc,0BAAoC,EAH1Cd,EAIMa,mBAA6B,E,qBC7C1C+B,EAAoB,OAWnB,SAASC,EAAmBpF,EAA8BqF,GAC7D,OAAOA,EAAeC,YAAYtF,GAAiBqF,EAAeE,YAAYvF,GAU3E,SAASwF,EAA2BxF,EAA8BqF,GACrE,OAAOA,EAAeI,oBAAoBzF,GAAiBqF,EAAeE,YAAYvF,GAU1F,SAAS0F,EAAiB1F,EAA8BqF,GACpD,OAAOA,EAAeM,UAAU3F,GAAiBqF,EAAeE,YAAYvF,GAShF,SAAS4F,EAAiB/F,GACtB,IAAMgG,EAAU,IAAIrF,KAAKX,GAEzB,OADAgG,EAAQtB,SAAS1E,EAAKC,WAAa,GAC5B+F,EAYX,SAASC,EAAkB9F,EAAuBH,GAC9C,GFjBG,SAA4BA,GAC/B,OAA2Bd,KAApBc,EAAKC,WEgBPiG,CAAmBlG,GAEjB,CACH,IAAMmG,EAAiBzD,EAAuBkC,cAAcwB,gBAAgBjG,EAAeH,EAAKyB,eAC1F4E,EAAa3D,EAAuBkC,cAAc0B,cAAcnG,EAAeH,GACrF,OAAOmG,EAAiB,EAAIA,EA9DN,KA8D+CE,EAJrE,OAAO,EAef,SAASE,EAAeC,EAAgBC,GACpC,IAAIC,EAAQF,EAASC,EAAkBE,gBAAkBF,EAAkBG,WACrEC,EAAqB/E,KAAKyC,IAAIiC,EAASE,EAAO,GAEpD,MAAO,CAACG,EADRH,EAAQF,EAASK,GAYrB,SAASC,EAAoBC,EAAmBC,GAG5C,MAAO,CAFelF,KAAKyC,IAAI,EAAGwC,EAAYC,GAChBlF,KAAKyC,IAAI,EAAGyC,EAAgBD,IAmB9D,SAASE,EAAyBzB,EAAgC0B,GAC9D,IAAMC,EAhBV,SAA0B3B,GACtB,IAD8D,EAC1D4B,EAAM,EADoD,cAElCC,OAAOC,KAAK9B,EAAeC,cAFO,IAE9D,2BACI2B,GAAO7B,EAD6E,QAC3CC,GAHiB,8BAK9D,OAAO4B,EAWgBG,CAAiB/B,GAClCxF,EAAOwF,EAAexF,KACtBwH,EACFxH,EAAKyB,cACLyF,EAAYzF,eACXzB,EAAKC,WAAaiH,EAAYjH,YAAcf,EACjDsG,EAAeiC,UAAYN,EAAiBA,EAAiBrF,KAAK4F,IAAI,IAAmBF,GAW7F,SAASG,EAAwBnB,EAAgBoB,EAA4BC,GACzE,IAAMC,EAAkBhG,KAAKC,MAAM8F,EAAiB3I,GACpD,OAAOsH,EAAS1E,KAAK4F,IAAI,EAAIE,EAAoBE,GAwCrD,SAASC,EACLC,EACAhI,EACAiI,EACAC,GAEA,IAAKnI,EAAoBC,IAASgI,EAAgBpG,OAAS,EACvD,MAAO,CAAC,EAAGqG,GAEf,IAJgB,EFhHE7I,EAAe+I,EAAa5D,EEoH1C6D,EAAc,EACZC,EAAyBL,EAAgBA,EAAgBpG,OAAS,GAGlE0G,EACFN,EAAgBpG,OAAS1C,EAAwB,EAC3C8I,EAAgBA,EAAgBpG,OAAS1C,GACzC8I,EAAgB,GAXV,cAYYX,OAAOC,KAAKY,IAZxB,IAYhB,2BAAwE,CAOpE,IAPqE,IAA9D/H,EAA6D,QAEhEoI,EACChD,EAAmBpF,EAAemI,IAC9BpJ,EAAwBoJ,EAA8BtI,KAAKC,YAChEf,EAEKsJ,EAAI,EAAGA,EAAItJ,GAAyB8I,EAAgBpG,OAAS4G,EAAI,EAAGA,IAAK,CAE9ED,GACK1C,EAAiB1F,EAFQ6H,EAAgBA,EAAgBpG,OAAS4G,IAETA,EAAKtJ,EAEvEqJ,GAA0B,MAC1B,IAEME,EAFqBlD,EAAmBpF,EAAekI,GAEdA,EAAuBK,mBAAmBvI,GACrFwI,EAAwB,EACxBX,EAAgBpG,OAAS1C,IACzByJ,EAAwB7G,KAAKyC,IACzB,EACAgB,EAAmBpF,EAAe6H,EAAgBA,EAAgBpG,OAAS,EAAI1C,IAC3E8I,EAAgBA,EAAgBpG,OAAS,EAAI1C,GAAuBwJ,mBAChEvI,KAKhB,IACIyI,GFxJUxJ,EEuJWqJ,EAAoBE,EFvJhBR,EEwJoB,EFxJP5D,EEwJUgE,EFvJjDzG,KAAKyC,IAAI4D,EAAKrG,KAAKqG,IAAI/I,EAAOmF,KE2HmC,EA6BtBuC,EAAoB8B,EAAoBX,GA7BlB,mBA6BnEW,EA7BmE,KA6B/CX,EA7B+C,KA8BpEG,GA3NiB,GA2NFQ,EAAwCtD,GA1C3C,8BA4ChB,MAAO,CAAC8C,EAAaH,GAazB,SAASY,EACLb,EACAc,EACA9I,EACAkH,EACAgB,EACAa,GAEA,IADI,EACEhE,EAAWrC,EAAuBkC,cACpC8B,EAAQ,EACNsC,EAAqBhB,EAAgBA,EAAgBpG,OAAS,GAC9DqH,EAAoC,CACtCjJ,KAAMA,EACN8F,UAAU,eAAMkD,EAAmBlD,WACnCL,YAAY,eAAMuD,EAAmBvD,aACrCyD,kBAAkB,eAAMF,EAAmBE,mBAC3CtD,oBAAoB,eAAMoD,EAAmBpD,qBAC7CuD,WAAYH,EAAmBG,WAC/BzD,YAAY,eAAMsD,EAAmBtD,aACrCgD,mBAAmB,eAAMM,EAAmBN,oBAC5CU,iBAAiB,eAAMJ,EAAmBI,kBAC1CC,cAAe,EACfC,WAAYN,EAAmBM,WAC/BC,YAAY,eAAMP,EAAmBO,aACrCC,UAAU,eAAMR,EAAmBQ,WACnC/B,UAAW,GAlBX,cAoBwBJ,OAAOC,KAAKY,IApBpC,IAoBJ,2BAAwE,CAAC,IAA9D/H,EAA6D,QAE9DsJ,EAA4BvB,EAAW/H,GAA4B2I,EACzEG,EAAkBI,eAAiBI,EAHiC,MAIpBlD,EAC5CkD,EACAV,EAAcW,YANkD,mBAI7DC,EAJ6D,KAQpEjD,GARoE,KASpEuC,EAAkBG,iBAAiBjJ,GAAiBwJ,EACpDV,EAAkBP,mBAAmBvI,IAAkBwJ,EAGvD,IAAMC,EAAgB7E,EAASuB,cAAcnG,EAAeH,GACtD8F,EAAY6D,EAA8BC,EAChDX,EAAkBvD,YAAYvF,GAAiByJ,EAC/CX,EAAkBnD,UAAU3F,GAAiB2F,EAG7C,IAAM+D,EAA8B5D,EAAkB9F,EAAeH,GAE/D8J,EADsBb,EAAkBxD,YAAYtF,GAAiB0J,EACzBD,EAClDX,EAAkBnD,UAAU3F,IAAkB2J,EAC9Cb,EAAkBC,kBAAkB/I,GAAiB2J,EACrDb,EAAkBrD,oBAAoBzF,IAAkB2J,EAGxDb,EAAkBxD,YAAYtF,IAAkB8I,EAAkBnD,UAAU3F,GAC5E8I,EAAkBO,UAAUrJ,GAAiB,GAhD7C,8BAoDJ8I,EAAkBE,YAAczC,EApD5B,MAqDeqB,EAA6BC,EAAiBhI,EAAM+I,EAAc/B,cAAekB,GAA7F6B,EArDH,oBAsDJd,EAAkBK,YAAcS,EAChC9C,EAAyBgC,EAAmB/B,GAC5Cc,EAAgBnG,KAAKoH,GAiBzB,SAASe,EACLhC,EACAiC,EACA/B,EACAlI,EACAkH,EACA6B,EACAmB,EACAjC,EACAkC,GAEIpK,EAAoBC,KACpBiI,EAAwBc,EAAc/B,eAE1C,IAJF,EAIQjC,EAAWrC,EAAuBkC,cACpC8B,EAAQ,EACR0D,EAAQ,EACNpB,EAAqBhB,EAAgBA,EAAgBpG,OAAS,GAC9DqH,EAAoC,CACtCjJ,KAAMA,EACN8F,UAAU,eAAMkD,EAAmBlD,WACnCL,YAAY,eAAMuD,EAAmBvD,aACrCyD,kBAAkB,eAAMF,EAAmBE,mBAC3CtD,oBAAoB,eAAMoD,EAAmBpD,qBAC7CuD,WAAYH,EAAmBG,WAC/BzD,YAAY,eAAMsD,EAAmBtD,aACrCgD,mBAAmB,eAAMM,EAAmBN,oBAC5CU,iBAAiB,eAAMJ,EAAmBI,kBAC1CC,cAAe,EACfC,WAAYN,EAAmBM,WAC/BC,YAAY,eAAMP,EAAmBO,aACrCC,UAAU,eAAMR,EAAmBQ,WACnC/B,UAAW,GAtBjB,cAwB8BJ,OAAOC,KAAKY,IAxB1C,IAwBE,2BAAwE,CAAC,IAA9D/H,EAA6D,QAC9DyJ,EAAgB7E,EAASuB,cAAcnG,EAAeH,GAM5D,GAJAiJ,EAAkBvD,YAAYvF,GAAiByJ,EAC/CX,EAAkBO,UAAUrJ,GAAiB,EAC7C8I,EAAkBG,iBAAiBjJ,GAAiB,EAEhDgK,EAAYhK,GAAekK,mBAAqBrC,EAAgBpG,OAAQ,CAWxE,IATA,IAAM0I,EAAgBpC,EAAW/H,GAA4B8J,EACzDM,EAAoB,EAClBC,EAAajE,EAAe+D,EAAcvB,EAAcW,YAAY,GACtEe,EAAmB,EACnBC,EAAiCP,EAAYhK,GAAekK,mBAC5DM,EACA3C,EAAgB0C,GAAgC5E,UAAU3F,GAC1DgK,EAAYhK,GAAeyK,kBAExBF,EAAiC1C,EAAgBpG,OAAQ8I,IAAkC,CAC9F,IAAMG,EAA+B7C,EAAgB0C,GAC/CI,EAAuBR,EAAeC,EAGtCQ,EACFnB,GACCc,IAAmCP,EAAYhK,GAAekK,mBACzDQ,EAA6B/E,UAAU3F,GACvCgK,EAAYhK,GAAeyK,kBAC3BC,EAA6B/E,UAAU3F,IAC3C6K,EAAwBlJ,KAAKqG,IAAI4C,EAAsBD,GACvDG,EAAuBD,EAAwBpB,EACrDe,EAAoBE,EAA6B/E,UAAU3F,GAAiB8K,EAC5EN,GACID,IAAmCP,EAAYhK,GAAekK,mBACxDF,EAAYhK,GAAeyK,kBAC3B,EAGV,IAAMM,EAA2BpJ,KAAKyC,IAAI,EAAGyG,GAAyBR,EAAaC,IACnFA,GAAoB3I,KAAKyC,IAAI,EAAGyG,EAAwBE,GAGxD,IAAMC,EACFF,EAAuBJ,EAA6BnF,YAAYvF,GAChEiL,EAAmBtJ,KAAKyC,IAAI,EAAG2G,EAA2BC,GA1BgC,EA6BlDrE,EACxCsE,EACAnD,GA/B0F,mBA6B7FmD,EA7B6F,KA6B3EnD,EA7B2E,KAiC9F,IAAIoD,EA/YK,GA+YQD,EAAsC9F,EAjCuC,EAkCrDwB,EAAoBuE,EAAYnB,GAlCqB,mBAkC7FmB,EAlC6F,KAkCjFnB,EAlCiF,KAmC9FE,GAASiB,EACT,IAAMC,EAAeJ,EAA2BG,EAGhDpC,EAAkBO,UAAUrJ,IAAkBmL,EAC9CrC,EAAkBM,YAAYpJ,IAAkBmL,EAEhDrC,EAAkBxD,YAAYtF,IAAkB8K,EAChDV,GAAqBS,EAGrB,IAAIO,EAA6B,EAE7BA,EADAb,IAAmCP,EAAYhK,GAAekK,mBACjCvI,KAAKyC,IAC9B,EACAsG,EAA6B3B,kBAAkB/I,GAC3CgK,EAAYhK,GAAeyK,mBAGNC,EAA6B3B,kBAAkB/I,GAEhF,IAAMqL,EAA6B1J,KAAKqG,IAAIoD,EAA4BN,GAIxE,GAHAhC,EAAkBrD,oBAAoBzF,IAAkBqL,EAGpDjB,GAAqBD,EACrB,MAIR5D,GAAS+D,EACTN,EAAYhK,GAAekK,mBAAqBK,EAChDP,EAAYhK,GAAekK,oBAA4C,IAAtBM,EAA0B,EAAI,EAE/ER,EAAYhK,GAAeyK,kBACvBF,EAAiC1C,EAAgBpG,OAC3CoG,EAAgB0C,GAAgC5E,UAAU3F,GAAiBwK,EAC3E,EAGd,IAEMb,EADFb,EAAkBxD,YAAYtF,GAAiB8F,EAAkB9F,EAAeH,GAClC4J,EAClDX,EAAkBnD,UAAU3F,GAAiB2J,EAC7Cb,EAAkBxD,YAAYtF,IAAkB2J,EAChDb,EAAkBC,kBAAkB/I,GAAiB2J,EACrDb,EAAkBrD,oBAAoBzF,IAAkB2J,EAnGY,MAsGvB/B,EACzCC,EACAhI,EACAiI,EACAC,GA1GgE,mBAsG7D6B,GAtG6D,KA4GpE9B,EA5GoE,KA6GpEmC,GAASL,GACTG,GAA4BH,IAtIlC,gCA8IE,OAJAd,EAAkBE,YAAczC,EAChCuC,EAAkBK,YAAcc,EAChCnD,EAAyBgC,EAAmB/B,GAC5Cc,EAAgBnG,KAAKoH,GACd,CAACiB,EAA0BjC,GAWtC,SAASwD,EAA4BvD,EAAsBlI,GACvD,IADmF,EAC7E+E,EAAWrC,EAAuBkC,cAClC8G,EAAuB,CAAE,WAAY,EAAGC,KAAM,EAAGC,KAAM,GACvDC,EAAsC,CACxC7L,KAAMA,EACNmJ,WAAY,EACZG,WAAY,EACZxD,UAAU,eAAM4F,GAChBjG,YAAY,eAAMiG,GAClBxC,kBAAkB,eAAMwC,GACxB9F,oBAAoB,eAAM8F,GAC1BhD,mBAAmB,eAAMgD,GACzBnC,YAAY,eAAMmC,GAClBlC,UAAU,eAAMkC,GAChBhG,YAAY,eAAMgG,GAClBtC,iBAAiB,eAAMsC,GACvBrC,cAAe,EACf5B,UAAW,GAjBoE,cAmBvDJ,OAAOC,KAAKY,IAnB2C,IAmBnF,2BAAwE,CAAC,IAA9D/H,EAA6D,QACpE0L,EAAoB/F,UAAU3F,GAAiB,EAC/C0L,EAAoBpG,YAAYtF,GAAiB,EACjD0L,EAAoB3C,kBAAkB/I,GAAiB,EACvD0L,EAAoBjG,oBAAoBzF,GAAiB,EACzD0L,EAAoBnD,mBAAmBvI,GAAiB,EACxD0L,EAAoBtC,YAAYpJ,GAAiB,EACjD0L,EAAoBrC,UAAUrJ,GAAiB,EAC/C0L,EAAoBzC,iBAAiBjJ,GAAiB,EACtD0L,EAAoBnG,YAAYvF,GAAiB4E,EAASuB,cAAcnG,EAAeH,IA5BR,8BA8BnF,OAAO6L,EAeJ,IAAMC,EAAb,WA+BI,WACIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAlE,EACAa,EACAsD,EACAC,GACD,yBAzCKP,kBAyCN,OAxCMC,uBAwCN,OAvCMC,8BAuCN,OAtCMC,mBAsCN,OArCMC,0BAqCN,OApCMC,uBAoCN,OAnCMlE,gBAmCN,OAlCMa,mBAkCN,OAjCMuD,uBAiCN,OAhCMD,SAgCN,OA9BME,YAAsB,GA8B5B,KA7BMC,YAAsB,GA6B5B,KA5BMtF,YAAoB,IAAIvG,KA4B9B,KA3BMqH,gBAAoC,GA4BxCnF,KAAKkJ,aAAeA,EACpBlJ,KAAKmJ,kBAAoBA,EACzBnJ,KAAKqJ,cAAgBA,EACrBrJ,KAAKuJ,kBAAoBA,EACzBvJ,KAAKqF,WAAaA,EAClBrF,KAAKkG,cAAgBA,EACrBlG,KAAKyJ,kBAAoBA,EACzBzJ,KAAKwJ,IAAMA,EACXxJ,KAAKoJ,yBAA2BA,EAChCpJ,KAAKsJ,qBAAuBA,EAE5BtJ,KAAK4J,0BACL5J,KAAK6J,kBAvDb,2DA6DI,WAOI,IAP+B,IAAD,EArbtC,SACIL,EACAM,EACAP,GAEmB,IADnBQ,EACkB,uDADK,GAEjBC,EAAYF,EAAkBN,EAC9BS,EAAM,IAAInM,KACVoM,EAAgB,IAAIpM,KAAKmM,EAAIrL,cAAeqL,EAAI7M,WAAa,GAE7D+M,EAAqB,IAAIrM,KAAKoM,GACpCC,EAAmBC,YAAYF,EAActL,cAAgB2K,GAC7D,IAAMc,EAAU,IAAIvM,KAAKoM,GAEzB,OADAG,EAAQD,YAAYF,EAActL,cAAgBoL,EAAYD,GACvD,CAACG,EAAeC,EAAoBE,GAwaUC,CAC7CtK,KAAKwJ,IACLxJ,KAAKyJ,kBACLzJ,KAAKuJ,mBAJqB,mBACvBgB,EADuB,KACZJ,EADY,KACQE,EADR,KAMxBX,EAAc,GAEZc,EAAcD,EAClBC,EAAcL,EACdK,EAActH,EAAiBsH,GAE/Bd,EAAY1K,KAAKwL,GAErBxK,KAAK0J,YAAcA,EAEnB,IADA,IAAMC,EAAc,GACXa,EAAcL,EAAoBK,EAAcH,EAASG,EAActH,EAAiBsH,GAC7Fb,EAAY3K,KAAKwL,GAErBxK,KAAK2J,YAAcA,EACnB3J,KAAKqE,YAAckG,IAjF3B,6BAuFI,WACI,IAAIpF,EAAkB,CAACyD,EAA4B5I,KAAKqF,WAAYrF,KAAK0J,YAAY,KACrF1D,EACIb,EACAnF,KAAKmJ,kBAAoBnJ,KAAKkJ,aAC9BlJ,KAAK0J,YAAY,GACjB1J,KAAKqE,YACLrE,KAAKqF,WACLrF,KAAKkG,eAET,IAAK,IAAIP,EAAI,EAAGA,EAAI3F,KAAK0J,YAAY3K,OAAQ4G,IAAK,CAE9CK,EACIb,EAFqBL,EAAwB9E,KAAKmJ,kBAAmBnJ,KAAKoJ,yBAA0BzD,GAIpG3F,KAAK0J,YAAY/D,GACjB3F,KAAKqE,YACLrE,KAAKqF,WACLrF,KAAKkG,eAab,IAPA,IAAImB,GAFJlC,EAAkBA,EAAgBsF,MAAM,IAEOtF,EAAgBpG,OAAS,GAAG0H,WACvErB,EAAwBpF,KAAKkG,cAAc/B,cACzCmD,EAA4B,CAC9B,WAAY,CAAEE,mBAAoB,EAAGO,kBAAmB,GACxDe,KAAM,CAAEtB,mBAAoB,EAAGO,kBAAmB,GAClDgB,KAAM,CAAEvB,mBAAoB,EAAGO,kBAAmB,IAE7CpC,EAAI,EAAGA,EAAI3F,KAAK2J,YAAY5K,OAAQ4G,IAAK,CAC9C,IAD8C,EAEMwB,EAChDhC,EAFiBL,EAAwB9E,KAAKqJ,cAAerJ,KAAKsJ,qBAAsB3D,GAIxF3F,KAAKqF,WACLrF,KAAK2J,YAAYhE,GACjB3F,KAAKqE,YACLrE,KAAKkG,cACLmB,EACAjC,EACAkC,GAX0C,mBAE7CD,EAF6C,KAEnBjC,EAFmB,KAclDpF,KAAKmF,gBAAkBA,IApI/B,gCAmJI,SAAmBuF,GACf,IAAKjO,OAAOE,UAAUN,EAAwBqO,GAC1C,MAAM,IAAI7M,MAAJ,6DACoDxB,EADpD,6BAKV,GAAIqO,IAA2BrO,EAC3B,OAAO2D,KAAKmF,gBAIhB,IAFA,IAAMwF,EAA0B,GAC1BC,EAAwBvO,EAAwBqO,EAC7C/E,EAAI,EAAGA,EAAI3F,KAAKmF,gBAAgBpG,OAAQ4G,GAAKiF,EAAuB,CAGzE,IADA,IAAMC,EAAyBC,IAAU9K,KAAKmF,gBAAgBQ,IACrDoF,EAAS,EAAGA,EAASH,EAAuBG,IAAU,CAC3DF,EAAuBrE,eAAiBxG,KAAKmF,gBAAgBQ,EAAIoF,GAAQvE,cADd,oBAE/BhC,OAAOC,KAC/BzE,KAAKmF,gBAAgBQ,EAAIoF,GAAQpE,YAHsB,IAE3D,2BAEsB,CAAC,IAFZrJ,EAEW,QAClBuN,EAAuBlE,UAAUrJ,IAAkB0C,KAAKmF,gBAAgBQ,EAAIoF,GAAQpE,UAChFrJ,IANmD,+BAU/DqN,EAAwB3L,KAAK6L,GAEjC,OAAOF,IA9Kf,qCAqLI,WACI,OAAO3K,KAAK2J,YAAY,OAtLhC,K,kBCnhBMqB,GAAe,IAEfC,GAAc,IAUb,SAASC,GAAcC,GAI1B,OADAA,GAFAA,EAAOA,EAAKC,OAAO,GAAGC,cAAgBF,EAAKV,MAAM,IAErCa,QAAQ,oBAAqB,OACnC,GAAN,OAAUH,EAAV,KA2BG,IAAeI,GAAtB,WAsDI,WACIpG,EACAqG,EACAC,EACAC,EACAC,EACAC,GAKD,IAJCC,EAIF,uDAJU,KACRC,EAGF,uDAHW,IACTC,EAEF,uDAFY,IACVC,EACF,uDADY,GAEV,GADF,yBAhEFL,iBAgEE,OA/DFC,aA+DE,OA7DiBK,gBAAkB,EA6DnC,KA5DiBC,iBAAmB,GA4DpC,KA3DiBC,eAAiB,GA2DlC,KA1DiBC,qBAAuB,QA0DxC,KAzDiBC,cAAgB,YAyDjC,KAvDQlH,qBAuDR,OAtDQmH,WAA2B,CAAC,IAAIxO,KAAQ,IAAIA,MAsDpD,KArDQiO,aAqDR,OApDQC,aAoDR,OAnDQH,WAmDR,OAlDQC,YAkDR,OAjDQS,SAAW,EAiDnB,KAhDQC,SAAW,EAgDnB,KA/CQC,OAAgDhP,MA+CxD,KA9CQiP,OAA8CjP,MA8CtD,KA7CQkP,UAAuB,GA6C/B,KA5CQC,eAAkC,GA4C1C,KA3CQnB,0BA2CR,OAzCQoB,SAyCR,OArCeC,kBAAoB,kBAqCnC,KApCeC,mBAAqB,GAoCpC,KAnCeC,YAAc,GAmC7B,KAlCeC,UAAY,OAkC3B,KAjCeC,gBAAkB,EAiCjC,KA/BMC,eA+BN,OA9BMC,iBA8BN,OA7BMC,eA6BN,OA5BMC,WA4BN,OA3BMC,WA2BN,EACMvN,KAAKwN,cAAgBjC,EACrB,MAAM,IAAI1N,MAAM,2CAEpB0N,EAAgBkC,iBAAiBzO,KAAKgB,MACtCA,KAAKmF,gBAAkBA,EACvBnF,KAAKyL,qBAAuBA,EAC5BzL,KAAK2L,YAA6B,MAAfA,EAAsBA,EAAc,IAAI7N,KAAK,GAChEkC,KAAK4L,QAAqB,MAAXA,EAAkBA,EAAU,CAAC,EAAG,GAE/C5L,KAAK+L,QAAUA,EACf/L,KAAKgM,QAAUA,EACfhM,KAAK6L,MAAQA,EACb7L,KAAK8L,OAASA,EAGdN,EAAakC,UAAY,GAEzB1N,KAAK6M,IAAMpP,IACC+N,GACPmC,OAAO,OACPC,KAAK,KAAMlC,GACXkC,KAAK,UAJC,cAIiB5N,KAAK6L,MAAQ,EAAI7L,KAAK+L,QAJvC,YAIkD/L,KAAK8L,OAAS,EAAI9L,KAAKgM,UAC/E2B,OAAO,KACPC,KAAK,YANC,oBAMyB,CAAC5N,KAAK+L,QAAU,EAAG/L,KAAKgM,SANjD,MASXhM,KAAKqN,UAAYrN,KAAK6M,IACtB7M,KAAKoN,YAAcpN,KAAK6M,IACxB7M,KAAKmN,UAAYnN,KAAK6M,IAAIc,OAAO,QACjC3N,KAAKuN,MAAQ9P,IAAYuC,KAAKyM,QAC9BzM,KAAKsN,MAAQ7P,IAAcuC,KAAK0M,QAhGxC,0CA0HI,WACI1M,KAAK6N,eACL7N,KAAK8N,oBACL9N,KAAK+N,gBACL/N,KAAKgO,cACLhO,KAAKiO,YACLjO,KAAKkO,eACLlO,KAAKmO,eACLnO,KAAKoO,eACLpO,KAAKqO,YACLrO,KAAKsO,YACLtO,KAAKuO,kBAEDvO,KAAK2L,aAAe3L,KAAKsM,WAAW,IAAMtM,KAAK2L,aAAe3L,KAAKsM,WAAW,IAC9EtM,KAAKwO,uBAxIjB,gCAmJI,SAA6BjS,GAA6D,IAAlCkS,EAAiC,wDAC/EC,EACFzP,KAAKyC,KAAK1B,KAAK4L,QAAQ,GAAI5L,KAAK4L,QAAQ,KAAiBZ,GAAeC,GA/L/D,IAgMP0D,EAAkBD,IAAwBzD,GAAc,IAAM,IAIpE,OAHIwD,GAA4B,MAATlS,IACnBA,EAAQ0C,KAAKwB,IAAIlE,IAEf,GAAN,OACa,MAATA,GACOA,EAAQmS,GAAqBE,oBAAejR,EAAW,CACpDkR,sBAAuB,EACvBC,sBAAuB,IAE3B,OANV,OAOGH,EAPH,aA1JR,+BAyKI,WAA6B,IAAD,OACxB3O,KAAKsM,WAAa7O,IAAUuC,KAAK2M,UAAU,IAAI,SAAAoC,GAAC,OAAIA,EAAE5R,QAEtD,IAAM6R,EAA6B,IAAIlR,KAAKkC,KAAKyL,sBAGjD,GAFAuD,EAA2BnN,SAASmN,EAA2B5R,WAAaf,GAEpD,IAApB2D,KAAK4L,QAAQ,IAAgC,IAApB5L,KAAK4L,QAAQ,GAAU,CAChD,IAAMqD,EAA2BjP,KAAK2M,UAAU3M,KAAKuM,UAAU1L,QAC3D,SAAAqO,GAAC,OAAIA,EAAE/R,MAAQ6R,GAA8BE,EAAE/R,KAAO,EAAKmP,WAAW,MAEpE6C,EAA2BnP,KAAK2M,UAAU3M,KAAKwM,UAAU3L,QAC3D,SAAAqO,GAAC,OAAIA,EAAE/R,MAAQ6R,KAEbI,EAAS3R,IAAOwR,EAAyBzQ,KAAI,SAAA0Q,GAAC,OAAIA,EAAEG,WACpDC,EAAS7R,IAAO0R,EAAyB3Q,KAAI,SAAA0Q,GAAC,OAAIA,EAAEK,SAC1DvP,KAAK4L,QAAU,CAAC0D,EAAQF,MAxLpC,2BA+LI,WACIpP,KAAKyM,OAAShP,MAAiB+R,OAAOxP,KAAK4L,SAAS6D,MAAM,CAACzP,KAAK8L,OAAQ,IACxE9L,KAAK0M,OAASjP,MAAe+R,OAAOxP,KAAKsM,YAAYmD,MAAM,CAAC,EAAGzP,KAAK6L,UAjM5E,yBAuMI,WAAuB,IAAD,OAClB7L,KAAKuN,MAAQ9P,IACCuC,KAAKyM,QACdiD,YAAW,SAAAX,GAAC,OAAI,EAAKY,mBAAmBZ,MACxCa,MAnPS,GAqPd5P,KAAKsN,MAAQ7P,IAAcuC,KAAK0M,UA7MxC,uBAmNI,WAAqB,IAAD,OACVmD,EAAY7P,KAAK6M,IAAIc,OAAO,KAAKC,KAAK,QAAS,QAC/CkC,EAAaD,EAAUlC,OAAO,KAAKC,KAAK,QAAS,SACjDmC,EAAaF,EAAUlC,OAAO,KAAKC,KAAK,QAAS,SAEvDkC,EACKE,UAAU,QACVC,KAAKjQ,KAAKyM,OAAOmD,MAlQR,IAmQTM,QACAvC,OAAO,QACPC,KAAK,KAAM5N,KAAK0M,OAAO1M,KAAKsM,WAAW,KACvCsB,KAAK,MAAM,SAAAmB,GAAC,OAAI,EAAKtC,OAAOsC,MAC5BnB,KAAK,KAAM5N,KAAK0M,OAAO1M,KAAKsM,WAAW,KACvCsB,KAAK,MAAM,SAAAmB,GAAC,OAAI,EAAKtC,OAAOsC,MAC5BoB,MAAM,eAAgBnQ,KAAKkN,iBAC3BiD,MAAM,SAAUnQ,KAAKiN,WACrBkD,MAAM,UAAWnQ,KAAKgN,aAC3B3K,QAAQC,IAAItC,KAAK0M,OAAOkD,SACxBG,EACKC,UAAU,QACVC,KAAKjQ,KAAK0M,OAAOkD,SACjBM,QACAvC,OAAO,QACPC,KAAK,MAAM,SAAAmB,GAAC,OAAI,EAAKrC,OAAOqC,MAC5BnB,KAAK,KAAM5N,KAAKyM,OAAOzM,KAAK4L,QAAQ,KACpCgC,KAAK,MAAM,SAAAmB,GAAC,OAAI,EAAKrC,OAAOqC,MAC5BnB,KAAK,KAAM5N,KAAKyM,OAAOzM,KAAK4L,QAAQ,KACpCuE,MAAM,eAAgBnQ,KAAKkN,iBAC3BiD,MAAM,SAAUnQ,KAAKiN,WACrBkD,MAAM,UAAWnQ,KAAKgN,eAhPnC,uBAsPI,WACIhN,KAAK6M,IAAIc,OAAO,KAAKwC,MAAM,YAAa,QAAQC,KAAKpQ,KAAKuN,OAE1DvN,KAAK6M,IACAc,OAAO,KACPwC,MAAM,YAAa,QACnBvC,KAAK,YAHV,uBAGuC5N,KAAK8L,OAH5C,MAIKsE,KAAKpQ,KAAKsN,OAGftN,KAAK6M,IACAc,OAAO,KACPA,OAAO,QACPC,KAAK,KAAM5N,KAAK0M,OAAO1M,KAAKsM,WAAW,KACvCsB,KAAK,KAAM5N,KAAKyM,OAAO,IACvBmB,KAAK,KAAM5N,KAAK0M,OAAO1M,KAAKsM,WAAW,KACvCsB,KAAK,KAAM5N,KAAKyM,OAAO,IACvB0D,MAAM,eAAgBnQ,KAAKiM,iBAC3BkE,MAAM,SAAU,SAGrBnQ,KAAK6M,IACAc,OAAO,KACPA,OAAO,QACPC,KAAK,KAAM5N,KAAK0M,OAAO1M,KAAKyL,sBAAwBzL,KAAKiM,gBAAkB,GAC3E2B,KAAK,KAAM5N,KAAKyM,OAAOzM,KAAK4L,QAAQ,KACpCgC,KAAK,KAAM5N,KAAK0M,OAAO1M,KAAKyL,sBAAwBzL,KAAKiM,gBAAkB,GAC3E2B,KAAK,KAAM5N,KAAKyM,OAAOzM,KAAK4L,QAAQ,KACpCuE,MAAM,eAAgBnQ,KAAKiM,iBAC3BkE,MAAM,SAAU,WAnR7B,6BA2RI,WAA2B,IAAD,OAItBnQ,KAAKoN,YAAcpN,KAAK6M,IACnBc,OAAO,KACPC,KAAK,QALe,eAMpBuC,MAAM,aAAc,UACpBvC,KAAK,YAJS,oBAIiB,CAAC,GAAI5N,KAAKgM,SAJ3B,MAMnBhM,KAAKmN,UAAYnN,KAAKoN,YACjBO,OAAO,QACPC,KAAK,QAVe,eAWpBuC,MAAM,SAAU,QAChBA,MAAM,mBAAoB,OAC1BA,MAAM,eAAgBnQ,KAAKiM,iBAC3BkE,MAAM,UAAW,IACjBvC,KAAK,KAAM5N,KAAK8L,OAAS,EAAI9L,KAAKgM,SAClC4B,KAAK,KAAM,GAGhB5N,KAAK6M,IACAc,OAAO,QACPC,KAAK,QAAS,cACdA,KAAK,YAHV,oBAGoC,CAAC,GAAI5N,KAAKgM,SAH9C,MAIK4B,KAAK,SAAU5N,KAAK8L,OAAS,EAAI9L,KAAKgM,SACtC4B,KAAK,QAAS5N,KAAK6L,OACnB+B,KAAK,OAAQ,QACbuC,MAAM,iBAAkB,OACxBE,GAAG,aAAa,kBAAM9E,EAAgB+E,2CAA2C,cACjFD,GAAG,aAAa,SAAAE,GAAU,OAAI,EAAKC,oBAAoBD,QAzTpE,iCAiUI,SAA4BA,GACxB,IAAME,EAAIhT,IAAW8S,GAAY,GAC3BpT,EAAO6C,KAAK0M,OAAOgE,OAAOD,GAChCzQ,KAAK2L,YAActM,EAA4BlC,GAC/C6C,KAAKwO,uBArUb,gCA2UI,WACI,IAAMmC,EApWd,SAA6CxT,EAAYgI,GACrD,IAAMyL,EAAYzL,EAAgB,GAAGhI,KAC/B0T,EAAa1L,EAAgB,GAAGhI,KAChC2T,GACD3T,EAAKyB,cAAgBgS,EAAUhS,eAAiBvC,GAChDc,EAAKC,WAAawT,EAAUxT,YAC3B2T,GACDF,EAAWjS,cAAgBgS,EAAUhS,eAAiBvC,GACtDwU,EAAWzT,WAAawT,EAAUxT,YAEvC,OAAO6B,KAAKC,MAAM4R,EAA+BC,GA0VjBC,CAAoChR,KAAK2L,YAAa3L,KAAKmF,iBACvFoG,EAAgB+E,2CAA2C,WAFlC,oBAGG/E,EAAgBkC,kBAHnB,IAGzB,2BAA8D,CAAC,IAApDwD,EAAmD,QAC1DA,EAAc9D,UAAUS,KAAK,KAAM5N,KAAK0M,OAAO1M,KAAK2L,cAAciC,KAAK,KAAM5N,KAAK0M,OAAO1M,KAAK2L,cAC9FsF,EAAcC,eAAeP,GAC7BM,EAAcE,kBANO,iCA3UjC,uBAwVI,WACInR,KAAKqN,UAAYrN,KAAK6M,IAAIc,OAAO,KAAKC,KAAK,QAAS,aACpD5N,KAAKqN,UACA2C,UAAU,QACVC,KAAKzL,OAAO4M,OAAOpR,KAAK4M,iBACxBsD,QACAvC,OAAO,QACP0D,MAAK,SAAAtC,GAAC,OAAIA,EAAEsC,QACZzD,KAAK,KAAK,SAAAmB,GAAC,OAAIA,EAAE0B,KACjB7C,KAAK,KAAK,SAAAmB,GAAC,OAAIA,EAAEuC,KACjBnB,MAAM,aAAa,SAAApB,GAAC,OAAIA,EAAEwC,YAC1BpB,MAAM,eAAe,SAAApB,GAAC,OAAIA,EAAEyC,cAC5BrB,MAAM,eAAe,SAAApB,GAAC,OAAIA,EAAE0C,cAC5BtB,MAAM,eAAe,SAAApB,GAAC,OAAIA,EAAE2C,cAC5BvB,MAAM,QAAQ,SAAApB,GAAC,OAAIA,EAAE4C,WAtWlC,4BA4WI,WACI3R,KAAKqN,UAAU2C,UAAU,QAAQqB,MAAK,SAAAtC,GAAC,OAAKA,EAAoBsC,UA7WxE,0BAoXI,WACI,IAAMO,EACF5R,KAAK0M,OAAO1M,KAAKsM,WAAW,KAC3BtM,KAAK0M,OAAO1M,KAAKyL,sBAAwBzL,KAAK0M,OAAO1M,KAAKsM,WAAW,KAAO,EAE3EuF,EACF7R,KAAK0M,OAAO1M,KAAKyL,uBAChBzL,KAAK0M,OAAO1M,KAAKsM,WAAW,IAAMtM,KAAK0M,OAAO1M,KAAKyL,uBAAyB,EAC3EqG,GAAQ,GACd9R,KAAK4M,eAAiB,CAClBmF,WAAY,CACRV,KAAM,SACNZ,EAAGmB,EACHN,EAAGQ,EACHP,SAAUvR,KAAKkM,iBACfsF,WAAY,KACZE,WAAY,MACZD,WAAY,OACZE,MAAO,SAEXK,YAAa,CACTX,KAAM,QACNZ,EAAGmB,EACHN,EAAGQ,EACHP,SAAUvR,KAAKkM,iBACfsF,WAAY,KACZE,WAAY,QACZD,WAAY,SACZE,MAAO,SAEXM,WAAY,CACRZ,KAAM,SACNZ,EAAGoB,EACHP,EAAGQ,EACHP,SAAUvR,KAAKkM,iBACfsF,WAAY,KACZE,WAAY,MACZD,WAAY,OACZE,MAAO,SAEXO,YAAa,CACTb,KAAM,QACNZ,EAAGoB,EACHP,EAAGQ,EACHP,SAAUvR,KAAKkM,iBACfsF,WAAY,KACZE,WAAY,QACZD,WAAY,SACZE,MAAO,YApavB,0BA4aI,WACI,IAAMQ,EAAenS,KAAK6M,IAAIc,OAAO,KAAKC,KAAK,QAAS,WAClDwE,EAAmB,IAAItU,KAAKkC,KAAKsM,WAAW,IAClD8F,EAAiBhI,YAAYgI,EAAiBxT,cAAgBoB,KAAK+M,oBAEnE,IAAMsF,EAAWF,EAAaxE,OAAO,kBAAkBC,KAAK,KAAM5N,KAAK8M,mBAEvEuF,EACK1E,OAAO,QACPC,KAAK,QAAS,SACdA,KAAK,SAAU,MACfA,KAAK,aAAc,SACnBA,KAAK,eAAgB,GAE1ByE,EACK1E,OAAO,QACPC,KAAK,QAAS,OACdA,KAAK,SAAU,QACfA,KAAK,aAAc,SACnBA,KAAK,eAAgB,GAE1BuE,EACKxE,OAAO,QACPC,KAAK,IAAK5N,KAAK0M,OAAO0F,IACtBxE,KAAK,KAAM5N,KAAKgM,SAChB4B,KAAK,QAAS5N,KAAK0M,OAAO1M,KAAKsM,WAAW,IAAMtM,KAAK0M,OAAO0F,GAAoB,GAChFxE,KAAK,SAAU5N,KAAKyM,OAAOzM,KAAK4L,QAAQ,IAAM5L,KAAKyM,OAAOzM,KAAK4L,QAAQ,IAAqB,EAAf5L,KAAKgM,SAClFmE,MAAM,OANX,eAM2BnQ,KAAK8M,kBANhC,SAjcR,oBAuGI,WACIvB,EAAgBkC,iBAAmB,KAxG3C,wDAgHI,SAA0D6E,GAA4C,IAAD,gBACrE/G,EAAgBkC,kBADqD,IACjG,2BAA8D,SAC5CL,YAAY+C,MAAM,aAAcmC,IAF+C,mCAhHzG,KAAsB/G,GA0BHkC,iBAAsC,GCzElD,IAAM8E,GAAb,kDAyBI,WACIpN,EACAqG,EACAC,EACAE,EACAC,EACA4G,EACAC,GACD,IAAD,uBACE,cAAMtN,EAAiBqG,EAAcC,EAAsB,WAAYE,EAAaC,IAjCvE8G,cAAuC,CACpD,WAAY,CAAEC,MAAO,UAAWC,SAAU,WAC1C9J,KAAM,CAAE6J,MAAO,UAAWC,SAAU,WACpC7J,KAAM,CAAE4J,MAAO,UAAWC,SAAU,YA6BtC,EA3BeC,OAAuC,CACpDjO,UAAW,UACX0B,WAAY,UACZG,WAAY,WAwBd,EAtBeqM,gBAAkB,IAsBjC,EArBeC,eAAqD,CAAC,aAAc,aAAc,aAqBjG,EApBeC,mBAAqB,WAoBpC,EAnBeC,kBAAoB,UAmBnC,EAlBeC,gBAAkB,QAkBjC,EAjBeC,WAAa,UAiB5B,EAfMC,oBAeN,IAdMC,YAA4B,GAclC,EAbMZ,gCAaN,EAGE,EAAKA,2BAA6BA,EAElC,EAAKW,eAAiB,GALxB,oBAM8B5O,OAAOC,KAAK+N,IAN1C,IAME,2BAAsE,CAAC,IAA5DlV,EAA2D,QAC5DgW,EAAQd,EAASlV,GACV,MAATgW,GAAiBA,EAAQ,GACzB,EAAKF,eAAepU,KAAK1B,IATnC,uCAjCN,gDAkDI,WACI0C,KAAKqT,YAAc,CACf/M,WAAY,EACZG,WAAY,EACZ7B,UAAW,GAGf,IAPW,EAOP2O,EAAa,EAPN,cAQiBvT,KAAKoT,gBARtB,IAQX,2BAAiD,CAAC,IAAvC9V,EAAsC,QAC7C0C,KAAKqT,YAAY/V,EAAgB0C,KAAKgT,oBAAsBO,IAC5DvT,KAAKqT,YAAY/V,EAAgB0C,KAAKiT,mBAAqBM,KAVpD,8BAaXvT,KAAKwM,SAAWxM,KAAKqT,YAAYzO,UACjC5E,KAAKuM,SAAWgH,EAAa,EAE7BvT,KAAK2M,UAAY,GACjB,IAAK,IAAIhH,EAAI,EAAGA,EAAI4N,EAAY5N,IAC5B3F,KAAK2M,UAAU3N,KAAK,IAlBb,oBAoBkBgB,KAAKmF,iBApBvB,IAoBX,2BAAmD,CAAC,IAAzCxC,EAAwC,QAC/C3C,KAAK2M,UAAU3M,KAAKqT,YAAY/M,YAAYtH,KAAK,CAC7CqQ,OAAQ,EACRE,MAAO5M,EAAe2D,WACtBnJ,KAAMwF,EAAexF,KACrBwU,MAAO3R,KAAK6S,OAAOvM,aAEvBtG,KAAK2M,UAAU3M,KAAKqT,YAAY5M,YAAYzH,KAAK,CAC7CqQ,QAAS1M,EAAe2D,WACxBiJ,MAAO5M,EAAe2D,WAAa3D,EAAe8D,WAClDtJ,KAAMwF,EAAexF,KACrBwU,MAAO3R,KAAK6S,OAAOpM,aAEvBzG,KAAK2M,UAAU3M,KAAKqT,YAAYzO,WAAW5F,KAAK,CAC5CqQ,QAAS1M,EAAe2D,WAAa3D,EAAe8D,WACpD8I,MAAO5M,EAAe2D,WAAa3D,EAAe8D,WAAa9D,EAAeiC,UAC9EzH,KAAMwF,EAAexF,KACrBwU,MAAO3R,KAAK6S,OAAOjO,YAEvB,IAnB+C,EAmB3C4O,EAAe,EAnB4B,cAoBnBxT,KAAKoT,gBApBc,IAoB/C,2BAAiD,CAAC,IAAvC9V,EAAsC,QACvCmW,EAAkB/Q,EAAmBpF,EAAeqF,GACpD+Q,EAA0B5Q,EAA2BxF,EAAeqF,GAC1E3C,KAAK2M,UAAU3M,KAAKqT,YAAY/V,EAAgB0C,KAAKiT,oBAAoBjU,KAAK,CAC1EqQ,OAAQoE,EAAkBD,EAC1BjE,KAAMkE,EAAkBC,EAA0BF,EAClDrW,KAAMwF,EAAexF,KACrBwU,MAAO3R,KAAK0S,cAAcpV,GAAeqV,QAE7C3S,KAAK2M,UAAU3M,KAAKqT,YAAY/V,EAAgB0C,KAAKgT,qBAAqBhU,KAAK,CAC3EqQ,OAAQoE,EAAkBC,EAA0BF,EACpDjE,KAAMiE,EACNrW,KAAMwF,EAAexF,KACrBwU,MAAO3R,KAAK0S,cAAcpV,GAAesV,WAE7CY,GAAgBC,GAnC2B,gCApBxC,iCAlDnB,wBAiHI,WAAc,IAAD,OAETzT,KAAK6M,IACAc,OAAO,QACPgG,MAAM3T,KAAK2M,UAAU3M,KAAK2M,UAAU5N,OAAS,IAC7CoR,MAAM,SAAUnQ,KAAKmT,YACrBhD,MAAM,eAAgBnQ,KAAKiM,iBAC3BkE,MAAM,OAAQ,QACdvC,KACG,IACAnQ,MAEKgT,GAAE,SAAA1B,GAAC,OAAI,EAAKrC,OAAOqC,EAAE5R,SACrBmU,GAAE,SAACvC,EAAGpJ,GAAJ,OACC,EAAK8G,OACDsC,EAAEM,QACG,EAAKoD,2BACA,EAAK9F,UAAU,EAAK0G,YAAYzO,WAAWe,GAAG4J,KAC9C,UAnItC,0BA4II,WACIvP,KAAK4T,YACL5T,KAAK6T,eA9Ib,uBAoJI,WAEI,IAFS,IAAD,OAEClO,EAAI,EAAGA,EAAI3F,KAAK2M,UAAU5N,OAAQ4G,IACvC3F,KAAK6M,IACAc,OAAO,KACPC,KAAK,QAAS,QACdD,OAAO,QACPgG,MAAM3T,KAAK2M,UAAUhH,IACrBwK,MAAM,UAAWnQ,KAAKmM,gBACtBgE,MAAM,QAAQ,SAAApB,GAAC,OAAIA,EAAE,GAAG4C,SACxB/D,KACG,IACAnQ,MAEKqW,MAAMrW,KACNgT,GAAE,SAAA1B,GAAC,OAAI,EAAKrC,OAAOqC,EAAE5R,SACrB4W,IAAG,SAAAhF,GAAC,OAAI,EAAKtC,OAAOsC,EAAEQ,SACtByE,IAAG,SAAAjF,GAAC,OAAI,EAAKtC,OAAOsC,EAAEM,cArK/C,0BA6KI,WACI,uEAKA,IAJA,IAAM4E,EAAwB,KAAbjU,KAAK6L,MAChBqI,EAAmC,IAAxBlU,KAAKkM,iBAGbvG,EAAI,EAAGA,EAAI3F,KAAK+S,eAAehU,OAAQ4G,IAC5C3F,KAAK4M,eAAe5M,KAAK+S,eAAepN,IAAM,CAC1C0L,KAAMnG,GAAclL,KAAK+S,eAAepN,IACxC8K,EAAGzQ,KAAK0M,OAAO1M,KAAKsM,WAAW,IAAM2H,EACrC3C,EAAGtR,KAAKyM,OAAO,IAAMzM,KAAKkM,iBAAmBgI,IAAavO,EAAI,GAC9D4L,SAAUvR,KAAKkM,iBACfsF,WAAY,KACZE,WAAY,QACZD,WAAY,SACZE,MAAO3R,KAAK6S,OAAO7S,KAAK+S,eAAepN,KAG3C3F,KAAK4M,eAAe5M,KAAK+S,eAAepN,GAAK3F,KAAKoM,sBAAwB,CACtEiF,KAAMrR,KAAK2P,wBAAmBhS,GAC9B8S,EAAGzQ,KAAK0M,OAAO1M,KAAKsM,WAAW,IAAM2H,EAAWjU,KAAK8S,gBACrDxB,EAAGtR,KAAKyM,OAAO,IAAMzM,KAAKkM,iBAAmBgI,IAAavO,EAAI,GAC9D4L,SAAUvR,KAAKkM,iBACfsF,WAAYxR,KAAKqM,cACjBqF,WAAY,MACZD,WAAY,OACZE,MAAO3R,KAAK6S,OAAO7S,KAAK+S,eAAepN,KAK/C,IAAK,IAAIA,EAAI,EAAGA,EAAI3F,KAAKoT,eAAerU,OAAQ4G,IAE5C3F,KAAK4M,eAAe5M,KAAKoT,eAAezN,IAAM,CAC1C0L,KAAM8C,GAAmBnU,KAAKoT,eAAezN,IAC7C8K,EAAGzQ,KAAK0M,OAAO1M,KAAKsM,WAAW,IAAM2H,EACrC3C,EAAGtR,KAAKyM,OAAO,IAAMzM,KAAKkM,iBAAmBgI,GAAYvO,EAAI,EAAI,EAAI3F,KAAKkM,iBAC1EqF,SAAUvR,KAAKkM,iBACfsF,WAAY,KACZE,WAAY,QACZD,WAAY,SACZE,MAAO3R,KAAK0S,cAAc1S,KAAKoT,eAAezN,IAAIgN,OAGtD3S,KAAK4M,eAAe5M,KAAKoT,eAAezN,GAAK3F,KAAKkT,iBAAmB,CACjE7B,KAAMnG,GAAclL,KAAKkT,iBACzBzC,EAAGzQ,KAAK0M,OAAO1M,KAAKsM,WAAW,IAAM2H,EACrC3C,EAAGtR,KAAKyM,OAAO,IAAMzM,KAAKkM,iBAAmBgI,GAAYvO,EAAI,EAAI,EAAI3F,KAAKkM,iBAC1EqF,SAAUvR,KAAKkM,iBACfsF,WAAY,KACZE,WAAY,QACZD,WAAY,SACZE,MAAO3R,KAAK0S,cAAc1S,KAAKoT,eAAezN,IAAIgN,OAGtD3S,KAAK4M,eAAe5M,KAAKoT,eAAezN,GAAK3F,KAAKoM,qBAAuBpM,KAAKkT,iBAAmB,CAC7F7B,KAAMrR,KAAK2P,wBAAmBhS,GAC9B8S,EAAGzQ,KAAK0M,OAAO1M,KAAKsM,WAAW,IAAM2H,EAAWjU,KAAK8S,gBACrDxB,EAAGtR,KAAKyM,OAAO,IAAMzM,KAAKkM,iBAAmBgI,GAAYvO,EAAI,EAAI,EAAI3F,KAAKkM,iBAC1EqF,SAAUvR,KAAKkM,iBACfsF,WAAYxR,KAAKqM,cACjBqF,WAAY,MACZD,WAAY,OACZE,MAAO3R,KAAK0S,cAAc1S,KAAKoT,eAAezN,IAAIgN,OAGtD3S,KAAK4M,eAAe5M,KAAKoT,eAAezN,GAAK3F,KAAKgT,oBAAsB,CACpE3B,KAAMnG,GAAclL,KAAKgT,oBACzBvC,EAAGzQ,KAAK0M,OAAO1M,KAAKsM,WAAW,IAAM2H,EACrC3C,EAAGtR,KAAKyM,OAAO,IAAMzM,KAAKkM,iBAAmBgI,GAAYvO,EAAI,EAAI,EAAI3F,KAAKkM,iBAC1EqF,SAAUvR,KAAKkM,iBACfsF,WAAY,KACZE,WAAY,QACZD,WAAY,SACZE,MAAO3R,KAAK0S,cAAc1S,KAAKoT,eAAezN,IAAIiN,UAGtD5S,KAAK4M,eAAe5M,KAAKoT,eAAezN,GAAK3F,KAAKoM,qBAAuBpM,KAAKgT,oBAAsB,CAChG3B,KAAMrR,KAAK2P,wBAAmBhS,GAC9B8S,EAAGzQ,KAAK0M,OAAO1M,KAAKsM,WAAW,IAAM2H,EAAWjU,KAAK8S,gBACrDxB,EAAGtR,KAAKyM,OAAO,IAAMzM,KAAKkM,iBAAmBgI,GAAYvO,EAAI,EAAI,EAAI3F,KAAKkM,iBAC1EqF,SAAUvR,KAAKkM,iBACfsF,WAAYxR,KAAKqM,cACjBqF,WAAY,MACZD,WAAY,OACZE,MAAO3R,KAAK0S,cAAc1S,KAAKoT,eAAezN,IAAIiN,UAK1D5S,KAAK4M,eAAe5M,KAAKkT,iBAAmB,CACxC7B,KAAMnG,GAAclL,KAAKkT,iBACzBzC,EAAGzQ,KAAK0M,OAAO1M,KAAKsM,WAAW,IAAM2H,EACrC3C,EAAGtR,KAAKyM,OAAOzM,KAAK4L,QAAQ,IAC5B2F,SAAUvR,KAAKkM,iBACfsF,WAAY,KACZE,WAAY,QACZD,WAAY,SACZE,MAAO3R,KAAKmT,YAGhBnT,KAAK4M,eAAe5M,KAAKkT,gBAAkBlT,KAAKoM,sBAAwB,CACpEiF,KAAMrR,KAAK2P,wBAAmBhS,GAC9B8S,EAAGzQ,KAAK0M,OAAO1M,KAAKsM,WAAW,IAAM2H,EAAWjU,KAAK8S,gBACrDxB,EAAGtR,KAAKyM,OAAOzM,KAAK4L,QAAQ,IAC5B2F,SAAUvR,KAAKkM,iBACfsF,WAAYxR,KAAKqM,cACjBqF,WAAY,MACZD,WAAY,OACZE,MAAO3R,KAAKmT,cA1RxB,4BAmSI,SAAexC,GAA6B,oBAEZ3Q,KAAKoT,gBAFO,IAExC,2BAAiD,CAAC,IAAvC9V,EAAsC,QACvC8W,EAAa1R,EAAmBpF,EAAe0C,KAAKmF,gBAAgBwL,IAKpE0D,EAAgBD,EAJKtR,EACvBxF,EACA0C,KAAKmF,gBAAgBwL,IAGzB3Q,KAAK4M,eACDtP,EAAgB0C,KAAKoM,qBAAuBpM,KAAKgT,oBACnD3B,KAAOrR,KAAK2P,mBAAmB0E,GAAe,GAChDrU,KAAK4M,eACDtP,EAAgB0C,KAAKoM,qBAAuBpM,KAAKkT,iBACnD7B,KAAOrR,KAAK2P,mBAAmByE,GAAY,IAdT,kDAiBZpU,KAAK+S,gBAjBO,IAiBxC,2BAAiD,CAAC,IAAvCuB,EAAsC,QACvC/X,EAAQyD,KAAKmF,gBAAgBwL,GAAqB2D,GACxDtU,KAAK4M,eAAe0H,EAAgBtU,KAAKoM,sBAAsBiF,KAAOrR,KAAK2P,mBAAmBpT,GAAO,IAnBjE,8BAsBxC,IAtBwC,EAsBpC6X,EAAa,EAtBuB,cAuBZpU,KAAKoT,gBAvBO,IAuBxC,2BAAiD,CAC7CgB,GAAc1R,EAD+B,QACG1C,KAAKmF,gBAAgBwL,KAxBjC,8BA0BxCyD,GAAcpU,KAAKyS,2BAA6BzS,KAAKmF,gBAAgBwL,GAAqB/L,UAAY,EACtG5E,KAAK4M,eAAe5M,KAAKkT,gBAAkBlT,KAAKoM,sBAAsBiF,KAAOrR,KAAK2P,mBAC9EyE,OA/TZ,GAAiC7I,ICdjC,SAASgJ,GAAgB5R,GACrB,IADqD,EACjD6R,EAAe,EADkC,cAEzBhQ,OAAOC,KAAK9B,EAAegE,YAFF,IAErD,2BAAsF,CAAC,IAA5ErJ,EAA2E,QAClFkX,GAAgB7R,EAAegE,UAAUrJ,IAHQ,8BAKrD,OAAOkX,EAMJ,IAAMC,GAAb,kDAqBI,WACItP,EACAqG,EACAC,EACAE,EACAC,GACD,IAAD,8BACE,cAAMzG,EAAiBqG,EAAcC,EAAsB,YAAaE,EAAaC,IA3BxE8I,qBAAuB,GA0BtC,EAzBeC,iBAAmB,SAyBlC,EAxBe3B,mBAAqB,WAwBpC,EAvBe4B,oBAAsB,IAuBrC,EAtBe/B,OAAS,CACtBgC,OAAQ,CAAEC,MAAO,UAAWC,OAAQ,WACpCnC,SAAU,CAAEkC,MAAO,UAAWC,OAAQ,YAoBxC,EAjBMC,UAAY,EAiBlB,EA3BN,gDAkCI,WAEI,IAAM3B,EACQ,EADRA,EAEM,EAGZrT,KAAKwM,SAAW6G,EAChBrT,KAAKuM,SAAW8G,EAEhBrT,KAAK2M,UAAY,CAAC,GAAI,IACtB,IAXW,EAWLsI,EAAYjV,KAAKmF,gBAAgB,GAAGhI,KAAKyB,cAXpC,cAYkBoB,KAAKmF,iBAZvB,IAYX,2BAAmD,CAAC,IAAzCxC,EAAwC,QAC3C6R,EAAeD,GAAgB5R,GAC7BuS,GAAmBvS,EAAexF,KAAKyB,cAAgBqW,GAAa,IAAM,EAAI,QAAU,SAE9FjV,KAAK2M,UAAU0G,GAAsBrU,KAAK,CACtCqQ,OAAQ,EACRE,MAAO5M,EAAe6D,cACtBrJ,KAAMwF,EAAexF,KACrBwU,MAAO3R,KAAK6S,OAAOD,SAASsC,KAEhClV,KAAK2M,UAAU0G,GAAoBrU,KAAK,CACpCqQ,OAAQmF,EACRjF,KAAM,EACNpS,KAAMwF,EAAexF,KACrBwU,MAAO3R,KAAK6S,OAAOgC,OAAOK,MA1BvB,8BA8BXlV,KAAKgV,UAAahV,KAAK6L,MAAQ7L,KAAK2M,UAAU0G,GAAsBtU,OAAUiB,KAAK0U,uBAhE3F,0BAsEI,WACI,uEAEA,IAAMS,EACFnV,KAAK0M,OAAO1M,KAAKyL,uBAChBzL,KAAK0M,OAAO1M,KAAKsM,WAAW,IAAMtM,KAAK0M,OAAO1M,KAAKyL,uBAAyB,EAC3E2J,EAAUpV,KAAKyM,OAAO,IAAMzM,KAAKyM,OAAOzM,KAAK4L,QAAQ,IAAM5L,KAAKyM,OAAO,IAAM,EAEnFzM,KAAK4M,eAAe5M,KAAK2U,kBAAoB,CACzCtD,KAAMrR,KAAK2U,iBACXlE,EAAG0E,EACH7D,EAAG8D,EACH7D,SAAUvR,KAAKkM,iBACfsF,WAAY,KACZE,WAAY,MACZD,WAAY,SACZE,MAAO3R,KAAK6S,OAAO7S,KAAK2U,kBAAkBG,OAG9C9U,KAAK4M,eAAe5M,KAAK2U,iBAAmB3U,KAAKoM,sBAAwB,CACrEiF,KAAMrR,KAAK2P,wBAAmBhS,GAC9B8S,EAAG0E,EAAUnV,KAAK4U,oBAClBtD,EAAG8D,EACH7D,SAAUvR,KAAKkM,iBACfsF,WAAYxR,KAAKqM,cACjBqF,WAAY,MACZD,WAAY,OACZE,MAAO3R,KAAK6S,OAAO7S,KAAK2U,kBAAkBG,OAG9C,IAAMO,EACFrV,KAAK0M,OAAO1M,KAAKsM,WAAW,KAC3BtM,KAAK0M,OAAO1M,KAAKyL,sBAAwBzL,KAAK0M,OAAO1M,KAAKsM,WAAW,KAAO,EAC3EgJ,EAAYtV,KAAKyM,OAAO,IAAMzM,KAAKyM,OAAO,GAAKzM,KAAKyM,OAAOzM,KAAK4L,QAAQ,KAAO,EAErF5L,KAAK4M,eAAe5M,KAAKgT,oBAAsB,CAC3C3B,KAAMrR,KAAKgT,mBACXvC,EAAG4E,EACH/D,EAAGgE,EACH/D,SAAUvR,KAAKkM,iBACfsF,WAAY,KACZE,WAAY,MACZD,WAAY,SACZE,MAAO3R,KAAK6S,OAAO7S,KAAKgT,oBAAoB8B,OAEhD9U,KAAK4M,eAAe5M,KAAKgT,mBAAqBhT,KAAKoM,sBAAwB,CACvEiF,KAAMrR,KAAK2P,wBAAmBhS,GAC9B8S,EAAG4E,EAAYrV,KAAK4U,oBACpBtD,EAAGgE,EACH/D,SAAUvR,KAAKkM,iBACfsF,WAAYxR,KAAKqM,cACjBqF,WAAY,MACZD,WAAY,OACZE,MAAO3R,KAAK6S,OAAO7S,KAAKgT,oBAAoB8B,SA3HxD,4BAoII,SAAenE,GACX,IAAM4E,EAAchB,GAAgBvU,KAAKmF,gBAAgBwL,IACnD0D,EAAgBrU,KAAKmF,gBAAgBwL,GAAqBnK,cAChExG,KAAK4M,eAAe5M,KAAK2U,iBAAmB3U,KAAKoM,sBAAsBiF,KAAOrR,KAAK2P,mBAC/E4F,GAGJvV,KAAK4M,eAAe5M,KAAKgT,mBAAqBhT,KAAKoM,sBAAsBiF,KAAOrR,KAAK2P,mBACjF0E,KA5IZ,0BAmJI,WAAgB,IAAD,SAELmB,EAAoBxV,KAAK2M,UAAU,GAAG3M,KAAK2M,UAAU,GAAG5N,OAAS,GAAG5B,OAAS6C,KAAKsM,WAAW,GAFxF,cAGUtM,KAAK2M,WAHf,IAGX,2BAAqC,CAAC,IAA7B8I,EAA4B,QAC7BD,IACAC,EAAWA,EAAShL,MAAM,GAAI,IAGlCzK,KAAK6M,IACAc,OAAO,KACPC,KAAK,QAAS,QACdoC,UAHL,aAIKC,KAAKwF,GACLvF,QACAvC,OAAO,QACPwC,MAAM,QAAQ,SAAApB,GAAC,OAAIA,EAAE4C,SACrB/D,KAAK,KAAK,SAAAmB,GAAC,OAAI,EAAKrC,OAAOqC,EAAE5R,SAC7ByQ,KAAK,QAAS5N,KAAKgV,WACnBpH,KAAK,KAAK,SAAAmB,GAAC,OAAI,EAAKtC,OAAOsC,EAAEM,WAC7BzB,KAAK,UAAU,SAAAmB,GAAC,OAAI,EAAKtC,OAAOsC,EAAEQ,MAAQ,EAAK9C,OAAOsC,EAAEM,WACxDc,MAAM,UAAWnQ,KAAKmM,iBApBpB,mCAnJnB,GAAsCZ,I,QCgBzBmK,GAAb,4MACYC,YAAcC,IAAMC,YADhC,EAEYC,aAAeF,IAAMC,YAFjC,EAIYE,eAAqCpY,EAJjD,EAKYqY,cAAyCrY,EALrD,EAOYsY,qBAA+CtY,EAP3D,8DAcI,WACI,IAAMuY,EAAiC,GACjClU,EAAgBhC,KAAKmW,MAAMC,qBAAqBC,SACtD,IAAK,IAAM/Y,KAAiB0E,EACpBA,EAAc1E,GAAegZ,WAC7BJ,EAAqBlU,EAAc1E,GAAe8E,QAAUxF,EACxDoF,EAAc1E,GAAef,QAIzC,OAAO2Z,IAxBf,iCAiCI,SAA4BA,GACxB,IAAMhQ,EAAgC,CAClC/B,cAAe7H,EAAY0D,KAAKmW,MAAMI,IAA4Bha,OAClEsK,WAAY2P,GAAmBxW,KAAKmW,QAGxC,OAAO,IAAIlN,EACP3M,EAAY0D,KAAKmW,MAAMM,IAA6Bla,OACpDD,EAAY0D,KAAKmW,MAAMO,IAA+Bna,OACtDK,EAAwBoD,KAAKmW,MAAMQ,IAAuCpa,OAC1ED,EAAY0D,KAAKmW,MAAMS,IAA2Bra,OAClDK,EAAwBoD,KAAKmW,MAAMU,IAAmCta,OACtED,EAAY0D,KAAKmW,MAAMW,IAAyBva,OAChD2Z,EACAhQ,EACA5J,EAAY0D,KAAKmW,MAAMY,IAAgBxa,OACvCD,EAAY0D,KAAKmW,MAAMa,IAA6Bza,UAjDhE,6BA0DI,WACI,OAAsB,MAAlByD,KAAK+V,UACE/V,KAAK+V,UAAUpK,YACE,MAAjB3L,KAAKgW,SACLhW,KAAKgW,SAASrK,iBAErB,IAhEZ,6BAyEI,SAAwBsL,GACpB,OAAkB,MAAXA,GAAmBjX,KAAKmW,MAAMe,IAAwB3a,MAAQ0a,EAAQrL,aAAUjO,IA1E/F,gCAgFI,WACI4N,GAAgB4L,QAChB,IACI,GAC0B,MAAtBnX,KAAKmW,MAAMiB,SACXpX,KAAKmW,MAAMiB,SACiB,MAA5BpX,KAAK2V,YAAY0B,SACY,MAA7BrX,KAAK8V,aAAauB,QACpB,CACE,IAAMnB,EAAuBlW,KAAKsX,2BAClCtX,KAAKiW,gBAAkBjW,KAAKuX,oBAAoBrB,GAChD,IAAMsB,EAAuBxX,KAAKiW,gBAAgBwB,0BAC5CC,EAAsC1X,KAAKiW,gBAAgB0B,mBAC7D3X,KAAKmW,MAAMyB,IAAoCrb,OAE/CoP,EAAc3L,KAAK6X,kBACvB7X,KAAK+V,UAAY,IAAIxD,GACjBmF,EACA1X,KAAK2V,YAAY0B,QACjBG,EACA7L,EACA3L,KAAK8X,gBAAgB9X,KAAK+V,WAC1BG,EACAlW,KAAKmW,MAAM4B,IAA0Bxb,OAEzCyD,KAAK+V,UAAUiC,SACfhY,KAAKgW,SAAW,IAAIvB,GAChBiD,EACA1X,KAAK8V,aAAauB,QAClBG,EACA7L,EACA3L,KAAK8X,gBAAgB9X,KAAKgW,WAE9BhW,KAAKgW,SAASgC,UAEpB,MAAO9I,GACL7M,QAAQ4V,MAAM/I,MApH1B,+BA2HI,WACIlP,KAAKkY,uBA5Hb,gCAkII,WACIlY,KAAKkY,uBAnIb,oBA2II,WACI,OACI,gBAAC,IAAMC,SAAP,WACI,sBAAKC,IAAKpY,KAAK8V,eACf,sBAAKsC,IAAKpY,KAAK2V,qBA/I/B,GAAmCC,IAAMyC,WCzBlC,SAASC,GAAanC,GACzB,OACI,sBACIoC,GAAIpC,EAAMqC,WAAa,WACvBC,UAAU,kBACVtI,MAAO,CAAEuI,WAAYvC,EAAMiB,QAAU,SAAW,WAHpD,SAIKjB,EAAMwC,eC0BZ,SAASC,GAAiBzC,GAC7B,OACI,uBAAKsC,UAAU,oBAAf,UACI,wBAAOA,UAAU,aAAaI,QAAS1C,EAAMqC,WAA7C,SACKrC,EAAM2C,QAEX,wBACIL,UAAW,iBAAmBtC,EAAMiB,QAAU,GAAK,cACnDmB,GAAIpC,EAAMqC,WACVO,KAAK,OACLxc,MAAO4Z,EAAM5Z,OAAiC,KAAxB4Z,EAAM6C,cAAuB,IAAM7C,EAAM6C,cAAgB,IAC/EC,SAAU,SAAA/J,GAAC,OAAIiH,EAAM+C,cAAchK,EAAEiK,OAAO5c,MAAM6c,MAAM,KAAK,GAAIjD,EAAMqC,aACvEa,SAAUlD,EAAMkD,WAEpB,eAACf,GAAD,eAAkBnC,OAWvB,SAASmD,GAAoBnD,GAChC,OACI,uBAAKsC,UAAU,oBAAf,UACI,wBAAOA,UAAU,aAAaI,QAAS1C,EAAMqC,WAA7C,SACKrC,EAAM2C,QAEX,wBACIL,UAAW,iBAAmBtC,EAAMiB,QAAU,GAAK,cACnDmB,GAAIpC,EAAMqC,WACVO,KAAK,OACLxc,MAAO4Z,EAAM5Z,OAAiC,KAAxB4Z,EAAM6C,cAAuB,IAAM7C,EAAM6C,cAAgB,IAC/EC,SAAU,SAAA/J,GAAC,OAAIiH,EAAM+C,cAAchK,EAAEiK,OAAO5c,MAAM6c,MAAM,KAAK,GAAIjD,EAAMqC,aACvEa,SAAUlD,EAAMkD,WAEpB,eAACf,GAAD,eAAkBnC,OCpEvB,SAASoD,GAAqBpD,GACjC,OACI,uBAAKsC,UAAU,mBAAf,UACI,wBACIA,UAAU,mBACVF,GAAIpC,EAAMqC,WACVO,KAAK,WACLxc,MAAO4Z,EAAM5Z,MAAMwB,WACnBkb,SAAU,kBAAM9C,EAAM+C,cAAc/C,EAAMqC,eAE9C,wBAAOC,UAAU,mBAAmBI,QAAS1C,EAAMqC,WAAnD,SACKrC,EAAM2C,WCLhB,SAASU,GAAQrD,GACpB,OACI,sBAAKsC,UAAU,MAAf,SACI,sBAAKA,UAAU,aAAf,SACI,sBAAKA,UAAU,eAAf,SACI,uBACIA,UAAU,+EACVtI,MAAO,CAAEuI,WAAYvC,EAAMsD,eAAiB,UAAY,UAF5D,UAGI,sBAAIhB,UAAU,MAAd,gCACwB,IACpB,qBACIiB,KAAK,+CACLP,OAAO,SACPQ,IAAI,sBAHR,UAIK,IAJL,0BAMK,OAET,eAACf,GAAD,2BAAsBzC,GAAtB,IAA6BkD,UAAWlD,EAAMsD,kBAC9C,yBAAQV,KAAK,SAASN,UAAU,uBAAuBmB,QAASzD,EAAM0D,oBAAtE,8BC5BjB,SAASC,GAAsB3D,GAClC,IAAM4D,EAAU5D,EAAM6D,MAAM1O,QAAQ,MAAO,KAC3C,OACI,uBAAKmN,UAAU,8BAAf,UACI,uBAAKA,UAAU,cAAf,UACI,yBACIA,UAAW,6DACXM,KAAK,SACLkB,iBAAe,WACfC,iBAAA,WAAoBH,GACpBI,gBAAehE,EAAMiE,mBAAqB,QAAU,OACpDC,gBAAeN,EANnB,oBASA,qBAAItB,UAAU,8BAAd,SAA6CtC,EAAM6D,WAEvD,sBAAKvB,UAAW,aAAetC,EAAMiE,mBAAqB,GAAK,QAAS7B,GAAIwB,EAA5E,SACK5D,EAAMmE,cCJvB,SAASC,GAA4BpE,EAA4BqE,GAC7D,OAAOA,EAAQzW,aAAeoS,EAAMpS,YAAcyW,EAAQ1W,kBAAoBqS,EAAMrS,gBAUjF,SAAS2W,GAAetE,GAC3B,OACI,uBAAKsC,UAAU,WAAf,UACI,yBACIA,UAAU,oCACVM,KAAK,SACLR,GAAG,iBACH0B,iBAAe,WACfE,gBAAc,QALlB,SAMKhE,EAAM2C,QAEX,qBAAIL,UAAU,gBAAgBiC,kBAAgB,iBAA9C,SACKvE,EAAME,SAAS7X,KAAI,SAAAgc,GAAO,OACvB,8BACI,yBACI/B,UACI8B,GAA4BpE,EAAOqE,GAAW,uBAAyB,gBAE3EzB,KAAK,SACLa,QAAS,SAAA1K,GAAC,OAAIiH,EAAMwE,aAAaH,IALrC,SAMKA,EAAQ1B,SAPR0B,EAAQhC,oBC7B9B,SAASoC,GAAoBzE,GAChC,OACI,uBAAKsC,UAAU,WAAf,UACI,yBACIA,UAAU,oCACVM,KAAK,SACLR,GAAG,sBACH0B,iBAAe,WACfE,gBAAc,QALlB,SAMKhE,EAAM2C,QAEX,qBAAIL,UAAU,gBAAgBiC,kBAAgB,sBAA9C,SACKvE,EAAME,SAAS7X,KAAI,SAAAgc,GAAO,OACvB,8BACI,yBACI/B,UAAWtC,EAAM5Z,QAAUie,EAAQje,MAAQ,uBAAyB,gBACpEwc,KAAK,SACLa,QAAS,SAAA1K,GAAC,OAAIiH,EAAMwE,aAAaH,IAHrC,SAIKA,EAAQ1B,SALR0B,EAAQhC,oBCJ9B,SAASqC,GAAqB1E,GACjC,OACI,uBAAKsC,UAAU,6BAAf,UACI,yBACIA,UAAU,+CACVM,KAAK,SACLR,GAAG,uBACH0B,iBAAe,WACfE,gBAAc,QALlB,SAMKhE,EAAM2C,QAEX,eAACR,GAAD,eAAkBnC,IAClB,qBAAIsC,UAAU,gBAAgBiC,kBAAgB,uBAA9C,SACKlW,OAAOC,KAAK0R,EAAME,UAAU7X,KAAI,SAAAsc,GAAiB,OAC9C,8BACI,yBACIrC,UACItC,EAAME,SAASyE,GAAmBxE,SAAW,uBAAyB,gBAE1EyC,KAAK,SACLa,QAAS,SAAC1K,GAEAA,EAAEiK,kBAAkB4B,kBACtB5E,EAAM6E,sBAAsB7E,EAAME,SAASyE,KARvD,SAWI,eAACxB,GAAD,2BACQnD,EAAME,SAASyE,IADvB,IAEIve,MAAO4Z,EAAME,SAASyE,GAAmBve,MACzCyc,cAAc,IACdE,cAAe/C,EAAM8E,kBACrB5B,SAAUlD,EAAM+E,eAChB9D,SAAS,EACTuB,aAAa,SAnBhBmC,WC1BtB,IAAMrE,GAA8B,kBAC9BC,GAAgC,oBAChCC,GAAwC,2BACxCwE,GAA+B,mBAC/BC,GAAoC,uBACpCtE,GAA0B,cAC1BC,GAAiB,MACjBR,GAA6B,gBAC7BK,GAA4B,gBAC5BC,GAAoC,uBACpCG,GAA8B,kBAC9BY,GAAqC,gBACrCyD,GAAoC,uBACpCC,GAAqB,SACrBpE,GAAyB,YACzBa,GAA2B,wBAElCwD,GAA6B,iBAC7BC,GAAsC,yBA6B/BrH,GAA4C,CACrD,WAAY,YACZrL,KAAM,SACNC,KAAM,gBAUH,SAASyN,GAAmBiF,GAC/B,OAAIA,EAAK,qBAAoClf,MAClC,CAAEuH,gBAAiB,EAAKC,WAAYzH,EAAYmf,EAAK,iBAA+Blf,QAEpF,CAAEuH,gBAAiBlH,EAAwB6e,EAAK,iBAA+Blf,OAAQwH,WAAY,GAWlH,SAAS2X,GAA0BD,GAC/B,IAAIE,EAAuB,EAC3B,IAAK,IAAMre,KAAiBme,EAAK,qBAAoCpF,SAC7DoF,EAAK,qBAAoCpF,SAAS/Y,GAAegZ,UACjEqF,IAGR,IAAMC,EAAgB,IAAQ3c,KAAKyC,IAAI,EAAGia,GAC1C,IAAK,IAAMre,KAAiBme,EAAK,qBAAoCpF,SAC7DoF,EAAK,qBAAoCpF,SAAS/Y,GAAegZ,WACjEmF,EAAK,qBAAoCpF,SAAS/Y,GAAef,MAAQqf,EAAc7d,YAG/F,OAAO0d,EAOJ,IAAMI,GAAb,kDACI,WAAY1F,GAAY,IAAD,8BACnB,cAAMA,IAED2F,iBAAmB,EAAKA,iBAAiBC,KAAtB,gBACxB,EAAKC,qBAAuB,EAAKA,qBAAqBD,KAA1B,gBAC5B,EAAKE,mBAAqB,EAAKA,mBAAmBF,KAAxB,gBAC1B,EAAKG,wBAA0B,EAAKA,wBAAwBH,KAA7B,gBAC/B,EAAKI,yBAA2B,EAAKA,yBAAyBJ,KAA9B,gBAChC,EAAKK,qBAAuB,EAAKA,qBAAqBL,KAA1B,gBAC5B,EAAKlC,oBAAsB,EAAKA,oBAAoBkC,KAAzB,gBAE3B,EAAKN,MAuQb,SAAkCY,GAAyB,IAAD,EACtD,OAAO,EAAP,CACIjF,SAAS,GADb,cAGKX,GAA8B,CAC3Bla,MAAO,OACPuc,MAAO,mBACPH,aAAc,GACdK,cAAe,SACf5B,SAAS,EACToB,WAAY/B,GACZyC,cAAemD,EAAOP,iBACtBzC,UAAU,IAXlB,cAaK3C,GAAgC,CAC7Bna,MAAO,MACPuc,MAAO,qBACPH,aAAc,wCACdK,cAAe,SACf5B,SAAS,EACToB,WAAY9B,GACZwC,cAAemD,EAAOP,iBACtBzC,UAAU,IArBlB,cAuBK1C,GAAwC,CACrCpa,MAAO,MACPuc,MAAO,6BACPH,aAAc,GACdK,cAAe,IACf5B,SAAS,EACToB,WAAY7B,GACZuC,cAAemD,EAAOP,iBACtBzC,UAAU,IA/BlB,cAiCKzC,GAA4B,CACzBra,MAAO,OACPuc,MAAO,iBACPH,aAAc,GACdK,cAAe,SACf5B,SAAS,EACToB,WAAY5B,GACZsC,cAAemD,EAAOP,iBACtBzC,UAAU,IAzClB,cA2CKxC,GAAoC,CACjCta,MAAO,MACPuc,MAAO,yBACPH,aAAc,GACdK,cAAe,IACf5B,SAAS,EACToB,WAAY3B,GACZqC,cAAemD,EAAOP,iBACtBzC,UAAU,IAnDlB,cAqDK8B,GAA+B,CAC5B5e,MAAO,MACPuc,MAAO,oBACPH,aAAc,GACdK,cAAe,IACf5B,SAAS,EACToB,WAAY2C,GACZjC,cAAemD,EAAOP,iBACtBzC,UAAU,IA7DlB,cA+DKvC,GAA0B,CACvBva,MAAO,KACPuc,MAAO,eACPH,aAAc,GACdK,cAAe,IACf5B,SAAS,EACToB,WAAY1B,GACZoC,cAAemD,EAAOP,iBACtBzC,UAAU,IAvElB,cAyEKtC,GAAiB,CACdxa,MAAO,KACPuc,MAAO,WACPE,cAAe,IACfL,aAAc,GACdvB,SAAS,EACToB,WAAYzB,GACZmC,cAAemD,EAAOP,iBACtBzC,UAAU,IAjFlB,cAmFKrC,GAA8B,CAC3Bza,MAAO,KACPuc,MAAO,mBACPH,aAAc,GACdvB,SAAS,EACT4B,cAAe,IACfR,WAAYxB,GACZkC,cAAemD,EAAOP,iBACtBzC,UAAU,IA3FlB,cA6FK9C,GAA6B,CAC1Bha,MAAO,MACPuc,MAAO,kBACPH,aAAc,GACdvB,SAAS,EACT4B,cAAe,SACfR,WAAYjC,GACZ2C,cAAemD,EAAOP,iBACtBzC,UAAU,IArGlB,cAuGK+B,GAAoC,CACjC7e,OAAO,EACPuc,MAAO,eACPN,WAAY4C,GACZlC,cAAemD,EAAOL,uBA3G9B,cA6GKR,GAAsC,CACnCjf,OAAO,EACPuc,MAAO,sBACPN,WAAYgD,GACZtC,cAAemD,EAAOL,uBAjH9B,cAmHKjE,GAA2B,CACxBxb,OAAO,EACPuc,MAAO,8BACPN,WAAYT,GACZmB,cAAemD,EAAOL,uBAvH9B,cAyHK9E,GAAyB,CACtB3a,OAAO,EACPuc,MAAO,qBACPN,WAAYtB,GACZgC,cAAemD,EAAOL,uBA7H9B,cA+HKV,GAAqB,CAClB7B,gBAAgB,EAChBxB,OAAO,EACP1b,MAAO,GACPuc,MAAO,GACPH,aAAc,GACdvB,SAAS,EACT4B,cAAe,GACfR,WAAY8C,GACZpC,cAAemD,EAAOP,iBACtBjC,oBAAqBwC,EAAOxC,sBAzIpC,cA4IKjC,GAAqC,CAClCrb,MAAO,EACPuc,MAAO,qBACP1B,SAAS,EACTuD,aAAc0B,EAAOH,wBACrB7F,SAAU,CACN,CACImC,WAAY,KACZjc,MAAO,GACPuc,MAAO,mCAEX,CACIN,WAAY,IACZjc,MAAO,EACPuc,MAAO,mCAEX,CACIN,WAAY,IACZjc,MAAO,EACPuc,MAAO,oCA/JvB,cAmKKyC,GAA6B,CAC1BzC,MAAO,SACP1B,SAAS,EACTuD,aAAc0B,EAAOJ,mBACrB5F,SAAU,CACN,CACImC,WAAY,YACZM,MAAO,YACP/U,WAAY,EACZD,gBAAiB,KAErB,CACI0U,WAAY,gBACZM,MAAO,iBACP/U,WAAY,EACZD,gBAAiB,GAErB,CACI0U,WAAY,QACZM,MAAO,QACP/U,WAAY,EACZD,gBAAiB,MAxLjC,cA4LKuX,GAAoC,CACjCvC,MAAO,gBACP1B,SAAS,EACToB,WAAY6C,GACZ1C,aAAc,GACdqC,sBAAuBqB,EAAOF,yBAC9BlB,kBAAmBoB,EAAOD,qBAC1B/F,SAAU,CACNiG,YAAa,CACT9D,WAAY,cACZpW,OAAQ,WACR0W,MAAO3E,GAAmB,YAC1B5X,MAAO,MACP+Z,UAAU,GAEdiG,OAAQ,CACJ/D,WAAY,SACZpW,OAAQ,OACR0W,MAAO3E,GAAkB,KACzB5X,MAAO,MACP+Z,UAAU,GAEdkG,QAAS,CACLhE,WAAY,UACZpW,OAAQ,OACR0W,MAAO3E,GAAkB,KACzB5X,MAAO,MACP+Z,UAAU,MAvN1B,EAxQiBmG,CAAyB,gBAXnB,EAD3B,oDAqBI,SAAiBC,EAAsBC,GACnC,IAAMlB,EAAK,eAAQzb,KAAKyb,OACxBA,EAAMkB,GAAwBpgB,MAAQmgB,EACtC1c,KAAK4c,qBAAqBnB,KAxBlC,kCAmCI,SAAqBkB,GACjB,IAAMlB,EAAK,eAAQzb,KAAKyb,OACxBA,EAAMkB,GAAwBpgB,OAASkf,EAAMkB,GAAwBpgB,MACjEogB,IAA2BvB,IAC3BK,EAAK,iBAA+Blf,MAAQkf,EAAMkB,GAAwBpgB,MAAQ,IAAM,QACxFkf,EAAK,iBAA+BzC,cAAgByC,EAAMkB,GAAwBpgB,MAAQ,SAAM,KAEhGogB,IAA2BnB,IAC3BC,EAAMkB,GAAwBpgB,OAE9Bmf,GAA0BD,GAE9Bzb,KAAK4c,qBAAqBnB,KA/ClC,gCAuDI,SAAmBoB,GACf,IAAMpB,EAAK,eAAQzb,KAAKyb,OACxBA,EAAK,iBAA+Blf,MAChCsgB,EAAiB/Y,gBAAkB,EAC7B+Y,EAAiB/Y,gBAAgB/F,WACjC8e,EAAiB9Y,WAAWhG,WACtC0d,EAAK,qBAAoClf,QAAQsgB,EAAiB/Y,gBAAkB,GACpF9D,KAAK4c,qBAAqBnB,KA9DlC,qCAsEI,SAAwBqB,GACpB,IAAMrB,EAAK,eAAQzb,KAAKyb,OACxBA,EAAM7D,IAAoCrb,MAAQugB,EAAiBvgB,MACnEyD,KAAK4c,qBAAqBnB,KAzElC,sCAiFI,SAAyBzZ,GACrB,IAAMyZ,EAAK,eAAQzb,KAAKyb,OACxBA,EAAK,qBAAoCpF,SAASrU,EAAcwW,YAAYlC,UAAYmF,EAAK,qBAE3FpF,SAASrU,EAAcwW,YAAYlC,SACjCmF,EAAK,uBAAsClf,OAC3Cmf,GAA0BD,GAE9Bzb,KAAK4c,qBAAqBnB,KAzFlC,kCAkGI,SAAqBiB,EAAsBK,GACvC,IAAMtB,EAAK,eAAQzb,KAAKyb,OACxBA,EAAK,qBAAoCpF,SAAS0G,GAAsBxgB,MAAQmgB,EAChF1c,KAAK4c,qBAAqBnB,KArGlC,wEA2GI,8BAAAje,EAAA,6DACUD,EAASyC,KAAKyb,MAAL,OAA+Blf,MACxCygB,EAFV,eAE2Bhd,KAAKyb,MAAL,QAF3B,kBAIc5b,EAAuBod,iBACzB1f,EACAyC,KAAKyb,MAAL,qBAA8CpF,UAN1D,OAQQ2G,EAAU/E,OAAQ,EAClB+E,EAAUvD,gBAAiB,EATnC,gDAWQuD,EAAU/E,OAAQ,EAX1B,QAaIjY,KAAKkd,SAAL,eAAiB5B,GAAqB0B,IACtChd,KAAKmd,cAdT,yDA3GJ,wFAiII,SAA6B1B,GACzB,IAAM2B,EAAuD,CACzD1G,GACAE,GACAH,GACAM,GACAC,GACAF,GACAP,IAGE8G,EAAsD,CACxD1G,GACAE,IAGJ4E,EAAMrE,SAAU,EAEhB,cAAyBgG,EAAzB,eAAiD,CAA5C,IAAM5E,EAAU,KACjBiD,EAAMjD,GAAYpB,QAAUna,EAAcwe,EAAMjD,GAAYjc,OAC5Dkf,EAAMjD,GAAYG,aAAe,kCACjC8C,EAAMrE,QAAUqE,EAAMjD,GAAYpB,SAAWqE,EAAMrE,QAGvD,cAAyBiG,EAAzB,eAAgD,CAA3C,IAAM7E,EAAU,KACjBiD,EAAMjD,GAAYpB,QAAUra,EAAa0e,EAAMjD,GAAYjc,OAC3Dkf,EAAMjD,GAAYG,aAAe,uDACjC8C,EAAMrE,QAAUqE,EAAMjD,GAAYpB,SAAWqE,EAAMrE,QAIvD,IAAMkG,EACFhhB,EAAYmf,EAAMzE,IAA6Bza,OAASD,EAAYmf,EAAM1E,IAAgBxa,OAC1F+gB,GAAiB,GACjB7B,EAAM1E,IAAgB4B,aAAe,gDACrC8C,EAAM1E,IAAgBK,SAAU,EAChCqE,EAAMrE,SAAU,GACTkG,GAAiBhhB,EAAYmf,EAAM3E,IAAyBva,SACnEkf,EAAM3E,IAAyB6B,aAC3B,mEACJ8C,EAAM3E,IAAyBM,SAAU,EACzCqE,EAAMrE,SAAU,GAIhBqE,EAAK,qBAAoClf,OACzCkf,EAAK,iBAA+BrE,QAAUna,EAAcwe,EAAK,iBAA+Blf,OAChGkf,EAAK,iBAA+B9C,aAAe,oCAEnD8C,EAAK,iBAA+BrE,QAAUra,EAAa0e,EAAK,iBAA+Blf,OAC/Fkf,EAAK,iBAA+B9C,aAAe,oCAEvD8C,EAAMrE,QAAUqE,EAAK,iBAA+BrE,SAAWqE,EAAMrE,QAGrE,IAAImG,EAAmB,EACnBC,GAAsB,EAC1B,IAAK,IAAMlgB,KAAiBme,EAAK,qBAAoCpF,SAC7DoF,EAAK,qBAAoCpF,SAAS/Y,GAAegZ,WACjEiH,GAAoB3gB,EAChB6e,EAAK,qBAAoCpF,SAAS/Y,GAAef,OAErEihB,GAAsB,GAGzBA,EAI2B,IAArBD,GACP9B,EAAK,qBAAoCrE,SAAU,EACnDqE,EAAK,qBAAoC9C,aAAe,gDACxD8C,EAAMrE,SAAU,GAEhBqE,EAAK,qBAAoCrE,SAAU,GARnDqE,EAAK,qBAAoCrE,SAAU,EACnDqE,EAAK,qBAAoC9C,aAAe,kCACxD8C,EAAMrE,SAAU,GASpBpX,KAAKkd,SAASzB,KA9MtB,oBAsNI,WACI,IAAM5U,EAAa2P,GAAmBxW,KAAKyb,OAC3C,OACI,uBAAKhD,UAAU,kBAAf,UACI,eAACe,GAAD,eAAaxZ,KAAKyb,MAAL,SACb,uBAAKhD,UAAU,MAAf,UACI,sBAAKF,GAAG,cAAcE,UAAU,qCAAhC,SACI,wBAAMA,UAAU,mCAAmCgF,YAAU,EAA7D,UAEI,gBAAC3D,GAAD,CAAuBE,MAAM,gBAAgBI,oBAAoB,EAAjE,UACI,eAACxB,GAAD,eAAsB5Y,KAAKyb,MAAMhF,MACjC,eAACmC,GAAD,eAAsB5Y,KAAKyb,MAAM/E,MACjC,eAACkC,GAAD,eAAsB5Y,KAAKyb,MAAM9E,MACjC,eAACiC,GAAD,eAAsB5Y,KAAKyb,MAAM7E,MACjC,eAACgC,GAAD,eAAsB5Y,KAAKyb,MAAM5E,MACjC,eAAC+B,GAAD,eAAsB5Y,KAAKyb,MAAMlF,SAGrC,gBAACuD,GAAD,CAAuBE,MAAM,eAAeI,oBAAoB,EAAhE,UACI,eAACxB,GAAD,eAAsB5Y,KAAKyb,MAAM1E,MACjC,eAAC6B,GAAD,eAAsB5Y,KAAKyb,MAAMzE,MACjC,eAAC4B,GAAD,eAAsB5Y,KAAKyb,MAAM3E,SAGrC,gBAACgD,GAAD,CAAuBE,MAAM,eAAeI,oBAAoB,EAAhE,UACI,eAACK,GAAD,2BAAoB5T,GAAgB7G,KAAKyb,MAAL,iBACpC,eAAC7C,GAAD,eAEQ5Y,KAAKyb,MAAL,kBADCN,IAGT,eAAC5B,GAAD,eAA0BvZ,KAAKyb,MAAL,0BAG9B,gBAAC3B,GAAD,CAAuBE,MAAM,wBAAwBI,oBAAoB,EAAzE,UACI,eAACQ,GAAD,eAAyB5a,KAAKyb,MAAM7D,MACpC,eAAC2B,GAAD,eAA0BvZ,KAAKyb,MAAMvE,MACrC,eAACqC,GAAD,eAA0BvZ,KAAKyb,MAAM1D,MACrC,eAACwB,GAAD,eAA0BvZ,KAAKyb,MAAL,yBAC1B,eAACZ,GAAD,aACIK,eAAgBlb,KAAKyb,MAAL,uBAAgDlf,OAC5DyD,KAAKyb,MAAL,+BAKpB,wBAAMhD,UAAU,gCAAhB,UACI,iEACA,eAAC,GAAD,eAAmBzY,KAAKyb,qBArQhD,GAAyB7F,IAAMyC,WChH/B,IAYeqF,GAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,OCCdQ,IAASnG,OACL,eAAC,IAAMoG,WAAP,UACI,eAAC,GAAD,MAEJC,SAASC,eAAe,SAM5BZ,O","file":"static/js/main.156cc192.chunk.js","sourcesContent":["import * as d3 from 'd3';\n\nimport { DataPoint } from 'regression';\n\n// Ignore milliseconds, seconds, minutes, hours.\nconst timeDiffIgnoreDivisor = 1000 * 60 * 60 * 24;\n\nexport const timestampIndexOfForecastArray = 0;\nexport const courseIndexOfForecastArray = 1;\nexport const numberOfMonthsOfAYear = 12;\nexport const inflationRate = 0.01;\n\nexport interface IHistoricEntry {\n    date: Date;\n    dividend: number;\n    course: number;\n}\n\n/**\n * Converts the string to an integer and return 0 in the case the parsing fails.\n *\n * @param value The concerning value.\n * @returns The value as an integer.\n */\nexport function stringToInt(value: string) {\n    const int = Number(value);\n    return Number.isNaN(int) || !Number.isInteger(int) ? 0 : int;\n}\n\n/**\n * Converts the string to a float and return 0 in the case the parsing fails.\n *\n * @param value The concerning value.\n * @returns The value as a float.\n */\nexport function stringToFloat(value: string) {\n    const float = Number(value);\n    return Number.isNaN(float) ? 0.0 : float;\n}\n\n/**\n * Converts the string to a float and return 0 in the case the parsing fails.\n *\n * @param value The concerning value.\n * @returns The value as a float.\n */\nexport function percentageStringToFloat(value: string) {\n    return stringToFloat(value) / 100;\n}\n\n/**\n * Returns if the given value is a valid percentage.\n * Meaning that the value is between 0 and 100 and is not NaN.\n *\n * @param val The concerning value.\n * @returns If the value is a valid percentage.\n */\nexport function isPercentage(val: string): boolean {\n    const float = Number(val) / 100;\n    return !Number.isNaN(float) && float >= 0 && float <= 1.0;\n}\n\n/**\n * Returns if the given value is a valid integer.\n * Meaning that the value is an integer and is not NaN.\n *\n * @param val The concerning value.\n * @returns If the value is a valid integer.\n */\nexport function isPositiveInt(val: string): boolean {\n    const int = Number(val);\n    return !Number.isNaN(int) && Number.isInteger(int) && int >= 0;\n}\n\n/**\n * Checks if the date is the last month of a year i.e. December.\n *\n * @param date The date to check.\n * @returns Is the date in December.\n */\nexport function isLastMonthOfAYear(date: Date): boolean {\n    return date.getMonth() === numberOfMonthsOfAYear - 1;\n}\n\n/**\n * Checks if the date is the first month of a year i.e. January.\n *\n * @param date The concerning date.\n * @returns Is the date in January.\n */\nexport function isFirstMonthOfAYear(date: Date): boolean {\n    return date.getMonth() === 0;\n}\n\n/**\n * Clamps the given value into the given min-max range.\n *\n * @param value Value to clamp.\n * @param min Minimum value.\n * @param max Maximum value.\n * @returns\n */\nexport function clamp(value: number, min: number, max: number): number {\n    return Math.max(min, Math.min(value, max));\n}\n\n/**\n * Loads the historic data of the ETF by downloading and parsing it from the [Alphavantage](https://www.alphavantage.co/) API.\n *\n * @param etfIdentifier The ETF identifier (symbol) by [Alphavantage](https://www.alphavantage.co/).\n * @param apiKey The personal API [Alphavantage](https://www.alphavantage.co/) key.\n * @returns The sorted array with the historic entries.\n */\nexport async function loadHistoricalETFData(etfIdentifier: string, apiKey: string): Promise<IHistoricEntry[]> {\n    const historicalData = await d3.csv(\n        `https://www.alphavantage.co/query?function=TIME_SERIES_MONTHLY_ADJUSTED&symbol=${etfIdentifier}&apikey=${apiKey}&datatype=csv`,\n        entry => {\n            if (\n                entry.timestamp === undefined ||\n                entry['dividend amount'] === undefined ||\n                entry['adjusted close'] === undefined\n            ) {\n                throw new Error(`The history of ${etfIdentifier} contained an undefined field.`);\n            }\n            return {\n                date: new Date(entry.timestamp.toString()),\n                dividend: parseFloat(entry['dividend amount']),\n                course: parseFloat(entry['adjusted close']),\n            };\n        }\n    );\n    historicalData.sort((a, b) => a.date.valueOf() - b.date.valueOf());\n    return historicalData;\n}\n\n/**\n * Constructs a course forecasting array which consists of [Date, CourseValue] pairs.\n * The historical data needs to be sorted by the date. Which is already done when loading.\n *\n * @param historicalData The historical data array that should be used for the course forecasting array.\n * @returns The forecasting Array of [Date, CourseValue] pairs.\n */\nexport function etfHistoricalToCourseForecastArray(historicalData: IHistoricEntry[]): DataPoint[] {\n    return historicalData.map(entry => [dateToTimestamp(entry.date), entry.course]);\n}\n\n/**\n * Constructs a dividend forecasting array which consists of [Year, CourseValue] pairs.\n * The historical data needs to be sorted by the date. Which is already done when loading.\n *\n * @param historicalData The historical data array that should be used for the course forecasting array.\n * @returns The forecasting Array of [Year, CourseValue] pairs.\n */\nexport function etfHistoricalToDividendForecastArray(historicalData: IHistoricEntry[]): DataPoint[] {\n    let currentYear = historicalData[0].date.getFullYear();\n    const dividendForecastArray: DataPoint[] = [[currentYear, 0]];\n    historicalData.forEach(entry => {\n        if (entry.date.getFullYear() === currentYear) {\n            dividendForecastArray[dividendForecastArray.length - 1][courseIndexOfForecastArray] += entry.dividend;\n        } else {\n            currentYear = entry.date.getFullYear();\n            dividendForecastArray.push([currentYear, entry.dividend]);\n        }\n    });\n    dividendForecastArray.sort((a, b) => a[timestampIndexOfForecastArray] - b[timestampIndexOfForecastArray]);\n    return dividendForecastArray;\n}\n\n/**\n * Converts the date to a timestamp in the used format.\n * A timestamp is a unix timestamp which counts days instead of milliseconds.\n *\n * @param date The concerning Date.\n * @returns The corresponding timestamp.\n */\nexport function dateToTimestamp(date: Date): number {\n    return Math.floor(date.getTime() / timeDiffIgnoreDivisor);\n}\n\n/**\n * Converts the timestamp to a Date in the used format.\n * A timestamp is a unix timestamp which counts days instead of milliseconds.\n *\n * @param date The concerning timestamp.\n * @returns The corresponding Date.\n */\nexport function timestampToDate(timestamp: number): Date {\n    return new Date(timestamp * timeDiffIgnoreDivisor);\n}\n\n/**\n * Generates a specific error for the given ETF identifier which is used to\n * indicate that the historic data needs to be loaded before forecasting for that etf is available.\n *\n * @param etfIdentifier The Identifier of the ETF.\n * @returns The error object.\n */\nexport function generateHistoricalDataNotPresentException(etfIdentifier: string): Error {\n    return new Error(`First call loadHistoricalDataIfNotPresent() before predicting: ${etfIdentifier}`);\n}\n\n/**\n * Calculates the number of days in the given month and year.\n * Based on: https://stackoverflow.com/a/315767\n *\n * @param month The concerning Month.\n * @param year The concerning Year.\n * @returns The number of days of that month.\n */\nfunction daysInMonth(month: number, year: number): number {\n    return new Date(year, month + 1, 0).getDate();\n}\n\n/**\n * Rounds the given date to the first day of that or the next month.\n *\n * @param date The concerning date.\n * @returns The rounded Date.\n */\nexport function roundDateToBeginningOfMonth(date: Date): Date {\n    const currentDayOfMonth = date.getDate();\n    const maxDayOfMonth = daysInMonth(date.getMonth(), date.getFullYear());\n    const monthOffset = Math.round(currentDayOfMonth / maxDayOfMonth);\n    return new Date(date.getFullYear(), date.getMonth() + monthOffset);\n}\n","import regression from 'regression';\nimport { DataPoint } from 'regression';\nimport {\n    dateToTimestamp,\n    etfHistoricalToCourseForecastArray,\n    etfHistoricalToDividendForecastArray,\n    loadHistoricalETFData,\n    timestampIndexOfForecastArray,\n    courseIndexOfForecastArray,\n    generateHistoricalDataNotPresentException,\n    IHistoricEntry,\n} from '../helpers/utils';\n\ninterface IDividendPredictor {\n    [timestamp: number]: regression.Result;\n}\n\ninterface IDividendPredictors {\n    maxYearBeforeDividendPredictorRepetition: number;\n    predictors: IDividendPredictor;\n}\n\ninterface ICoursePredictors {\n    maxTimestampBeforeCoursePredictorRepetition: number;\n    predictors: ICoursePredictor;\n}\n\ninterface ICoursePredictor {\n    [timestamp: number]: regression.Result;\n}\n\ninterface IETFCoursePredictors {\n    [etfIdentifier: string]: ICoursePredictors;\n}\n\ninterface IETFDividendPredictors {\n    [etfIdentifier: string]: IDividendPredictors;\n}\n\ninterface IHistoricData {\n    [etfIdentifier: string]: IHistoricDataOfETF;\n}\n\ninterface IHistoricDataOfETF {\n    courseForecastArray: DataPoint[];\n    dividendForecastArray: DataPoint[];\n    history: IHistoricEntry[];\n}\n\nexport type ETFIdentifier = 'SP5C.PAR' | 'ESGE' | 'SUSA';\n\nexport interface IETFProperty {\n    identifier: string;\n    symbol: ETFIdentifier;\n    label: string;\n    value: string;\n    selected: boolean;\n}\n\ninterface IETFProperties {\n    [etfIdentifier: string]: IETFProperty;\n}\n\n/**\n * Singleton class that provided course and dividend forecasting of ETFs.\n * It uses [Alphavantage](https://www.alphavantage.co/) to load historic data which\n * are used by a linear regression model for forecasting.\n * The father the forecast day is in the future the more historic data is used to fit the linear regression.\n * The historic data needs to be loaded before a forecast can be done.\n * Dividends are accumulated and predicted per year.\n *\n * Example Code:\n * ```typescript\n * await ForecastModelSingleton.loadHistoricData(apiKey, etfProperties);\n * const instance = ForecastModelSingleton.getInstance();\n * const predictedCourse = instance.predictCourse(etfIdentifier, futureDate);\n * const predictedDividend = instance.predictCourse(etfIdentifier, futureYear);\n * ```\n */\nexport class ForecastModelSingleton {\n    private static instance: null | ForecastModelSingleton = null;\n    private static apiKey: string = '';\n    private static backCastTimestampConstant: number = 7;\n    private static backCastTimeFactor: number = 2;\n\n    private historicalData: IHistoricData = {};\n    private coursePredictors: IETFCoursePredictors = {};\n    private dividendPredictors: IETFDividendPredictors = {};\n\n    private constructor() {}\n\n    /**\n     * Configures the forecasting by setting the concerning values and resetting the present predictors.\n     *\n     * @param apiKey The [Alphavantage](https://www.alphavantage.co/) API Key.\n     * @param backCastTimeFactor Linear forecast factor. The number of dates used for prediction is increase linear towards this factor.\n     * @param backCastTimeConstant Constant forecast Offset. Constantly increases the number of dates used for prediction.\n     */\n    static configure(apiKey: string, backCastTimeFactor = 2, backCastTimeConstant = 7): void {\n        ForecastModelSingleton.apiKey = apiKey;\n        ForecastModelSingleton.backCastTimeFactor = backCastTimeFactor;\n\n        const backCastTimeDate = new Date(0);\n        backCastTimeDate.setMonth(backCastTimeConstant);\n        ForecastModelSingleton.backCastTimestampConstant = dateToTimestamp(backCastTimeDate);\n\n        // reset predictors if present.\n        if (ForecastModelSingleton.instance != null) {\n            const instance = ForecastModelSingleton.getInstance();\n            for (const etfIdentifier in instance.coursePredictors) {\n                instance.coursePredictors[\n                    etfIdentifier\n                ].maxTimestampBeforeCoursePredictorRepetition = ForecastModelSingleton._calculateTimestampForPredictorRepetition(\n                    instance.historicalData[etfIdentifier].courseForecastArray\n                );\n            }\n            for (const etfIdentifier in instance.dividendPredictors) {\n                instance.dividendPredictors[\n                    etfIdentifier\n                ].maxYearBeforeDividendPredictorRepetition = ForecastModelSingleton._calculateTimestampForPredictorRepetition(\n                    instance.historicalData[etfIdentifier].dividendForecastArray\n                );\n            }\n        }\n    }\n\n    /**\n     * Configures the Forecasting with the api key and default forecast values.\n     * Loads the historic data from all ETFs in the etfProperties.\n     *\n     * @param apiKey The [Alphavantage](https://www.alphavantage.co/) API Key.\n     * @param etfProperties The etfProperties.\n     */\n    static async loadHistoricData(apiKey: string, etfProperties: IETFProperties): Promise<void> {\n        ForecastModelSingleton.configure(apiKey);\n        const forecast = ForecastModelSingleton.getInstance();\n        for (const etfIdentifier in etfProperties) {\n            await forecast._loadAndCacheHistoricalETFData(etfProperties[etfIdentifier].symbol);\n        }\n        console.log('Finished loading the historic data.');\n    }\n\n    /**\n     * Returns the Singleton instance of this class.\n     *\n     * @returns The singleton instance.\n     */\n    static getInstance(): ForecastModelSingleton {\n        if (ForecastModelSingleton.instance == null) {\n            ForecastModelSingleton.instance = new ForecastModelSingleton();\n        }\n        return ForecastModelSingleton.instance;\n    }\n\n    /**\n     * Calculates the timestamp at which point all predictors are the same since they use all data points.\n     *\n     * @param forecastArray The concerning forecast array.\n     * @returns The timestamp where the repetition starts.\n     */\n    private static _calculateTimestampForPredictorRepetition(forecastArray: DataPoint[]): number {\n        const firstTimestamp = forecastArray[0][timestampIndexOfForecastArray];\n        const lastTimestamp = forecastArray[forecastArray.length - 1][timestampIndexOfForecastArray];\n        return lastTimestamp + (lastTimestamp - firstTimestamp) / ForecastModelSingleton.backCastTimeFactor;\n    }\n\n    /**\n     * Loads the historic data for the provided etfIdentifier and sets up the predictors.\n     *\n     * @param etfIdentifier The concerning ETFIdentifier.\n     * @returns -\n     */\n    private async _loadAndCacheHistoricalETFData(etfIdentifier: string): Promise<void> {\n        if (etfIdentifier in this.historicalData) {\n            return;\n        }\n        const historicalData = await loadHistoricalETFData(etfIdentifier, ForecastModelSingleton.apiKey);\n\n        const courseForecastArray = etfHistoricalToCourseForecastArray(historicalData);\n        const maxTimestampBeforeCoursePredictorRepetition = ForecastModelSingleton._calculateTimestampForPredictorRepetition(\n            courseForecastArray\n        );\n\n        const dividendForecastArray = etfHistoricalToDividendForecastArray(historicalData);\n        const maxYearBeforeDividendPredictorRepetition = ForecastModelSingleton._calculateTimestampForPredictorRepetition(\n            dividendForecastArray\n        );\n\n        this.historicalData[etfIdentifier] = {\n            history: historicalData,\n            courseForecastArray: courseForecastArray,\n            dividendForecastArray: dividendForecastArray,\n        };\n        this.coursePredictors[etfIdentifier] = {\n            maxTimestampBeforeCoursePredictorRepetition: maxTimestampBeforeCoursePredictorRepetition,\n            predictors: {},\n        };\n        this.dividendPredictors[etfIdentifier] = {\n            maxYearBeforeDividendPredictorRepetition: maxYearBeforeDividendPredictorRepetition,\n            predictors: {},\n        };\n    }\n\n    /**\n     * Creates the course predictor for the etfIdentifier and the given timestamp if not already present.\n     *\n     * @param etfIdentifier The concerning etfIdentifier.\n     * @param timestamp The concerning timestamp.\n     * @returns\n     */\n    private _createCoursePredictorIfNotPresent(etfIdentifier: string, timestamp: number) {\n        // Skip if already exists.\n        if (timestamp in this.coursePredictors[etfIdentifier]) {\n            return;\n        }\n        const forecastArray = this.historicalData[etfIdentifier].courseForecastArray;\n        const lastTimestampToIncludeInPrediction =\n            forecastArray[forecastArray.length - 1][timestampIndexOfForecastArray] -\n            Math.abs(forecastArray[forecastArray.length - 1][timestampIndexOfForecastArray] - timestamp) *\n                ForecastModelSingleton.backCastTimeFactor -\n            ForecastModelSingleton.backCastTimestampConstant;\n        const filteredForecastArray = forecastArray.filter(\n            entry => entry[timestampIndexOfForecastArray] >= lastTimestampToIncludeInPrediction\n        );\n        this.coursePredictors[etfIdentifier].predictors[timestamp] = regression.linear(filteredForecastArray, {\n            order: 2,\n            precision: 20,\n        });\n    }\n\n    /**\n     * Calculates the timestamp of the given date and the timestamp that should be used for the predictor.\n     * That means that the predictor timestamp is clamped to the timestamp where the predictor already uses all data points.\n     *\n     * @param date The concerning Date.\n     * @param etfIdentifier The concerning etfIdentifier.\n     * @returns The predictor timestamp and date timestamp.\n     */\n    private _courseDateToPredictorTimestampAndDateTimestamp(date: Date, etfIdentifier: string): [number, number] {\n        const timestamp = dateToTimestamp(date);\n        return [\n            timestamp > this.coursePredictors[etfIdentifier].maxTimestampBeforeCoursePredictorRepetition\n                ? this.coursePredictors[etfIdentifier].maxTimestampBeforeCoursePredictorRepetition\n                : timestamp,\n            timestamp,\n        ];\n    }\n\n    /**\n     * Creates the dividend predictor for the given etf and the year.\n     *\n     * @param etfIdentifier The concerning etfIdentifier.\n     * @param year The concerning year.\n     */\n    private _createDividendPredictorIfNotPresent(etfIdentifier: string, year: number): void {\n        // Skip if already exists.\n        if (year in this.dividendPredictors[etfIdentifier]) {\n            return;\n        }\n        const forecastArray = this.historicalData[etfIdentifier].dividendForecastArray;\n        const lastYearToIncludeInPrediction =\n            forecastArray[forecastArray.length - 1][timestampIndexOfForecastArray] -\n            Math.abs(forecastArray[forecastArray.length - 1][timestampIndexOfForecastArray] - year) *\n                ForecastModelSingleton.backCastTimeFactor -\n            ForecastModelSingleton.backCastTimestampConstant;\n        const filteredForecastArray = forecastArray.filter(\n            entry => entry[timestampIndexOfForecastArray] >= lastYearToIncludeInPrediction\n        );\n        this.dividendPredictors[etfIdentifier].predictors[year] = regression.linear(filteredForecastArray, {\n            order: 2,\n            precision: 20,\n        });\n    }\n\n    /**\n     * Clamps the given year to the year when all predictors would be the same\n     *  since all historic data of the given etf is already used.\n     *\n     * @param etfIdentifier The concerning etfIdentifier.\n     * @param year The concerning year.\n     * @returns The adjusted year.\n     */\n    private _dividendYearToPredictorYear(etfIdentifier: string, year: number): number {\n        return this.dividendPredictors[etfIdentifier].maxYearBeforeDividendPredictorRepetition < year\n            ? this.dividendPredictors[etfIdentifier].maxYearBeforeDividendPredictorRepetition\n            : year;\n    }\n\n    /**\n     * Predicts the course of the given ETF at the given date.\n     *\n     * @param etfIdentifier The concerning etfIdentifier\n     * @param date The concerning date.\n     * @returns The predicted course of the etf.\n     */\n    predictCourse(etfIdentifier: string, date: Date) {\n        if (!(etfIdentifier in this.coursePredictors)) {\n            throw generateHistoricalDataNotPresentException(etfIdentifier);\n        }\n        const [predictorTimestamp, timestamp] = this._courseDateToPredictorTimestampAndDateTimestamp(\n            date,\n            etfIdentifier\n        );\n        this._createCoursePredictorIfNotPresent(etfIdentifier, predictorTimestamp);\n        return this.coursePredictors[etfIdentifier].predictors[predictorTimestamp].predict(timestamp)[\n            courseIndexOfForecastArray\n        ];\n    }\n\n    /**\n     * Predicts the dividend amount of the given ETF at the given year.\n     *\n     * @param etfIdentifier The concerning etfIdentifier\n     * @param year The concerning year.\n     * @returns The predicted dividend amount of the etf.\n     */\n    predictDividend(etfIdentifier: string, year: number) {\n        if (!(etfIdentifier in this.dividendPredictors)) {\n            throw generateHistoricalDataNotPresentException(etfIdentifier);\n        }\n        const predictorYear = this._dividendYearToPredictorYear(etfIdentifier, year);\n        this._createDividendPredictorIfNotPresent(etfIdentifier, predictorYear);\n        return Math.max(\n            0,\n            this.dividendPredictors[etfIdentifier].predictors[predictorYear].predict(year)[courseIndexOfForecastArray]\n        );\n    }\n}\n","import { ForecastModelSingleton, ETFIdentifier } from './ForecastModel';\nimport { numberOfMonthsOfAYear, isLastMonthOfAYear, clamp, isFirstMonthOfAYear } from '../helpers/utils';\nimport cloneDeep from 'lodash.clonedeep';\n\nimport { ICostConfiguration, IConfigOptions } from '../components/Visualization';\n\ntype ETFShares = { [key in ETFIdentifier]: number };\n\nexport type ETFRatio = { [key in ETFIdentifier]?: number };\n\nexport type NegativeInvestmentStepIdentifier = 'totalCosts' | 'totalTaxes' | 'inflation';\n\nexport interface InvestmentStep {\n    date: Date;\n    newShares: ETFShares;\n    totalShares: ETFShares;\n    dividendNewShares: ETFShares;\n    dividendTotalShares: ETFShares;\n    totalCosts: number;\n    sharePrizes: ETFShares;\n    totalInvestedMoney: ETFShares;\n    newInvestedMoney: ETFShares;\n    newInvestment: number;\n    totalTaxes: number;\n    totalPayout: ETFShares;\n    newPayout: ETFShares;\n    inflation: number;\n}\n\ntype IPayoutStats = { [key in ETFIdentifier]: IPayoutStat };\n\ninterface IPayoutStat {\n    investmentStepsIdx: number;\n    alreadySoldShares: number;\n}\n\nconst basicRateOfInterest = 0.007;\nconst partialExemption = 0.7;\nconst corporateTaxRatio = 0.26375;\nconst inflationRate = 0.01;\nconst defaultDividendAmount = 0.025;\n\n/**\n * Calculates the currency value of all shares of the etf for the given investment step.\n *\n * @param etfIdentifier The concerning etfIdentifier.\n * @param investmentStep The concerning InvestmentStep.\n * @returns The currency value of the total shares of the specified etf.\n */\nexport function getTotalShareValue(etfIdentifier: ETFIdentifier, investmentStep: InvestmentStep): number {\n    return investmentStep.totalShares[etfIdentifier] * investmentStep.sharePrizes[etfIdentifier];\n}\n\n/**\n * Calculates the currency value of all shares generated by dividends of the etf for the given investment step.\n *\n * @param etfIdentifier The concerning etfIdentifier.\n * @param investmentStep The concerning InvestmentStep.\n * @returns The currency value of the total shares generated by dividends. of the specified etf.\n */\nexport function getTotalDividendShareValue(etfIdentifier: ETFIdentifier, investmentStep: InvestmentStep): number {\n    return investmentStep.dividendTotalShares[etfIdentifier] * investmentStep.sharePrizes[etfIdentifier];\n}\n\n/**\n * Calculates the currency value of new shares of the etf for the given investment step.\n *\n * @param etfIdentifier The concerning etfIdentifier.\n * @param investmentStep The concerning InvestmentStep.\n * @returns The currency value of the new shares of the specified etf.\n */\nfunction getNewShareValue(etfIdentifier: ETFIdentifier, investmentStep: InvestmentStep): number {\n    return investmentStep.newShares[etfIdentifier] * investmentStep.sharePrizes[etfIdentifier];\n}\n\n/**\n * Creates a new date which is the given date + 1 month.\n *\n * @param date The concerning date.\n * @returns The given date increased by one month.\n */\nfunction getNextMonthDate(date: Date): Date {\n    const newDate = new Date(date);\n    newDate.setMonth(date.getMonth() + 1);\n    return newDate;\n}\n\n/**\n * Predicts the dividend for the etf at the given date.\n * If the date is not the last month of a year, zero is returned. Indicating that no divided payout has been done.\n * If the dividend prediction is 0 since all historic data is 0, then the defaultDividendAmount is used.\n *\n * @param etfIdentifier The concerning etfIdentifier.\n * @param date The concerning date.\n * @returns The predicted dividend for the given etf and date.\n */\nfunction calculateDividend(etfIdentifier: string, date: Date): number {\n    if (!isLastMonthOfAYear(date)) {\n        return 0;\n    } else {\n        const dividendAmount = ForecastModelSingleton.getInstance().predictDividend(etfIdentifier, date.getFullYear());\n        const sharePrize = ForecastModelSingleton.getInstance().predictCourse(etfIdentifier, date);\n        return dividendAmount > 0 ? dividendAmount : defaultDividendAmount * sharePrize;\n    }\n}\n\n/**\n * Calculates the cost for the given money amount regarding the cost configuration.\n *\n * @param amount The amount of money to which the costs need to be applied.\n * @param costConfiguration The cost configuration consisting of fixed and percentage costs.\n * @returns The amount minus the costs and the costs itself.\n */\nfunction calculateCosts(amount: number, costConfiguration: ICostConfiguration): [number, number] {\n    let costs = amount * costConfiguration.percentageCosts + costConfiguration.fixedCosts;\n    const amountWithoutCosts = Math.max(amount - costs, 0);\n    costs = amount - amountWithoutCosts;\n    return [amountWithoutCosts, costs];\n}\n\n/**\n * Subtracts the tax free amount from the tax amount and\n * returns the resulting leftover taxes and tax free amount.\n *\n * @param taxAmount The amount of taxes that need to be paid.\n * @param taxFreeAmount The tax free amount that is left and can be used.\n * @returns The leftover taxes and tax free amount.\n */\nfunction subtractTaxFreeGain(taxAmount: number, taxFreeAmount: number): [number, number] {\n    const leftoverTaxes = Math.max(0, taxAmount - taxFreeAmount);\n    const leftoverTaxFreeAmount = Math.max(0, taxFreeAmount - taxAmount);\n    return [leftoverTaxes, leftoverTaxFreeAmount];\n}\n\nfunction sumOfTotalValues(investmentStep: InvestmentStep): number {\n    let sum = 0;\n    for (const etfIdentifier of Object.keys(investmentStep.totalShares) as ETFIdentifier[]) {\n        sum += getTotalShareValue(etfIdentifier, investmentStep);\n    }\n    return sum;\n}\n\n/**\n * Calculates and adds the amount of effective money loss caused by inflation\n * between the initialDate and the date of the investment step.\n *\n * @param investmentStep The concerning investmentStep.\n * @param initialDate The initial date of the whole investment model.\n */\nfunction calculateAndAddInflation(investmentStep: InvestmentStep, initialDate: Date): void {\n    const sumTotalValues = sumOfTotalValues(investmentStep);\n    const date = investmentStep.date;\n    const timeFactor =\n        date.getFullYear() -\n        initialDate.getFullYear() +\n        (date.getMonth() - initialDate.getMonth()) / numberOfMonthsOfAYear;\n    investmentStep.inflation = sumTotalValues - sumTotalValues * Math.pow(1 - inflationRate, timeFactor);\n}\n\n/**\n * Calculates the amount increase in a accumulative fashion for every passed year.\n *\n * @param amount The initial amount.\n * @param percentageIncrease The percentage increase of the amount per year.\n * @param numberOfMonths The number of months passed since the investment model start.\n * @returns The amount increased by the percentage for every passed year in an accumulative way.\n */\nfunction calculateAmountIncrease(amount: number, percentageIncrease: number, numberOfMonths: number): number {\n    const yearsSinceStart = Math.floor(numberOfMonths / numberOfMonthsOfAYear);\n    return amount * Math.pow(1 + percentageIncrease, yearsSinceStart);\n}\n\n/**\n * Calculates the forecast interval of the model and all necessary dates.\n * Divides the interval in saving and payout phase. Adds the fade out years\n * to the life expectation to indicate that death is expected in that phase.\n *\n * @param age The age of the person.\n * @param lifeExpectation The life expectation of the person.\n * @param savingPhaseLength The saving phase length of the person.\n * @param fadeOutYears The length of the fade out years.\n * @returns The three dates indicating the start of the saving phase, the start of the payout phase and the end of the payout phase.\n */\nfunction calculateForecastInterval(\n    age: number,\n    lifeExpectation: number,\n    savingPhaseLength: number,\n    fadeOutYears: number = 10\n): [Date, Date, Date] {\n    const yearsLeft = lifeExpectation - age;\n    const now = new Date();\n    const beginningDate = new Date(now.getFullYear(), now.getMonth() + 1);\n    // start next month.\n    const endSavingPhaseDate = new Date(beginningDate);\n    endSavingPhaseDate.setFullYear(beginningDate.getFullYear() + savingPhaseLength);\n    const endDate = new Date(beginningDate);\n    endDate.setFullYear(beginningDate.getFullYear() + yearsLeft + fadeOutYears);\n    return [beginningDate, endSavingPhaseDate, endDate];\n}\n\n/**\n * Calculates the Vorabpauschale for the last year. Thus is zero if the month is not January.\n *\n * @param investmentSteps All investmentSteps already calculated for the model.\n * @param date The date of the concerning investment step.\n * @param leftoverTaxFreeAmount The leftover tax free amount.\n * @param etfToRatio The etfIdentifier mapping to the ratio.\n * @returns The amount of taxes to pay and the leftover tax free amount.\n */\nfunction calculateVorabpauschaleTaxes(\n    investmentSteps: InvestmentStep[],\n    date: Date,\n    leftoverTaxFreeAmount: number,\n    etfToRatio: ETFRatio\n): [number, number] {\n    if (!isFirstMonthOfAYear(date) || investmentSteps.length < 2) {\n        return [0, leftoverTaxFreeAmount];\n    }\n    let summedTaxes = 0;\n    const decemberInvestmentStep = investmentSteps[investmentSteps.length - 1];\n    // Use the second investment step if there are not enough meaning the investing started this year after january.\n    // The second is the true first investment step the first is a dummy.\n    const firstInvestmentStepOfThisYear =\n        investmentSteps.length - numberOfMonthsOfAYear > 1\n            ? investmentSteps[investmentSteps.length - numberOfMonthsOfAYear]\n            : investmentSteps[1];\n    for (const etfIdentifier of Object.keys(etfToRatio) as ETFIdentifier[]) {\n        // Sum up total Investment of the first date of this year.\n        let accumulatedBasicProfit =\n            (getTotalShareValue(etfIdentifier, firstInvestmentStepOfThisYear) *\n                (numberOfMonthsOfAYear - firstInvestmentStepOfThisYear.date.getMonth())) /\n            numberOfMonthsOfAYear;\n        // Sum up all new investments from february to december.\n        for (let i = 1; i < numberOfMonthsOfAYear && investmentSteps.length - i > 0; i++) {\n            const currentInvestmentStep = investmentSteps[investmentSteps.length - i];\n            accumulatedBasicProfit +=\n                (getNewShareValue(etfIdentifier, currentInvestmentStep) * i) / numberOfMonthsOfAYear;\n        }\n        accumulatedBasicProfit *= 0.7 * basicRateOfInterest;\n        const currentShareValues = getTotalShareValue(etfIdentifier, decemberInvestmentStep);\n        // Calculate profit of last year.\n        const profitOverAllTime = currentShareValues - decemberInvestmentStep.totalInvestedMoney[etfIdentifier];\n        let profitOfPreviousYears = 0;\n        if (investmentSteps.length > numberOfMonthsOfAYear) {\n            profitOfPreviousYears = Math.max(\n                0,\n                getTotalShareValue(etfIdentifier, investmentSteps[investmentSteps.length - 1 - numberOfMonthsOfAYear]) -\n                    investmentSteps[investmentSteps.length - 1 - numberOfMonthsOfAYear].totalInvestedMoney[\n                        etfIdentifier\n                    ]\n            );\n        }\n\n        const profitOfThisYear = profitOverAllTime - profitOfPreviousYears;\n        let amountToApplyTaxes = clamp(profitOfThisYear, 0, accumulatedBasicProfit);\n        [amountToApplyTaxes, leftoverTaxFreeAmount] = subtractTaxFreeGain(amountToApplyTaxes, leftoverTaxFreeAmount);\n        summedTaxes += amountToApplyTaxes * partialExemption * corporateTaxRatio;\n    }\n    return [summedTaxes, leftoverTaxFreeAmount];\n}\n\n/**\n * Adds an accumulating month to the investment model.\n *\n * @param investmentSteps The whole investment model.\n * @param investment The amount of money to invest this month.\n * @param date The date of the new investment step.\n * @param initialDate The initial date of the investment model.\n * @param etfToRatio The etfIdentifier mapping to the ratio.\n * @param configOptions The configuration options containing the tax free amount and cost configuration.\n */\nfunction addAccumulationMonth(\n    investmentSteps: InvestmentStep[],\n    investment: number,\n    date: Date,\n    initialDate: Date,\n    etfToRatio: ETFRatio,\n    configOptions: IConfigOptions\n): void {\n    const forecast = ForecastModelSingleton.getInstance();\n    let costs = 0;\n    const prevInvestmentStep = investmentSteps[investmentSteps.length - 1];\n    const newInvestmentStep: InvestmentStep = {\n        date: date,\n        newShares: { ...prevInvestmentStep.newShares },\n        totalShares: { ...prevInvestmentStep.totalShares },\n        dividendNewShares: { ...prevInvestmentStep.dividendNewShares },\n        dividendTotalShares: { ...prevInvestmentStep.dividendTotalShares },\n        totalCosts: prevInvestmentStep.totalCosts,\n        sharePrizes: { ...prevInvestmentStep.sharePrizes },\n        totalInvestedMoney: { ...prevInvestmentStep.totalInvestedMoney },\n        newInvestedMoney: { ...prevInvestmentStep.newInvestedMoney },\n        newInvestment: 0,\n        totalTaxes: prevInvestmentStep.totalTaxes,\n        totalPayout: { ...prevInvestmentStep.totalPayout },\n        newPayout: { ...prevInvestmentStep.newPayout },\n        inflation: 0,\n    };\n    for (const etfIdentifier of Object.keys(etfToRatio) as ETFIdentifier[]) {\n        // Handle investment amount and costs.\n        const investmentOfEtfWithCosts = (etfToRatio[etfIdentifier] as number) * investment;\n        newInvestmentStep.newInvestment += investmentOfEtfWithCosts;\n        const [investmentOfEtfWithoutCosts, newCosts] = calculateCosts(\n            investmentOfEtfWithCosts,\n            configOptions.costConfig\n        );\n        costs += newCosts;\n        newInvestmentStep.newInvestedMoney[etfIdentifier] = investmentOfEtfWithoutCosts;\n        newInvestmentStep.totalInvestedMoney[etfIdentifier] += investmentOfEtfWithoutCosts;\n\n        // Handle new shares and prize.\n        const etfSharePrize = forecast.predictCourse(etfIdentifier, date);\n        const newShares = investmentOfEtfWithoutCosts / etfSharePrize;\n        newInvestmentStep.sharePrizes[etfIdentifier] = etfSharePrize;\n        newInvestmentStep.newShares[etfIdentifier] = newShares;\n\n        // Handle dividend.\n        const dividendPayoutMoneyPerShare = calculateDividend(etfIdentifier, date);\n        const dividendPayoutMoney = newInvestmentStep.totalShares[etfIdentifier] * dividendPayoutMoneyPerShare;\n        const newSharesByDividend = dividendPayoutMoney / etfSharePrize;\n        newInvestmentStep.newShares[etfIdentifier] += newSharesByDividend;\n        newInvestmentStep.dividendNewShares[etfIdentifier] = newSharesByDividend;\n        newInvestmentStep.dividendTotalShares[etfIdentifier] += newSharesByDividend;\n\n        // Adjust other values.\n        newInvestmentStep.totalShares[etfIdentifier] += newInvestmentStep.newShares[etfIdentifier];\n        newInvestmentStep.newPayout[etfIdentifier] = 0;\n    }\n\n    // Handle costs, taxes and inflation.\n    newInvestmentStep.totalCosts += costs;\n    const [newTaxes] = calculateVorabpauschaleTaxes(investmentSteps, date, configOptions.taxFreeAmount, etfToRatio);\n    newInvestmentStep.totalTaxes += newTaxes;\n    calculateAndAddInflation(newInvestmentStep, initialDate);\n    investmentSteps.push(newInvestmentStep);\n}\n\n/**\n * Adds a payout month step to the investment model.\n *\n * @param investmentSteps The whole investment model.\n * @param sellingAmount The money amount of shares to sell this month.\n * @param etfToRatio The etfIdentifier mapping to the ratio.\n * @param date The date of the new payout step.\n * @param initialDate The initial date of the investment model.\n * @param configOptions The configuration options containing the tax free amount and cost configuration.\n * @param leftoverAlreadyPaidTaxes The leftover amount of taxes that have already been paid.\n * @param leftoverTaxFreeAmount The leftover tax free amount.\n * @param payoutStats The payout stats containing which investment step is next and what shares are left according to the FIFO principle.\n * @returns The updated leftoverAlreadyPaidTaxes and leftoverTaxFreeAmount.\n */\nfunction addPayoutMonth(\n    investmentSteps: InvestmentStep[],\n    sellingAmount: number,\n    etfToRatio: ETFRatio,\n    date: Date,\n    initialDate: Date,\n    configOptions: IConfigOptions,\n    leftoverAlreadyPaidTaxes: number,\n    leftoverTaxFreeAmount: number,\n    payoutStats: IPayoutStats\n) {\n    if (isFirstMonthOfAYear(date)) {\n        leftoverTaxFreeAmount = configOptions.taxFreeAmount;\n    }\n    const forecast = ForecastModelSingleton.getInstance();\n    let costs = 0;\n    let taxes = 0;\n    const prevInvestmentStep = investmentSteps[investmentSteps.length - 1];\n    const newInvestmentStep: InvestmentStep = {\n        date: date,\n        newShares: { ...prevInvestmentStep.newShares },\n        totalShares: { ...prevInvestmentStep.totalShares },\n        dividendNewShares: { ...prevInvestmentStep.dividendNewShares },\n        dividendTotalShares: { ...prevInvestmentStep.dividendTotalShares },\n        totalCosts: prevInvestmentStep.totalCosts,\n        sharePrizes: { ...prevInvestmentStep.sharePrizes },\n        totalInvestedMoney: { ...prevInvestmentStep.totalInvestedMoney },\n        newInvestedMoney: { ...prevInvestmentStep.newInvestedMoney },\n        newInvestment: 0,\n        totalTaxes: prevInvestmentStep.totalTaxes,\n        totalPayout: { ...prevInvestmentStep.totalPayout },\n        newPayout: { ...prevInvestmentStep.newPayout },\n        inflation: 0,\n    };\n    for (const etfIdentifier of Object.keys(etfToRatio) as ETFIdentifier[]) {\n        const etfSharePrize = forecast.predictCourse(etfIdentifier, date);\n        // Set default values.\n        newInvestmentStep.sharePrizes[etfIdentifier] = etfSharePrize;\n        newInvestmentStep.newPayout[etfIdentifier] = 0;\n        newInvestmentStep.newInvestedMoney[etfIdentifier] = 0;\n        // Skip payout if there are no shares left to sell.\n        if (payoutStats[etfIdentifier].investmentStepsIdx < investmentSteps.length) {\n            // Prepare amount and costs.\n            const amountToSell = (etfToRatio[etfIdentifier] as number) * sellingAmount;\n            let amountAlreadySold = 0;\n            const costsToPay = calculateCosts(amountToSell, configOptions.costConfig)[1];\n            let alreadyPaidCosts = 0;\n            let payoutInvestmentStepIdxForFIFO = payoutStats[etfIdentifier].investmentStepsIdx;\n            let currentSharesLeft =\n                investmentSteps[payoutInvestmentStepIdxForFIFO].newShares[etfIdentifier] -\n                payoutStats[etfIdentifier].alreadySoldShares;\n            // Iterate over all investment steps according to the FIFO principle and sell as much shares as needed.\n            for (; payoutInvestmentStepIdxForFIFO < investmentSteps.length; payoutInvestmentStepIdxForFIFO++) {\n                const currentInvestmentStepForFIFO = investmentSteps[payoutInvestmentStepIdxForFIFO];\n                const leftoverAmountToSell = amountToSell - amountAlreadySold;\n\n                // Calculate the amount of shares to sell and the leftover shares.\n                const currentValueOfShares =\n                    etfSharePrize *\n                    (payoutInvestmentStepIdxForFIFO === payoutStats[etfIdentifier].investmentStepsIdx\n                        ? currentInvestmentStepForFIFO.newShares[etfIdentifier] -\n                          payoutStats[etfIdentifier].alreadySoldShares\n                        : currentInvestmentStepForFIFO.newShares[etfIdentifier]);\n                const amountToSellWithCosts = Math.min(currentValueOfShares, leftoverAmountToSell);\n                const amountOfSharesToSell = amountToSellWithCosts / etfSharePrize;\n                currentSharesLeft = currentInvestmentStepForFIFO.newShares[etfIdentifier] - amountOfSharesToSell;\n                currentSharesLeft -=\n                    payoutInvestmentStepIdxForFIFO === payoutStats[etfIdentifier].investmentStepsIdx\n                        ? payoutStats[etfIdentifier].alreadySoldShares\n                        : 0;\n\n                // Apply costs to the sold shares.\n                const amountToSellWithoutCosts = Math.max(0, amountToSellWithCosts - (costsToPay - alreadyPaidCosts));\n                alreadyPaidCosts += Math.max(0, amountToSellWithCosts - amountToSellWithoutCosts);\n\n                // Calculate amount on which taxes need to be paid.\n                const initialValueOfShares =\n                    amountOfSharesToSell * currentInvestmentStepForFIFO.sharePrizes[etfIdentifier];\n                let amountToPayTaxes = Math.max(0, amountToSellWithoutCosts - initialValueOfShares);\n\n                // Apply taxes.\n                [amountToPayTaxes, leftoverTaxFreeAmount] = subtractTaxFreeGain(\n                    amountToPayTaxes,\n                    leftoverTaxFreeAmount\n                );\n                let taxesToPay = amountToPayTaxes * partialExemption * corporateTaxRatio;\n                [taxesToPay, leftoverAlreadyPaidTaxes] = subtractTaxFreeGain(taxesToPay, leftoverAlreadyPaidTaxes);\n                taxes += taxesToPay;\n                const payoutAmount = amountToSellWithoutCosts - taxesToPay;\n\n                // Set resulting values.\n                newInvestmentStep.newPayout[etfIdentifier] += payoutAmount;\n                newInvestmentStep.totalPayout[etfIdentifier] += payoutAmount;\n\n                newInvestmentStep.totalShares[etfIdentifier] -= amountOfSharesToSell;\n                amountAlreadySold += amountToSellWithCosts;\n\n                // Handle the decrease of the dividendShares.\n                let amountOfDividendSharesLeft = 0;\n                if (payoutInvestmentStepIdxForFIFO === payoutStats[etfIdentifier].investmentStepsIdx) {\n                    amountOfDividendSharesLeft = Math.max(\n                        0,\n                        currentInvestmentStepForFIFO.dividendNewShares[etfIdentifier] -\n                            payoutStats[etfIdentifier].alreadySoldShares\n                    );\n                } else {\n                    amountOfDividendSharesLeft = currentInvestmentStepForFIFO.dividendNewShares[etfIdentifier];\n                }\n                const amountOfDividendSharesSold = Math.min(amountOfDividendSharesLeft, amountOfSharesToSell);\n                newInvestmentStep.dividendTotalShares[etfIdentifier] -= amountOfDividendSharesSold;\n\n                // Use break in order to not change the value of payoutInvestmentStepIdxForFIFO.\n                if (amountAlreadySold >= amountToSell) {\n                    break;\n                }\n            }\n            // Handle update payoutStats.\n            costs += alreadyPaidCosts;\n            payoutStats[etfIdentifier].investmentStepsIdx = payoutInvestmentStepIdxForFIFO;\n            payoutStats[etfIdentifier].investmentStepsIdx += currentSharesLeft === 0 ? 1 : 0;\n\n            payoutStats[etfIdentifier].alreadySoldShares =\n                payoutInvestmentStepIdxForFIFO < investmentSteps.length\n                    ? investmentSteps[payoutInvestmentStepIdxForFIFO].newShares[etfIdentifier] - currentSharesLeft\n                    : 0;\n        }\n        // Handle dividend.\n        const dividendPayoutMoney =\n            newInvestmentStep.totalShares[etfIdentifier] * calculateDividend(etfIdentifier, date);\n        const newSharesByDividend = dividendPayoutMoney / etfSharePrize;\n        newInvestmentStep.newShares[etfIdentifier] = newSharesByDividend;\n        newInvestmentStep.totalShares[etfIdentifier] += newSharesByDividend;\n        newInvestmentStep.dividendNewShares[etfIdentifier] = newSharesByDividend;\n        newInvestmentStep.dividendTotalShares[etfIdentifier] += newSharesByDividend;\n\n        // Handle Vorabpauschale.\n        const [newTaxes, newLeftoverTaxFreeAmount] = calculateVorabpauschaleTaxes(\n            investmentSteps,\n            date,\n            leftoverTaxFreeAmount,\n            etfToRatio\n        );\n        leftoverTaxFreeAmount = newLeftoverTaxFreeAmount;\n        taxes += newTaxes;\n        leftoverAlreadyPaidTaxes += newTaxes;\n    }\n\n    // Set resulting values and inflation.\n    newInvestmentStep.totalCosts += costs;\n    newInvestmentStep.totalTaxes += taxes;\n    calculateAndAddInflation(newInvestmentStep, initialDate);\n    investmentSteps.push(newInvestmentStep);\n    return [leftoverAlreadyPaidTaxes, leftoverTaxFreeAmount];\n}\n\n/**\n * Creates a dummy investment step intended to be the first investment step in the model\n * in order to avoid if statements in the other investment methods checking whether this is the first step or not.\n *\n * @param etfToRatio The etfIdentifier mapping to the ratio.\n * @param date The starting date of the investment model.\n * @returns A dummy investment step.\n */\nfunction generateEmptyInvestmentStep(etfToRatio: ETFRatio, date: Date): InvestmentStep {\n    const forecast = ForecastModelSingleton.getInstance();\n    const dummyData: ETFShares = { 'SP5C.PAR': 0, ESGE: 0, SUSA: 0 };\n    const emptyInvestmentStep: InvestmentStep = {\n        date: date,\n        totalCosts: 0,\n        totalTaxes: 0,\n        newShares: { ...dummyData },\n        totalShares: { ...dummyData },\n        dividendNewShares: { ...dummyData },\n        dividendTotalShares: { ...dummyData },\n        totalInvestedMoney: { ...dummyData },\n        totalPayout: { ...dummyData },\n        newPayout: { ...dummyData },\n        sharePrizes: { ...dummyData },\n        newInvestedMoney: { ...dummyData },\n        newInvestment: 0,\n        inflation: 0,\n    };\n    for (const etfIdentifier of Object.keys(etfToRatio) as ETFIdentifier[]) {\n        emptyInvestmentStep.newShares[etfIdentifier] = 0;\n        emptyInvestmentStep.totalShares[etfIdentifier] = 0;\n        emptyInvestmentStep.dividendNewShares[etfIdentifier] = 0;\n        emptyInvestmentStep.dividendTotalShares[etfIdentifier] = 0;\n        emptyInvestmentStep.totalInvestedMoney[etfIdentifier] = 0;\n        emptyInvestmentStep.totalPayout[etfIdentifier] = 0;\n        emptyInvestmentStep.newPayout[etfIdentifier] = 0;\n        emptyInvestmentStep.newInvestedMoney[etfIdentifier] = 0;\n        emptyInvestmentStep.sharePrizes[etfIdentifier] = forecast.predictCourse(etfIdentifier, date);\n    }\n    return emptyInvestmentStep;\n}\n\n/**\n * Creates the investment model for the visualization which consists of arrays of an object\n *  which contain all important values for the visualization.\n * It can deliver the model with different levels of detail meaning that one step covers more than one month.\n *\n * Example code:\n * ```typescript\n * const investmentModel = new InvestmentModel(...uiParams);\n * // 2 => every investment step will cover 6 Months.\n * const dataVorTheVisualization = investmentModel.getInvestmentSteps(2);\n * ```\n */\nexport class InvestmentModel {\n    private startCapital: number;\n    private monthlyInvestment: number;\n    private yearlyInvestmentIncrease: number;\n    private monthlyPayout: number;\n    private yearlyPayoutIncrease: number;\n    private savingPhaseLength: number;\n    private etfToRatio: ETFRatio;\n    private configOptions: IConfigOptions;\n    private expectationOfLife: number;\n    private age: number;\n\n    private savingDates: Date[] = [];\n    private payoutDates: Date[] = [];\n    private initialDate: Date = new Date();\n    private investmentSteps: InvestmentStep[] = [];\n\n    /**\n     * Constructs and calculates the investment model.\n     *\n     * @param startCapital The starting capital.\n     * @param monthlyInvestment The monthly investment.\n     * @param yearlyInvestmentIncrease The yearly investment increase given as a percentage in float representation.\n     * @param monthlyPayout The monthly payout.\n     * @param yearlyPayoutIncrease The yearly payout increase given as a percentage in float representation.\n     * @param savingPhaseLength The length of the saving phase.\n     * @param etfToRatio The etfIdentifier mapping to the ratio.\n     * @param configOptions The config options containing the tax free amount and cost configuration.\n     * @param age The current age of the person.\n     * @param expectationOfLife The life expectation of the person.\n     */\n    constructor(\n        startCapital: number,\n        monthlyInvestment: number,\n        yearlyInvestmentIncrease: number,\n        monthlyPayout: number,\n        yearlyPayoutIncrease: number,\n        savingPhaseLength: number,\n        etfToRatio: ETFRatio,\n        configOptions: IConfigOptions,\n        age: number,\n        expectationOfLife: number\n    ) {\n        this.startCapital = startCapital;\n        this.monthlyInvestment = monthlyInvestment;\n        this.monthlyPayout = monthlyPayout;\n        this.savingPhaseLength = savingPhaseLength;\n        this.etfToRatio = etfToRatio;\n        this.configOptions = configOptions;\n        this.expectationOfLife = expectationOfLife;\n        this.age = age;\n        this.yearlyInvestmentIncrease = yearlyInvestmentIncrease;\n        this.yearlyPayoutIncrease = yearlyPayoutIncrease;\n\n        this._calculateDatesForModel();\n        this._calculateModel();\n    }\n\n    /**\n     * Calculates all necessary dates for the saving and payout phase.\n     */\n    private _calculateDatesForModel() {\n        const [startDate, endSavingPhaseDate, endDate] = calculateForecastInterval(\n            this.age,\n            this.expectationOfLife,\n            this.savingPhaseLength\n        );\n        const savingDates = [];\n        for (\n            let currentDate = startDate;\n            currentDate < endSavingPhaseDate;\n            currentDate = getNextMonthDate(currentDate)\n        ) {\n            savingDates.push(currentDate);\n        }\n        this.savingDates = savingDates;\n        const payoutDates = [];\n        for (let currentDate = endSavingPhaseDate; currentDate < endDate; currentDate = getNextMonthDate(currentDate)) {\n            payoutDates.push(currentDate);\n        }\n        this.payoutDates = payoutDates;\n        this.initialDate = startDate;\n    }\n\n    /**\n     * Calculates the investment model by first adding all investment and the payout dates.\n     */\n    private _calculateModel() {\n        let investmentSteps = [generateEmptyInvestmentStep(this.etfToRatio, this.savingDates[0])];\n        addAccumulationMonth(\n            investmentSteps,\n            this.monthlyInvestment + this.startCapital,\n            this.savingDates[0],\n            this.initialDate,\n            this.etfToRatio,\n            this.configOptions\n        );\n        for (let i = 1; i < this.savingDates.length; i++) {\n            const investmentAmount = calculateAmountIncrease(this.monthlyInvestment, this.yearlyInvestmentIncrease, i);\n            addAccumulationMonth(\n                investmentSteps,\n                investmentAmount,\n                this.savingDates[i],\n                this.initialDate,\n                this.etfToRatio,\n                this.configOptions\n            );\n        }\n        // Discard the empty investment step.\n        investmentSteps = investmentSteps.slice(1);\n\n        let leftoverAlreadyPaidTaxes = investmentSteps[investmentSteps.length - 1].totalTaxes;\n        let leftoverTaxFreeAmount = this.configOptions.taxFreeAmount;\n        const payoutStats: IPayoutStats = {\n            'SP5C.PAR': { investmentStepsIdx: 0, alreadySoldShares: 0 },\n            ESGE: { investmentStepsIdx: 0, alreadySoldShares: 0 },\n            SUSA: { investmentStepsIdx: 0, alreadySoldShares: 0 },\n        };\n        for (let i = 0; i < this.payoutDates.length; i++) {\n            const payoutAmount = calculateAmountIncrease(this.monthlyPayout, this.yearlyPayoutIncrease, i);\n            [leftoverAlreadyPaidTaxes, leftoverTaxFreeAmount] = addPayoutMonth(\n                investmentSteps,\n                payoutAmount,\n                this.etfToRatio,\n                this.payoutDates[i],\n                this.initialDate,\n                this.configOptions,\n                leftoverAlreadyPaidTaxes,\n                leftoverTaxFreeAmount,\n                payoutStats\n            );\n        }\n        this.investmentSteps = investmentSteps;\n    }\n\n    /**\n     * Returns the investment model with the given level of detail.\n     *\n     * numberOfEntriesPerYear = 1 will result in one investment Step per year and\n     * numberOfEntriesPerYear = 12 will change nothing on the model.\n     *\n     * NOTE: Only the newInvestment and newPayout values are adjusted when investment steps need to be merged\n     * since the current visualizations need no further adjustments.\n     *\n     * @param numberOfEntriesPerYear The number of investment steps per year.\n     * @returns\n     */\n    getInvestmentSteps(numberOfEntriesPerYear: number) {\n        if (!Number.isInteger(numberOfMonthsOfAYear / numberOfEntriesPerYear)) {\n            throw new Error(\n                `The numberOfEntriesPerYear need to be dividable by ${numberOfMonthsOfAYear} in order to make sense.`\n            );\n        }\n\n        if (numberOfEntriesPerYear === numberOfMonthsOfAYear) {\n            return this.investmentSteps;\n        }\n        const selectedInvestmentSteps = [];\n        const numberOfMonthsToMerge = numberOfMonthsOfAYear / numberOfEntriesPerYear;\n        for (let i = 0; i < this.investmentSteps.length; i += numberOfMonthsToMerge) {\n            // Take the start date of the period as the representation.\n            const adjustedInvestmentStep = cloneDeep(this.investmentSteps[i]);\n            for (let offset = 1; offset < numberOfMonthsToMerge; offset++) {\n                adjustedInvestmentStep.newInvestment += this.investmentSteps[i + offset].newInvestment;\n                for (const etfIdentifier of Object.keys(\n                    this.investmentSteps[i + offset].newPayout\n                ) as ETFIdentifier[]) {\n                    adjustedInvestmentStep.newPayout[etfIdentifier] += this.investmentSteps[i + offset].newPayout[\n                        etfIdentifier\n                    ];\n                }\n            }\n            selectedInvestmentSteps.push(adjustedInvestmentStep);\n        }\n        return selectedInvestmentSteps;\n    }\n\n    /**\n     * Returns the first payout date of the model.\n     * @returns The first payoutDate.\n     */\n    getPayoutPhaseBeginDate() {\n        return this.payoutDates[0];\n    }\n}\n","import * as d3 from 'd3';\nimport { roundDateToBeginningOfMonth, numberOfMonthsOfAYear } from '../helpers/utils';\nimport { InvestmentStep } from '../model/InvestmentModel';\n\ninterface ITextProperty {\n    text: string;\n    x: number;\n    y: number;\n    fontSize: number;\n    fontFamily: string | null;\n    textAnchor: string;\n    fontWeight: string;\n    color: string;\n}\n\ninterface ITextProperties {\n    [textIdentifier: string]: ITextProperty;\n}\n\nexport interface DataArrayEntry {\n    yStart: number;\n    yEnd: number;\n    date: Date;\n    color: string;\n}\n\nexport type DataArray = DataArrayEntry[][];\n\nconst FIVE_MILLION = 5000000;\nconst ONE_THOUSAND = 1000;\nconst ONE_MILLION = 1000000;\nconst numberOfTicks = 6;\n\n/**\n * Returns a formatted text to fit the text. If the value is undefined '-' is used.\n *\n * @param name The label.\n * @param value The value of the data referenced by the label.\n * @returns The formatted text.\n */\nexport function generateLabel(name: string): string {\n    name = name.charAt(0).toUpperCase() + name.slice(1);\n    // Regex from: https://stackoverflow.com/a/58861672\n    name = name.replace(/(?!^)([A-Z]|\\d+)/g, ' $1');\n    return `${name}:`;\n}\n\nfunction calculateInvestmentStepIndexForDate(date: Date, investmentSteps: InvestmentStep[]): number {\n    const firstDate = investmentSteps[0].date;\n    const secondDate = investmentSteps[1].date;\n    const numberOfMonthsSinceStartDate =\n        (date.getFullYear() - firstDate.getFullYear()) * numberOfMonthsOfAYear +\n        (date.getMonth() - firstDate.getMonth());\n    const numberOfMonthsPerInvestmentStep =\n        (secondDate.getFullYear() - firstDate.getFullYear()) * numberOfMonthsOfAYear +\n        (secondDate.getMonth() - firstDate.getMonth());\n\n    return Math.floor(numberOfMonthsSinceStartDate / numberOfMonthsPerInvestmentStep);\n}\n\n/**\n * A rendering base class for d3 visualizations implementing the strategy design pattern.\n * Provides the rendering and interaction strategy and provides common behavior such as axis rendering.\n *\n * No update of the data is implemented.\n * In order to adjust the visualization to a new investment model, a complete re rendering is required.\n *\n * Keeps track of all active diagrams. Thus needs to be reset in the case of a redrawing of the graphs.\n *\n * It ensures that all active diagrams are synced regarding the tooltip and x axis.\n */\nexport abstract class D3ChartStrategy {\n    tooltipDate: Date;\n    yExtent: [number, number];\n\n    protected readonly lineStrokeWidth = 3;\n    protected readonly standardFontSize = 18;\n    protected readonly contentOpacity = 0.7;\n    protected readonly labelValueIdentifier = 'value';\n    protected readonly monospaceFont = 'monospace';\n\n    protected investmentSteps: InvestmentStep[];\n    protected dateExtent: [Date, Date] = [new Date(), new Date()];\n    protected marginW: number;\n    protected marginH: number;\n    protected width: number;\n    protected height: number;\n    protected maxIndex = 0;\n    protected minIndex = 0;\n    protected yScale: d3.ScaleLinear<number, number, never> = d3.scaleLinear();\n    protected xScale: d3.ScaleTime<number, number, never> = d3.scaleTime();\n    protected dataArray: DataArray = [];\n    protected textProperties: ITextProperties = {};\n    protected payoutPhaseStartDate: Date;\n\n    protected svg: d3.Selection<SVGGElement, unknown, null, undefined>;\n\n    private static activeStrategies: D3ChartStrategy[] = [];\n\n    private readonly fadeOutGradientID = 'fadeOutGradient';\n    private readonly fadeOutYearsLength = 10;\n    private readonly gridOpacity = 0.2;\n    private readonly gridColor = 'grey';\n    private readonly gridStrokeWidth = 2;\n\n    private hoverLine: d3.Selection<SVGLineElement, unknown, null, undefined>;\n    private interaction: d3.Selection<SVGGElement, unknown, null, undefined>;\n    private textGroup: d3.Selection<SVGGElement, unknown, null, undefined>;\n    private xAxis: d3.Axis<d3.NumberValue | Date>;\n    private yAxis: d3.Axis<d3.NumberValue | Date>;\n\n    /**\n     * Constructs the strategy and registers the object.\n     *\n     * @param investmentSteps The investment model.\n     * @param renderDivRef The reference to the div to which the diagram should be rendered.\n     * @param payoutPhaseStartDate The start date of the payout phase.\n     * @param svgID The ID of the svg.\n     * @param tooltipDate The tooltip date. Undefined if no tooltip was visible in the last diagram.\n     * @param yExtent The yExtent. Undefined if it should be recalculated.\n     * @param width The diagram width.\n     * @param height The diagram height.\n     * @param marginW The diagram margin width.\n     * @param marginH The diagram margin height.\n     */\n    constructor(\n        investmentSteps: InvestmentStep[],\n        renderDivRef: HTMLDivElement,\n        payoutPhaseStartDate: Date,\n        svgID: string,\n        tooltipDate: Date | undefined,\n        yExtent: [number, number] | undefined,\n        width = 1100,\n        height = 300,\n        marginW = 200,\n        marginH = 40\n    ) {\n        if (this.constructor === D3ChartStrategy) {\n            throw new Error(\"Abstract classes can't be instantiated.\");\n        }\n        D3ChartStrategy.activeStrategies.push(this);\n        this.investmentSteps = investmentSteps;\n        this.payoutPhaseStartDate = payoutPhaseStartDate;\n        this.tooltipDate = tooltipDate != null ? tooltipDate : new Date(0);\n        this.yExtent = yExtent != null ? yExtent : [0, 0];\n\n        this.marginW = marginW;\n        this.marginH = marginH;\n        this.width = width;\n        this.height = height;\n\n        // Reset diagram by deletion.\n        renderDivRef.innerHTML = '';\n\n        this.svg = d3\n            .select(renderDivRef)\n            .append('svg')\n            .attr('id', svgID)\n            .attr('viewBox', `0 0 ${this.width + 2 * this.marginW} ${this.height + 2 * this.marginH}`)\n            .append('g')\n            .attr('transform', `translate(${[this.marginW / 2, this.marginH]})`);\n\n        // Set default values needed by typescript.\n        this.textGroup = this.svg;\n        this.interaction = this.svg;\n        this.hoverLine = this.svg.append('line');\n        this.yAxis = d3.axisLeft(this.yScale);\n        this.xAxis = d3.axisBottom(this.xScale);\n    }\n\n    /**\n     * Resets the static state that keeps track of every active diagram.\n     * Needs to be called before re rendering the diagrams.\n     */\n    static reset(): void {\n        D3ChartStrategy.activeStrategies = [];\n    }\n\n    /**\n     * Sets the visibility option for all active diagram tooltips.\n     *\n     * @param displayOption The visibility option to apply to all active diagram tooltips.\n     */\n    private static _setInteractionVisibilityForActiveDiagrams(displayOption: 'hidden' | 'visible'): void {\n        for (const activeDiagram of D3ChartStrategy.activeStrategies) {\n            activeDiagram.interaction.style('visibility', displayOption);\n        }\n    }\n\n    /**\n     * The rendering strategy which defined the order in which the diagram is rendered.\n     * Thus defined which part lies on top of the other. e.g. Text is rendered over the central content.\n     */\n    render(): void {\n        this._prepareData();\n        this._calculateExtents();\n        this._createScales();\n        this._createAxis();\n        this._drawGrid();\n        this._drawContent();\n        this._drawFadeOut();\n        this._prepareText();\n        this._drawText();\n        this._drawAxis();\n        this._addInteraction();\n\n        if (this.tooltipDate >= this.dateExtent[0] && this.tooltipDate <= this.dateExtent[1]) {\n            this._updateAllDiagrams();\n        }\n    }\n\n    /**\n     * Generates a human readable display text from the value. Returns '-' as a placeholder when value is undefined.\n     *\n     * @param value The value to display.\n     * @param hasToBePositive Optional parameter which can bes et to ensure the value is positive by ignoring the sign.\n     * @returns The resulting text.\n     */\n    protected valueToDisplayText(value: number | undefined, hasToBePositive = false): string {\n        const labelDivisionFactor =\n            Math.max(-this.yExtent[0], this.yExtent[1] as number) >= FIVE_MILLION ? ONE_MILLION : ONE_THOUSAND;\n        const numberIndicator = labelDivisionFactor === ONE_MILLION ? 'M' : 'K';\n        if (hasToBePositive && value != null) {\n            value = Math.abs(value);\n        }\n        return `${\n            value != null\n                ? (value / labelDivisionFactor).toLocaleString(undefined, {\n                      maximumFractionDigits: 2,\n                      minimumFractionDigits: 2,\n                  })\n                : ' - '\n        }${numberIndicator} €`;\n    }\n\n    /**\n     * calculates the data and thus the axis extent for the time (x-Axis) and money (y-Axis).\n     * The calculation of the y extent is skipped if it has already been set to a valid extent.\n     * Thus if the extent has been set in the constructor the y extent is preserved.\n     */\n    private _calculateExtents() {\n        this.dateExtent = d3.extent(this.dataArray[0], d => d.date) as [Date, Date];\n\n        const lastImportantDateForYScale = new Date(this.payoutPhaseStartDate);\n        lastImportantDateForYScale.setMonth(lastImportantDateForYScale.getMonth() + numberOfMonthsOfAYear);\n        // Only calculate the y extent when it is undefined. Meaning the y axis is not locked.\n        if (this.yExtent[0] === 0 && this.yExtent[1] === 0) {\n            const filteredDataArrayForYMax = this.dataArray[this.maxIndex].filter(\n                e => e.date <= lastImportantDateForYScale && e.date > this.dateExtent[0]\n            );\n            const filteredDataArrayForYMin = this.dataArray[this.minIndex].filter(\n                e => e.date <= lastImportantDateForYScale\n            );\n            const maxVal = d3.max(filteredDataArrayForYMax.map(e => e.yStart)) as number;\n            const minVal = d3.min(filteredDataArrayForYMin.map(e => e.yEnd)) as number;\n            this.yExtent = [minVal, maxVal];\n        }\n    }\n\n    /**\n     * Creates the d3 scales for both axis.\n     */\n    private _createScales() {\n        this.yScale = d3.scaleLinear().domain(this.yExtent).range([this.height, 0]);\n        this.xScale = d3.scaleTime().domain(this.dateExtent).range([0, this.width]);\n    }\n\n    /**\n     * Creates the axis but does not draw it.\n     */\n    private _createAxis() {\n        this.yAxis = d3\n            .axisLeft(this.yScale)\n            .tickFormat(d => this.valueToDisplayText(d as number))\n            .ticks(numberOfTicks);\n\n        this.xAxis = d3.axisBottom(this.xScale);\n    }\n\n    /**\n     * Draws the grid in the background which is aligned to the ticks of the axes.\n     */\n    private _drawGrid() {\n        const gridGroup = this.svg.append('g').attr('class', 'grid');\n        const yGridGroup = gridGroup.append('g').attr('class', 'yGrid');\n        const xGridGroup = gridGroup.append('g').attr('class', 'xGrid');\n\n        yGridGroup\n            .selectAll('line')\n            .data(this.yScale.ticks(numberOfTicks))\n            .enter()\n            .append('line')\n            .attr('x1', this.xScale(this.dateExtent[0]))\n            .attr('y1', d => this.yScale(d))\n            .attr('x2', this.xScale(this.dateExtent[1]))\n            .attr('y2', d => this.yScale(d))\n            .style('stroke-width', this.gridStrokeWidth)\n            .style('stroke', this.gridColor)\n            .style('opacity', this.gridOpacity);\n        console.log(this.xScale.ticks());\n        xGridGroup\n            .selectAll('line')\n            .data(this.xScale.ticks())\n            .enter()\n            .append('line')\n            .attr('x1', d => this.xScale(d))\n            .attr('y1', this.yScale(this.yExtent[0]))\n            .attr('x2', d => this.xScale(d))\n            .attr('y2', this.yScale(this.yExtent[1]))\n            .style('stroke-width', this.gridStrokeWidth)\n            .style('stroke', this.gridColor)\n            .style('opacity', this.gridOpacity);\n    }\n\n    /**\n     * Draws both scales, the zero line and the line that separates the saving and payout phase.\n     */\n    private _drawAxis() {\n        this.svg.append('g').style('font-size', '20px').call(this.yAxis);\n\n        this.svg\n            .append('g')\n            .style('font-size', '20px')\n            .attr('transform', `translate(0, ${this.height})`)\n            .call(this.xAxis);\n\n        // Draw zero line.\n        this.svg\n            .append('g')\n            .append('line')\n            .attr('x1', this.xScale(this.dateExtent[0]))\n            .attr('y1', this.yScale(0))\n            .attr('x2', this.xScale(this.dateExtent[1]))\n            .attr('y2', this.yScale(0))\n            .style('stroke-width', this.lineStrokeWidth)\n            .style('stroke', 'black');\n\n        // Draw phase division line.\n        this.svg\n            .append('g')\n            .append('line')\n            .attr('x1', this.xScale(this.payoutPhaseStartDate) - this.lineStrokeWidth / 2)\n            .attr('y1', this.yScale(this.yExtent[0]))\n            .attr('x2', this.xScale(this.payoutPhaseStartDate) - this.lineStrokeWidth / 2)\n            .attr('y2', this.yScale(this.yExtent[1]))\n            .style('stroke-width', this.lineStrokeWidth)\n            .style('stroke', 'black');\n    }\n\n    /**\n     * Adds all necessary things for the interaction to the diagram.\n     *\n     * The interaction design is inspired by: http://www.d3noob.org/2014/07/my-favourite-tooltip-method-for-line.html\n     */\n    private _addInteraction() {\n        const interactionClass = 'interaction';\n        const tooltipLineClass = 'tooltipLine';\n\n        this.interaction = this.svg\n            .append('g')\n            .attr('class', interactionClass)\n            .style('visibility', 'hidden')\n            .attr('transform', `translate(${[0, -this.marginH]})`);\n\n        this.hoverLine = this.interaction\n            .append('line')\n            .attr('class', tooltipLineClass)\n            .style('stroke', 'blue')\n            .style('stroke-dasharray', '3,3')\n            .style('stroke-width', this.lineStrokeWidth)\n            .style('opacity', 0.5)\n            .attr('y1', this.height + 2 * this.marginH)\n            .attr('y2', 0);\n\n        // Add rectangle to catch mouse events.\n        this.svg\n            .append('rect')\n            .attr('class', 'mouseEvent')\n            .attr('transform', `translate(${[0, -this.marginH]})`)\n            .attr('height', this.height + 2 * this.marginH)\n            .attr('width', this.width)\n            .attr('fill', 'none')\n            .style('pointer-events', 'all')\n            .on('mouseover', () => D3ChartStrategy._setInteractionVisibilityForActiveDiagrams('visible'))\n            .on('mousemove', mouseEvent => this._handleTooltipEvent(mouseEvent));\n    }\n\n    /**\n     * Handles the tooltip event and updates all diagrams accordingly.\n     *\n     * @param mouseEvent The mouse event.\n     */\n    private _handleTooltipEvent(mouseEvent: MouseEvent) {\n        const x = d3.pointer(mouseEvent)[0];\n        const date = this.xScale.invert(x);\n        this.tooltipDate = roundDateToBeginningOfMonth(date);\n        this._updateAllDiagrams();\n    }\n\n    /**\n     * Updates all tooltips of all diagrams.\n     */\n    private _updateAllDiagrams() {\n        const investmentStepIndex = calculateInvestmentStepIndexForDate(this.tooltipDate, this.investmentSteps);\n        D3ChartStrategy._setInteractionVisibilityForActiveDiagrams('visible');\n        for (const activeDiagram of D3ChartStrategy.activeStrategies) {\n            activeDiagram.hoverLine.attr('x1', this.xScale(this.tooltipDate)).attr('x2', this.xScale(this.tooltipDate));\n            activeDiagram._updateTooltip(investmentStepIndex);\n            activeDiagram._updateDiagram();\n        }\n    }\n\n    /**\n     * Draws all text that is stored in the textProperties.\n     */\n    private _drawText() {\n        this.textGroup = this.svg.append('g').attr('class', 'textGroup');\n        this.textGroup\n            .selectAll('text')\n            .data(Object.values(this.textProperties))\n            .enter()\n            .append('text')\n            .text(d => d.text)\n            .attr('x', d => d.x)\n            .attr('y', d => d.y)\n            .style('font-size', d => d.fontSize)\n            .style('font-family', d => d.fontFamily)\n            .style('font-weight', d => d.fontWeight)\n            .style('text-anchor', d => d.textAnchor)\n            .style('fill', d => d.color);\n    }\n\n    /**\n     * Updates a single diagram. The update currently only consists of the text update.\n     */\n    private _updateDiagram() {\n        this.textGroup.selectAll('text').text(d => (d as ITextProperty).text);\n    }\n\n    /**\n     * Prepares all text which should be displayed and stores them in the textProperties variable.\n     *  Default text is included. Thus a super call is expected.\n     */\n    protected _prepareText() {\n        const savingPhaseMid =\n            this.xScale(this.dateExtent[0]) +\n            (this.xScale(this.payoutPhaseStartDate) - this.xScale(this.dateExtent[0])) / 2;\n\n        const payoutPhaseMid =\n            this.xScale(this.payoutPhaseStartDate) +\n            (this.xScale(this.dateExtent[1]) - this.xScale(this.payoutPhaseStartDate)) / 2;\n        const yPos = -10;\n        this.textProperties = {\n            savingBold: {\n                text: 'SAVING',\n                x: savingPhaseMid,\n                y: yPos,\n                fontSize: this.standardFontSize,\n                fontFamily: null,\n                textAnchor: 'end',\n                fontWeight: 'bold',\n                color: 'black',\n            },\n            savingPhase: {\n                text: 'Phase',\n                x: savingPhaseMid,\n                y: yPos,\n                fontSize: this.standardFontSize,\n                fontFamily: null,\n                textAnchor: 'start',\n                fontWeight: 'normal',\n                color: 'black',\n            },\n            payoutBold: {\n                text: 'PAYOUT',\n                x: payoutPhaseMid,\n                y: yPos,\n                fontSize: this.standardFontSize,\n                fontFamily: null,\n                textAnchor: 'end',\n                fontWeight: 'bold',\n                color: 'black',\n            },\n            payoutPhase: {\n                text: 'Phase',\n                x: payoutPhaseMid,\n                y: yPos,\n                fontSize: this.standardFontSize,\n                fontFamily: null,\n                textAnchor: 'start',\n                fontWeight: 'normal',\n                color: 'black',\n            },\n        };\n    }\n\n    /**\n     * Draws the opacity of the fade out years by using a svg linear gradient applied to a rectangle.\n     */\n    private _drawFadeOut() {\n        const fadeOutGroup = this.svg.append('g').attr('class', 'fadeOut');\n        const fadeOutStartDate = new Date(this.dateExtent[1]);\n        fadeOutStartDate.setFullYear(fadeOutStartDate.getFullYear() - this.fadeOutYearsLength);\n\n        const gradient = fadeOutGroup.append('linearGradient').attr('id', this.fadeOutGradientID);\n\n        gradient\n            .append('stop')\n            .attr('class', 'start')\n            .attr('offset', '0%')\n            .attr('stop-color', 'white')\n            .attr('stop-opacity', 0);\n\n        gradient\n            .append('stop')\n            .attr('class', 'end')\n            .attr('offset', '100%')\n            .attr('stop-color', 'white')\n            .attr('stop-opacity', 1);\n\n        fadeOutGroup\n            .append('rect')\n            .attr('x', this.xScale(fadeOutStartDate))\n            .attr('y', -this.marginH)\n            .attr('width', this.xScale(this.dateExtent[1]) - this.xScale(fadeOutStartDate) + 1)\n            .attr('height', this.yScale(this.yExtent[0]) - this.yScale(this.yExtent[1]) + this.marginH * 2)\n            .style('fill', `url(#${this.fadeOutGradientID})`);\n    }\n\n    /**\n     * Prepares the data needed for the rendering.\n     */\n    protected abstract _prepareData(): void;\n\n    /**\n     * Draws the main content of the diagram.\n     */\n    protected abstract _drawContent(): void;\n\n    /**\n     * Updates the textProperties according to the investment step the tooltip is currently on.\n     *\n     * @param investmentStepIndex The index of the investment step of at the current mouse position.\n     */\n    protected abstract _updateTooltip(investmentStepIndex: number): void;\n}\n","import * as d3 from 'd3';\nimport {\n    getTotalShareValue,\n    getTotalDividendShareValue,\n    InvestmentStep,\n    NegativeInvestmentStepIdentifier,\n    ETFRatio,\n} from '../model/InvestmentModel';\nimport { ETFIdentifier } from '../model/ForecastModel';\nimport { D3ChartStrategy, generateLabel, DataArrayEntry } from './D3ChartStrategy';\nimport { ETF_SYMBOL_TO_NAME } from '../components/App';\n\ninterface IDataToIndex {\n    [identifier: string]: number;\n}\n\ntype ETFIdentifierToColors = { [key in ETFIdentifier]: { total: string; invested: string } };\n\ntype NegativeInvestmentToColorMap = { [key in NegativeInvestmentStepIdentifier]: string };\n\n/**\n * A class that draws an area chart that contains the value of costs, taxes,\n * inflation and the total value and invested value of all used ETFs.\n */\nexport class AreaChartD3 extends D3ChartStrategy {\n    private readonly etfLineColors: ETFIdentifierToColors = {\n        'SP5C.PAR': { total: '#0562a0', invested: '#71c1f7' },\n        ESGE: { total: '#ff1eff', invested: '#ff63ff' },\n        SUSA: { total: '#23ff01', invested: '#7dff69' },\n    };\n    private readonly colors: NegativeInvestmentToColorMap = {\n        inflation: '#ff7f00',\n        totalCosts: '#be3bff',\n        totalTaxes: '#e31a1c',\n    };\n    private readonly valueTextOffset = 200;\n    private readonly negativeLabels: NegativeInvestmentStepIdentifier[] = ['totalCosts', 'totalTaxes', 'inflation'];\n    private readonly investedIdentifier = 'invested';\n    private readonly capitalIdentifier = 'capital';\n    private readonly totalIdentifier = 'total';\n    private readonly totalColor = '#ff557f';\n\n    private etfIdentifiers: ETFIdentifier[];\n    private dataToIndex: IDataToIndex = {};\n    private subtractInflationFromTotal;\n\n    /**\n     * Constructs the area chart by calling the base class constructor and determining all used ETFs.\n     */\n    constructor(\n        investmentSteps: InvestmentStep[],\n        renderDivRef: HTMLDivElement,\n        payoutPhaseStartDate: Date,\n        tooltipDate: Date | undefined,\n        yExtent: [number, number] | undefined,\n        etfRatio: ETFRatio,\n        subtractInflationFromTotal: boolean\n    ) {\n        super(investmentSteps, renderDivRef, payoutPhaseStartDate, 'firstSVG', tooltipDate, yExtent);\n\n        this.subtractInflationFromTotal = subtractInflationFromTotal;\n\n        this.etfIdentifiers = [];\n        for (const etfIdentifier of Object.keys(etfRatio) as ETFIdentifier[]) {\n            const ratio = etfRatio[etfIdentifier];\n            if (ratio != null && ratio > 0.0) {\n                this.etfIdentifiers.push(etfIdentifier);\n            }\n        }\n    }\n\n    /**\n     * Prepares all data from the investment model for rendering.\n     */\n    _prepareData() {\n        this.dataToIndex = {\n            totalCosts: 0,\n            totalTaxes: 1,\n            inflation: 2,\n        };\n\n        let currentIdx = 3;\n        for (const etfIdentifier of this.etfIdentifiers) {\n            this.dataToIndex[etfIdentifier + this.investedIdentifier] = currentIdx++;\n            this.dataToIndex[etfIdentifier + this.capitalIdentifier] = currentIdx++;\n        }\n\n        this.minIndex = this.dataToIndex.inflation;\n        this.maxIndex = currentIdx - 1;\n\n        this.dataArray = [];\n        for (let i = 0; i < currentIdx; i++) {\n            this.dataArray.push([]);\n        }\n        for (const investmentStep of this.investmentSteps) {\n            this.dataArray[this.dataToIndex.totalCosts].push({\n                yStart: 0,\n                yEnd: -investmentStep.totalCosts,\n                date: investmentStep.date,\n                color: this.colors.totalCosts,\n            });\n            this.dataArray[this.dataToIndex.totalTaxes].push({\n                yStart: -investmentStep.totalCosts,\n                yEnd: -investmentStep.totalCosts - investmentStep.totalTaxes,\n                date: investmentStep.date,\n                color: this.colors.totalTaxes,\n            });\n            this.dataArray[this.dataToIndex.inflation].push({\n                yStart: -investmentStep.totalCosts - investmentStep.totalTaxes,\n                yEnd: -investmentStep.totalCosts - investmentStep.totalTaxes - investmentStep.inflation,\n                date: investmentStep.date,\n                color: this.colors.inflation,\n            });\n            let heightOffset = 0;\n            for (const etfIdentifier of this.etfIdentifiers) {\n                const totalShareValue = getTotalShareValue(etfIdentifier, investmentStep);\n                const totalDividendShareValue = getTotalDividendShareValue(etfIdentifier, investmentStep);\n                this.dataArray[this.dataToIndex[etfIdentifier + this.capitalIdentifier]].push({\n                    yStart: totalShareValue + heightOffset,\n                    yEnd: totalShareValue - totalDividendShareValue + heightOffset,\n                    date: investmentStep.date,\n                    color: this.etfLineColors[etfIdentifier].total,\n                });\n                this.dataArray[this.dataToIndex[etfIdentifier + this.investedIdentifier]].push({\n                    yStart: totalShareValue - totalDividendShareValue + heightOffset,\n                    yEnd: heightOffset,\n                    date: investmentStep.date,\n                    color: this.etfLineColors[etfIdentifier].invested,\n                });\n                heightOffset += totalShareValue;\n            }\n        }\n    }\n\n    /**\n     * Draws the data as lines instead of a stacked area chart.\n     */\n    _drawLines() {\n        // Draw total line.\n        this.svg\n            .append('path')\n            .datum(this.dataArray[this.dataArray.length - 1])\n            .style('stroke', this.totalColor)\n            .style('stroke-width', this.lineStrokeWidth)\n            .style('fill', 'none')\n            .attr(\n                'd',\n                d3\n                    .line<DataArrayEntry>()\n                    .x(d => this.xScale(d.date))\n                    .y((d, i) =>\n                        this.yScale(\n                            d.yStart +\n                                (this.subtractInflationFromTotal\n                                    ? this.dataArray[this.dataToIndex.inflation][i].yEnd\n                                    : 0)\n                        )\n                    )\n            );\n    }\n\n    /**\n     * Draws the main content of the diagram. Currently a stacked area chart.\n     */\n    _drawContent() {\n        this._drawArea();\n        this._drawLines();\n    }\n\n    /**\n     * Draws the stacked areas of the diagram.\n     */\n    _drawArea() {\n        // Draw stacked area chart.\n        for (let i = 0; i < this.dataArray.length; i++) {\n            this.svg\n                .append('g')\n                .attr('class', 'area')\n                .append('path')\n                .datum(this.dataArray[i])\n                .style('opacity', this.contentOpacity)\n                .style('fill', d => d[0].color)\n                .attr(\n                    'd',\n                    d3\n                        .area<DataArrayEntry>()\n                        .curve(d3.curveMonotoneX)\n                        .x(d => this.xScale(d.date))\n                        .y0(d => this.yScale(d.yEnd))\n                        .y1(d => this.yScale(d.yStart))\n                );\n        }\n    }\n\n    /**\n     * Prepares the additional text that is displayed by adding it to the textProperties.\n     */\n    _prepareText() {\n        super._prepareText();\n        const paddingW = this.width * 0.005;\n        const paddingH = this.standardFontSize * 0.35;\n\n        // Negative labels.\n        for (let i = 0; i < this.negativeLabels.length; i++) {\n            this.textProperties[this.negativeLabels[i]] = {\n                text: generateLabel(this.negativeLabels[i]),\n                x: this.xScale(this.dateExtent[1]) + paddingW,\n                y: this.yScale(0) + (this.standardFontSize + paddingH) * (i + 1),\n                fontSize: this.standardFontSize,\n                fontFamily: null,\n                textAnchor: 'start',\n                fontWeight: 'normal',\n                color: this.colors[this.negativeLabels[i]],\n            };\n\n            this.textProperties[this.negativeLabels[i] + this.labelValueIdentifier] = {\n                text: this.valueToDisplayText(undefined),\n                x: this.xScale(this.dateExtent[1]) + paddingW + this.valueTextOffset,\n                y: this.yScale(0) + (this.standardFontSize + paddingH) * (i + 1),\n                fontSize: this.standardFontSize,\n                fontFamily: this.monospaceFont,\n                textAnchor: 'end',\n                fontWeight: 'bold',\n                color: this.colors[this.negativeLabels[i]],\n            };\n        }\n\n        // Add ETF values of Labels.\n        for (let i = 0; i < this.etfIdentifiers.length; i++) {\n            // ETF Label.\n            this.textProperties[this.etfIdentifiers[i]] = {\n                text: ETF_SYMBOL_TO_NAME[this.etfIdentifiers[i]],\n                x: this.xScale(this.dateExtent[1]) + paddingW,\n                y: this.yScale(0) - (this.standardFontSize + paddingH) * i * 3 - 2 * this.standardFontSize,\n                fontSize: this.standardFontSize,\n                fontFamily: null,\n                textAnchor: 'start',\n                fontWeight: 'normal',\n                color: this.etfLineColors[this.etfIdentifiers[i]].total,\n            };\n            // Total\n            this.textProperties[this.etfIdentifiers[i] + this.totalIdentifier] = {\n                text: generateLabel(this.totalIdentifier),\n                x: this.xScale(this.dateExtent[1]) + paddingW,\n                y: this.yScale(0) - (this.standardFontSize + paddingH) * i * 3 - 1 * this.standardFontSize,\n                fontSize: this.standardFontSize,\n                fontFamily: null,\n                textAnchor: 'start',\n                fontWeight: 'normal',\n                color: this.etfLineColors[this.etfIdentifiers[i]].total,\n            };\n\n            this.textProperties[this.etfIdentifiers[i] + this.labelValueIdentifier + this.totalIdentifier] = {\n                text: this.valueToDisplayText(undefined),\n                x: this.xScale(this.dateExtent[1]) + paddingW + this.valueTextOffset,\n                y: this.yScale(0) - (this.standardFontSize + paddingH) * i * 3 - 1 * this.standardFontSize,\n                fontSize: this.standardFontSize,\n                fontFamily: this.monospaceFont,\n                textAnchor: 'end',\n                fontWeight: 'bold',\n                color: this.etfLineColors[this.etfIdentifiers[i]].total,\n            };\n            // Invested\n            this.textProperties[this.etfIdentifiers[i] + this.investedIdentifier] = {\n                text: generateLabel(this.investedIdentifier),\n                x: this.xScale(this.dateExtent[1]) + paddingW,\n                y: this.yScale(0) - (this.standardFontSize + paddingH) * i * 3 - 0 * this.standardFontSize,\n                fontSize: this.standardFontSize,\n                fontFamily: null,\n                textAnchor: 'start',\n                fontWeight: 'normal',\n                color: this.etfLineColors[this.etfIdentifiers[i]].invested,\n            };\n\n            this.textProperties[this.etfIdentifiers[i] + this.labelValueIdentifier + this.investedIdentifier] = {\n                text: this.valueToDisplayText(undefined),\n                x: this.xScale(this.dateExtent[1]) + paddingW + this.valueTextOffset,\n                y: this.yScale(0) - (this.standardFontSize + paddingH) * i * 3 - 0 * this.standardFontSize,\n                fontSize: this.standardFontSize,\n                fontFamily: this.monospaceFont,\n                textAnchor: 'end',\n                fontWeight: 'bold',\n                color: this.etfLineColors[this.etfIdentifiers[i]].invested,\n            };\n        }\n\n        // Add total label.\n        this.textProperties[this.totalIdentifier] = {\n            text: generateLabel(this.totalIdentifier),\n            x: this.xScale(this.dateExtent[1]) + paddingW,\n            y: this.yScale(this.yExtent[1]),\n            fontSize: this.standardFontSize,\n            fontFamily: null,\n            textAnchor: 'start',\n            fontWeight: 'normal',\n            color: this.totalColor,\n        };\n\n        this.textProperties[this.totalIdentifier + this.labelValueIdentifier] = {\n            text: this.valueToDisplayText(undefined),\n            x: this.xScale(this.dateExtent[1]) + paddingW + this.valueTextOffset,\n            y: this.yScale(this.yExtent[1]),\n            fontSize: this.standardFontSize,\n            fontFamily: this.monospaceFont,\n            textAnchor: 'end',\n            fontWeight: 'bold',\n            color: this.totalColor,\n        };\n    }\n\n    /**\n     * Updates the textProperties according to the investment step the tooltip is currently on.\n     *\n     * @param investmentStepIndex The index of the investment step of at the current mouse position.\n     */\n    _updateTooltip(investmentStepIndex: number) {\n        // Update ETF Values.\n        for (const etfIdentifier of this.etfIdentifiers) {\n            const totalValue = getTotalShareValue(etfIdentifier, this.investmentSteps[investmentStepIndex]);\n            const totalDividendValue = getTotalDividendShareValue(\n                etfIdentifier,\n                this.investmentSteps[investmentStepIndex]\n            );\n            const investedValue = totalValue - totalDividendValue;\n            this.textProperties[\n                etfIdentifier + this.labelValueIdentifier + this.investedIdentifier\n            ].text = this.valueToDisplayText(investedValue, true);\n            this.textProperties[\n                etfIdentifier + this.labelValueIdentifier + this.totalIdentifier\n            ].text = this.valueToDisplayText(totalValue, true);\n        }\n        // Update negative values.\n        for (const negativeLabel of this.negativeLabels) {\n            const value = this.investmentSteps[investmentStepIndex][negativeLabel];\n            this.textProperties[negativeLabel + this.labelValueIdentifier].text = this.valueToDisplayText(value, true);\n        }\n        // Update total values.\n        let totalValue = 0;\n        for (const etfIdentifier of this.etfIdentifiers) {\n            totalValue += getTotalShareValue(etfIdentifier, this.investmentSteps[investmentStepIndex]);\n        }\n        totalValue -= this.subtractInflationFromTotal ? this.investmentSteps[investmentStepIndex].inflation : 0;\n        this.textProperties[this.totalIdentifier + this.labelValueIdentifier].text = this.valueToDisplayText(\n            totalValue\n        );\n    }\n}\n","import { InvestmentStep } from '../model/InvestmentModel';\nimport { ETFIdentifier } from '../model/ForecastModel';\nimport { D3ChartStrategy } from './D3ChartStrategy';\n\n/**\n * Calculates the sum of all payout over all used etfs.\n *\n * @param investmentStep The concerning investmentStep.\n * @returns The sum of all payouts.\n */\nfunction getSumNewPayout(investmentStep: InvestmentStep) {\n    let sumNewPayout = 0;\n    for (const etfIdentifier of Object.keys(investmentStep.newPayout) as ETFIdentifier[]) {\n        sumNewPayout += investmentStep.newPayout[etfIdentifier];\n    }\n    return sumNewPayout;\n}\n\n/**\n * Renders a cashflow diagram of the investment model.\n */\nexport class CashflowBarChart extends D3ChartStrategy {\n    private readonly barPaddingPercentage = 0.9;\n    private readonly payoutIdentifier = 'payout';\n    private readonly investedIdentifier = 'invested';\n    private readonly maxNumberTextLength = 100;\n    private readonly colors = {\n        payout: { first: '#3acc5c', second: '#2d9e45' },\n        invested: { first: '#ff3e58', second: '#c32f46' },\n    };\n\n    private rectWidth = 0;\n\n    /**\n     * Just calls the constructor of the base class with the specific svg id.\n     *\n     * @param investmentSteps The investment model.\n     * @param renderDivRef The div reference where the diagram should be placed.\n     * @param payoutPhaseStartDate The start of the payout phase.\n     * @param tooltipDate The tooltip date if the tooltip was active in the last rendered diagram.\n     * @param yExtent The y extent if it should stay static.\n     */\n    constructor(\n        investmentSteps: InvestmentStep[],\n        renderDivRef: HTMLDivElement,\n        payoutPhaseStartDate: Date,\n        tooltipDate: Date | undefined,\n        yExtent: [number, number] | undefined\n    ) {\n        super(investmentSteps, renderDivRef, payoutPhaseStartDate, 'secondSVG', tooltipDate, yExtent);\n    }\n\n    /**\n     * Prepares the data for the diagram based on the investment model.\n     */\n    _prepareData() {\n        // Create line array.\n        const dataToIndex = {\n            invested: 0,\n            payout: 1,\n        };\n\n        this.minIndex = dataToIndex.invested;\n        this.maxIndex = dataToIndex.payout;\n\n        this.dataArray = [[], []];\n        const startYear = this.investmentSteps[0].date.getFullYear();\n        for (const investmentStep of this.investmentSteps) {\n            let sumNewPayout = getSumNewPayout(investmentStep);\n            const colorIdentifier = (investmentStep.date.getFullYear() - startYear) % 2 === 0 ? 'first' : 'second';\n\n            this.dataArray[dataToIndex.invested].push({\n                yStart: 0,\n                yEnd: -investmentStep.newInvestment,\n                date: investmentStep.date,\n                color: this.colors.invested[colorIdentifier],\n            });\n            this.dataArray[dataToIndex.payout].push({\n                yStart: sumNewPayout,\n                yEnd: 0,\n                date: investmentStep.date,\n                color: this.colors.payout[colorIdentifier],\n            });\n        }\n\n        this.rectWidth = (this.width / this.dataArray[dataToIndex.invested].length) * this.barPaddingPercentage;\n    }\n\n    /**\n     * Prepares additional Text that should be displayed by adding it to the textProperties.\n     */\n    _prepareText() {\n        super._prepareText();\n\n        const payoutX =\n            this.xScale(this.payoutPhaseStartDate) +\n            (this.xScale(this.dateExtent[1]) - this.xScale(this.payoutPhaseStartDate)) / 2;\n        const payoutY = this.yScale(0) + (this.yScale(this.yExtent[0]) - this.yScale(0)) / 2;\n\n        this.textProperties[this.payoutIdentifier] = {\n            text: this.payoutIdentifier,\n            x: payoutX,\n            y: payoutY,\n            fontSize: this.standardFontSize,\n            fontFamily: null,\n            textAnchor: 'end',\n            fontWeight: 'normal',\n            color: this.colors[this.payoutIdentifier].first,\n        };\n\n        this.textProperties[this.payoutIdentifier + this.labelValueIdentifier] = {\n            text: this.valueToDisplayText(undefined),\n            x: payoutX + this.maxNumberTextLength,\n            y: payoutY,\n            fontSize: this.standardFontSize,\n            fontFamily: this.monospaceFont,\n            textAnchor: 'end',\n            fontWeight: 'bold',\n            color: this.colors[this.payoutIdentifier].first,\n        };\n\n        const investedX =\n            this.xScale(this.dateExtent[0]) +\n            (this.xScale(this.payoutPhaseStartDate) - this.xScale(this.dateExtent[0])) / 2;\n        const investedY = this.yScale(0) - (this.yScale(0) - this.yScale(this.yExtent[1])) / 2;\n\n        this.textProperties[this.investedIdentifier] = {\n            text: this.investedIdentifier,\n            x: investedX,\n            y: investedY,\n            fontSize: this.standardFontSize,\n            fontFamily: null,\n            textAnchor: 'end',\n            fontWeight: 'normal',\n            color: this.colors[this.investedIdentifier].first,\n        };\n        this.textProperties[this.investedIdentifier + this.labelValueIdentifier] = {\n            text: this.valueToDisplayText(undefined),\n            x: investedX + this.maxNumberTextLength,\n            y: investedY,\n            fontSize: this.standardFontSize,\n            fontFamily: this.monospaceFont,\n            textAnchor: 'end',\n            fontWeight: 'bold',\n            color: this.colors[this.investedIdentifier].first,\n        };\n    }\n\n    /**\n     * Updates the textProperties according to the investment step the tooltip is currently on.\n     *\n     * @param investmentStepIndex The index of the investment step of at the current mouse position.\n     */\n    _updateTooltip(investmentStepIndex: number) {\n        const payoutValue = getSumNewPayout(this.investmentSteps[investmentStepIndex]);\n        const investedValue = this.investmentSteps[investmentStepIndex].newInvestment;\n        this.textProperties[this.payoutIdentifier + this.labelValueIdentifier].text = this.valueToDisplayText(\n            payoutValue\n        );\n\n        this.textProperties[this.investedIdentifier + this.labelValueIdentifier].text = this.valueToDisplayText(\n            investedValue\n        );\n    }\n\n    /**\n     * Draws the main content of the diagram. In this case the bars of the cashflow barchart.\n     */\n    _drawContent() {\n        // Skip the last bar if it is outside the graph.\n        const needToSkipLastBar = this.dataArray[0][this.dataArray[0].length - 1].date === this.dateExtent[1];\n        for (let barArray of this.dataArray) {\n            if (needToSkipLastBar) {\n                barArray = barArray.slice(0, -1);\n            }\n\n            this.svg\n                .append('g')\n                .attr('class', 'bars')\n                .selectAll(`rect.none`)\n                .data(barArray)\n                .enter()\n                .append('rect')\n                .style('fill', d => d.color)\n                .attr('x', d => this.xScale(d.date))\n                .attr('width', this.rectWidth)\n                .attr('y', d => this.yScale(d.yStart))\n                .attr('height', d => this.yScale(d.yEnd) - this.yScale(d.yStart))\n                .style('opacity', this.contentOpacity);\n        }\n    }\n}\n","import React from 'react';\nimport {\n    STARTING_CAPITAL_IDENTIFIER,\n    MONTHLY_INVESTMENT_IDENTIFIER,\n    YEARLY_INVESTMENT_INCREASE_IDENTIFIER,\n    SAVING_PHASE_IDENTIFIER,\n    AGE_IDENTIFIER,\n    TAX_FREE_AMOUNT_IDENTIFIER,\n    MONTHLY_PAYOUT_IDENTIFIER,\n    YEARLY_PAYOUT_INCREASE_IDENTIFIER,\n    LIFE_EXPECTATION_IDENTIFIER,\n    DETAILED_GRAPH_DROPDOWN_IDENTIFIER,\n    Y_AXIS_LOCK_IDENTIFIER,\n    INFLATION_USED_FOR_TOTAL,\n    generateCostConfig,\n} from './App';\nimport { InvestmentModel, ETFRatio } from '../model/InvestmentModel';\nimport { AreaChartD3 } from '../renderer/AreaChartD3';\nimport { CashflowBarChart } from '../renderer/CashflowBarChartD3';\nimport { D3ChartStrategy } from '../renderer/D3ChartStrategy';\nimport { IAppState } from './App';\nimport { percentageStringToFloat, stringToInt } from '../helpers/utils';\n\nexport interface IConfigOptions {\n    costConfig: ICostConfiguration;\n    taxFreeAmount: number;\n}\n\nexport interface ICostConfiguration {\n    percentageCosts: number;\n    fixedCosts: number;\n}\n\n/**\n * React component which handles the visualization.\n * It re renders the visualizations each time the state changes.\n */\nexport class Visualization extends React.Component<IAppState, {}> {\n    private firstSVGRef = React.createRef<HTMLDivElement>();\n    private secondSVGRef = React.createRef<HTMLDivElement>();\n\n    private areaChart: AreaChartD3 | undefined = undefined;\n    private barChart: CashflowBarChart | undefined = undefined;\n\n    private investmentModel: InvestmentModel | undefined = undefined;\n\n    /**\n     * Generates the etf to ratio mapping for all currently selected etfs.\n     *\n     * @returns The etf to ratio mapping.\n     */\n    private _getETFIdentifierToRatio(): ETFRatio {\n        const etfIdentifierToRatio: ETFRatio = {};\n        const etfProperties = this.props.etfDropdownSelection.elements;\n        for (const etfIdentifier in etfProperties) {\n            if (etfProperties[etfIdentifier].selected) {\n                etfIdentifierToRatio[etfProperties[etfIdentifier].symbol] = percentageStringToFloat(\n                    etfProperties[etfIdentifier].value\n                );\n            }\n        }\n        return etfIdentifierToRatio;\n    }\n\n    /**\n     * Calculates the investment model for the current properties.\n     *\n     * @param etfIdentifierToRatio The etfIdentifier mapping to the ratio.\n     * @returns The investment model for the current state.\n     */\n    private _getInvestmentModel(etfIdentifierToRatio: ETFRatio): InvestmentModel {\n        const configOptions: IConfigOptions = {\n            taxFreeAmount: stringToInt(this.props[TAX_FREE_AMOUNT_IDENTIFIER].value),\n            costConfig: generateCostConfig(this.props),\n        };\n\n        return new InvestmentModel(\n            stringToInt(this.props[STARTING_CAPITAL_IDENTIFIER].value),\n            stringToInt(this.props[MONTHLY_INVESTMENT_IDENTIFIER].value),\n            percentageStringToFloat(this.props[YEARLY_INVESTMENT_INCREASE_IDENTIFIER].value),\n            stringToInt(this.props[MONTHLY_PAYOUT_IDENTIFIER].value),\n            percentageStringToFloat(this.props[YEARLY_PAYOUT_INCREASE_IDENTIFIER].value),\n            stringToInt(this.props[SAVING_PHASE_IDENTIFIER].value),\n            etfIdentifierToRatio,\n            configOptions,\n            stringToInt(this.props[AGE_IDENTIFIER].value),\n            stringToInt(this.props[LIFE_EXPECTATION_IDENTIFIER].value)\n        );\n    }\n\n    /**\n     * Returns the tooltip date if it existed in the last visualization.\n     *\n     * @returns The tooltip date if defined.\n     */\n    private _getTooltipDate(): Date | undefined {\n        if (this.areaChart != null) {\n            return this.areaChart.tooltipDate;\n        } else if (this.barChart != null) {\n            return this.barChart.tooltipDate;\n        } else {\n            return undefined;\n        }\n    }\n\n    /**\n     * Returns the y extent if it exists and the y axis should be locked.\n     *\n     * @returns The y extent if defined and axis should be locked.\n     */\n    private _getYAxisExtent(diagram: D3ChartStrategy | undefined) {\n        return diagram != null && this.props[Y_AXIS_LOCK_IDENTIFIER].value ? diagram.yExtent : undefined;\n    }\n\n    /**\n     * Draws both charts.\n     */\n    private _drawVisualization() {\n        D3ChartStrategy.reset();\n        try {\n            if (\n                this.props.isValid != null &&\n                this.props.isValid &&\n                this.firstSVGRef.current != null &&\n                this.secondSVGRef.current != null\n            ) {\n                const etfIdentifierToRatio = this._getETFIdentifierToRatio();\n                this.investmentModel = this._getInvestmentModel(etfIdentifierToRatio);\n                const firstPayoutPhaseDate = this.investmentModel.getPayoutPhaseBeginDate();\n                const correctLevelOfDetailInvestmentSteps = this.investmentModel.getInvestmentSteps(\n                    this.props[DETAILED_GRAPH_DROPDOWN_IDENTIFIER].value\n                );\n                let tooltipDate = this._getTooltipDate();\n                this.areaChart = new AreaChartD3(\n                    correctLevelOfDetailInvestmentSteps,\n                    this.firstSVGRef.current,\n                    firstPayoutPhaseDate,\n                    tooltipDate,\n                    this._getYAxisExtent(this.areaChart),\n                    etfIdentifierToRatio,\n                    this.props[INFLATION_USED_FOR_TOTAL].value\n                );\n                this.areaChart.render();\n                this.barChart = new CashflowBarChart(\n                    correctLevelOfDetailInvestmentSteps,\n                    this.secondSVGRef.current,\n                    firstPayoutPhaseDate,\n                    tooltipDate,\n                    this._getYAxisExtent(this.barChart)\n                );\n                this.barChart.render();\n            }\n        } catch (e) {\n            console.error(e);\n        }\n    }\n\n    /**\n     * Draws the visualization if the component has been drawn for the first time.\n     */\n    componentDidMount() {\n        this._drawVisualization();\n    }\n\n    /**\n     * Draws the visualization if the state changed.\n     */\n    componentDidUpdate() {\n        this._drawVisualization();\n    }\n\n    /**\n     * Renders the divs with the references for the charts.\n     *\n     * @returns The divs holding the references for the charts.\n     */\n    render() {\n        return (\n            <React.Fragment>\n                <div ref={this.secondSVGRef}></div>\n                <div ref={this.firstSVGRef}></div>\n            </React.Fragment>\n        );\n    }\n}\n","interface IErrorMessage {\n    identifier: string;\n    isValid: boolean;\n    errorMessage: string;\n}\n\n/**\n * Renders an error message as a tooltip.\n * \n * @param props The error message properties.\n * @returns The rendered error message.\n */\nexport function ErrorMessage(props: IErrorMessage) {\n    return (\n        <div\n            id={props.identifier + 'Feedback'}\n            className=\"invalid-tooltip\"\n            style={{ visibility: props.isValid ? 'hidden' : 'visible' }}>\n            {props.errorMessage}\n        </div>\n    );\n}\n","import { ErrorMessage } from './ErrorMessageComponent';\n\nexport interface ITextInputState {\n    value: string;\n    label: string;\n    errorMessage: string;\n    textAppending: string;\n    isValid: boolean;\n    disabled: boolean;\n    identifier: TextInputStateIdentifier;\n    onValueChange: (changedValue: string, changedStateIdentifier: TextInputStateIdentifier) => void;\n}\n\nexport interface IETFTextInputState {\n    value: string;\n    label: string;\n    errorMessage: string;\n    textAppending: string;\n    isValid: boolean;\n    disabled: boolean;\n    identifier: string;\n    onValueChange: (changedValue: string, changedStateIdentifier: string) => void;\n}\n\nexport type NumberInputStateIdentifier =\n    | 'startingCapital'\n    | 'monthlyInvestment'\n    | 'monthlyPayout'\n    | 'transactionCosts'\n    | 'savingPhase'\n    | 'age'\n    | 'lifeExpectation'\n    | 'taxFreeAmount'\n    | 'yearlyInvestmentIncrease'\n    | 'yearlyPayoutIncrease';\n\nexport type TextInputStateIdentifier = NumberInputStateIdentifier | 'apiKey';\n\n/**\n * Renders a text input element.\n *\n * @param props The text input properties.\n * @returns The rendered text input.\n */\nexport function TextInputElement(props: ITextInputState) {\n    return (\n        <div className=\"position-relative\">\n            <label className=\"form-label\" htmlFor={props.identifier}>\n                {props.label}\n            </label>\n            <input\n                className={'form-control ' + (props.isValid ? '' : 'is-invalid')}\n                id={props.identifier}\n                type=\"text\"\n                value={props.value + (props.textAppending !== '' ? ' ' + props.textAppending : '')}\n                onChange={e => props.onValueChange(e.target.value.split(' ')[0], props.identifier)}\n                disabled={props.disabled}\n            />\n            <ErrorMessage {...props} />\n        </div>\n    );\n}\n\n/**\n * Renders a text input element without hard identifier. Intended for the etf drop down.\n *\n * @param props The text input properties.\n * @returns The rendered text input.\n */\nexport function ETFTextInputElement(props: IETFTextInputState) {\n    return (\n        <div className=\"position-relative\">\n            <label className=\"form-label\" htmlFor={props.identifier}>\n                {props.label}\n            </label>\n            <input\n                className={'form-control ' + (props.isValid ? '' : 'is-invalid')}\n                id={props.identifier}\n                type=\"text\"\n                value={props.value + (props.textAppending !== '' ? ' ' + props.textAppending : '')}\n                onChange={e => props.onValueChange(e.target.value.split(' ')[0], props.identifier)}\n                disabled={props.disabled}\n            />\n            <ErrorMessage {...props} />\n        </div>\n    );\n}\n","export interface ICheckboxState {\n    value: boolean;\n    label: string;\n    identifier: ICheckBoxStateIdentifier;\n    onValueChange: (changedStateIdentifier: ICheckBoxStateIdentifier) => void;\n}\n\nexport type ICheckBoxStateIdentifier = 'transactionCostsType' | 'etfAutomaticPercentage' | 'yAxisLock' | 'inflationUsedForTotal';\n\n/**\n * Renders a checkbox from the given properties.\n * \n * @param props The checkbox properties.\n * @returns The rendered checkbox.\n */\nexport function CheckboxInputElement(props: ICheckboxState) {\n    return (\n        <div className=\"checkbox-element\">\n            <input\n                className=\"form-check-input\"\n                id={props.identifier}\n                type=\"checkbox\"\n                value={props.value.toString()}\n                onChange={() => props.onValueChange(props.identifier)}\n            />\n            <label className=\"form-check-label\" htmlFor={props.identifier}>\n                {props.label}\n            </label>\n        </div>\n    );\n}\n","import { TextInputElement, TextInputStateIdentifier } from './TextInputElement';\n\nexport interface IAPIKey {\n    displayOverlay: boolean;\n    value: string;\n    label: string;\n    errorMessage: string;\n    isValid: boolean;\n    textAppending: string;\n    identifier: TextInputStateIdentifier;\n    onValueChange: (changedValue: string, changedStateIdentifier: TextInputStateIdentifier) => void;\n    handleAPIKeyConfirm: () => void;\n    error: boolean;\n}\n\n/**\n * Renders the API Key entering UI.\n *\n * @param props The properties for the api key UI.\n * @returns\n */\nexport function Overlay(props: IAPIKey) {\n    return (\n        <div className=\"row\">\n            <div className=\"col-12 p-0\">\n                <div className=\"d-grid gap-0\">\n                    <div\n                        className=\"overlay min-vh-100 text-center m-0 d-flex flex-column justify-content-center\"\n                        style={{ visibility: props.displayOverlay ? 'visible' : 'hidden' }}>\n                        <h1 className=\"p-5\">\n                            Enter your personal{' '}\n                            <a\n                                href=\"https://www.alphavantage.co/support/#api-key\"\n                                target=\"_blank\"\n                                rel=\"noopener noreferrer\">\n                                {' '}\n                                Alphavantage API Key\n                            </a>{' '}\n                        </h1>\n                        <TextInputElement {...props} disabled={!props.displayOverlay} />\n                        <button type=\"button\" className=\"btn btn-primary my-5\" onClick={props.handleAPIKeyConfirm}>\n                            Confirm\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}\n","interface ISidebarSectionHeading {\n    title: string;\n    initiallyCollapsed: boolean;\n    children: JSX.Element[];\n}\n\n/**\n * Renders a collapsible side bar section header which contains child ui elements.\n *\n * @param props The side bar properties.\n * @returns The rendered side bar section.\n */\nexport function SidebarSectionHeading(props: ISidebarSectionHeading) {\n    const titleID = props.title.replace(/\\W/g, '_');\n    return (\n        <div className=\"position-relative my-4 mb-1\">\n            <div className=\"d-flex my-3\">\n                <button\n                    className={'btn btn-secondary hamburgerButton mt-0 mb-0 pt-0 pb-0 me-4'}\n                    type=\"button\"\n                    data-bs-toggle=\"collapse\"\n                    data-bs-target={`#${titleID}`}\n                    aria-expanded={props.initiallyCollapsed ? 'false' : 'true'}\n                    aria-controls={titleID}>\n                    ☰\n                </button>\n                <h6 className=\"sidebar-heading m-0 my-auto\">{props.title}</h6>\n            </div>\n            <div className={'collapse ' + (props.initiallyCollapsed ? '' : 'show')} id={titleID}>\n                {props.children}\n            </div>\n        </div>\n    );\n}\n","import { ICostConfiguration } from './Visualization';\n\nexport interface BrokerProperties {\n    identifier: string;\n    label: string;\n    fixedCosts: number;\n    percentageCosts: number;\n}\n\nexport interface IBrokerDropDown {\n    label: string;\n    isValid: boolean;\n    handleChange: (brokerProperties: BrokerProperties) => void;\n    elements: BrokerProperties[];\n}\n\ntype BrokerDropDownProps = ICostConfiguration & IBrokerDropDown;\n\n/**\n * Tests if the given element properties match the current broker cost properties.\n *\n * @param props The broker properties.\n * @param element The broker element properties.\n * @returns If the element matches the broker cost properties.\n */\nfunction costsOfElementMatchUIValues(props: BrokerDropDownProps, element: BrokerProperties) {\n    return element.fixedCosts === props.fixedCosts && element.percentageCosts === props.percentageCosts;\n}\n\n/**\n * Renders the broker drop down element.\n * An element is displayed as selected if the current cost configuration matches that of the element.\n *\n * @param props The broker properties.\n * @returns The rendering of the broker drop down.\n */\nexport function BrokerDropDown(props: BrokerDropDownProps) {\n    return (\n        <div className=\"dropdown\">\n            <button\n                className=\"btn btn-secondary dropdown-toggle\"\n                type=\"button\"\n                id=\"BrokerDropDown\"\n                data-bs-toggle=\"dropdown\"\n                aria-expanded=\"false\">\n                {props.label}\n            </button>\n            <ul className=\"dropdown-menu\" aria-labelledby=\"BrokerDropDown\">\n                {props.elements.map(element => (\n                    <li key={element.identifier}>\n                        <button\n                            className={\n                                costsOfElementMatchUIValues(props, element) ? 'dropdown-item active' : 'dropdown-item'\n                            }\n                            type=\"button\"\n                            onClick={e => props.handleChange(element)}>\n                            {element.label}\n                        </button>\n                    </li>\n                ))}\n            </ul>\n        </div>\n    );\n}\n","export interface IGraphDetailLevel {\n    identifier: string;\n    value: number;\n    label: string;\n}\n\nexport interface IGraphDetailDropDown {\n    value: number;\n    label: string;\n    isValid: boolean;\n    handleChange: (detailProperties: IGraphDetailLevel) => void;\n    elements: IGraphDetailLevel[];\n}\n\n/**\n * Renders a drop down to select the graph level of detail.\n *\n * @param props The graph detail properties.\n * @returns Rendered graph level of detail drop down.\n */\nexport function GraphDetailDropDown(props: IGraphDetailDropDown) {\n    return (\n        <div className=\"dropdown\">\n            <button\n                className=\"btn btn-secondary dropdown-toggle\"\n                type=\"button\"\n                id=\"GraphDetailDropDown\"\n                data-bs-toggle=\"dropdown\"\n                aria-expanded=\"false\">\n                {props.label}\n            </button>\n            <ul className=\"dropdown-menu\" aria-labelledby=\"GraphDetailDropDown\">\n                {props.elements.map(element => (\n                    <li key={element.identifier}>\n                        <button\n                            className={props.value === element.value ? 'dropdown-item active' : 'dropdown-item'}\n                            type=\"button\"\n                            onClick={e => props.handleChange(element)}>\n                            {element.label}\n                        </button>\n                    </li>\n                ))}\n            </ul>\n        </div>\n    );\n}\n","import { MouseEvent } from 'react';\n\nimport { ETFTextInputElement } from './TextInputElement';\nimport { ErrorMessage } from './ErrorMessageComponent';\n\nimport { IETFProperty } from '../model/ForecastModel';\n\ninterface IETFIndex {\n    [etfIdentifier: string]: IETFProperty;\n}\n\nexport interface IETFSelection {\n    label: string;\n    isValid: boolean;\n    identifier: string;\n    errorMessage: string;\n    handleSelectionChange: (etfProperties: IETFProperty) => void;\n    handleShareChange: (changedValue: string, changedStateIdentifier: string) => void;\n    elements: IETFIndex;\n}\n\ntype ETFSelectionDropDownProps = IETFSelection & { autoPercentage: boolean };\n\n/**\n * Renders the ETF selection drop down which includes editable text for the percentages.\n *\n * @param props The etf drop down properties.\n * @returns The rendered ETF selection drop down.\n */\nexport function ETFSelectionDropDown(props: ETFSelectionDropDownProps) {\n    return (\n        <div className=\"dropdown position-relative\">\n            <button\n                className=\"btn btn-secondary dropdown-toggle is-invalid\"\n                type=\"button\"\n                id=\"ETFSelectionDropDown\"\n                data-bs-toggle=\"dropdown\"\n                aria-expanded=\"false\">\n                {props.label}\n            </button>\n            <ErrorMessage {...props} />\n            <ul className=\"dropdown-menu\" aria-labelledby=\"ETFSelectionDropDown\">\n                {Object.keys(props.elements).map(elementIdentifier => (\n                    <li key={elementIdentifier}>\n                        <button\n                            className={\n                                props.elements[elementIdentifier].selected ? 'dropdown-item active' : 'dropdown-item'\n                            }\n                            type=\"button\"\n                            onClick={(e: MouseEvent<HTMLButtonElement>) => {\n                                // Skip all events from the text input field.\n                                if (!(e.target instanceof HTMLInputElement)) {\n                                    props.handleSelectionChange(props.elements[elementIdentifier]);\n                                }\n                            }}>\n                            <ETFTextInputElement\n                                {...props.elements[elementIdentifier]}\n                                value={props.elements[elementIdentifier].value}\n                                textAppending=\"%\"\n                                onValueChange={props.handleShareChange}\n                                disabled={props.autoPercentage}\n                                isValid={true}\n                                errorMessage=\"\"\n                            />\n                        </button>\n                    </li>\n                ))}\n            </ul>\n        </div>\n    );\n}\n","import React from 'react';\nimport { Visualization, ICostConfiguration } from './Visualization';\nimport {\n    TextInputElement,\n    ITextInputState,\n    TextInputStateIdentifier,\n    NumberInputStateIdentifier,\n} from './TextInputElement';\nimport { CheckboxInputElement, ICheckboxState, ICheckBoxStateIdentifier } from './CheckboxInputElement';\nimport { Overlay, IAPIKey } from './APIKeyOverlay';\nimport { SidebarSectionHeading } from './SidebarSectionHeadingComponent';\nimport { BrokerDropDown, BrokerProperties, IBrokerDropDown } from './BrokerDropDown';\nimport { GraphDetailDropDown, IGraphDetailDropDown, IGraphDetailLevel } from './GraphDetailDropDown';\nimport { ETFSelectionDropDown, IETFSelection } from './ETFSelectionDropDown';\nimport { ForecastModelSingleton, ETFIdentifier, IETFProperty } from '../model/ForecastModel';\nimport { percentageStringToFloat, stringToInt, isPercentage, isPositiveInt } from '../helpers/utils';\n\nexport const STARTING_CAPITAL_IDENTIFIER = 'startingCapital';\nexport const MONTHLY_INVESTMENT_IDENTIFIER = 'monthlyInvestment';\nexport const YEARLY_INVESTMENT_INCREASE_IDENTIFIER = 'yearlyInvestmentIncrease';\nexport const TRANSACTION_COSTS_IDENTIFIER = 'transactionCosts';\nexport const TRANSACTION_COSTS_TYPE_IDENTIFIER = 'transactionCostsType';\nexport const SAVING_PHASE_IDENTIFIER = 'savingPhase';\nexport const AGE_IDENTIFIER = 'age';\nexport const TAX_FREE_AMOUNT_IDENTIFIER = 'taxFreeAmount';\nexport const MONTHLY_PAYOUT_IDENTIFIER = 'monthlyPayout';\nexport const YEARLY_PAYOUT_INCREASE_IDENTIFIER = 'yearlyPayoutIncrease';\nexport const LIFE_EXPECTATION_IDENTIFIER = 'lifeExpectation';\nexport const DETAILED_GRAPH_DROPDOWN_IDENTIFIER = 'detailedGraph';\nexport const ETF_DROPDOWN_SELECTION_IDENTIFIER = 'etfDropdownSelection';\nexport const API_KEY_IDENTIFIER = 'apiKey';\nexport const Y_AXIS_LOCK_IDENTIFIER = 'yAxisLock';\nexport const INFLATION_USED_FOR_TOTAL = 'inflationUsedForTotal';\n\nconst BROKER_DROPDOWN_IDENTIFIER = 'brokerDropdown';\nconst ETF_AUTOMATIC_PERCENTAGE_IDENTIFIER = 'etfAutomaticPercentage';\n\nexport interface IAppState {\n    isValid: boolean;\n    startingCapital: ITextInputState;\n    monthlyInvestment: ITextInputState;\n    yearlyInvestmentIncrease: ITextInputState;\n    monthlyPayout: ITextInputState;\n    yearlyPayoutIncrease: ITextInputState;\n    transactionCosts: ITextInputState;\n    savingPhase: ITextInputState;\n    age: ITextInputState;\n    lifeExpectation: ITextInputState;\n    taxFreeAmount: ITextInputState;\n\n    apiKey: IAPIKey;\n\n    transactionCostsType: ICheckboxState;\n    etfAutomaticPercentage: ICheckboxState;\n    yAxisLock: ICheckboxState;\n    inflationUsedForTotal: ICheckboxState;\n\n    detailedGraph: IGraphDetailDropDown;\n    brokerDropdown: IBrokerDropDown;\n    etfDropdownSelection: IETFSelection;\n}\n\ntype ETFIdentifierToString = { [key in ETFIdentifier]: string };\n\nexport const ETF_SYMBOL_TO_NAME: ETFIdentifierToString = {\n    'SP5C.PAR': 'S & P 500',\n    ESGE: 'iShare',\n    SUSA: 'MSCI USA ESG',\n};\n\n/**\n * Returns if the given value is a valid integer.\n * Meaning that the value is an integer and is not NaN.\n *\n * @param val The concerning value.\n * @returns If the value is a valid integer.\n */\nexport function generateCostConfig(state: IAppState): ICostConfiguration {\n    if (state[TRANSACTION_COSTS_TYPE_IDENTIFIER].value) {\n        return { percentageCosts: 0.0, fixedCosts: stringToInt(state[TRANSACTION_COSTS_IDENTIFIER].value) };\n    } else {\n        return { percentageCosts: percentageStringToFloat(state[TRANSACTION_COSTS_IDENTIFIER].value), fixedCosts: 0.0 };\n    }\n}\n\n/**\n * Recalculates the ETF percentages based on how many are selected.\n * This secures that the sum of all active percentages always equal 100%.\n *\n * @param state The state of the app.\n * @returns The manipulated state of the app.\n */\nfunction recalculateETFPercentages(state: IAppState): IAppState {\n    let numberOfSelectedETFs = 0;\n    for (const etfIdentifier in state[ETF_DROPDOWN_SELECTION_IDENTIFIER].elements) {\n        if (state[ETF_DROPDOWN_SELECTION_IDENTIFIER].elements[etfIdentifier].selected) {\n            numberOfSelectedETFs++;\n        }\n    }\n    const newPercentage = 100.0 / Math.max(1, numberOfSelectedETFs);\n    for (const etfIdentifier in state[ETF_DROPDOWN_SELECTION_IDENTIFIER].elements) {\n        if (state[ETF_DROPDOWN_SELECTION_IDENTIFIER].elements[etfIdentifier].selected) {\n            state[ETF_DROPDOWN_SELECTION_IDENTIFIER].elements[etfIdentifier].value = newPercentage.toString();\n        }\n    }\n    return state;\n}\n\n/**\n * The class which renders the whole UI and holds the whole UI state with its interaction changes.\n * Also draws the visualizations.\n */\nexport class App extends React.Component<{}, IAppState> {\n    constructor(props: {}) {\n        super(props);\n\n        this.handleTextChange = this.handleTextChange.bind(this);\n        this.handleCheckBoxChange = this.handleCheckBoxChange.bind(this);\n        this.handleBrokerChange = this.handleBrokerChange.bind(this);\n        this.handleGraphDetailChange = this.handleGraphDetailChange.bind(this);\n        this.handleETFSelectionChange = this.handleETFSelectionChange.bind(this);\n        this.handleETFShareChange = this.handleETFShareChange.bind(this);\n        this.handleAPIKeyConfirm = this.handleAPIKeyConfirm.bind(this);\n\n        this.state = getInitialInputFormState(this);\n    }\n\n    /**\n     * Handles the change of a text and applies its value to the state and validates it.\n     *\n     * @param changedValue The changed Value.\n     * @param changedStateIdentifier  The changed state identifier.\n     */\n    handleTextChange(changedValue: string, changedStateIdentifier: TextInputStateIdentifier): void {\n        const state = { ...this.state };\n        state[changedStateIdentifier].value = changedValue;\n        this._validateAndSetState(state);\n    }\n\n    /**\n     * Handles the change of a checkbox and applies the change to the state and validates it.\n     *\n     * Does further adjustments if the specific checkbox needs further state changes.\n     * e.g. the  automatic percentage checkbox.\n     *\n     * @param changedStateIdentifier  The changed state identifier.\n     */\n    handleCheckBoxChange(changedStateIdentifier: ICheckBoxStateIdentifier): void {\n        const state = { ...this.state };\n        state[changedStateIdentifier].value = !state[changedStateIdentifier].value;\n        if (changedStateIdentifier === TRANSACTION_COSTS_TYPE_IDENTIFIER) {\n            state[TRANSACTION_COSTS_IDENTIFIER].value = state[changedStateIdentifier].value ? '5' : '0.015';\n            state[TRANSACTION_COSTS_IDENTIFIER].textAppending = state[changedStateIdentifier].value ? '€' : '%';\n        } else if (\n            changedStateIdentifier === ETF_AUTOMATIC_PERCENTAGE_IDENTIFIER &&\n            state[changedStateIdentifier].value\n        ) {\n            recalculateETFPercentages(state);\n        }\n        this._validateAndSetState(state);\n    }\n\n    /**\n     * Handles the selection of a specific broker.\n     *\n     * @param brokerProperties The broker properties.\n     */\n    handleBrokerChange(brokerProperties: BrokerProperties): void {\n        const state = { ...this.state };\n        state[TRANSACTION_COSTS_IDENTIFIER].value =\n            brokerProperties.percentageCosts > 0\n                ? brokerProperties.percentageCosts.toString()\n                : brokerProperties.fixedCosts.toString();\n        state[TRANSACTION_COSTS_TYPE_IDENTIFIER].value = brokerProperties.percentageCosts > 0 ? false : true;\n        this._validateAndSetState(state);\n    }\n\n    /**\n     * Handles the selection of a specific graph detail.\n     *\n     * @param brokerProperties The graph detail properties.\n     */\n    handleGraphDetailChange(detailProperties: IGraphDetailLevel): void {\n        const state = { ...this.state };\n        state[DETAILED_GRAPH_DROPDOWN_IDENTIFIER].value = detailProperties.value;\n        this._validateAndSetState(state);\n    }\n\n    /**\n     * Handles the selection of a specific ETF.\n     *\n     * @param brokerProperties The ETF properties of the selected ETF.\n     */\n    handleETFSelectionChange(etfProperties: IETFProperty): void {\n        const state = { ...this.state };\n        state[ETF_DROPDOWN_SELECTION_IDENTIFIER].elements[etfProperties.identifier].selected = !state[\n            ETF_DROPDOWN_SELECTION_IDENTIFIER\n        ].elements[etfProperties.identifier].selected;\n        if (state[ETF_AUTOMATIC_PERCENTAGE_IDENTIFIER].value) {\n            recalculateETFPercentages(state);\n        }\n        this._validateAndSetState(state);\n    }\n\n    /**\n     * Handles the percentage value change of the etf selection.\n     *\n     * @param changedValue The changed  percentage value of the ETF.\n     * @param changedETFIdentifier The identifier of the ETF.\n     */\n    handleETFShareChange(changedValue: string, changedETFIdentifier: string): void {\n        const state = { ...this.state };\n        state[ETF_DROPDOWN_SELECTION_IDENTIFIER].elements[changedETFIdentifier].value = changedValue;\n        this._validateAndSetState(state);\n    }\n\n    /**\n     * Handles the confirmation event of the API key.\n     */\n    async handleAPIKeyConfirm(): Promise<void> {\n        const apiKey = this.state[API_KEY_IDENTIFIER].value;\n        const apiValues = { ...this.state[API_KEY_IDENTIFIER] };\n        try {\n            await ForecastModelSingleton.loadHistoricData(\n                apiKey,\n                this.state[ETF_DROPDOWN_SELECTION_IDENTIFIER].elements\n            );\n            apiValues.error = false;\n            apiValues.displayOverlay = false;\n        } catch (e) {\n            apiValues.error = true;\n        }\n        this.setState({ [API_KEY_IDENTIFIER]: apiValues });\n        this.forceUpdate();\n    }\n\n    /**\n     * Checks if the updated state contains an invalid configuration.\n     *\n     * @param state The updated state of the App.\n     */\n    private _validateAndSetState(state: IAppState) {\n        const positiveIntIdentifiers: NumberInputStateIdentifier[] = [\n            MONTHLY_INVESTMENT_IDENTIFIER,\n            MONTHLY_PAYOUT_IDENTIFIER,\n            STARTING_CAPITAL_IDENTIFIER,\n            AGE_IDENTIFIER,\n            LIFE_EXPECTATION_IDENTIFIER,\n            SAVING_PHASE_IDENTIFIER,\n            TAX_FREE_AMOUNT_IDENTIFIER,\n        ];\n\n        const percentageIdentifiers: NumberInputStateIdentifier[] = [\n            YEARLY_INVESTMENT_INCREASE_IDENTIFIER,\n            YEARLY_PAYOUT_INCREASE_IDENTIFIER,\n        ];\n\n        state.isValid = true;\n\n        for (const identifier of positiveIntIdentifiers) {\n            state[identifier].isValid = isPositiveInt(state[identifier].value);\n            state[identifier].errorMessage = 'Please enter a positive number.';\n            state.isValid = state[identifier].isValid && state.isValid;\n        }\n\n        for (const identifier of percentageIdentifiers) {\n            state[identifier].isValid = isPercentage(state[identifier].value);\n            state[identifier].errorMessage = 'Please enter a valid percentage between 0 and 100 %.';\n            state.isValid = state[identifier].isValid && state.isValid;\n        }\n\n        // Check the year values.\n        const leftoverYears =\n            stringToInt(state[LIFE_EXPECTATION_IDENTIFIER].value) - stringToInt(state[AGE_IDENTIFIER].value);\n        if (leftoverYears <= 0) {\n            state[AGE_IDENTIFIER].errorMessage = 'You cannot be older than the life expectation';\n            state[AGE_IDENTIFIER].isValid = false;\n            state.isValid = false;\n        } else if (leftoverYears <= stringToInt(state[SAVING_PHASE_IDENTIFIER].value)) {\n            state[SAVING_PHASE_IDENTIFIER].errorMessage =\n                'You cannot have a saving phase that lasts longer than your life.';\n            state[SAVING_PHASE_IDENTIFIER].isValid = false;\n            state.isValid = false;\n        }\n\n        // Check Cost values.\n        if (state[TRANSACTION_COSTS_TYPE_IDENTIFIER].value) {\n            state[TRANSACTION_COSTS_IDENTIFIER].isValid = isPositiveInt(state[TRANSACTION_COSTS_IDENTIFIER].value);\n            state[TRANSACTION_COSTS_IDENTIFIER].errorMessage = 'Please enter a positive number.';\n        } else {\n            state[TRANSACTION_COSTS_IDENTIFIER].isValid = isPercentage(state[TRANSACTION_COSTS_IDENTIFIER].value);\n            state[TRANSACTION_COSTS_IDENTIFIER].errorMessage = 'Please enter a valid percentage.';\n        }\n        state.isValid = state[TRANSACTION_COSTS_IDENTIFIER].isValid && state.isValid;\n\n        // Check the etf percentages.\n        let sumOfPercentages = 0;\n        let foundOneSelectedEtf = false;\n        for (const etfIdentifier in state[ETF_DROPDOWN_SELECTION_IDENTIFIER].elements) {\n            if (state[ETF_DROPDOWN_SELECTION_IDENTIFIER].elements[etfIdentifier].selected) {\n                sumOfPercentages += percentageStringToFloat(\n                    state[ETF_DROPDOWN_SELECTION_IDENTIFIER].elements[etfIdentifier].value\n                );\n                foundOneSelectedEtf = true;\n            }\n        }\n        if (!foundOneSelectedEtf) {\n            state[ETF_DROPDOWN_SELECTION_IDENTIFIER].isValid = false;\n            state[ETF_DROPDOWN_SELECTION_IDENTIFIER].errorMessage = 'Please select at least one ETF.';\n            state.isValid = false;\n        } else if (sumOfPercentages !== 1.0) {\n            state[ETF_DROPDOWN_SELECTION_IDENTIFIER].isValid = false;\n            state[ETF_DROPDOWN_SELECTION_IDENTIFIER].errorMessage = 'The sum of all selected ETFs need to be 100%.';\n            state.isValid = false;\n        } else {\n            state[ETF_DROPDOWN_SELECTION_IDENTIFIER].isValid = true;\n        }\n\n        this.setState(state);\n    }\n\n    /**\n     * Renders the whole page based on the state of the app.\n     *\n     * @returns The Page content.\n     */\n    render() {\n        const costConfig = generateCostConfig(this.state);\n        return (\n            <div className=\"container-fluid\">\n                <Overlay {...this.state[API_KEY_IDENTIFIER]} />\n                <div className=\"row\">\n                    <nav id=\"sidebarMenu\" className=\"col-md-3 col-lg-2 bg-light sidebar\">\n                        <form className=\"position-sticky needs-validation\" noValidate>\n                            {/* Money Options */}\n                            <SidebarSectionHeading title=\"Money Options\" initiallyCollapsed={false}>\n                                <TextInputElement {...this.state[STARTING_CAPITAL_IDENTIFIER]} />\n                                <TextInputElement {...this.state[MONTHLY_INVESTMENT_IDENTIFIER]} />\n                                <TextInputElement {...this.state[YEARLY_INVESTMENT_INCREASE_IDENTIFIER]} />\n                                <TextInputElement {...this.state[MONTHLY_PAYOUT_IDENTIFIER]} />\n                                <TextInputElement {...this.state[YEARLY_PAYOUT_INCREASE_IDENTIFIER]} />\n                                <TextInputElement {...this.state[TAX_FREE_AMOUNT_IDENTIFIER]} />\n                            </SidebarSectionHeading>\n                            {/* Time Options */}\n                            <SidebarSectionHeading title=\"Time Options\" initiallyCollapsed={false}>\n                                <TextInputElement {...this.state[AGE_IDENTIFIER]} />\n                                <TextInputElement {...this.state[LIFE_EXPECTATION_IDENTIFIER]} />\n                                <TextInputElement {...this.state[SAVING_PHASE_IDENTIFIER]} />\n                            </SidebarSectionHeading>\n                            {/* Cost Options */}\n                            <SidebarSectionHeading title=\"Cost Options\" initiallyCollapsed={true}>\n                                <BrokerDropDown {...costConfig} {...this.state[BROKER_DROPDOWN_IDENTIFIER]} />\n                                <TextInputElement\n                                    key={TRANSACTION_COSTS_IDENTIFIER}\n                                    {...this.state[TRANSACTION_COSTS_IDENTIFIER]}\n                                />\n                                <CheckboxInputElement {...this.state[TRANSACTION_COSTS_TYPE_IDENTIFIER]} />\n                            </SidebarSectionHeading>\n                            {/* Visualization Options */}\n                            <SidebarSectionHeading title=\"Visualization Options\" initiallyCollapsed={true}>\n                                <GraphDetailDropDown {...this.state[DETAILED_GRAPH_DROPDOWN_IDENTIFIER]} />\n                                <CheckboxInputElement {...this.state[Y_AXIS_LOCK_IDENTIFIER]} />\n                                <CheckboxInputElement {...this.state[INFLATION_USED_FOR_TOTAL]} />\n                                <CheckboxInputElement {...this.state[ETF_AUTOMATIC_PERCENTAGE_IDENTIFIER]} />\n                                <ETFSelectionDropDown\n                                    autoPercentage={this.state[ETF_AUTOMATIC_PERCENTAGE_IDENTIFIER].value}\n                                    {...this.state[ETF_DROPDOWN_SELECTION_IDENTIFIER]}\n                                />\n                            </SidebarSectionHeading>\n                        </form>\n                    </nav>\n                    <main className=\"col-md-9 col-lg-10 ms-sm-auto\">\n                        <h1>Etf Pension Plan Visualization</h1>\n                        <Visualization {...this.state} />\n                    </main>\n                </div>\n            </div>\n        );\n    }\n}\n\n/**\n * Generates the initial app state.\n *\n * @param caller The calling instance of the App class.\n * @returns The initial app state.\n */\nfunction getInitialInputFormState(caller: App): IAppState {\n    return {\n        isValid: true,\n        // simple ui elements.\n        [STARTING_CAPITAL_IDENTIFIER]: {\n            value: '1000',\n            label: 'Starting Capital',\n            errorMessage: '',\n            textAppending: '€',\n            isValid: true,\n            identifier: STARTING_CAPITAL_IDENTIFIER,\n            onValueChange: caller.handleTextChange,\n            disabled: false,\n        },\n        [MONTHLY_INVESTMENT_IDENTIFIER]: {\n            value: '100',\n            label: 'Monthly Investment',\n            errorMessage: 'Please enter a positive Money amount.',\n            textAppending: '€',\n            isValid: true,\n            identifier: MONTHLY_INVESTMENT_IDENTIFIER,\n            onValueChange: caller.handleTextChange,\n            disabled: false,\n        },\n        [YEARLY_INVESTMENT_INCREASE_IDENTIFIER]: {\n            value: '0.0',\n            label: 'Yearly Investment Increase',\n            errorMessage: '',\n            textAppending: '%',\n            isValid: true,\n            identifier: YEARLY_INVESTMENT_INCREASE_IDENTIFIER,\n            onValueChange: caller.handleTextChange,\n            disabled: false,\n        },\n        [MONTHLY_PAYOUT_IDENTIFIER]: {\n            value: '1000',\n            label: 'Monthly Payout',\n            errorMessage: '',\n            textAppending: '€',\n            isValid: true,\n            identifier: MONTHLY_PAYOUT_IDENTIFIER,\n            onValueChange: caller.handleTextChange,\n            disabled: false,\n        },\n        [YEARLY_PAYOUT_INCREASE_IDENTIFIER]: {\n            value: '0.0',\n            label: 'Yearly Payout Increase',\n            errorMessage: '',\n            textAppending: '%',\n            isValid: true,\n            identifier: YEARLY_PAYOUT_INCREASE_IDENTIFIER,\n            onValueChange: caller.handleTextChange,\n            disabled: false,\n        },\n        [TRANSACTION_COSTS_IDENTIFIER]: {\n            value: '1.5',\n            label: 'Transaction Costs',\n            errorMessage: '',\n            textAppending: '%',\n            isValid: true,\n            identifier: TRANSACTION_COSTS_IDENTIFIER,\n            onValueChange: caller.handleTextChange,\n            disabled: false,\n        },\n        [SAVING_PHASE_IDENTIFIER]: {\n            value: '40',\n            label: 'Saving Phase',\n            errorMessage: '',\n            textAppending: 'Y',\n            isValid: true,\n            identifier: SAVING_PHASE_IDENTIFIER,\n            onValueChange: caller.handleTextChange,\n            disabled: false,\n        },\n        [AGE_IDENTIFIER]: {\n            value: '30',\n            label: 'Your Age',\n            textAppending: 'Y',\n            errorMessage: '',\n            isValid: true,\n            identifier: AGE_IDENTIFIER,\n            onValueChange: caller.handleTextChange,\n            disabled: false,\n        },\n        [LIFE_EXPECTATION_IDENTIFIER]: {\n            value: '80',\n            label: 'Life Expectation',\n            errorMessage: '',\n            isValid: true,\n            textAppending: 'Y',\n            identifier: LIFE_EXPECTATION_IDENTIFIER,\n            onValueChange: caller.handleTextChange,\n            disabled: false,\n        },\n        [TAX_FREE_AMOUNT_IDENTIFIER]: {\n            value: '801',\n            label: 'Tax Free Amount',\n            errorMessage: '',\n            isValid: true,\n            textAppending: '€',\n            identifier: TAX_FREE_AMOUNT_IDENTIFIER,\n            onValueChange: caller.handleTextChange,\n            disabled: false,\n        },\n        [TRANSACTION_COSTS_TYPE_IDENTIFIER]: {\n            value: false,\n            label: 'Fixed Amount',\n            identifier: TRANSACTION_COSTS_TYPE_IDENTIFIER,\n            onValueChange: caller.handleCheckBoxChange,\n        },\n        [ETF_AUTOMATIC_PERCENTAGE_IDENTIFIER]: {\n            value: false,\n            label: 'Automatic ETF Ratio',\n            identifier: ETF_AUTOMATIC_PERCENTAGE_IDENTIFIER,\n            onValueChange: caller.handleCheckBoxChange,\n        },\n        [INFLATION_USED_FOR_TOTAL]: {\n            value: false,\n            label: 'Subtract Inflation of Total',\n            identifier: INFLATION_USED_FOR_TOTAL,\n            onValueChange: caller.handleCheckBoxChange,\n        },\n        [Y_AXIS_LOCK_IDENTIFIER]: {\n            value: false,\n            label: 'Lock Y Axis Extent',\n            identifier: Y_AXIS_LOCK_IDENTIFIER,\n            onValueChange: caller.handleCheckBoxChange,\n        },\n        [API_KEY_IDENTIFIER]: {\n            displayOverlay: true,\n            error: false,\n            value: '',\n            label: '',\n            errorMessage: '',\n            isValid: true,\n            textAppending: '',\n            identifier: API_KEY_IDENTIFIER,\n            onValueChange: caller.handleTextChange,\n            handleAPIKeyConfirm: caller.handleAPIKeyConfirm,\n        },\n        // Complex UI elements.\n        [DETAILED_GRAPH_DROPDOWN_IDENTIFIER]: {\n            value: 1,\n            label: 'Graph Detail Level',\n            isValid: true,\n            handleChange: caller.handleGraphDetailChange,\n            elements: [\n                {\n                    identifier: '12',\n                    value: 12,\n                    label: 'All Months a Year (high detail)',\n                },\n                {\n                    identifier: '3',\n                    value: 3,\n                    label: 'Every 4th Month (middle detail)',\n                },\n                {\n                    identifier: '1',\n                    value: 1,\n                    label: 'One Month a Year (low detail)',\n                },\n            ],\n        },\n        [BROKER_DROPDOWN_IDENTIFIER]: {\n            label: 'Broker',\n            isValid: true,\n            handleChange: caller.handleBrokerChange,\n            elements: [\n                {\n                    identifier: 'comdirect',\n                    label: 'comdirect',\n                    fixedCosts: 0,\n                    percentageCosts: 1.5,\n                },\n                {\n                    identifier: 'tradeRepublic',\n                    label: 'Trade Republic',\n                    fixedCosts: 0,\n                    percentageCosts: 1.0,\n                },\n                {\n                    identifier: 'eToro',\n                    label: 'eToro',\n                    fixedCosts: 0,\n                    percentageCosts: 0.0,\n                },\n            ],\n        },\n        [ETF_DROPDOWN_SELECTION_IDENTIFIER]: {\n            label: 'ETF Selection',\n            isValid: true,\n            identifier: ETF_DROPDOWN_SELECTION_IDENTIFIER,\n            errorMessage: '',\n            handleSelectionChange: caller.handleETFSelectionChange,\n            handleShareChange: caller.handleETFShareChange,\n            elements: {\n                S_and_P_500: {\n                    identifier: 'S_and_P_500',\n                    symbol: 'SP5C.PAR',\n                    label: ETF_SYMBOL_TO_NAME['SP5C.PAR'],\n                    value: '100',\n                    selected: true,\n                },\n                iShare: {\n                    identifier: 'iShare',\n                    symbol: 'ESGE',\n                    label: ETF_SYMBOL_TO_NAME['ESGE'],\n                    value: '100',\n                    selected: false,\n                },\n                msciUSA: {\n                    identifier: 'msciUSA',\n                    symbol: 'SUSA',\n                    label: ETF_SYMBOL_TO_NAME['SUSA'],\n                    value: '100',\n                    selected: false,\n                },\n            },\n        },\n    };\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './scss/main.scss';\nimport { App } from './components/App';\nimport reportWebVitals from './reportWebVitals';\n// Needed to make the drop downs work.\nimport { Dropdown, Tooltip } from 'bootstrap'; // eslint-disable-line no-unused-vars\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}