{"version":3,"sources":["helpers/utils.js","model/ForecastModel.js","model/InvestmentModel.js","renderer/D3ChartStrategy.js","renderer/LineChartD3.js","renderer/CashflowBarChartD3.js","components/Visualization.jsx","components/TextInputElement.jsx","components/CheckboxInputElement.jsx","components/MinimalBootstrapComponents.jsx","components/InputForm.jsx","App.js","reportWebVitals.js","index.js"],"names":["timeDiffIgnoreDivisor","numberOfMonthsOfAYear","isFirstMonthOfAYear","date","getMonth","loadHistoricalETFData","etfIdentifier","apiKey","a","d3","entry","Date","timestamp","toString","dividend","parseFloat","course","historicalData","sort","b","etfHistoricalToCourseForecastArray","map","dateToTimestamp","etfHistoricalToDividendForecastArray","currentYear","getFullYear","dividendForecastArray","forEach","length","push","Math","floor","getTime","HistoricalDataNotPresentException","this","message","name","roundDateToBeginningOfMonth","month","year","currentDayOfMonth","getDate","maxDayOfMonth","monthOffset","round","ForecastModelSingleton","coursePredictors","dividendPredictors","courseForecastArray","maxTimestampBeforeCoursePredictorRepetition","_calculateMaxTimestampBeforePredictorRepetition","maxYearBeforeDividendPredictorRepetition","history","forecastArray","lastTimestampToIncludeInPrediction","abs","backCastTimeFactor","backCastTimestampConstant","filteredForecastArray","filter","regression","linear","order","precision","lastYearToIncludeInPrediction","_courseDateToPredictorTimestampAndDateTimestamp","predictorTimestamp","_createCoursePredictorIfNotPresent","predict","predictorYear","_dividendYearToPredictorYear","_createDividendPredictorIfNotPresent","max","backCastTimeConstant","backCastTimeDate","setMonth","instance","getInstance","firstTimestamp","lastTimestamp","corporateTaxRatio","getNextMonthDate","newDate","calculateDividend","isLastMonthOfAYear","predictDividend","calculateCosts","amount","costConfiguration","costs","percentageCosts","fixedCosts","amountWithoutCosts","subtractTaxFreeGain","taxAmount","taxFreeAmount","getTotalShareValue","investmentStep","totalShares","sharePrizes","getNewShareValue","newShares","calculateAndAddInflation","initialDate","endDate","sumTotalValues","sum","sumOfTotalValues","timeFactor","inflation","pow","addAccumulationMonth","investmentSteps","investment","etfToRatio","configOptions","forecast","prevInvestmentStep","newInvestmentStep","dividendNewShares","dividendTotalShares","totalCosts","totalInvestedMoney","newInvestedMoney","totalTaxes","totalPayout","newPayout","costConfig","investmentOfEtfWithoutCosts","etfSharePrize","predictCourse","dividendPayoutMoneyPerShare","newSharesByDividend","leftoverTaxFreeAmount","value","min","summedTaxes","decemberInvestmentStep","firstInvestmentStepOfThisYear","accumulatedBasicProfit","i","profitOverAllTime","profitOfPreviousYears","amountToApplyTaxes","calculateTaxes","newTaxes","newLeftoverTaxFreeAmount","addPayoutMonth","sellingAmount","leftoverAlreadyPaidTaxes","payoutStats","taxes","investmentStepsIdx","amountToSell","amountAlreadySold","costsToPay","alreadyPaidCosts","payoutInvestmentStepIdxForFIFO","currentSharesLeft","alreadySoldShares","leftoverAmountToSell","currentInvestmentStepForFIFO","currentValueOfShares","amountToSellWithCosts","amountOfSharesToSell","amountToSellWithoutCosts","initialValueOfShares","amountToPayTaxes","taxesToPay","payoutAmount","amountOfDividendSharesLeft","amountOfDividendSharesSold","generateEmptyInvestmentStep","emptyInvestmentStep","InvestmentModel","startCapital","monthlyInvestment","monthlyPayout","savingPhaseLength","age","expectationOfLife","_calculateTimestampsForModel","_calculateModel","lifeExpectation","fadeOutYears","yearsLeft","now","beginningDate","endSavingPhaseDate","setFullYear","calculateForecastInterval","startDate","savingDates","currentDate","payoutDates","slice","savingDate","payoutDate","setInteractionDisplayForActiveDiagrams","displayOption","D3ChartStrategy","activeStrategies","interaction","style","renderDivRef","payoutPhaseStartDate","svgID","width","height","marginW","marginH","constructor","Error","lineStrokeWidth","innerHTML","svg","append","attr","_prepareData","_calculateExtents","_createScales","_drawContent","_prepareText","_drawText","_drawAxis","_addInteraction","dateExtent","dataArray","d","lastImportantDateForYScale","filteredDataArrayForYMax","maxIndex","e","filteredDataArrayForYMin","minIndex","maxVal","yStart","minVal","yEnd","yExtent","yScale","domain","range","xScale","call","tickFormat","toLocaleString","hoverLine","on","mouseEvent","_handleTooltipEvent","x","roundedDate","invert","activeDiagram","_updateTooltip","selectAll","data","textProperties","enter","text","y","fontSize","fontWeight","textAnchor","savingPhaseMid","payoutPhaseMid","yPos","standardFontSize","LineChartD3","etfLineColors","IBM","total","lineOpacity","dataToIndex","currentIdx","capitalIdentifier","dividendIdentifier","heightOffset","totalShareValue","totalDividendShareValue","color","datum","_drawArea","curve","y0","y1","CashflowBarChart","barPaddingPercentage","zeroLineStrokeWidth","sumNewInvestedMoney","sumNewPayout","rectWidth","barArray","loadHistoricData","configure","loadAndCacheHistoricalETFData","console","log","Visualization","props","firstSVGRef","React","createRef","secondSVGRef","STARTING_CAPITAL_IDENTIFIER","MONTHLY_INVESTMENT_IDENTIFIER","MONTHLY_PAYOUT_IDENTIFIER","SAVING_PHASE_IDENTIFIER","TAX_FREE_AMOUNT_IDENTIFIER","state","TRANSACTION_COSTS_TYPE_IDENTIFIER","TRANSACTION_COSTS_IDENTIFIER","AGE_IDENTIFIER","LIFE_EXPECTATION_IDENTIFIER","DETAILED_GRAPH_IDENTIFIER","onlyViableMonth","reset","investmentModel","getInvestmentModel","firstPayoutPhaseDate","correctLevelOfDetailInvestmentSteps","adjustInvestmentStepsToLevelOfDetail","current","render","drawVisualization","Fragment","ref","Component","TextInputElement","handleChange","bind","onValueChange","transformFunction","identifier","className","htmlFor","label","id","type","textAppending","onChange","CheckboxInputElement","SidebarSectionHeading","title","transformInputToInt","caller","intVal","parseInt","target","split","isNaN","transformInputToFloat","InputForm","handleTextChange","handleCheckBoxChange","getInitialInputFormState","changedValue","changedStateIdentifier","currentValues","setState","transactionCostValues","visualizationProps","constructVisualizationProps","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.92c61af1.chunk.js","sourcesContent":["import * as d3 from 'd3';\n\n// Ignore milliseconds, seconds, minutes.\nconst timeDiffIgnoreDivisor = 1000 * 60 * 60 * 24;\n\nexport const timestampIndexOfForecastArray = 0;\nexport const courseIndexOfForecastArray = 1;\nexport const numberOfMonthsOfAYear = 12;\nexport const inflationRate = 0.01;\n\nexport function isLastMonthOfAYear(date) {\n    return date.getMonth() === numberOfMonthsOfAYear - 1;\n}\n\nexport function clamp(value, min, max) {\n    return Math.max(min, Math.min(value, max));\n}\n\nexport function isFirstMonthOfAYear(date) {\n    return date.getMonth() === 0;\n}\n\nexport async function loadHistoricalETFData(etfIdentifier, apiKey) {\n    const historicalData = await d3.csv(\n        `https://www.alphavantage.co/query?function=TIME_SERIES_MONTHLY_ADJUSTED&symbol=${etfIdentifier}&apikey=${apiKey}&datatype=csv`,\n        entry => {\n            return {\n                date: new Date(entry.timestamp.toString()),\n                dividend: parseFloat(entry['dividend amount']),\n                course: parseFloat(entry['adjusted close']),\n            };\n        }\n    );\n    historicalData.sort((a, b) => a.date - b.date);\n    return historicalData;\n}\n\nexport function etfHistoricalToCourseForecastArray(historicalData) {\n    return historicalData.map(entry => [dateToTimestamp(entry.date), entry.course]);\n}\n\n// Requires sorted historical data. Note it is sorted by default. Do not change the order.\nexport function etfHistoricalToDividendForecastArray(historicalData) {\n    let currentYear = historicalData[0].date.getFullYear();\n    const dividendForecastArray = [[currentYear, 0]];\n    historicalData.forEach(entry => {\n        if (entry.date.getFullYear() === currentYear) {\n            dividendForecastArray[dividendForecastArray.length - 1][courseIndexOfForecastArray] += entry.dividend;\n        } else {\n            currentYear = entry.date.getFullYear();\n            dividendForecastArray.push([currentYear, entry.dividend]);\n        }\n    });\n    dividendForecastArray.sort((a, b) => a[timestampIndexOfForecastArray] - b[timestampIndexOfForecastArray]);\n    return dividendForecastArray;\n}\n\nexport function dateToTimestamp(date) {\n    return Math.floor(date.getTime() / timeDiffIgnoreDivisor);\n}\n\nexport function timestampToDate(timestamp) {\n    return new Date(timestamp * timeDiffIgnoreDivisor);\n}\n\nexport function HistoricalDataNotPresentException(etfIdentifier) {\n    this.message = `First call loadHistoricalDataIfNotPresent() before predicting: ${etfIdentifier}`;\n    this.name = 'HistoricalDataNotPresentException';\n}\n\n// Slightly manipulated. Original: https://stackoverflow.com/a/315767\nfunction daysInMonth(month, year) {\n    return new Date(year, month + 1, 0).getDate();\n}\n\nexport function roundDateToBeginningOfMonth(date) {\n    const currentDayOfMonth = date.getDate();\n    const maxDayOfMonth = daysInMonth(date.getMonth(), date.getFullYear());\n    const monthOffset = Math.round(currentDayOfMonth / maxDayOfMonth);\n    return new Date(date.getFullYear(), date.getMonth() + monthOffset);\n}\n","import regression from 'regression';\nimport {\n    dateToTimestamp,\n    etfHistoricalToCourseForecastArray,\n    etfHistoricalToDividendForecastArray,\n    loadHistoricalETFData,\n    timestampIndexOfForecastArray,\n    courseIndexOfForecastArray,\n    HistoricalDataNotPresentException,\n} from '../helpers/utils';\n\n// USAGE: first call configure to set required static vars. Then the singleton can be accessed via getInstance. Never call the Constructor on your own.\n// Always call loadAndCacheHistoricalETFData of an etf before calling predict on that etf.\nexport class ForecastModelSingleton {\n    static instance = null;\n    static apiKey = null;\n    static backCastTimeConstant = null;\n    static backCastTimeFactor = null;\n\n    // DO NOT CALL. USE getInstance()\n    constructor() {\n        this.historicalData = {};\n        this.coursePredictors = {};\n        this.dividendPredictors = {};\n    }\n\n    static configure(apiKey, backCastTimeFactor = 2, backCastTimeConstant = 7) {\n        ForecastModelSingleton.apiKey = apiKey;\n        ForecastModelSingleton.backCastTimeFactor = backCastTimeFactor;\n\n        const backCastTimeDate = new Date(0);\n        backCastTimeDate.setMonth(backCastTimeConstant);\n        ForecastModelSingleton.backCastTimestampConstant = dateToTimestamp(backCastTimeDate);\n\n        // reset predictors if present.\n        if (ForecastModelSingleton.instance != null) {\n            const instance = ForecastModelSingleton.getInstance();\n            for (const etfIdentifier in instance.coursePredictors) {\n                instance.coursePredictors[etfIdentifier] = {\n                    maxTimestampBeforeCoursePredictorRepetition: ForecastModelSingleton._calculateMaxTimestampBeforePredictorRepetition(\n                        instance.historicalData[etfIdentifier].courseForecastArray\n                    ),\n                };\n            }\n            for (const etfIdentifier in instance.dividendPredictors) {\n                instance.dividendPredictors[etfIdentifier] = {\n                    maxYearBeforeDividendPredictorRepetition: ForecastModelSingleton._calculateMaxTimestampBeforePredictorRepetition(\n                        instance.historicalData[etfIdentifier].dividendForecastArray\n                    ),\n                };\n            }\n        }\n    }\n\n    static getInstance() {\n        if (ForecastModelSingleton.instance == null) {\n            ForecastModelSingleton.instance = new ForecastModelSingleton();\n        }\n        return ForecastModelSingleton.instance;\n    }\n\n    static _calculateMaxTimestampBeforePredictorRepetition(forecastArray) {\n        const firstTimestamp = forecastArray[0][timestampIndexOfForecastArray];\n        const lastTimestamp = forecastArray[forecastArray.length - 1][timestampIndexOfForecastArray];\n        return lastTimestamp + (lastTimestamp - firstTimestamp) / ForecastModelSingleton.backCastTimeFactor;\n    }\n\n    async loadAndCacheHistoricalETFData(etfIdentifier) {\n        if (etfIdentifier in this.historicalData) {\n            return;\n        }\n        const historicalData = await loadHistoricalETFData(etfIdentifier);\n\n        const courseForecastArray = etfHistoricalToCourseForecastArray(historicalData);\n        const maxTimestampBeforeCoursePredictorRepetition = ForecastModelSingleton._calculateMaxTimestampBeforePredictorRepetition(\n            courseForecastArray\n        );\n\n        const dividendForecastArray = etfHistoricalToDividendForecastArray(historicalData);\n        const maxYearBeforeDividendPredictorRepetition = ForecastModelSingleton._calculateMaxTimestampBeforePredictorRepetition(\n            dividendForecastArray\n        );\n\n        this.historicalData[etfIdentifier] = {\n            history: historicalData,\n            courseForecastArray: courseForecastArray,\n            dividendForecastArray: dividendForecastArray,\n        };\n        this.coursePredictors[etfIdentifier] = {\n            maxTimestampBeforeCoursePredictorRepetition: maxTimestampBeforeCoursePredictorRepetition,\n        };\n        this.dividendPredictors[etfIdentifier] = {\n            maxYearBeforeDividendPredictorRepetition: maxYearBeforeDividendPredictorRepetition,\n        };\n    }\n\n    _createCoursePredictorIfNotPresent(etfIdentifier, timestamp) {\n        // Skip if already exists.\n        if (timestamp in this.coursePredictors[etfIdentifier]) {\n            return;\n        }\n        const forecastArray = this.historicalData[etfIdentifier].courseForecastArray;\n        const lastTimestampToIncludeInPrediction =\n            forecastArray[forecastArray.length - 1][timestampIndexOfForecastArray] -\n            Math.abs(forecastArray[forecastArray.length - 1][timestampIndexOfForecastArray] - timestamp) *\n                ForecastModelSingleton.backCastTimeFactor -\n            ForecastModelSingleton.backCastTimestampConstant;\n        const filteredForecastArray = forecastArray.filter(\n            entry => entry[timestampIndexOfForecastArray] >= lastTimestampToIncludeInPrediction\n        );\n        this.coursePredictors[etfIdentifier][timestamp] = regression.linear(filteredForecastArray, {\n            order: 2,\n            precision: 20,\n        });\n    }\n\n    _courseDateToPredictorTimestampAndDateTimestamp(date, etfIdentifier) {\n        const timestamp = dateToTimestamp(date);\n        return [\n            timestamp > this.coursePredictors[etfIdentifier].maxTimestampBeforeCoursePredictorRepetition\n                ? this.coursePredictors[etfIdentifier].maxTimestampBeforeCoursePredictorRepetition\n                : timestamp,\n            timestamp,\n        ];\n    }\n\n    _createDividendPredictorIfNotPresent(etfIdentifier, year) {\n        // Skip if already exists.\n        if (year in this.dividendPredictors[etfIdentifier]) {\n            return;\n        }\n        const forecastArray = this.historicalData[etfIdentifier].dividendForecastArray;\n        const lastYearToIncludeInPrediction =\n            forecastArray[forecastArray.length - 1][timestampIndexOfForecastArray] -\n            Math.abs(forecastArray[forecastArray.length - 1][timestampIndexOfForecastArray] - year) *\n                ForecastModelSingleton.backCastTimeFactor -\n            ForecastModelSingleton.backCastTimestampConstant;\n        const filteredForecastArray = forecastArray.filter(\n            entry => entry[timestampIndexOfForecastArray] >= lastYearToIncludeInPrediction\n        );\n        this.dividendPredictors[etfIdentifier][year] = regression.linear(filteredForecastArray, {\n            order: 2,\n            precision: 20,\n        });\n    }\n\n    _dividendYearToPredictorYear(etfIdentifier, year) {\n        return this.dividendPredictors[etfIdentifier].maxYearBeforeDividendPredictorRepetition < year\n            ? this.dividendPredictors[etfIdentifier].maxYearBeforeDividendPredictorRepetition\n            : year;\n    }\n\n    predictCourse(etfIdentifier, date) {\n        if (!(etfIdentifier in this.coursePredictors)) {\n            throw new HistoricalDataNotPresentException(etfIdentifier);\n        }\n        const [predictorTimestamp, timestamp] = this._courseDateToPredictorTimestampAndDateTimestamp(\n            date,\n            etfIdentifier\n        );\n        this._createCoursePredictorIfNotPresent(etfIdentifier, predictorTimestamp);\n        return this.coursePredictors[etfIdentifier][predictorTimestamp].predict(timestamp)[courseIndexOfForecastArray];\n    }\n\n    predictDividend(etfIdentifier, year) {\n        if (!(etfIdentifier in this.dividendPredictors)) {\n            throw new HistoricalDataNotPresentException(etfIdentifier);\n        }\n        const predictorYear = this._dividendYearToPredictorYear(etfIdentifier, year);\n        this._createDividendPredictorIfNotPresent(etfIdentifier, predictorYear);\n        return Math.max(\n            0,\n            this.dividendPredictors[etfIdentifier][predictorYear].predict(year)[courseIndexOfForecastArray]\n        );\n    }\n}\n\nexport default ForecastModelSingleton;\n","import ForecastModelSingleton from './ForecastModel';\nimport { numberOfMonthsOfAYear, isLastMonthOfAYear, clamp, isFirstMonthOfAYear } from '../helpers/utils';\n\nconst basicRateOfInterest = 0.007;\nconst partialExemption = 0.7;\nconst corporateTaxRatio = 0.26375;\nconst inflationRate = 0.01;\n\nfunction getNextMonthDate(date) {\n    const newDate = new Date(date);\n    newDate.setMonth(date.getMonth() + 1);\n    return newDate;\n}\n\nfunction calculateDividend(etfIdentifier, date) {\n    if (!isLastMonthOfAYear(date)) {\n        return 0;\n    } else {\n        return ForecastModelSingleton.getInstance().predictDividend(etfIdentifier, date.getFullYear());\n    }\n}\n\nfunction calculateCosts(amount, costConfiguration) {\n    let costs = amount * costConfiguration.percentageCosts + costConfiguration.fixedCosts;\n    const amountWithoutCosts = Math.max(amount - costs, 0);\n    costs = amount - amountWithoutCosts;\n    return [amountWithoutCosts, costs];\n}\n\nfunction subtractTaxFreeGain(taxAmount, taxFreeAmount) {\n    const leftoverTaxes = Math.max(0, taxAmount - taxFreeAmount);\n    const leftoverTaxFreeAmount = Math.max(0, taxFreeAmount - taxAmount);\n    return [leftoverTaxes, leftoverTaxFreeAmount];\n}\n\nexport function getTotalShareValue(etfIdentifier, investmentStep) {\n    return investmentStep.totalShares[etfIdentifier] * investmentStep.sharePrizes[etfIdentifier];\n}\n\nfunction getNewShareValue(etfIdentifier, investmentStep) {\n    return investmentStep.newShares[etfIdentifier] * investmentStep.sharePrizes[etfIdentifier];\n}\n\nfunction sumOfTotalValues(investmentStep) {\n    let sum = 0;\n    for (const etfIdentifier in investmentStep.totalShares) {\n        sum += getTotalShareValue(etfIdentifier, investmentStep);\n    }\n    return sum;\n}\n\nfunction calculateAndAddInflation(investmentStep, initialDate, endDate) {\n    // TODO predict inflationRate??? if so how should I predict it?\n    const sumTotalValues = sumOfTotalValues(investmentStep);\n    const timeFactor =\n        endDate.getFullYear() -\n        initialDate.getFullYear() +\n        (endDate.getMonth() - initialDate.getMonth()) / numberOfMonthsOfAYear;\n    investmentStep.inflation = sumTotalValues - sumTotalValues * Math.pow(1 - inflationRate, timeFactor);\n}\n\nfunction calculateForecastInterval(age, lifeExpectation, savingPhaseLength, fadeOutYears = 10) {\n    const yearsLeft = lifeExpectation - age;\n    const now = new Date();\n    const beginningDate = new Date(now.getFullYear(), now.getMonth() + 1);\n    // start next month.\n    const endSavingPhaseDate = new Date(beginningDate);\n    endSavingPhaseDate.setFullYear(beginningDate.getFullYear() + savingPhaseLength);\n    const endDate = new Date(beginningDate);\n    endDate.setFullYear(beginningDate.getFullYear() + yearsLeft + fadeOutYears);\n    return [beginningDate, endSavingPhaseDate, endDate];\n}\n\nfunction calculateTaxes(investmentSteps, date, leftoverTaxFreeAmount, etfToRatio) {\n    if (!isFirstMonthOfAYear(date) || investmentSteps.length < 2) {\n        return [0, leftoverTaxFreeAmount];\n    }\n    let summedTaxes = 0;\n    const decemberInvestmentStep = investmentSteps[investmentSteps.length - 1];\n    // Use the second investment step if there are not enough meaning the investing started this year after january.\n    // The second is the true first investment step the first is a dummy.\n    const firstInvestmentStepOfThisYear =\n        investmentSteps.length - numberOfMonthsOfAYear > 1\n            ? investmentSteps[investmentSteps.length - numberOfMonthsOfAYear]\n            : investmentSteps[1];\n    for (const etfIdentifier in etfToRatio) {\n        let accumulatedBasicProfit = 0;\n        // Sum up all new investments from february to december.\n        for (let i = 1; i < numberOfMonthsOfAYear && investmentSteps.length - i > 0; i++) {\n            const currentInvestmentStep = investmentSteps[investmentSteps.length - i];\n            accumulatedBasicProfit +=\n                (getNewShareValue(etfIdentifier, currentInvestmentStep) * i) / numberOfMonthsOfAYear;\n        }\n        // Sum up total Investment of the first date of this year.\n        accumulatedBasicProfit +=\n            (getTotalShareValue(etfIdentifier, firstInvestmentStepOfThisYear) *\n                (numberOfMonthsOfAYear - firstInvestmentStepOfThisYear.date.getMonth())) /\n            numberOfMonthsOfAYear;\n        accumulatedBasicProfit *= 0.7 * basicRateOfInterest;\n        const currentShareValues = getTotalShareValue(etfIdentifier, decemberInvestmentStep);\n        // Calculate profit of last year.\n        const profitOverAllTime = currentShareValues - decemberInvestmentStep.totalInvestedMoney[etfIdentifier];\n        let profitOfPreviousYears = 0;\n        if (investmentSteps.length > numberOfMonthsOfAYear) {\n            profitOfPreviousYears = Math.max(\n                0,\n                getTotalShareValue(etfIdentifier, investmentSteps[investmentSteps.length - 1 - numberOfMonthsOfAYear]) -\n                    investmentSteps[investmentSteps.length - 1 - numberOfMonthsOfAYear].totalInvestedMoney[\n                        etfIdentifier\n                    ]\n            );\n        }\n\n        const profitOfThisYear = profitOverAllTime - profitOfPreviousYears;\n        let amountToApplyTaxes = clamp(profitOfThisYear, 0, accumulatedBasicProfit);\n        [amountToApplyTaxes, leftoverTaxFreeAmount] = subtractTaxFreeGain(amountToApplyTaxes, leftoverTaxFreeAmount);\n        summedTaxes += amountToApplyTaxes * partialExemption * corporateTaxRatio;\n    }\n    return [summedTaxes, leftoverTaxFreeAmount];\n}\n\nexport function addAccumulationMonth(investmentSteps, investment, date, initialDate, etfToRatio, configOptions) {\n    const forecast = ForecastModelSingleton.getInstance();\n    let costs = 0;\n    const prevInvestmentStep = investmentSteps[investmentSteps.length - 1];\n    const newInvestmentStep = {\n        date: date,\n        newShares: {},\n        totalShares: { ...prevInvestmentStep.totalShares },\n        dividendNewShares: {},\n        dividendTotalShares: { ...prevInvestmentStep.dividendTotalShares },\n        totalCosts: prevInvestmentStep.totalCosts,\n        sharePrizes: {},\n        totalInvestedMoney: { ...prevInvestmentStep.totalInvestedMoney },\n        newInvestedMoney: {},\n        totalTaxes: prevInvestmentStep.totalTaxes,\n        totalPayout: { ...prevInvestmentStep.totalPayout },\n        newPayout: {},\n    };\n    for (const etfIdentifier in etfToRatio) {\n        const investmentOfEtfWithCosts = etfToRatio[etfIdentifier] * investment;\n        const [investmentOfEtfWithoutCosts, newCosts] = calculateCosts(\n            investmentOfEtfWithCosts,\n            configOptions.costConfig\n        );\n        costs += newCosts;\n        newInvestmentStep.newInvestedMoney[etfIdentifier] = investmentOfEtfWithoutCosts;\n        newInvestmentStep.totalInvestedMoney[etfIdentifier] += investmentOfEtfWithoutCosts;\n\n        const etfSharePrize = forecast.predictCourse(etfIdentifier, date);\n        const newShares = investmentOfEtfWithoutCosts / etfSharePrize;\n        newInvestmentStep.sharePrizes[etfIdentifier] = etfSharePrize;\n        newInvestmentStep.newShares[etfIdentifier] = newShares;\n\n        const dividendPayoutMoneyPerShare = calculateDividend(etfIdentifier, date);\n        const dividendPayoutMoney = newInvestmentStep.totalShares[etfIdentifier] * dividendPayoutMoneyPerShare;\n        const newSharesByDividend = dividendPayoutMoney / etfSharePrize;\n        newInvestmentStep.newShares[etfIdentifier] += newSharesByDividend;\n        newInvestmentStep.dividendNewShares[etfIdentifier] = newSharesByDividend;\n        newInvestmentStep.dividendTotalShares[etfIdentifier] += newSharesByDividend;\n\n        newInvestmentStep.totalShares[etfIdentifier] += newInvestmentStep.newShares[etfIdentifier];\n        newInvestmentStep.newPayout[etfIdentifier] = 0;\n    }\n    newInvestmentStep.totalCosts += costs;\n    const [newTaxes, newLeftoverTaxFreeAmount] = calculateTaxes(\n        investmentSteps,\n        date,\n        configOptions.taxFreeAmount,\n        etfToRatio\n    );\n    newInvestmentStep.totalTaxes += newTaxes;\n    calculateAndAddInflation(newInvestmentStep, initialDate, date);\n    investmentSteps.push(newInvestmentStep);\n\n    return newLeftoverTaxFreeAmount;\n}\n\nfunction addPayoutMonth(\n    investmentSteps,\n    sellingAmount,\n    etfToRatio,\n    date,\n    initialDate,\n    configOptions,\n    leftoverAlreadyPaidTaxes,\n    leftoverTaxFreeAmount,\n    payoutStats\n) {\n    if (isFirstMonthOfAYear(date)) {\n        leftoverTaxFreeAmount = configOptions.taxFreeAmount;\n    }\n    const forecast = ForecastModelSingleton.getInstance();\n    let costs = 0;\n    let taxes = 0;\n    const prevInvestmentStep = investmentSteps[investmentSteps.length - 1];\n    const newInvestmentStep = {\n        date: date,\n        newShares: {},\n        totalShares: { ...prevInvestmentStep.totalShares },\n        dividendNewShares: {},\n        dividendTotalShares: { ...prevInvestmentStep.dividendTotalShares },\n        totalCosts: prevInvestmentStep.totalCosts,\n        sharePrizes: {},\n        totalInvestedMoney: { ...prevInvestmentStep.totalInvestedMoney },\n        newInvestedMoney: {},\n        totalTaxes: prevInvestmentStep.totalTaxes,\n        totalPayout: { ...prevInvestmentStep.totalPayout },\n        newPayout: {},\n    };\n    for (const etfIdentifier in etfToRatio) {\n        const etfSharePrize = forecast.predictCourse(etfIdentifier, date);\n        newInvestmentStep.sharePrizes[etfIdentifier] = etfSharePrize;\n        newInvestmentStep.newPayout[etfIdentifier] = 0;\n        newInvestmentStep.newInvestedMoney[etfIdentifier] = 0;\n        // Skip payout if there are no shares left to sell.\n        if (payoutStats[etfIdentifier].investmentStepsIdx < investmentSteps.length) {\n            // Handle payout.\n            const amountToSell = sellingAmount * etfToRatio[etfIdentifier];\n            let amountAlreadySold = 0;\n            const costsToPay = calculateCosts(amountToSell, configOptions.costConfig)[1];\n            let alreadyPaidCosts = 0;\n            let payoutInvestmentStepIdxForFIFO = payoutStats[etfIdentifier].investmentStepsIdx;\n            let currentSharesLeft =\n                investmentSteps[payoutInvestmentStepIdxForFIFO].newShares[etfIdentifier] -\n                payoutStats[etfIdentifier].alreadySoldShares;\n            for (; payoutInvestmentStepIdxForFIFO < investmentSteps.length; payoutInvestmentStepIdxForFIFO++) {\n                const leftoverAmountToSell = amountToSell - amountAlreadySold;\n                const currentInvestmentStepForFIFO = investmentSteps[payoutInvestmentStepIdxForFIFO];\n\n                const currentValueOfShares =\n                    etfSharePrize *\n                    (payoutInvestmentStepIdxForFIFO === payoutStats[etfIdentifier].investmentStepsIdx\n                        ? currentInvestmentStepForFIFO.newShares[etfIdentifier] -\n                          payoutStats[etfIdentifier].alreadySoldShares\n                        : currentInvestmentStepForFIFO.newShares[etfIdentifier]);\n                const amountToSellWithCosts = Math.min(currentValueOfShares, leftoverAmountToSell);\n                const amountOfSharesToSell = amountToSellWithCosts / etfSharePrize;\n                currentSharesLeft = currentInvestmentStepForFIFO.newShares[etfIdentifier] - amountOfSharesToSell;\n                currentSharesLeft -=\n                    payoutInvestmentStepIdxForFIFO === payoutStats[etfIdentifier].investmentStepsIdx\n                        ? payoutStats[etfIdentifier].alreadySoldShares\n                        : 0;\n\n                const amountToSellWithoutCosts = Math.max(0, amountToSellWithCosts - (costsToPay - alreadyPaidCosts));\n                alreadyPaidCosts += Math.max(0, amountToSellWithCosts - amountToSellWithoutCosts);\n\n                const initialValueOfShares =\n                    amountOfSharesToSell * currentInvestmentStepForFIFO.sharePrizes[etfIdentifier];\n                let amountToPayTaxes = Math.max(0, amountToSellWithoutCosts - initialValueOfShares);\n\n                [amountToPayTaxes, leftoverTaxFreeAmount] = subtractTaxFreeGain(\n                    amountToPayTaxes,\n                    leftoverTaxFreeAmount\n                );\n                let taxesToPay = amountToPayTaxes * partialExemption * corporateTaxRatio;\n                [taxesToPay, leftoverAlreadyPaidTaxes] = subtractTaxFreeGain(taxesToPay, leftoverAlreadyPaidTaxes);\n                taxes += taxesToPay;\n                const payoutAmount = amountToSellWithoutCosts - taxesToPay;\n\n                newInvestmentStep.newPayout[etfIdentifier] += payoutAmount;\n                newInvestmentStep.totalPayout[etfIdentifier] += payoutAmount;\n\n                newInvestmentStep.totalShares[etfIdentifier] -= amountOfSharesToSell;\n                amountAlreadySold += amountToSellWithCosts;\n\n                // Handle the decrease of the dividendShares.\n                let amountOfDividendSharesLeft = 0;\n                if (payoutInvestmentStepIdxForFIFO === payoutStats[etfIdentifier].investmentStepsIdx) {\n                    amountOfDividendSharesLeft = Math.max(\n                        0,\n                        currentInvestmentStepForFIFO.dividendNewShares[etfIdentifier] -\n                            payoutStats[etfIdentifier].alreadySoldShares\n                    );\n                } else {\n                    amountOfDividendSharesLeft = currentInvestmentStepForFIFO.dividendNewShares[etfIdentifier];\n                }\n                const amountOfDividendSharesSold = Math.min(amountOfDividendSharesLeft, amountOfSharesToSell);\n                newInvestmentStep.dividendTotalShares[etfIdentifier] -= amountOfDividendSharesSold;\n\n                // Use break in order to not change the value of payoutInvestmentStepIdxForFIFO.\n                if (amountAlreadySold >= amountToSell) {\n                    break;\n                }\n            }\n            costs += alreadyPaidCosts;\n            // Handle update payoutStats.\n            payoutStats[etfIdentifier].investmentStepsIdx = payoutInvestmentStepIdxForFIFO;\n            payoutStats[etfIdentifier].investmentStepsIdx += currentSharesLeft === 0 ? 1 : 0;\n\n            payoutStats[etfIdentifier].alreadySoldShares =\n                payoutInvestmentStepIdxForFIFO < investmentSteps.length\n                    ? investmentSteps[payoutInvestmentStepIdxForFIFO].newShares[etfIdentifier] - currentSharesLeft\n                    : 0;\n        }\n\n        // Handle dividend.\n        const dividendPayoutMoney =\n            newInvestmentStep.totalShares[etfIdentifier] * calculateDividend(etfIdentifier, date);\n        const newSharesByDividend = dividendPayoutMoney / etfSharePrize;\n        newInvestmentStep.newShares[etfIdentifier] = newSharesByDividend;\n        newInvestmentStep.totalShares[etfIdentifier] += newSharesByDividend;\n        newInvestmentStep.dividendNewShares[etfIdentifier] = newSharesByDividend;\n        newInvestmentStep.dividendTotalShares[etfIdentifier] += newSharesByDividend;\n    }\n\n    newInvestmentStep.totalCosts += costs;\n    newInvestmentStep.totalTaxes += taxes;\n    calculateAndAddInflation(newInvestmentStep, initialDate, date);\n    investmentSteps.push(newInvestmentStep);\n    return [leftoverAlreadyPaidTaxes, leftoverTaxFreeAmount];\n}\n\nfunction generateEmptyInvestmentStep(etfToRatio, date) {\n    const forecast = ForecastModelSingleton.getInstance();\n    const emptyInvestmentStep = {\n        date: date,\n        totalCosts: 0,\n        totalTaxes: 0,\n        newShares: {},\n        totalShares: {},\n        dividendNewShares: {},\n        dividendTotalShares: {},\n        totalInvestedMoney: {},\n        totalPayout: {},\n        newPayout: {},\n        sharePrizes: {},\n    };\n    for (const etfIdentifier in etfToRatio) {\n        emptyInvestmentStep.newShares[etfIdentifier] = 0;\n        emptyInvestmentStep.totalShares[etfIdentifier] = 0;\n        emptyInvestmentStep.dividendNewShares[etfIdentifier] = 0;\n        emptyInvestmentStep.dividendTotalShares[etfIdentifier] = 0;\n        emptyInvestmentStep.totalInvestedMoney[etfIdentifier] = 0;\n        emptyInvestmentStep.totalPayout[etfIdentifier] = 0;\n        emptyInvestmentStep.newPayout[etfIdentifier] = 0;\n        emptyInvestmentStep.sharePrizes[etfIdentifier] = forecast.predictCourse(etfIdentifier, date);\n    }\n    return emptyInvestmentStep;\n}\n\nexport class InvestmentModel {\n    constructor(\n        startCapital,\n        monthlyInvestment,\n        monthlyPayout,\n        savingPhaseLength,\n        etfToRatio,\n        configOptions,\n        age,\n        expectationOfLife\n    ) {\n        this.startCapital = startCapital;\n        this.monthlyInvestment = monthlyInvestment;\n        this.monthlyPayout = monthlyPayout;\n        this.savingPhaseLength = savingPhaseLength;\n        this.etfToRatio = etfToRatio;\n        this.configOptions = configOptions;\n        this.expectationOfLife = expectationOfLife;\n        this.age = age;\n        this._calculateTimestampsForModel();\n        this._calculateModel();\n    }\n\n    _calculateTimestampsForModel() {\n        const [startDate, endSavingPhaseDate, endDate] = calculateForecastInterval(\n            this.age,\n            this.expectationOfLife,\n            this.savingPhaseLength\n        );\n        const savingDates = [];\n        for (\n            let currentDate = startDate;\n            currentDate < endSavingPhaseDate;\n            currentDate = getNextMonthDate(currentDate)\n        ) {\n            savingDates.push(currentDate);\n        }\n        this.savingDates = savingDates;\n        const payoutDates = [];\n        for (let currentDate = endSavingPhaseDate; currentDate < endDate; currentDate = getNextMonthDate(currentDate)) {\n            payoutDates.push(currentDate);\n        }\n        this.payoutDates = payoutDates;\n        this.initialDate = startDate;\n    }\n\n    _calculateModel() {\n        let investmentSteps = [generateEmptyInvestmentStep(this.etfToRatio, this.savingDates[0])];\n        let leftoverTaxFreeAmount = addAccumulationMonth(\n            investmentSteps,\n            this.monthlyInvestment + this.startCapital,\n            this.savingDates[0],\n            this.initialDate,\n            this.etfToRatio,\n            this.configOptions\n        );\n        for (const savingDate of this.savingDates.slice(1)) {\n            leftoverTaxFreeAmount = addAccumulationMonth(\n                investmentSteps,\n                this.monthlyInvestment,\n                savingDate,\n                this.initialDate,\n                this.etfToRatio,\n                this.configOptions\n            );\n        }\n        // Discard the empty investment step.\n        investmentSteps = investmentSteps.slice(1);\n\n        let leftoverAlreadyPaidTaxes = investmentSteps[investmentSteps.length - 1].totalTaxes;\n        const payoutStats = {};\n        for (const etfIdentifier in this.etfToRatio) {\n            payoutStats[etfIdentifier] = { investmentStepsIdx: 0, alreadySoldShares: 0 };\n        }\n        for (const payoutDate of this.payoutDates) {\n            [leftoverAlreadyPaidTaxes, leftoverTaxFreeAmount] = addPayoutMonth(\n                investmentSteps,\n                this.monthlyPayout,\n                this.etfToRatio,\n                payoutDate,\n                this.initialDate,\n                this.configOptions,\n                leftoverAlreadyPaidTaxes,\n                leftoverTaxFreeAmount,\n                payoutStats\n            );\n        }\n        this.investmentSteps = investmentSteps;\n    }\n}\n","import * as d3 from 'd3';\nimport { roundDateToBeginningOfMonth, numberOfMonthsOfAYear } from '../helpers/utils';\n\nfunction setInteractionDisplayForActiveDiagrams(displayOption) {\n    for (const activeDiagram of D3ChartStrategy.activeStrategies) {\n        activeDiagram.interaction.style('display', displayOption);\n    }\n}\n\nexport class D3ChartStrategy {\n    static activeStrategies = [];\n    constructor(\n        investmentSteps,\n        renderDivRef,\n        payoutPhaseStartDate,\n        svgID,\n        width = 1100,\n        height = 300,\n        marginW = 150,\n        marginH = 40\n    ) {\n        if (this.constructor === D3ChartStrategy) {\n            throw new Error(\"Abstract classes can't be instantiated.\");\n        }\n        D3ChartStrategy.activeStrategies.push(this);\n        this.investmentSteps = investmentSteps;\n        this.payoutPhaseStartDate = payoutPhaseStartDate;\n\n        this.marginW = marginW;\n        this.marginH = marginH;\n        this.width = width;\n        this.height = height;\n\n        this.lineStrokeWidth = 3;\n\n        // Reset diagram by deletion.\n        renderDivRef.innerHTML = '';\n\n        this.svg = d3\n            .select(renderDivRef)\n            .append('svg')\n            .attr('id', svgID)\n            .attr('viewBox', `0 0 ${this.width + 2 * this.marginW} ${this.height + 2 * this.marginH}`)\n            .append('g')\n            .attr('transform', `translate(${[this.marginW, this.marginH]})`);\n    }\n\n    static reset() {\n        D3ChartStrategy.activeStrategies = [];\n    }\n\n    render() {\n        this._prepareData();\n        this._calculateExtents();\n        this._createScales();\n        this._drawContent();\n        this._prepareText();\n        this._drawText();\n        this._drawAxis();\n        this._addInteraction();\n    }\n\n    _calculateExtents() {\n        this.dateExtent = d3.extent(this.dataArray[0], d => d.date);\n\n        const lastImportantDateForYScale = new Date(this.payoutPhaseStartDate);\n        lastImportantDateForYScale.setMonth(lastImportantDateForYScale.getMonth() + numberOfMonthsOfAYear);\n        const filteredDataArrayForYMax = this.dataArray[this.maxIndex].filter(\n            e => e.date <= lastImportantDateForYScale && e.date > this.dateExtent[0]\n        );\n        const filteredDataArrayForYMin = this.dataArray[this.minIndex].filter(\n            e => e.date <= lastImportantDateForYScale\n        );\n        const maxVal = d3.max(filteredDataArrayForYMax.map(e => e.yStart));\n        const minVal = d3.min(filteredDataArrayForYMin.map(e => e.yEnd));\n        this.yExtent = [minVal, maxVal];\n    }\n\n    _createScales() {\n        this.yScale = d3.scaleLinear().domain(this.yExtent).range([this.height, 0]);\n        this.xScale = d3.scaleTime().domain(this.dateExtent).range([0, this.width]);\n    }\n\n    _drawAxis() {\n        this.svg\n            .append('g')\n            .style('font-size', '20px')\n            .call(d3.axisLeft(this.yScale).tickFormat(d => `${d.toLocaleString()} EUR`));\n\n        this.svg\n            .append('g')\n            .style('font-size', '20px')\n            .attr('transform', `translate(0, ${this.height})`)\n            .call(d3.axisBottom(this.xScale));\n\n        // Draw zero line.\n        this.svg\n            .append('g')\n            .append('line')\n            .attr('x1', this.xScale(this.dateExtent[0]))\n            .attr('y1', this.yScale(0))\n            .attr('x2', this.xScale(this.dateExtent[1]))\n            .attr('y2', this.yScale(0))\n            .style('stroke-width', this.lineStrokeWidth)\n            .style('stroke', 'black');\n\n        // Draw phase division line.\n        this.svg\n            .append('g')\n            .append('line')\n            .attr('x1', this.xScale(this.payoutPhaseStartDate))\n            .attr('y1', this.yScale(this.yExtent[0]))\n            .attr('x2', this.xScale(this.payoutPhaseStartDate))\n            .attr('y2', this.yScale(this.yExtent[1]))\n            .style('stroke-width', this.lineStrokeWidth)\n            .style('stroke', 'black');\n    }\n\n    _addInteraction() {\n        const interactionClass = 'interaction';\n        const tooltipLineClass = 'tooltipLine';\n\n        this.interaction = this.svg.append('g').attr('class', interactionClass).style('display', 'none');\n\n        this.hoverLine = this.interaction\n            .append('line')\n            .attr('class', tooltipLineClass)\n            .style('stroke', 'blue')\n            .style('stroke-dasharray', '3,3')\n            .style('opacity', 0.5)\n            .attr('y1', this.yScale(this.yExtent[0]))\n            .attr('y2', this.yScale(this.yExtent[1]));\n\n        // Add rectangle to catch mouse events.\n        this.svg\n            .append('rect')\n            .attr('class', 'mouseEvent')\n            .attr('transform', `translate(${[0, -this.marginH]})`)\n            .attr('height', this.height + 2 * this.marginH)\n            .attr('width', this.width)\n            .attr('fill', 'none')\n            .style('pointer-events', 'all')\n            .on('mouseover', () => setInteractionDisplayForActiveDiagrams(null))\n            .on('mouseout', () => setInteractionDisplayForActiveDiagrams('none'))\n            .on('mousemove', mouseEvent => this._handleTooltipEvent(mouseEvent));\n    }\n\n    // Interaction inspired by: http://www.d3noob.org/2014/07/my-favourite-tooltip-method-for-line.html\n    _handleTooltipEvent(mouseEvent) {\n        const x = d3.pointer(mouseEvent)[0];\n        const date = this.xScale.invert(x);\n        const roundedDate = roundDateToBeginningOfMonth(date);\n        for (const activeDiagram of D3ChartStrategy.activeStrategies) {\n            activeDiagram.hoverLine.attr('x1', this.xScale(roundedDate)).attr('x2', this.xScale(roundedDate));\n            activeDiagram._updateTooltip();\n        }\n    }\n\n    _drawText() {\n        const textGroup = this.svg.append('g').attr('class', 'textGroup');\n        textGroup\n            .selectAll('text')\n            .data(this.textProperties)\n            .enter()\n            .append('text')\n            .text(d => d.text)\n            .attr('x', d => d.x)\n            .attr('y', d => d.y)\n            .style('font-size', d => d.fontSize)\n            .style('font-weight', d => d.fontWeight)\n            .style('text-anchor', d => d.textAnchor);\n    }\n\n    _prepareText() {\n        const savingPhaseMid =\n            this.xScale(this.dateExtent[0]) +\n            (this.xScale(this.payoutPhaseStartDate) - this.xScale(this.dateExtent[0])) / 2;\n\n        const payoutPhaseMid =\n            this.xScale(this.payoutPhaseStartDate) +\n            (this.xScale(this.dateExtent[1]) - this.xScale(this.payoutPhaseStartDate)) / 2;\n        const yPos = -10;\n        const standardFontSize = '20px';\n        this.textProperties = [\n            {\n                text: 'SAVING',\n                x: savingPhaseMid,\n                y: yPos,\n                fontSize: standardFontSize,\n                textAnchor: 'end',\n                fontWeight: 'bold',\n            },\n            {\n                text: 'Phase',\n                x: savingPhaseMid,\n                y: yPos,\n                fontSize: standardFontSize,\n                textAnchor: 'start',\n                fontWeight: 'normal',\n            },\n            {\n                text: 'PAYOUT',\n                x: payoutPhaseMid,\n                y: yPos,\n                fontSize: standardFontSize,\n                textAnchor: 'end',\n                fontWeight: 'bold',\n            },\n            {\n                text: 'Phase',\n                x: payoutPhaseMid,\n                y: yPos,\n                fontSize: standardFontSize,\n                textAnchor: 'start',\n                fontWeight: 'normal',\n            },\n        ];\n    }\n\n    _prepareData() {\n        throw new Error('Abstract method. Not Implemented');\n    }\n\n    _drawContent() {\n        throw new Error('Abstract method. Not Implemented');\n    }\n\n    _updateTooltip() {\n        throw new Error('Abstract method. Not Implemented');\n    }\n}\n","import * as d3 from 'd3';\nimport { getTotalShareValue } from '../model/InvestmentModel';\nimport { D3ChartStrategy } from './D3ChartStrategy';\n\nexport class LineChartD3 extends D3ChartStrategy {\n    constructor(investmentSteps, renderDivRef, payoutPhaseStartDate) {\n        super(investmentSteps, renderDivRef, payoutPhaseStartDate, 'firstSVG');\n\n        this.etfLineColors = { IBM: { total: '#0562a0', dividend: '#71c1f7' } };\n        this.lineOpacity = 0.7;\n    }\n\n    _prepareData() {\n        const dataToIndex = {\n            costs: 0,\n            taxes: 1,\n            inflation: 2,\n        };\n\n        let currentIdx = 3;\n        const capitalIdentifier = 'capital';\n        const dividendIdentifier = 'dividend';\n        for (const etfIdentifier in this.investmentSteps[0].totalShares) {\n            dataToIndex[etfIdentifier + dividendIdentifier] = currentIdx++;\n            dataToIndex[etfIdentifier + capitalIdentifier] = currentIdx++;\n        }\n\n        this.minIndex = dataToIndex.inflation;\n        this.maxIndex = currentIdx - 1;\n\n        this.dataArray = [];\n        for (let i = 0; i < currentIdx; i++) {\n            this.dataArray.push([]);\n        }\n        for (const investmentStep of this.investmentSteps) {\n            this.dataArray[dataToIndex.costs].push({\n                yStart: 0,\n                yEnd: -investmentStep.totalCosts,\n                date: investmentStep.date,\n            });\n            this.dataArray[dataToIndex.taxes].push({\n                yStart: -investmentStep.totalCosts,\n                yEnd: -investmentStep.totalCosts - investmentStep.totalTaxes,\n                date: investmentStep.date,\n            });\n            this.dataArray[dataToIndex.inflation].push({\n                yStart: -investmentStep.totalCosts - investmentStep.totalTaxes,\n                yEnd: -investmentStep.totalCosts - investmentStep.totalTaxes - investmentStep.inflation,\n                date: investmentStep.date,\n            });\n            let heightOffset = 0;\n            for (const etfIdentifier in investmentStep.totalShares) {\n                const totalShareValue = getTotalShareValue(etfIdentifier, investmentStep);\n                const totalDividendShareValue =\n                    investmentStep.dividendTotalShares[etfIdentifier] * investmentStep.sharePrizes[etfIdentifier];\n                this.dataArray[dataToIndex[etfIdentifier + capitalIdentifier]].push({\n                    yStart: totalShareValue + heightOffset,\n                    yEnd: totalShareValue - totalDividendShareValue + heightOffset,\n                    date: investmentStep.date,\n                });\n                this.dataArray[dataToIndex[etfIdentifier + dividendIdentifier]].push({\n                    yStart: totalShareValue - totalDividendShareValue + heightOffset,\n                    yEnd: heightOffset,\n                    date: investmentStep.date,\n                });\n                heightOffset += totalShareValue;\n            }\n        }\n\n        // Append miscellaneous data to array.\n        this.dataArray[dataToIndex.inflation].color = '#ff7f00';\n        this.dataArray[dataToIndex.taxes].color = '#e31a1c';\n        this.dataArray[dataToIndex.costs].color = '#be3bff';\n        for (const etfIdentifier in this.investmentSteps[0].totalShares) {\n            this.dataArray[dataToIndex[etfIdentifier + dividendIdentifier]].color = this.etfLineColors[\n                etfIdentifier\n            ].dividend;\n            this.dataArray[dataToIndex[etfIdentifier + capitalIdentifier]].color = this.etfLineColors[\n                etfIdentifier\n            ].total;\n        }\n    }\n\n    _drawLines() {\n        // Draw line chart.\n        for (let i = 0; i < this.dataArray.length; i++) {\n            this.svg\n                .append('path')\n                .datum(this.dataArray[i])\n                .style('stroke', d => d.color)\n                .style('stroke-width', this.lineStrokeWidth)\n                .style('opacity', this.lineOpacity)\n                .style('fill', 'none')\n                .attr(\n                    'd',\n                    d3\n                        .line()\n                        .x(d => this.xScale(d.date))\n                        .y(d => this.yScale(d.yStart))\n                );\n        }\n    }\n    _drawContent() {\n        this._drawArea();\n    }\n\n    _drawArea() {\n        // Draw stacked area chart.\n        for (let i = 0; i < this.dataArray.length; i++) {\n            this.svg\n                .append('path')\n                .datum(this.dataArray[i])\n                .style('opacity', this.lineOpacity)\n                .style('fill', d => d.color)\n                .attr(\n                    'd',\n                    d3\n                        .area()\n                        .curve(d3.curveMonotoneX)\n                        .x(d => this.xScale(d.date))\n                        .y0(d => this.yScale(d.yEnd))\n                        .y1(d => this.yScale(d.yStart))\n                );\n        }\n    }\n\n    _updateTooltip() {}\n}\n\nexport default LineChartD3;\n","import { D3ChartStrategy } from './D3ChartStrategy';\n\nexport class CashflowBarChart extends D3ChartStrategy {\n    constructor(investmentSteps, renderDivRef, payoutPhaseStartDate) {\n        super(investmentSteps, renderDivRef, payoutPhaseStartDate, 'secondSVG');\n        this.barPaddingPercentage = 0.9;\n\n        this.zeroLineStrokeWidth = 3;\n    }\n\n    render() {\n        super.render();\n    }\n\n    _prepareData() {\n        // Create line array.\n        const dataToIndex = {\n            invested: 0,\n            payout: 1,\n        };\n\n        this.minIndex = dataToIndex.invested;\n        this.maxIndex = dataToIndex.payout;\n\n        this.dataArray = [[], []];\n        for (const investmentStep of this.investmentSteps) {\n            let sumNewInvestedMoney = 0;\n            let sumNewPayout = 0;\n            for (const etfIdentifier in investmentStep.newInvestedMoney) {\n                sumNewInvestedMoney += investmentStep.newInvestedMoney[etfIdentifier];\n                sumNewPayout += investmentStep.newPayout[etfIdentifier];\n            }\n            this.dataArray[dataToIndex.invested].push({\n                yStart: 0,\n                yEnd: -sumNewInvestedMoney,\n                date: investmentStep.date,\n                color: '#b4291f',\n            });\n            this.dataArray[dataToIndex.payout].push({\n                yStart: sumNewPayout,\n                yEnd: 0,\n                date: investmentStep.date,\n                color: '#0562a0',\n            });\n        }\n\n        this.rectWidth = (this.width / this.dataArray[dataToIndex.invested].length) * this.barPaddingPercentage;\n    }\n\n    _drawContent() {\n        for (const barArray of this.dataArray) {\n            this.svg\n                .selectAll(`rect.none`)\n                .data(barArray)\n                .enter()\n                .append('rect')\n                .style('fill', d => d.color)\n                .attr('x', d => this.xScale(d.date))\n                .attr('width', this.rectWidth)\n                .attr('y', d => this.yScale(d.yStart))\n                .attr('height', d => this.yScale(d.yEnd) - this.yScale(d.yStart));\n        }\n    }\n\n    _updateTooltip() {}\n}\n\nexport default CashflowBarChart;\n","import React from 'react';\nimport {\n    STARTING_CAPITAL_IDENTIFIER,\n    MONTHLY_INVESTMENT_IDENTIFIER,\n    TRANSACTION_COSTS_IDENTIFIER,\n    TRANSACTION_COSTS_TYPE_IDENTIFIER,\n    SAVING_PHASE_IDENTIFIER,\n    AGE_IDENTIFIER,\n    TAX_FREE_AMOUNT_IDENTIFIER,\n    MONTHLY_PAYOUT_IDENTIFIER,\n    LIFE_EXPECTATION_IDENTIFIER,\n    DETAILED_GRAPH_IDENTIFIER,\n} from './InputForm';\nimport ForecastModelSingleton from '../model/ForecastModel';\nimport { InvestmentModel } from '../model/InvestmentModel';\nimport LineChartD3 from '../renderer/LineChartD3';\nimport CashflowBarChart from '../renderer/CashflowBarChartD3';\nimport { D3ChartStrategy } from '../renderer/D3ChartStrategy';\n\nfunction generateCostConfig(state) {\n    if (state[TRANSACTION_COSTS_TYPE_IDENTIFIER]) {\n        return { percentageCosts: 0.0, fixedCosts: state[TRANSACTION_COSTS_IDENTIFIER] };\n    } else {\n        return { percentageCosts: state[TRANSACTION_COSTS_IDENTIFIER], fixedCosts: 0.0 };\n    }\n}\n\nasync function loadHistoricData() {\n    ForecastModelSingleton.configure('demo');\n    const forecast = ForecastModelSingleton.getInstance();\n    await forecast.loadAndCacheHistoricalETFData('IBM');\n    console.log('Finished loading the historic data.');\n}\n\nexport class Visualization extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.firstSVGRef = React.createRef();\n        this.secondSVGRef = React.createRef();\n    }\n\n    getInvestmentModel() {\n        return new InvestmentModel(\n            this.props[STARTING_CAPITAL_IDENTIFIER],\n            this.props[MONTHLY_INVESTMENT_IDENTIFIER],\n            this.props[MONTHLY_PAYOUT_IDENTIFIER],\n            this.props[SAVING_PHASE_IDENTIFIER],\n            { IBM: 1.0 },\n            {\n                taxFreeAmount: this.props[TAX_FREE_AMOUNT_IDENTIFIER],\n                costConfig: generateCostConfig(this.props),\n            },\n            this.props[AGE_IDENTIFIER],\n            this.props[LIFE_EXPECTATION_IDENTIFIER]\n        );\n    }\n\n    adjustInvestmentStepsToLevelOfDetail(investmentSteps) {\n        if (this.props[DETAILED_GRAPH_IDENTIFIER]) {\n            return investmentSteps;\n        }\n        const onlyViableMonth = investmentSteps[0].date.getMonth();\n        return investmentSteps.filter(e => e.date.getMonth() === onlyViableMonth);\n    }\n\n    drawVisualization() {\n        D3ChartStrategy.reset();\n        const investmentModel = this.getInvestmentModel();\n        const firstPayoutPhaseDate = investmentModel.payoutDates[0];\n        const correctLevelOfDetailInvestmentSteps = this.adjustInvestmentStepsToLevelOfDetail(\n            investmentModel.investmentSteps\n        );\n        new LineChartD3(correctLevelOfDetailInvestmentSteps, this.firstSVGRef.current, firstPayoutPhaseDate).render();\n        new CashflowBarChart(\n            correctLevelOfDetailInvestmentSteps,\n            this.secondSVGRef.current,\n            firstPayoutPhaseDate\n        ).render();\n    }\n\n    async componentDidMount() {\n        await loadHistoricData();\n        this.drawVisualization();\n    }\n\n    componentDidUpdate() {\n        this.drawVisualization();\n    }\n    render() {\n        return (\n            <React.Fragment>\n                <div ref={this.secondSVGRef}></div>\n                <div ref={this.firstSVGRef}></div>\n            </React.Fragment>\n        );\n    }\n}\n\nexport default Visualization;\n","import React from 'react';\n\nexport class TextInputElement extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    handleChange(e) {\n        this.props.onValueChange(this.props.transformFunction(e, this), this.props.identifier);\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                <label className=\"form-label\" htmlFor={this.props.identifier}>\n                    {this.props.label}\n                </label>\n                <input\n                    className=\"form-control\"\n                    id={this.props.identifier}\n                    type={this.props.type}\n                    value={this.props.value.toString() + ' ' + this.props.textAppending}\n                    onChange={this.handleChange}\n                />\n            </React.Fragment>\n        );\n    }\n}\n\nexport default TextInputElement;\n","import React from 'react';\n\nexport class CheckboxInputElement extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    handleChange(e) {\n        this.props.onValueChange(this.props.identifier);\n    }\n\n    render() {\n        return (\n            <div className=\"checkbox-element\">\n                <input\n                    className=\"form-check-input\"\n                    id={this.props.identifier}\n                    type={this.props.type}\n                    value={this.props.value}\n                    onChange={this.handleChange}\n                />\n                <label className=\"form-check-label\" htmlFor={this.props.identifier}>\n                    {this.props.label}\n                </label>\n            </div>\n        );\n    }\n}\n\nexport default CheckboxInputElement;\n","import React from 'react';\n\nexport function SidebarSectionHeading(props) {\n    return (\n        <h6 className=\"sidebar-heading d-flex justify-content-between align-items-center px-3 mt-4 mb-1 text-muted\">\n            <span>{props.title}</span>\n        </h6>\n    );\n}\n","import React from 'react';\nimport Visualization from './Visualization';\nimport TextInputElement from './TextInputElement';\nimport CheckboxInputElement from './CheckboxInputElement';\nimport { SidebarSectionHeading } from './MinimalBootstrapComponents';\n\nexport const STARTING_CAPITAL_IDENTIFIER = 'startingCapital';\nexport const MONTHLY_INVESTMENT_IDENTIFIER = 'monthlyInvestment';\nexport const TRANSACTION_COSTS_IDENTIFIER = 'transactionCosts';\nexport const TRANSACTION_COSTS_TYPE_IDENTIFIER = 'transactionCostsType';\nexport const SAVING_PHASE_IDENTIFIER = 'savingPhase';\nexport const AGE_IDENTIFIER = 'age';\nexport const TAX_FREE_AMOUNT_IDENTIFIER = 'taxFreeAmount';\nexport const MONTHLY_PAYOUT_IDENTIFIER = 'monthlyPayout';\nexport const LIFE_EXPECTATION_IDENTIFIER = 'lifeExpectation';\nexport const DETAILED_GRAPH_IDENTIFIER = 'detailedGraph';\n\nfunction transformInputToInt(e, caller) {\n    const intVal = parseInt(e.target.value.split(' ', 1));\n    return isNaN(intVal) ? 0 : intVal;\n}\n\nfunction transformInputToFloat(e, caller) {\n    const intVal = parseFloat(e.target.value);\n    return isNaN(intVal) ? 0 : intVal;\n}\n\nfunction constructVisualizationProps(state) {\n    const props = {};\n    for (const identifier in state) {\n        props[identifier] = state[identifier].value;\n    }\n    return props;\n}\n\nclass InputForm extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.handleTextChange = this.handleTextChange.bind(this);\n        this.handleCheckBoxChange = this.handleCheckBoxChange.bind(this);\n\n        this.state = getInitialInputFormState(this);\n    }\n\n    handleTextChange(changedValue, changedStateIdentifier) {\n        const currentValues = { ...this.state[changedStateIdentifier] };\n        currentValues.value = changedValue;\n        this.setState({ [changedStateIdentifier]: currentValues });\n    }\n\n    handleCheckBoxChange(changedStateIdentifier) {\n        const currentValues = { ...this.state[changedStateIdentifier] };\n        currentValues.value = !currentValues.value;\n        this.setState({ [changedStateIdentifier]: currentValues });\n        if (changedStateIdentifier === TRANSACTION_COSTS_TYPE_IDENTIFIER) {\n            const transactionCostValues = { ...this.state[TRANSACTION_COSTS_IDENTIFIER] };\n            transactionCostValues.value = currentValues.value ? 5 : 0.005;\n            transactionCostValues.textAppending = currentValues.value ? '€' : '%';\n            transactionCostValues.transformFunction = currentValues.value ? transformInputToInt : transformInputToFloat;\n            this.setState({ [TRANSACTION_COSTS_IDENTIFIER]: transactionCostValues });\n        }\n    }\n\n    render() {\n        const visualizationProps = constructVisualizationProps(this.state);\n        return (\n            <div className=\"container-fluid\">\n                <div className=\"row\">\n                    <nav id=\"sidebarMenu\" className=\"col-md-3 col-lg-2 bg-light sidebar\">\n                        <form className=\"position-sticky\">\n                            {/* Money Options */}\n                            <SidebarSectionHeading title=\"Money Options\" />\n                            <TextInputElement\n                                key={STARTING_CAPITAL_IDENTIFIER}\n                                {...this.state[STARTING_CAPITAL_IDENTIFIER]}\n                            />\n                            <TextInputElement\n                                key={MONTHLY_INVESTMENT_IDENTIFIER}\n                                {...this.state[MONTHLY_INVESTMENT_IDENTIFIER]}\n                            />\n                            <TextInputElement\n                                key={MONTHLY_PAYOUT_IDENTIFIER}\n                                {...this.state[MONTHLY_PAYOUT_IDENTIFIER]}\n                            />\n                            <TextInputElement\n                                key={TAX_FREE_AMOUNT_IDENTIFIER}\n                                {...this.state[TAX_FREE_AMOUNT_IDENTIFIER]}\n                            />\n                            {/* Time Options */}\n                            <SidebarSectionHeading title=\"Time Options\" />\n                            <TextInputElement key={AGE_IDENTIFIER} {...this.state[AGE_IDENTIFIER]} />\n                            <TextInputElement\n                                key={LIFE_EXPECTATION_IDENTIFIER}\n                                {...this.state[LIFE_EXPECTATION_IDENTIFIER]}\n                            />\n                            <TextInputElement key={SAVING_PHASE_IDENTIFIER} {...this.state[SAVING_PHASE_IDENTIFIER]} />\n                            {/* Cost Options */}\n                            <SidebarSectionHeading title=\"Cost Options\" />\n                            <TextInputElement\n                                key={TRANSACTION_COSTS_IDENTIFIER}\n                                {...this.state[TRANSACTION_COSTS_IDENTIFIER]}\n                            />\n                            <CheckboxInputElement\n                                key={TRANSACTION_COSTS_TYPE_IDENTIFIER}\n                                {...this.state[TRANSACTION_COSTS_TYPE_IDENTIFIER]}\n                            />\n                            {/* Visualization Options */}\n                            <SidebarSectionHeading title=\"Visualization Options\" />\n                            <CheckboxInputElement\n                                key={DETAILED_GRAPH_IDENTIFIER}\n                                {...this.state[DETAILED_GRAPH_IDENTIFIER]}\n                            />\n                        </form>\n                    </nav>\n                    <main className=\"col-md-9 col-lg-10 ms-sm-auto\">\n                        <h1>Etf Pension Plan Visualization</h1>\n                        <Visualization {...visualizationProps} />\n                    </main>\n                </div>\n            </div>\n        );\n    }\n}\n\nfunction getInitialInputFormState(caller) {\n    return {\n        [STARTING_CAPITAL_IDENTIFIER]: {\n            value: 1000,\n            type: 'text',\n            label: 'Starting Capital',\n            textAppending: '€',\n            identifier: STARTING_CAPITAL_IDENTIFIER,\n            transformFunction: transformInputToInt,\n            onValueChange: caller.handleTextChange,\n        },\n        [MONTHLY_INVESTMENT_IDENTIFIER]: {\n            value: 100,\n            type: 'text',\n            label: 'Monthly Investment',\n            textAppending: '€',\n            identifier: MONTHLY_INVESTMENT_IDENTIFIER,\n            transformFunction: transformInputToInt,\n            onValueChange: caller.handleTextChange,\n        },\n        [MONTHLY_PAYOUT_IDENTIFIER]: {\n            value: 1000,\n            type: 'text',\n            label: 'Monthly Payout',\n            textAppending: '€',\n            identifier: MONTHLY_PAYOUT_IDENTIFIER,\n            transformFunction: transformInputToInt,\n            onValueChange: caller.handleTextChange,\n        },\n        [TRANSACTION_COSTS_IDENTIFIER]: {\n            value: 0.005,\n            type: 'text',\n            label: 'Transaction Costs',\n            textAppending: '%',\n            identifier: TRANSACTION_COSTS_IDENTIFIER,\n            transformFunction: transformInputToFloat,\n            onValueChange: caller.handleTextChange,\n        },\n        [TRANSACTION_COSTS_TYPE_IDENTIFIER]: {\n            value: false,\n            type: 'checkbox',\n            label: 'Fixed Amount',\n            textAppending: '',\n            identifier: TRANSACTION_COSTS_TYPE_IDENTIFIER,\n            onValueChange: caller.handleCheckBoxChange,\n        },\n        [SAVING_PHASE_IDENTIFIER]: {\n            value: 40,\n            type: 'text',\n            label: 'Saving Phase',\n            textAppending: 'Y',\n            identifier: SAVING_PHASE_IDENTIFIER,\n            transformFunction: transformInputToInt,\n            onValueChange: caller.handleTextChange,\n        },\n        [AGE_IDENTIFIER]: {\n            value: 30,\n            type: 'text',\n            label: 'Your Age',\n            textAppending: 'Y',\n            identifier: AGE_IDENTIFIER,\n            transformFunction: transformInputToInt,\n            onValueChange: caller.handleTextChange,\n        },\n        [TAX_FREE_AMOUNT_IDENTIFIER]: {\n            value: 801,\n            type: 'text',\n            label: 'Tax Free Amount',\n            textAppending: '€',\n            identifier: TAX_FREE_AMOUNT_IDENTIFIER,\n            transformFunction: transformInputToInt,\n            onValueChange: caller.handleTextChange,\n        },\n        [LIFE_EXPECTATION_IDENTIFIER]: {\n            value: 80,\n            type: 'text',\n            label: 'Life Expectation',\n            textAppending: 'Y',\n            identifier: LIFE_EXPECTATION_IDENTIFIER,\n            transformFunction: transformInputToInt,\n            onValueChange: caller.handleTextChange,\n        },\n        [DETAILED_GRAPH_IDENTIFIER]: {\n            value: false,\n            type: 'checkbox',\n            label: 'Detailed Graph',\n            textAppending: '',\n            identifier: DETAILED_GRAPH_IDENTIFIER,\n            onValueChange: caller.handleCheckBoxChange,\n        },\n    };\n}\n\nexport default InputForm;\n","import InputForm from './components/InputForm';\n\nfunction App() {\n    return (\n        <div className=\"Input\">\n            <InputForm />\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './scss/main.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}