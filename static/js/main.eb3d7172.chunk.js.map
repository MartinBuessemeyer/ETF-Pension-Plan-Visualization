{"version":3,"sources":["helpers/utils.js","model/ForecastModel.js","model/PartiallyCalculations.js","model/AccumulateModel.js","model/VisualizationModel.js","renderer/LineChartd3.js","components/InputForm.js","App.js","reportWebVitals.js","index.js"],"names":["timeDiffIgnoreDivisor","numberOfMonthsOfAYear","isStartOfTheYear","date","getMonth","intervalIsEndOfYear","startDate","endDate","getFullYear","loadHistoricalETFData","etfIdentifier","apiKey","a","d3","entry","timestamp","Date","toString","dividend","parseFloat","course","historicalData","sort","b","etfHistoricalToForecastArray","map","dateToTimestamp","Math","floor","getTime","ForecastModel","backCastTimeFactor","backCastTimeConstant","this","predictors","backCastTimeDate","setMonth","backCastTimestampConstant","forecastArray","firstTimestamp","lastTimestamp","length","maxTimestampBeforePredictorRepetition","history","lastTimestampToIncludeInPrediction","abs","filteredForecastArray","filter","regression","linear","_loadHistoricalDataIfNotPresent","_dateToPredictorTimestampAndDateTimestamp","predictorTimestamp","_createPredictorIfNotPresent","predict","corporateTaxRatio","calculatePrizeGain","amount","calculateCosts","costConfiguration","costs","percentageCosts","fixedCosts","calculateTaxesOnThesaurierer","totalGain","taxFreeAmount","amountAtBeginningOfYear","taxAmount","max","subtractTaxFreeGain","gain","min","calculateVorabpauschale","leftoverToApplyTaxes","leftoverTaxFreeAmount","AccumulateModel","initialDate","nextDate","newInvestmentAmount","etfIdentifierToRatio","lastYearModelValues","taxFreeAmountForAYear","taxes","etfs","yearBeginningCapital","totalAmount","investedMoney","calculate","dateDiff","compoundInterestTimeFactor","etfInvestmentAmount","calculateNextEtfValueAndCosts","newInvestmentAmountNetto","inflation","value","timeFactor","pow","calculateInflation","investmentAmount","prevETFData","etfPrizeGain","capital","etfDividendGain","numberOfInvestmentSteps","round","monthlyInvestmentNetto","invested","i","calculateNewInvestmentOfETFAndCosts","investment","investmentGain","investmentCosts","dividendPayout","totalGainBrutto","etfValueBrutto","startCapital","subtractedStartCapital","values","Object","entries","etfRatio","getNextDate","forecastDate","intervalLengthInMonths","sumOfMonths","newMonth","newYear","VisualizationModel","monthlyInvestment","savingPhaseLength","age","Number","isInteger","investmentPerPeriod","_calculateTimestampsForVisualization","_calculateAllYearModels","fadeOutYears","yearsLeft","currentYearBeginning","setFullYear","lifeExpectationDate","calculateForecastInterval","forecastBeginning","forecastEnd","dates","currentForecast","push","nextFutureDate","yearModels","getInitialModelValues","previousYearValues","renderDivRef","width","svg","append","attr","height","renderData","getD3Representation","dataExtend","extent","minVal","maxVal","yScale","domain","range","xScale","xWidth","yearModel","x","currentYearClass","toDateString","split","join","data","bars","selectAll","enter","d","yStart","yEnd","class","style","call","tickFormat","toLocaleString","moneyDataArray","e","unshift","money","datum","y","LineChart3D","visualizationModel","innerHTML","dataToIndex","currentIdx","capitalIdentifier","dividendIdentifier","lineData","heightOffset","cssClass","STARTING_CAPITAL_IDENTIFIER","MONTHLY_INVESTMENT_IDENTIFIER","TRANSACTION_COSTS_IDENTIFIER","TRANSACTION_COSTS_TYPE_IDENTIFIER","SAVING_PHASE_IDENTIFIER","PAYOUT_PHASE_IDENTIFIER","AGE_IDENTIFIER","TAX_FREE_AMOUNT_IDENTIFIER","identifierToLabel","InputForm","props","state","type","forecastModel","handleChange","bind","ref","React","createRef","changedValue","changedStateIdentifier","setState","console","log","IBM","render","getVisulaizationModel","current","Fragment","keys","stateIdentifier","label","onValueChange","Component","InputFormElement","newValue","target","onChange","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.eb3d7172.chunk.js","sourcesContent":["import * as d3 from 'd3';\n\n// Ignore milliseconds, seconds, minutes.\nconst timeDiffIgnoreDivisor = 1000 * 60 * 60;\n\nexport const timestampIndexOfForecastArray = 0;\nexport const courseIndexOfForecastArray = 1;\nexport const numberOfMonthsOfAYear = 12;\nexport const inflationRate = 0.01;\n\nexport function isStartOfTheYear(date) {\n    return date.getMonth() === 0;\n}\n\nexport function intervalIsEndOfYear(startDate, endDate){\n    return startDate.getFullYear() < endDate.getFullYear();\n}\n\nexport async function loadHistoricalETFData(etfIdentifier, apiKey) {\n    const historicalData = await d3.csv(\n        `https://www.alphavantage.co/query?function=TIME_SERIES_MONTHLY_ADJUSTED&symbol=${etfIdentifier}&apikey=${apiKey}&datatype=csv`,\n        entry => {\n            return {\n                timestamp: new Date(entry.timestamp.toString()),\n                dividend: parseFloat(entry['dividend amount']),\n                course: parseFloat(entry['adjusted close']),\n            };\n        }\n    );\n    historicalData.sort((a, b) => a.timestamp - b.timestamp);\n    return historicalData;\n}\n\nexport function etfHistoricalToForecastArray(historicalData) {\n    return historicalData.map(entry => [dateToTimestamp(entry.timestamp), entry.course]);\n}\n\nexport function dateToTimestamp(date) {\n    return Math.floor(date.getTime() / timeDiffIgnoreDivisor);\n}\n\nexport function timestampToDate(timestamp) {\n    return new Date(timestamp * timeDiffIgnoreDivisor);\n}\n\nexport default numberOfMonthsOfAYear;\n","import regression from 'regression';\nimport {\n    dateToTimestamp,\n    etfHistoricalToForecastArray,\n    loadHistoricalETFData,\n    timestampToDate,\n    timestampIndexOfForecastArray,\n    courseIndexOfForecastArray,\n} from '../helpers/utils';\n\nexport class ForecastModel {\n    constructor(apiKey, backCastTimeFactor = 2, backCastTimeConstant = 7) {\n        this.historicalData = {};\n        this.predictors = {};\n        this.backCastTimeFactor = backCastTimeFactor;\n        this.apiKey = apiKey;\n        const backCastTimeDate = new Date(0);\n        backCastTimeDate.setMonth(backCastTimeConstant);\n        this.backCastTimestampConstant = dateToTimestamp(backCastTimeDate);\n    }\n\n    async _loadHistoricalDataIfNotPresent(etfIdentifier) {\n        if (etfIdentifier in this.historicalData) {\n            return;\n        }\n        const historicalData = await loadHistoricalETFData(etfIdentifier);\n        const forecastArray = etfHistoricalToForecastArray(historicalData);\n        const firstTimestamp = forecastArray[0][timestampIndexOfForecastArray];\n        const lastTimestamp = forecastArray[forecastArray.length - 1][timestampIndexOfForecastArray];\n        const maxTimestampBeforePredictorRepetition =\n            lastTimestamp + (lastTimestamp - firstTimestamp) / this.backCastTimeFactor;\n        this.historicalData[etfIdentifier] = {\n            history: historicalData,\n            forecastArray: forecastArray,\n            maxTimestampBeforePredictorRepetition: maxTimestampBeforePredictorRepetition,\n        };\n    }\n\n    _createPredictorIfNotPresent(etfIdentifier, timestamp) {\n        if (!(etfIdentifier in this.predictors)) {\n            this.predictors[etfIdentifier] = {};\n        }\n        // Skip if already exists.\n        if (timestamp in this.predictors[etfIdentifier]) {\n            return;\n        }\n        const forecastArray = this.historicalData[etfIdentifier].forecastArray;\n        const lastTimestampToIncludeInPrediction =\n            forecastArray[forecastArray.length - 1][timestampIndexOfForecastArray] -\n            Math.abs(forecastArray[forecastArray.length - 1][timestampIndexOfForecastArray] - timestamp) *\n                this.backCastTimeFactor -\n            this.backCastTimestampConstant;\n        const filteredForecastArray = forecastArray.filter(\n            entry => entry[timestampIndexOfForecastArray] >= lastTimestampToIncludeInPrediction\n        );\n        this.predictors[etfIdentifier][timestamp] = regression.linear(filteredForecastArray);\n    }\n\n    _dateToPredictorTimestampAndDateTimestamp(date) {\n        const timestamp = dateToTimestamp(date);\n        return [\n            timestamp > this.maxTimestampBeforePredictorRepetition\n                ? this.maxTimestampBeforePredictorRepetition\n                : timestamp,\n            timestamp,\n        ];\n    }\n\n    async predict(etfIdentifier, date) {\n        await this._loadHistoricalDataIfNotPresent(etfIdentifier, this.apiKey);\n        const [predictorTimestamp, timestamp] = this._dateToPredictorTimestampAndDateTimestamp(date);\n        this._createPredictorIfNotPresent(etfIdentifier, predictorTimestamp);\n        return this.predictors[etfIdentifier][predictorTimestamp].predict(timestamp)[courseIndexOfForecastArray];\n    }\n}\n\nexport default ForecastModel;\n","import { numberOfMonthsOfAYear, intervalIsEndOfYear } from '../helpers/utils';\n\nconst corporateTaxRatio = 0.26375;\nconst basicRateOfInterest = 0.09;\nconst prizeGainRate = 0.025;\nconst inflationRate = 0.01;\n\nexport function calculateInflation(value, initialDate, endDate) {\n    // TODO predict inflationRate??? if so how should I calculate it?\n    const timeFactor =\n        endDate.getFullYear() -\n        initialDate.getFullYear() +\n        (endDate.getMonth() - initialDate.getMonth()) / numberOfMonthsOfAYear;\n    return value - value * Math.pow(1 - inflationRate, timeFactor);\n}\n\nexport function calculatePrizeGain(amount, numberOfMonths = numberOfMonthsOfAYear) {\n    // TODO add forecast.\n    return amount * prizeGainRate;\n}\n\nexport function calculateNewDividendPayout(etfIdentifier, startDate, endDate) {\n    // Only pay out dividend if a year has passed.\n    if (intervalIsEndOfYear(startDate, endDate)) {\n        // TODO add forecasting\n        return 500;\n    }\n    return 0;\n}\n\nexport function calculateCosts(amount, costConfiguration) {\n    const costs = amount * costConfiguration.percentageCosts + costConfiguration.fixedCosts;\n    return [amount - costs, costs];\n}\n\nexport function subtractTaxFreeGain(taxAmount, taxFreeAmount) {\n    const leftoverTaxes = Math.max(0, taxAmount - taxFreeAmount);\n    const leftoverTaxFreeAmount = Math.max(0, taxFreeAmount - taxAmount);\n    return [leftoverTaxes, leftoverTaxFreeAmount];\n}\n\nexport function calculateVorabpauschale(amountAtBeginningOfYear, gain) {\n    // TODO basicRateOfInterest prediction???\n    return Math.min(amountAtBeginningOfYear * 0.7 * basicRateOfInterest, gain);\n}\n\nexport function calculateTaxesOnThesaurierer(totalGain, taxFreeAmount, amountAtBeginningOfYear, startDate, endDate) {\n    if (!intervalIsEndOfYear(startDate, endDate)) {\n        return [0, taxFreeAmount];\n    }\n    const amountToApplyTaxes = calculateVorabpauschale(amountAtBeginningOfYear, totalGain);\n    const [leftoverToApplyTaxes, leftoverTaxFreeAmount] = subtractTaxFreeGain(amountToApplyTaxes, taxFreeAmount)\n    const taxAmount = calculateTaxesOnAmount(leftoverToApplyTaxes);\n    return [taxAmount, leftoverTaxFreeAmount]\n}\n\nexport function calculateTaxesOnAmount(amount) {\n    return amount * 0.7 * corporateTaxRatio;\n}\n\nexport function calculateNewInvestmentOfETFAndCosts(\n    etfInvestmentAmount,\n    compoundInterestTimeFactor,\n    costConfiguration\n) {\n    const numberOfInvestmentSteps = Math.round(compoundInterestTimeFactor * numberOfMonthsOfAYear);\n    const monthlyInvestmentBrutto = etfInvestmentAmount / numberOfInvestmentSteps;\n    const [monthlyInvestmentNetto, monthlyCosts] = calculateCosts(monthlyInvestmentBrutto, costConfiguration);\n    const costs = monthlyCosts * numberOfInvestmentSteps;\n    let invested = 0;\n    let gain = 0;\n    for (let i = numberOfInvestmentSteps; i > 0.0; i--) {\n        invested += monthlyInvestmentNetto;\n        gain += calculatePrizeGain(monthlyInvestmentNetto, i);\n    }\n    return [invested, gain, costs];\n}\n","import { numberOfMonthsOfAYear, isStartOfTheYear } from '../helpers/utils';\nimport {\n    calculatePrizeGain,\n    calculateNewInvestmentOfETFAndCosts,\n    calculateNewDividendPayout,\n    calculateTaxesOnThesaurierer,\n    calculateCosts,\n    calculateInflation,\n} from './PartiallyCalculations';\n\nexport class AccumulateModel {\n    constructor(\n        initialDate,\n        date,\n        nextDate,\n        newInvestmentAmount,\n        etfIdentifierToRatio,\n        costConfiguration,\n        lastYearModelValues,\n        taxFreeAmountForAYear\n    ) {\n        this.initialDate = initialDate; // required for forecasting later on.\n        this.lastYearModelValues = lastYearModelValues;\n        this.startDate = date;\n        this.newInvestmentAmount = newInvestmentAmount;\n        this.endDate = nextDate;\n        this.etfIdentifierToRatio = etfIdentifierToRatio;\n        this.costConfiguration = costConfiguration;\n        // TODO maybe remove values and put values directly on object. and take startDate from lastYearModelValues\n        this.costs = lastYearModelValues.costs;\n        this.costs = lastYearModelValues.costs;\n        this.taxes = lastYearModelValues.taxes;\n        this.etfs = {};\n        this.yearBeginningCapital = isStartOfTheYear(this.startDate)\n            ? lastYearModelValues.totalAmount\n            : lastYearModelValues.yearBeginningCapital;\n        this.totalAmount = 0;\n        this.investedMoney = lastYearModelValues.investedMoney + newInvestmentAmount;\n        this.leftoverTaxFreeAmount = isStartOfTheYear(this.startDate)\n            ? taxFreeAmountForAYear\n            : lastYearModelValues.leftoverTaxFreeAmount;\n        this.calculate();\n    }\n\n    static getInitialModelValues(startCapital, etfIdentifierToRatio, costConfiguration, taxFreeAmount, initialDate) {\n        const [subtractedStartCapital, costs] = calculateCosts(startCapital, costConfiguration);\n        const values = {\n            costs: costs,\n            taxes: 0,\n            inflation: 0,\n            investedMoney: startCapital,\n            etfs: {},\n            yearBeginningCapital: subtractedStartCapital,\n            totalAmount: subtractedStartCapital,\n            leftoverTaxFreeAmount: taxFreeAmount,\n            endDate: initialDate,\n        };\n        for (const [etfIdentifier, etfRatio] of Object.entries(etfIdentifierToRatio)) {\n            values.etfs[etfIdentifier] = {\n                capital: etfRatio * subtractedStartCapital,\n                dividend: 0,\n            };\n        }\n        return values;\n    }\n\n    calculate() {\n        const dateDiff = new Date(this.endDate - this.startDate);\n        const compoundInterestTimeFactor =\n            dateDiff.getFullYear() - new Date(0).getFullYear() + dateDiff.getMonth() / numberOfMonthsOfAYear;\n        for (const etfIdentifier in this.lastYearModelValues.etfs) {\n            const etfInvestmentAmount = this.etfIdentifierToRatio[etfIdentifier] * this.newInvestmentAmount;\n            this.etfs[etfIdentifier] = {};\n            this.calculateNextEtfValueAndCosts(etfIdentifier, etfInvestmentAmount, compoundInterestTimeFactor);\n        }\n        const [newInvestmentAmountNetto] = calculateCosts(this.newInvestmentAmount, this.costConfiguration);\n        const totalGain = this.totalAmount - this.yearBeginningCapital - newInvestmentAmountNetto;\n        const [taxes, leftoverTaxFreeAmount] = calculateTaxesOnThesaurierer(\n            totalGain,\n            this.leftoverTaxFreeAmount,\n            this.yearBeginningCapital,\n            this.startDate,\n            this.endDate\n        );\n        this.taxes += taxes;\n        this.leftoverTaxFreeAmount = leftoverTaxFreeAmount;\n        // TODO calculation is probably wrong.\n        this.inflation = calculateInflation(this.totalAmount, this.initialDate, this.endDate);\n    }\n\n    calculateNextEtfValueAndCosts(etfIdentifier, investmentAmount, compoundInterestTimeFactor) {\n        const prevETFData = this.lastYearModelValues.etfs[etfIdentifier];\n        const etfPrizeGain = calculatePrizeGain(prevETFData.capital);\n        const etfDividendGain = calculatePrizeGain(prevETFData.dividend);\n        const [investment, investmentGain, investmentCosts] = calculateNewInvestmentOfETFAndCosts(\n            investmentAmount,\n            compoundInterestTimeFactor,\n            this.costConfiguration\n        );\n        const dividendPayout = calculateNewDividendPayout(etfIdentifier, this.startDate, this.endDate);\n        const totalGainBrutto = etfPrizeGain + etfDividendGain + investmentGain + dividendPayout;\n        const etfValueBrutto = prevETFData.capital + totalGainBrutto + investment;\n\n        this.etfs[etfIdentifier].capital = etfValueBrutto;\n        this.etfs[etfIdentifier].dividend = prevETFData.dividend + dividendPayout + etfDividendGain;\n\n        this.totalAmount += etfValueBrutto;\n        this.costs += investmentCosts;\n    }\n}\n\nexport default AccumulateModel;\n","import * as d3 from 'd3';\nimport { interval } from 'd3';\nimport { numberOfMonthsOfAYear } from '../helpers/utils';\nimport AccumulateModel from './AccumulateModel';\n\nfunction calculateForecastInterval(age, lifeExpectation = 80, fadeOutYears = 10) {\n    const yearsLeft = lifeExpectation - age;\n    const currentYearBeginning = new Date(0);\n    currentYearBeginning.setFullYear(new Date().getFullYear());\n    const lifeExpectationDate = new Date(0);\n    lifeExpectationDate.setFullYear(new Date().getFullYear() + yearsLeft + fadeOutYears);\n    return [currentYearBeginning, lifeExpectationDate];\n}\n\n// Calculate next date in a more complex way to avoid Date inconsistencies such as a leap year.\nfunction getNextDate(forecastDate, intervalLengthInMonths) {\n    const sumOfMonths = forecastDate.getMonth() + intervalLengthInMonths;\n    const newMonth = sumOfMonths % numberOfMonthsOfAYear;\n    const newYear = forecastDate.getFullYear() + Math.floor(sumOfMonths / numberOfMonthsOfAYear);\n    return new Date(newYear, newMonth);\n}\n\nexport class VisualizationModel {\n    constructor(\n        startCapital,\n        monthlyInvestment,\n        savingPhaseLength,\n        etfIdentifierToRatio,\n        costConfiguration,\n        age,\n        taxFreeAmount,\n        intervalLengthInMonths = numberOfMonthsOfAYear\n    ) {\n        if (!Number.isInteger(intervalLengthInMonths / numberOfMonthsOfAYear)) {\n            throw `currently only month lengths that are a factor of ${numberOfMonthsOfAYear} are allowed.`;\n        }\n        this.taxFreeAmount = taxFreeAmount;\n        this.startCapital = startCapital;\n        this.investmentPerPeriod = monthlyInvestment * intervalLengthInMonths;\n        this.savingPhaseLength = savingPhaseLength;\n        this.etfIdentifierToRatio = etfIdentifierToRatio;\n        this.costConfiguration = costConfiguration;\n        this.age = age;\n        this.intervalLengthInMonths = intervalLengthInMonths;\n        this._calculateTimestampsForVisualization();\n        this._calculateAllYearModels();\n    }\n    _calculateTimestampsForVisualization() {\n        const [forecastBeginning, forecastEnd] = calculateForecastInterval(this.age);\n        const dates = [];\n        let currentForecast = forecastBeginning;\n        while (currentForecast <= forecastEnd) {\n            dates.push(currentForecast);\n            currentForecast = getNextDate(currentForecast, this.intervalLengthInMonths);\n        }\n        this.dates = dates;\n        this.nextFutureDate = currentForecast;\n    }\n\n    _calculateAllYearModels() {\n        const yearModels = [AccumulateModel.getInitialModelValues(\n            this.startCapital,\n            this.etfIdentifierToRatio,\n            this.costConfiguration,\n            this.taxFreeAmount,\n            this.dates[0]\n        )];\n        for (let i = 0; i < this.dates.length - 1; i++) {\n            const previousYearValues = yearModels[yearModels.length - 1];\n            yearModels.push(\n                new AccumulateModel(\n                    this.dates[0],\n                    this.dates[i],\n                    this.dates[i + 1],\n                    this.investmentPerPeriod,\n                    this.etfIdentifierToRatio,\n                    this.costConfiguration,\n                    previousYearValues,\n                    this.taxFreeAmount,\n                )\n            );\n        }\n        if (this.dates.length > 1) {\n            yearModels.push(\n                new AccumulateModel(\n                    this.dates[0],\n                    this.dates[this.dates.length - 1],\n                    this.nextFutureDate,\n                    this.investmentPerPeriod,\n                    this.etfIdentifierToRatio,\n                    this.costConfiguration,\n                    yearModels[yearModels.length - 1],\n                    this.taxFreeAmount\n                )\n            );\n            this.yearModels = yearModels;\n        }\n    }\n\n    renderVisualization(renderDivRef) {\n        const svgID = 'firstSVG';\n        const investedMoneyLineID = 'investedMoney';\n\n        const marginW = 150,\n            marginH = 40,\n            width = 1000,\n            height = 400;\n\n        const zeroLineStrokeWidth = 3;\n\n        const svg = d3\n            .select(renderDivRef)\n            .append('svg')\n            .attr('id', svgID)\n            .attr('height', '100%')\n            .attr('width', '100%')\n            .attr('viewBox', `0 0 ${width + 2 * marginW} ${height + 2 * marginH}`)\n            .append('g')\n            .attr('transform', `translate(${[marginW, marginH]})`);\n\n        // create scales\n        const renderData = this.yearModels.map(a => a.getD3Representation());\n        const dataExtend = renderData.map(a => a.extent);\n        const minVal = d3.min(dataExtend.map(a => a[0]));\n        const maxVal = d3.max(dataExtend.map(a => a[1]));\n\n        const yScale = d3.scaleLinear().domain([minVal, maxVal]).range([height, 0]);\n\n        const xScale = d3.scaleTime().domain([this.dates[0], this.nextFutureDate]).range([0, width]);\n\n        const xWidth = (width / this.dates.length) * 0.9;\n\n        for (let i = 0; i < this.yearModels.length; i++) {\n            const yearModel = this.yearModels[i];\n            const x = yearModel.date;\n            const currentYearClass = x.toDateString().split(' ').join('_');\n            const data = yearModel.getD3Representation().bars;\n            svg.selectAll(`rect.${currentYearClass}`)\n                .append('g')\n                .attr('class', currentYearClass)\n                .data(data)\n                .enter()\n                .append('rect')\n                .attr('x', xScale(x))\n                .attr('y', d => yScale(d.yStart))\n                .attr('width', xWidth)\n                .attr('height', d => yScale(d.yEnd) - yScale(d.yStart))\n                .attr('class', d => d.class);\n        }\n        // Draw axis\n        svg.append('g')\n            .style('font-size', '20px')\n            .call(d3.axisLeft(yScale).tickFormat(d => `${d.toLocaleString()} EUR`));\n\n        svg.append('g')\n            .style('font-size', '20px')\n            .attr('transform', `translate(0, ${height})`)\n            .call(d3.axisBottom(xScale));\n\n        svg.append('g')\n            .append('line')\n            .attr('x1', xScale(this.dates[0]))\n            .attr('y1', yScale(0))\n            .attr('x2', xScale(this.nextFutureDate))\n            .attr('y2', yScale(0))\n            .attr('stroke-width', zeroLineStrokeWidth)\n            .attr('stroke', 'black');\n\n        // Draw invested Money line.\n        const moneyDataArray = renderData.map(e => e.investedMoney);\n        moneyDataArray.unshift({ date: this.dates[0], money: this.startCapital });\n\n        svg.append('path')\n            .datum(moneyDataArray)\n            .attr('fill', 'none')\n            .attr('id', investedMoneyLineID)\n            .attr('stroke-width', 3)\n            .attr(\n                'd',\n                d3\n                    .line()\n                    .x(d => xScale(d.date))\n                    .y(d => yScale(d.money))\n            );\n    }\n\n    updateVisualization() {}\n}\n\nexport default VisualizationModel;\n","import * as d3 from 'd3';\n\nexport class LineChart3D {\n    render(visualizationModel, renderDivRef) {\n        const svgID = 'firstSVG';\n        const investedMoneyLineID = 'investedMoney';\n\n        const marginW = 150,\n            marginH = 40,\n            width = 1000,\n            height = 400;\n\n        const zeroLineStrokeWidth = 3;\n\n        // Reset diagram by deletion.\n        renderDivRef.innerHTML = '';\n\n        const svg = d3\n            .select(renderDivRef)\n            .append('svg')\n            .attr('id', svgID)\n            .attr('height', '100%')\n            .attr('width', '100%')\n            .attr('viewBox', `0 0 ${width + 2 * marginW} ${height + 2 * marginH}`)\n            .append('g')\n            .attr('transform', `translate(${[marginW, marginH]})`);\n\n        // create line array\n\n        const dataToIndex = {\n            costs: 0,\n            taxes: 1,\n            inflation: 2,\n        };\n        let currentIdx = 3;\n        const capitalIdentifier = 'capital';\n        const dividendIdentifier = 'dividend';\n        for (const etfIdentifier in visualizationModel.etfIdentifierToRatio) {\n            dataToIndex[etfIdentifier + dividendIdentifier] = currentIdx++;\n            dataToIndex[etfIdentifier + capitalIdentifier] = currentIdx++;\n        }\n\n        const lineData = [];\n        for (let i = 0; i < currentIdx; i++) {\n            lineData.push([]);\n        }\n        for (const yearModel of visualizationModel.yearModels) {\n            lineData[dataToIndex.costs].push({ value: -yearModel.costs, date: yearModel.endDate });\n            lineData[dataToIndex.taxes].push({\n                value: -yearModel.taxes - yearModel.costs,\n                date: yearModel.endDate,\n            });\n            lineData[dataToIndex.inflation].push({\n                value: -yearModel.inflation - yearModel.taxes - yearModel.costs,\n                date: yearModel.endDate,\n            });\n            let heightOffset = 0;\n            for (const etfIdentifier in visualizationModel.etfIdentifierToRatio) {\n                lineData[dataToIndex[etfIdentifier + capitalIdentifier]].push({\n                    value: yearModel.etfs[etfIdentifier].capital + heightOffset,\n                    date: yearModel.endDate,\n                });\n                lineData[dataToIndex[etfIdentifier + dividendIdentifier]].push({\n                    value: yearModel.etfs[etfIdentifier].capital - yearModel.etfs[etfIdentifier].dividend + heightOffset,\n                    date: yearModel.endDate,\n                });\n                heightOffset += yearModel.etfs[etfIdentifier].capital;\n            }\n        }\n\n        // Append miscellaneous data to array.\n        lineData[dataToIndex.inflation].cssClass = 'inflation';\n        lineData[dataToIndex.taxes].cssClass = 'taxes';\n        lineData[dataToIndex.costs].cssClass = 'costs';\n        for (const etfIdentifier in visualizationModel.etfIdentifierToRatio) {\n            lineData[dataToIndex[etfIdentifier + dividendIdentifier]].cssClass = `${etfIdentifier}_dividend`;\n            lineData[dataToIndex[etfIdentifier + capitalIdentifier]].cssClass = `${etfIdentifier}_total_amount`;\n        }\n\n        // create scales\n        const minVal = d3.min(lineData[dataToIndex.inflation].map(e => e.value));\n        const maxVal = d3.max(lineData[lineData.length - 1].map(e => e.value));\n\n        const yScale = d3.scaleLinear().domain([minVal, maxVal]).range([height, 0]);\n\n        const xScale = d3\n            .scaleTime()\n            .domain([visualizationModel.dates[0], visualizationModel.nextFutureDate])\n            .range([0, width]);\n\n        // Draw axis\n        svg.append('g')\n            .style('font-size', '20px')\n            .call(d3.axisLeft(yScale).tickFormat(d => `${d.toLocaleString()} EUR`));\n\n        svg.append('g')\n            .style('font-size', '20px')\n            .attr('transform', `translate(0, ${height})`)\n            .call(d3.axisBottom(xScale));\n\n        // Draw zero line.\n        svg.append('g')\n            .append('line')\n            .attr('x1', xScale(visualizationModel.dates[0]))\n            .attr('y1', yScale(0))\n            .attr('x2', xScale(visualizationModel.nextFutureDate))\n            .attr('y2', yScale(0))\n            .attr('stroke-width', zeroLineStrokeWidth)\n            .attr('stroke', 'black');\n\n        for (let i = 0; i < lineData.length; i++) {\n            svg.append('path')\n                .datum(lineData[i])\n                .attr('fill', 'none')\n                .attr('class', d => d.cssClass)\n                .attr('stroke-width', 3)\n                .attr(\n                    'd',\n                    d3\n                        .line()\n                        .x(d => xScale(d.date))\n                        .y(d => yScale(d.value))\n                );\n        }\n    }\n}\n\nexport default LineChart3D;\n","import React from 'react';\nimport ForecastModel from '../model/ForecastModel';\nimport VisualizationModel from '../model/VisualizationModel';\nimport LineChart3D from '../renderer/LineChartd3';\n\nconst STARTING_CAPITAL_IDENTIFIER = 'startingCapital';\nconst MONTHLY_INVESTMENT_IDENTIFIER = 'monthlyInvestment';\nconst TRANSACTION_COSTS_IDENTIFIER = 'transactionCosts';\nconst TRANSACTION_COSTS_TYPE_IDENTIFIER = 'transactionCostsType';\nconst SAVING_PHASE_IDENTIFIER = 'savingPhase';\nconst PAYOUT_PHASE_IDENTIFIER = 'payoutPhase';\nconst AGE_IDENTIFIER = 'age';\nconst TAX_FREE_AMOUNT_IDENTIFIER = 'taxFreeAmount';\n\nconst identifierToLabel = {\n    [STARTING_CAPITAL_IDENTIFIER]: 'Starting Capital',\n    [MONTHLY_INVESTMENT_IDENTIFIER]: 'Monthly Investment',\n    [TRANSACTION_COSTS_IDENTIFIER]: 'Transaction Costs',\n    [TRANSACTION_COSTS_TYPE_IDENTIFIER]: 'Fixes Amount ?',\n    [SAVING_PHASE_IDENTIFIER]: 'Saving Phase',\n    [PAYOUT_PHASE_IDENTIFIER]: 'Payout Phase',\n    [AGE_IDENTIFIER]: 'Your Age',\n    [TAX_FREE_AMOUNT_IDENTIFIER]: 'Tax Free Amount',\n};\n\nclass InputForm extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            [STARTING_CAPITAL_IDENTIFIER]: { value: 10000, type: 'text' },\n            [MONTHLY_INVESTMENT_IDENTIFIER]: { value: 100, type: 'text' },\n            [TRANSACTION_COSTS_IDENTIFIER]: { value: 0.005, type: 'text' },\n            [TRANSACTION_COSTS_TYPE_IDENTIFIER]: { value: false, type: 'checkbox' },\n            [SAVING_PHASE_IDENTIFIER]: { value: 40, type: 'text' },\n            [PAYOUT_PHASE_IDENTIFIER]: { value: 20, type: 'text' },\n            [AGE_IDENTIFIER]: { value: 30, type: 'text' },\n            [TAX_FREE_AMOUNT_IDENTIFIER]: { value: 801, type: 'text' },\n        };\n        this.forecastModel = new ForecastModel('demo');\n        this.handleChange = this.handleChange.bind(this);\n\n        this.ref = React.createRef();\n    }\n\n    handleChange(changedValue, changedStateIdentifier) {\n        this.setState({\n            [changedStateIdentifier]: { value: changedValue, type: this.state[changedStateIdentifier].type },\n        });\n        console.log(`State ${changedStateIdentifier} changed value to ${changedValue}.`);\n    }\n\n    getVisulaizationModel(){\n        return new VisualizationModel(\n            this.state[STARTING_CAPITAL_IDENTIFIER].value,\n            this.state[MONTHLY_INVESTMENT_IDENTIFIER].value,\n            this.state[SAVING_PHASE_IDENTIFIER].value,\n            { IBM: 1.0 },\n            { percentageCosts: 0.0, fixedCosts: 5.0 },\n            this.state[AGE_IDENTIFIER].value,\n            this.state[TAX_FREE_AMOUNT_IDENTIFIER].value,\n        );\n    }\n\n    componentDidMount() {\n        \n        new LineChart3D().render(this.getVisulaizationModel(), this.ref.current);\n    }\n\n    componentDidUpdate(){\n        new LineChart3D().render(this.getVisulaizationModel(), this.ref.current);\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                <form>\n                    {Object.keys(this.state).map(stateIdentifier => (\n                        <InputFormElement\n                            key={stateIdentifier}\n                            label={identifierToLabel[stateIdentifier]}\n                            value={this.state[stateIdentifier].value}\n                            type={this.state[stateIdentifier].type}\n                            onValueChange={this.handleChange}\n                            stateIdentifier={stateIdentifier}\n                        />\n                    ))}\n                </form>\n                <div ref={this.ref}></div>\n            </React.Fragment>\n        );\n    }\n}\n\nclass InputFormElement extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    handleChange(e) {\n        let newValue = e.target.value;\n        if (this.props.type === 'checkbox') {\n            newValue = !this.props.value;\n        }\n        this.props.onValueChange(newValue, this.props.stateIdentifier);\n    }\n\n    render() {\n        return (\n            <label>\n                {this.props.label}\n                <input type={this.props.type} value={this.props.value} onChange={this.handleChange} />\n            </label>\n        );\n    }\n}\n\nexport default InputForm;\n","import './App.css';\nimport InputForm from './components/InputForm';\n\nfunction App() {\n    return (\n        <div className=\"Input\">\n            <InputForm />\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}