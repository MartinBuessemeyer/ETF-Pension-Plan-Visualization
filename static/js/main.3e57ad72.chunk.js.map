{"version":3,"sources":["helpers/utils.ts","model/ForecastModel.ts","model/InvestmentModel.ts","renderer/D3ChartStrategy.ts","renderer/AreaChartD3.ts","renderer/CashflowBarChartD3.ts","components/Visualization.tsx","components/ErrorMessageComponent.tsx","components/TextInputElement.tsx","components/CheckboxInputElement.tsx","components/APIKeyOverlay.tsx","components/SidebarSectionHeadingComponent.tsx","components/BrokerDropDown.tsx","components/GraphDetailDropDown.tsx","components/ETFSelectionDropDown.tsx","components/App.tsx","reportWebVitals.js","index.js"],"names":["timeDiffIgnoreDivisor","numberOfMonthsOfAYear","stringToInt","value","int","Number","isNaN","isInteger","percentageStringToFloat","float","stringToFloat","isPercentage","val","isPositiveInt","isFirstMonthOfAYear","date","getMonth","loadHistoricalETFData","etfIdentifier","apiKey","a","d3","entry","undefined","timestamp","Error","Date","toString","dividend","parseFloat","course","historicalData","sort","b","valueOf","etfHistoricalToCourseForecastArray","map","dateToTimestamp","etfHistoricalToDividendForecastArray","currentYear","getFullYear","dividendForecastArray","forEach","length","push","Math","floor","getTime","generateHistoricalDataNotPresentException","roundDateToBeginningOfMonth","month","year","currentDayOfMonth","getDate","maxDayOfMonth","monthOffset","round","ForecastModelSingleton","coursePredictors","dividendPredictors","this","courseForecastArray","maxTimestampBeforeCoursePredictorRepetition","_calculateTimestampForPredictorRepetition","maxYearBeforeDividendPredictorRepetition","history","predictors","forecastArray","lastTimestampToIncludeInPrediction","abs","backCastTimeFactor","backCastTimestampConstant","filteredForecastArray","filter","regression","linear","order","precision","lastYearToIncludeInPrediction","_courseDateToPredictorTimestampAndDateTimestamp","predictorTimestamp","_createCoursePredictorIfNotPresent","predict","predictorYear","_dividendYearToPredictorYear","_createDividendPredictorIfNotPresent","max","backCastTimeConstant","backCastTimeDate","setMonth","instance","getInstance","etfProperties","configure","forecast","_loadAndCacheHistoricalETFData","symbol","console","log","firstTimestamp","lastTimestamp","partialExemption","corporateTaxRatio","getTotalShareValue","investmentStep","totalShares","sharePrizes","getTotalDividendShareValue","dividendTotalShares","getNewShareValue","newShares","getNextMonthDate","newDate","calculateDividend","isLastMonthOfAYear","dividendAmount","predictDividend","sharePrize","predictCourse","calculateCosts","amount","costConfiguration","costs","percentageCosts","fixedCosts","amountWithoutCosts","subtractTaxFreeGain","taxAmount","taxFreeAmount","calculateAndAddInflation","initialDate","sumTotalValues","sum","Object","keys","sumOfTotalValues","timeFactor","inflation","pow","calculateAmountIncrease","percentageIncrease","numberOfMonths","yearsSinceStart","calculateVorabpauschaleTaxes","investmentSteps","leftoverTaxFreeAmount","etfToRatio","min","summedTaxes","decemberInvestmentStep","firstInvestmentStepOfThisYear","distributionsOfETF","distributingNewAmount","accumulatedBasicProfit","i","profitOverAllTime","totalInvestedMoney","profitOfPreviousYears","amountToApplyTaxes","addSavingPhaseMonth","investment","configOptions","useDistributingModel","prevInvestmentStep","newInvestmentStep","cloneDeep","newInvestment","investmentOfEtfWithCosts","costConfig","investmentOfEtfWithoutCosts","newInvestedMoney","etfSharePrize","dividendPayoutMoneyPerShare","dividendPayoutMoney","leftoverDividendPayoutMoneyBrutto","dividendPayoutMoneyBrutto","taxesToPay","totalTaxes","newSharesByDividend","dividendNewShares","newPayout","totalCosts","newTaxes","addPayoutMonth","sellingAmount","leftoverAlreadyPaidTaxes","payoutStats","taxes","amountToSell","dividendPayout","distributingAmountUsableForPayout","amountUsedByDistribution","amountAlreadySold","investmentStepsIdx","costsToPay","alreadyPaidCosts","payoutInvestmentStepIdxForFIFO","currentSharesLeft","alreadySoldShares","currentInvestmentStepForFIFO","leftoverAmountToSell","currentValueOfShares","amountToSellWithCosts","amountOfSharesToSell","amountToSellWithoutCosts","initialValueOfShares","amountToPayTaxes","payoutAmount","totalPayout","amountOfDividendSharesLeft","amountOfDividendSharesSold","generateEmptyInvestmentStep","dummyData","ESGE","SUSA","emptyInvestmentStep","InvestmentModel","startCapital","monthlyInvestment","yearlyInvestmentIncrease","monthlyPayout","yearlyPayoutIncrease","savingPhaseLength","age","expectationOfLife","savingDates","payoutDates","_calculateDatesForModel","_calculateModel","lifeExpectation","fadeOutYears","yearsLeft","now","beginningDate","endSavingPhaseDate","setFullYear","endDate","calculateForecastInterval","startDate","currentDate","slice","numberOfEntriesPerYear","selectedInvestmentSteps","numberOfMonthsToMerge","adjustedInvestmentStep","offset","ONE_MILLION","generateLabel","name","charAt","toUpperCase","replace","D3ChartStrategy","renderDivRef","payoutPhaseStartDate","svgID","tooltipDate","yExtent","captionSpace","width","height","marginW","marginH","lineStrokeWidth","standardFontSize","contentOpacity","labelValueIdentifier","deltaIdentifier","monospaceFont","dateExtent","maxIndex","minIndex","yScale","xScale","dataArray","textProperties","svg","fadeOutGradientID","fadeOutYearsLength","gridOpacity","gridColor","gridStrokeWidth","labelDivisionFactor","numberIndicator","hoverLine","interaction","textGroup","xAxis","yAxis","constructor","activeStrategies","innerHTML","append","attr","_prepareData","_calculateExtents","_createScales","_createAxis","_drawGrid","_drawContent","_drawFadeOut","_prepareText","_drawText","_drawAxis","_addInteraction","_updateAllDiagrams","hasToBePositive","skipDecimalPlaces","decimalPlaces","valueToDisplayNumber","toLocaleString","maximumFractionDigits","minimumFractionDigits","d","lastImportantDateForYScale","filteredDataArrayForYMax","e","filteredDataArrayForYMin","maxVal","yStart","minVal","yEnd","domain","range","ticks","every","tick","tickFormat","valueToDisplayText","gridGroup","yGridGroup","xGridGroup","selectAll","data","enter","style","call","on","_setInteractionVisibilityForActiveDiagrams","mouseEvent","_handleTooltipEvent","x","invert","investmentStepIndex","firstDate","secondDate","numberOfMonthsSinceStartDate","numberOfMonthsPerInvestmentStep","calculateInvestmentStepIndexForDate","activeDiagram","_updateTooltip","_updateDiagram","values","text","y","fontSize","fontFamily","fontWeight","textAnchor","color","savingPhaseMid","payoutPhaseMid","yPos","savingBold","savingPhase","payoutBold","payoutPhase","fadeOutGroup","fadeOutStartDate","gradient","displayOption","AreaChartD3","etfRatio","subtractInflationFromTotal","previousInvestmentSteps","etfLineColors","total","invested","colors","valueTextOffset","negativeLabels","investedIdentifier","capitalIdentifier","totalIdentifier","totalColor","etfIdentifiers","dataToIndex","ratio","currentIdx","heightOffset","totalShareValue","totalDividendShareValue","datum","_drawArea","_drawLines","curve","y0","y1","paddingW","paddingH","ETF_SYMBOL_TO_NAME","yOffset","xPadding","totalValue","investedValue","negativeLabel","currentTotalValue","currentInvestedValue","previousTotalValue","textPropertyIdentifier","includes","getSumNewPayout","sumNewPayout","CashflowBarChart","barPaddingPercentage","payoutIdentifier","maxNumberTextLength","payout","first","second","rectWidth","startYear","colorIdentifier","payoutX","payoutY","investedX","investedY","payoutValue","needToSkipLastBar","barArray","Visualization","firstSVGRef","React","createRef","secondSVGRef","areaChart","barChart","investmentModel","etfIdentifierToRatio","props","etfDropdownSelection","elements","selected","TAX_FREE_AMOUNT_IDENTIFIER","generateCostConfig","STARTING_CAPITAL_IDENTIFIER","MONTHLY_INVESTMENT_IDENTIFIER","YEARLY_INVESTMENT_INCREASE_IDENTIFIER","MONTHLY_PAYOUT_IDENTIFIER","YEARLY_PAYOUT_INCREASE_IDENTIFIER","SAVING_PHASE_IDENTIFIER","AGE_IDENTIFIER","LIFE_EXPECTATION_IDENTIFIER","USE_DISTRIBUTION_MODEL","diagram","Y_AXIS_LOCK_IDENTIFIER","reset","isValid","current","_getETFIdentifierToRatio","getInvestmentSteps","DETAILED_GRAPH_DROPDOWN_IDENTIFIER","_getInvestmentModel","firstPayoutPhaseDate","getPayoutPhaseBeginDate","correctLevelOfDetailInvestmentSteps","_getTooltipDate","_getYAxisExtent","INFLATION_USED_FOR_TOTAL","render","error","_drawVisualization","Fragment","ref","Component","ErrorMessage","id","identifier","className","visibility","errorMessage","TextInputElement","htmlFor","label","type","textAppending","onChange","onValueChange","target","split","disabled","ETFTextInputElement","CheckboxInputElement","Overlay","displayOverlay","href","rel","onClick","handleAPIKeyConfirm","SidebarSectionHeading","titleID","title","data-bs-toggle","data-bs-target","aria-expanded","initiallyCollapsed","aria-controls","children","costsOfElementMatchUIValues","element","BrokerDropDown","aria-labelledby","handleChange","GraphDetailDropDown","ETFSelectionDropDown","elementIdentifier","HTMLInputElement","handleSelectionChange","handleShareChange","autoPercentage","TRANSACTION_COSTS_IDENTIFIER","TRANSACTION_COSTS_TYPE_IDENTIFIER","ETF_DROPDOWN_SELECTION_IDENTIFIER","API_KEY_IDENTIFIER","BROKER_DROPDOWN_IDENTIFIER","ETF_AUTOMATIC_PERCENTAGE_IDENTIFIER","state","recalculateETFPercentages","numberOfSelectedETFs","newPercentage","App","handleTextChange","bind","handleCheckBoxChange","handleBrokerChange","handleGraphDetailChange","handleETFSelectionChange","handleETFShareChange","caller","S_and_P_500","iShare","msciUSA","getInitialInputFormState","changedValue","changedStateIdentifier","_validateAndSetState","brokerProperties","detailProperties","changedETFIdentifier","apiValues","loadHistoricData","setState","forceUpdate","positiveIntIdentifiers","percentageIdentifiers","leftoverYears","sumOfPercentages","foundOneSelectedEtf","noValidate","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3e57ad72.chunk.js","sourcesContent":["import * as d3 from 'd3';\n\nimport { DataPoint } from 'regression';\n\n// Ignore milliseconds, seconds, minutes, hours.\nconst timeDiffIgnoreDivisor = 1000 * 60 * 60 * 24;\n\nexport const timestampIndexOfForecastArray = 0;\nexport const courseIndexOfForecastArray = 1;\nexport const numberOfMonthsOfAYear = 12;\nexport const inflationRate = 0.01;\n\nexport interface IHistoricEntry {\n    date: Date;\n    dividend: number;\n    course: number;\n}\n\n/**\n * Converts the string to an integer and return 0 in the case the parsing fails.\n *\n * @param value The concerning value.\n * @returns The value as an integer.\n */\nexport function stringToInt(value: string) {\n    const int = Number(value);\n    return Number.isNaN(int) || !Number.isInteger(int) ? 0 : int;\n}\n\n/**\n * Converts the string to a float and return 0 in the case the parsing fails.\n *\n * @param value The concerning value.\n * @returns The value as a float.\n */\nexport function stringToFloat(value: string) {\n    const float = Number(value);\n    return Number.isNaN(float) ? 0.0 : float;\n}\n\n/**\n * Converts the string to a float and return 0 in the case the parsing fails.\n *\n * @param value The concerning value.\n * @returns The value as a float.\n */\nexport function percentageStringToFloat(value: string) {\n    return stringToFloat(value) / 100;\n}\n\n/**\n * Returns if the given value is a valid percentage.\n * Meaning that the value is between 0 and 100 and is not NaN.\n *\n * @param val The concerning value.\n * @returns If the value is a valid percentage.\n */\nexport function isPercentage(val: string): boolean {\n    const float = Number(val) / 100;\n    return !Number.isNaN(float) && float >= 0 && float <= 1.0;\n}\n\n/**\n * Returns if the given value is a valid integer.\n * Meaning that the value is an integer and is not NaN.\n *\n * @param val The concerning value.\n * @returns If the value is a valid integer.\n */\nexport function isPositiveInt(val: string): boolean {\n    const int = Number(val);\n    return !Number.isNaN(int) && Number.isInteger(int) && int >= 0;\n}\n\n/**\n * Checks if the date is the last month of a year i.e. December.\n *\n * @param date The date to check.\n * @returns Is the date in December.\n */\nexport function isLastMonthOfAYear(date: Date): boolean {\n    return date.getMonth() === numberOfMonthsOfAYear - 1;\n}\n\n/**\n * Checks if the date is the first month of a year i.e. January.\n *\n * @param date The concerning date.\n * @returns Is the date in January.\n */\nexport function isFirstMonthOfAYear(date: Date): boolean {\n    return date.getMonth() === 0;\n}\n\n/**\n * Clamps the given value into the given min-max range.\n *\n * @param value Value to clamp.\n * @param min Minimum value.\n * @param max Maximum value.\n * @returns\n */\nexport function clamp(value: number, min: number, max: number): number {\n    return Math.max(min, Math.min(value, max));\n}\n\n/**\n * Loads the historic data of the ETF by downloading and parsing it from the [Alphavantage](https://www.alphavantage.co/) API.\n *\n * @param etfIdentifier The ETF identifier (symbol) by [Alphavantage](https://www.alphavantage.co/).\n * @param apiKey The personal API [Alphavantage](https://www.alphavantage.co/) key.\n * @returns The sorted array with the historic entries.\n */\nexport async function loadHistoricalETFData(etfIdentifier: string, apiKey: string): Promise<IHistoricEntry[]> {\n    const historicalData = await d3.csv(\n        `https://www.alphavantage.co/query?function=TIME_SERIES_MONTHLY_ADJUSTED&symbol=${etfIdentifier}&apikey=${apiKey}&datatype=csv`,\n        entry => {\n            if (\n                entry.timestamp === undefined ||\n                entry['dividend amount'] === undefined ||\n                entry['adjusted close'] === undefined\n            ) {\n                throw new Error(`The history of ${etfIdentifier} contained an undefined field.`);\n            }\n            return {\n                date: new Date(entry.timestamp.toString()),\n                dividend: parseFloat(entry['dividend amount']),\n                course: parseFloat(entry['adjusted close']),\n            };\n        }\n    );\n    historicalData.sort((a, b) => a.date.valueOf() - b.date.valueOf());\n    return historicalData;\n}\n\n/**\n * Constructs a course forecasting array which consists of [Date, CourseValue] pairs.\n * The historical data needs to be sorted by the date. Which is already done when loading.\n *\n * @param historicalData The historical data array that should be used for the course forecasting array.\n * @returns The forecasting Array of [Date, CourseValue] pairs.\n */\nexport function etfHistoricalToCourseForecastArray(historicalData: IHistoricEntry[]): DataPoint[] {\n    return historicalData.map(entry => [dateToTimestamp(entry.date), entry.course]);\n}\n\n/**\n * Constructs a dividend forecasting array which consists of [Year, CourseValue] pairs.\n * The historical data needs to be sorted by the date. Which is already done when loading.\n *\n * @param historicalData The historical data array that should be used for the course forecasting array.\n * @returns The forecasting Array of [Year, CourseValue] pairs.\n */\nexport function etfHistoricalToDividendForecastArray(historicalData: IHistoricEntry[]): DataPoint[] {\n    let currentYear = historicalData[0].date.getFullYear();\n    const dividendForecastArray: DataPoint[] = [[currentYear, 0]];\n    historicalData.forEach(entry => {\n        if (entry.date.getFullYear() === currentYear) {\n            dividendForecastArray[dividendForecastArray.length - 1][courseIndexOfForecastArray] += entry.dividend;\n        } else {\n            currentYear = entry.date.getFullYear();\n            dividendForecastArray.push([currentYear, entry.dividend]);\n        }\n    });\n    dividendForecastArray.sort((a, b) => a[timestampIndexOfForecastArray] - b[timestampIndexOfForecastArray]);\n    return dividendForecastArray;\n}\n\n/**\n * Converts the date to a timestamp in the used format.\n * A timestamp is a unix timestamp which counts days instead of milliseconds.\n *\n * @param date The concerning Date.\n * @returns The corresponding timestamp.\n */\nexport function dateToTimestamp(date: Date): number {\n    return Math.floor(date.getTime() / timeDiffIgnoreDivisor);\n}\n\n/**\n * Converts the timestamp to a Date in the used format.\n * A timestamp is a unix timestamp which counts days instead of milliseconds.\n *\n * @param date The concerning timestamp.\n * @returns The corresponding Date.\n */\nexport function timestampToDate(timestamp: number): Date {\n    return new Date(timestamp * timeDiffIgnoreDivisor);\n}\n\n/**\n * Generates a specific error for the given ETF identifier which is used to\n * indicate that the historic data needs to be loaded before forecasting for that etf is available.\n *\n * @param etfIdentifier The Identifier of the ETF.\n * @returns The error object.\n */\nexport function generateHistoricalDataNotPresentException(etfIdentifier: string): Error {\n    return new Error(`First call loadHistoricalDataIfNotPresent() before predicting: ${etfIdentifier}`);\n}\n\n/**\n * Calculates the number of days in the given month and year.\n * Based on: https://stackoverflow.com/a/315767\n *\n * @param month The concerning Month.\n * @param year The concerning Year.\n * @returns The number of days of that month.\n */\nfunction daysInMonth(month: number, year: number): number {\n    return new Date(year, month + 1, 0).getDate();\n}\n\n/**\n * Rounds the given date to the first day of that or the next month.\n *\n * @param date The concerning date.\n * @returns The rounded Date.\n */\nexport function roundDateToBeginningOfMonth(date: Date): Date {\n    const currentDayOfMonth = date.getDate();\n    const maxDayOfMonth = daysInMonth(date.getMonth(), date.getFullYear());\n    const monthOffset = Math.round(currentDayOfMonth / maxDayOfMonth);\n    return new Date(date.getFullYear(), date.getMonth() + monthOffset);\n}\n","import regression from 'regression';\nimport { DataPoint } from 'regression';\nimport {\n    dateToTimestamp,\n    etfHistoricalToCourseForecastArray,\n    etfHistoricalToDividendForecastArray,\n    loadHistoricalETFData,\n    timestampIndexOfForecastArray,\n    courseIndexOfForecastArray,\n    generateHistoricalDataNotPresentException,\n    IHistoricEntry,\n} from '../helpers/utils';\n\ninterface IDividendPredictor {\n    [timestamp: number]: regression.Result;\n}\n\ninterface IDividendPredictors {\n    maxYearBeforeDividendPredictorRepetition: number;\n    predictors: IDividendPredictor;\n}\n\ninterface ICoursePredictors {\n    maxTimestampBeforeCoursePredictorRepetition: number;\n    predictors: ICoursePredictor;\n}\n\ninterface ICoursePredictor {\n    [timestamp: number]: regression.Result;\n}\n\ninterface IETFCoursePredictors {\n    [etfIdentifier: string]: ICoursePredictors;\n}\n\ninterface IETFDividendPredictors {\n    [etfIdentifier: string]: IDividendPredictors;\n}\n\ninterface IHistoricData {\n    [etfIdentifier: string]: IHistoricDataOfETF;\n}\n\ninterface IHistoricDataOfETF {\n    courseForecastArray: DataPoint[];\n    dividendForecastArray: DataPoint[];\n    history: IHistoricEntry[];\n}\n\nexport type ETFIdentifier = 'SP5C.PAR' | 'ESGE' | 'SUSA';\n\nexport interface IETFProperty {\n    identifier: string;\n    symbol: ETFIdentifier;\n    label: string;\n    value: string;\n    selected: boolean;\n}\n\ninterface IETFProperties {\n    [etfIdentifier: string]: IETFProperty;\n}\n\n/**\n * Singleton class that provided course and dividend forecasting of ETFs.\n * It uses [Alphavantage](https://www.alphavantage.co/) to load historic data which\n * are used by a linear regression model for forecasting.\n * The father the forecast day is in the future the more historic data is used to fit the linear regression.\n * The historic data needs to be loaded before a forecast can be done.\n * Dividends are accumulated and predicted per year.\n *\n * Example Code:\n * ```typescript\n * await ForecastModelSingleton.loadHistoricData(apiKey, etfProperties);\n * const instance = ForecastModelSingleton.getInstance();\n * const predictedCourse = instance.predictCourse(etfIdentifier, futureDate);\n * const predictedDividend = instance.predictCourse(etfIdentifier, futureYear);\n * ```\n */\nexport class ForecastModelSingleton {\n    private static instance: null | ForecastModelSingleton = null;\n    private static apiKey: string = '';\n    private static backCastTimestampConstant: number = 7;\n    private static backCastTimeFactor: number = 2;\n\n    private historicalData: IHistoricData = {};\n    private coursePredictors: IETFCoursePredictors = {};\n    private dividendPredictors: IETFDividendPredictors = {};\n\n    private constructor() {}\n\n    /**\n     * Configures the forecasting by setting the concerning values and resetting the present predictors.\n     *\n     * @param apiKey The [Alphavantage](https://www.alphavantage.co/) API Key.\n     * @param backCastTimeFactor Linear forecast factor. The number of dates used for prediction is increase linear towards this factor.\n     * @param backCastTimeConstant Constant forecast Offset. Constantly increases the number of dates used for prediction.\n     */\n    static configure(apiKey: string, backCastTimeFactor = 2, backCastTimeConstant = 7): void {\n        ForecastModelSingleton.apiKey = apiKey;\n        ForecastModelSingleton.backCastTimeFactor = backCastTimeFactor;\n\n        const backCastTimeDate = new Date(0);\n        backCastTimeDate.setMonth(backCastTimeConstant);\n        ForecastModelSingleton.backCastTimestampConstant = dateToTimestamp(backCastTimeDate);\n\n        // reset predictors if present.\n        if (ForecastModelSingleton.instance != null) {\n            const instance = ForecastModelSingleton.getInstance();\n            for (const etfIdentifier in instance.coursePredictors) {\n                instance.coursePredictors[\n                    etfIdentifier\n                ].maxTimestampBeforeCoursePredictorRepetition = ForecastModelSingleton._calculateTimestampForPredictorRepetition(\n                    instance.historicalData[etfIdentifier].courseForecastArray\n                );\n            }\n            for (const etfIdentifier in instance.dividendPredictors) {\n                instance.dividendPredictors[\n                    etfIdentifier\n                ].maxYearBeforeDividendPredictorRepetition = ForecastModelSingleton._calculateTimestampForPredictorRepetition(\n                    instance.historicalData[etfIdentifier].dividendForecastArray\n                );\n            }\n        }\n    }\n\n    /**\n     * Configures the Forecasting with the api key and default forecast values.\n     * Loads the historic data from all ETFs in the etfProperties.\n     *\n     * @param apiKey The [Alphavantage](https://www.alphavantage.co/) API Key.\n     * @param etfProperties The etfProperties.\n     */\n    static async loadHistoricData(apiKey: string, etfProperties: IETFProperties): Promise<void> {\n        ForecastModelSingleton.configure(apiKey);\n        const forecast = ForecastModelSingleton.getInstance();\n        for (const etfIdentifier in etfProperties) {\n            await forecast._loadAndCacheHistoricalETFData(etfProperties[etfIdentifier].symbol);\n        }\n        console.log('Finished loading the historic data.');\n    }\n\n    /**\n     * Returns the Singleton instance of this class.\n     *\n     * @returns The singleton instance.\n     */\n    static getInstance(): ForecastModelSingleton {\n        if (ForecastModelSingleton.instance == null) {\n            ForecastModelSingleton.instance = new ForecastModelSingleton();\n        }\n        return ForecastModelSingleton.instance;\n    }\n\n    /**\n     * Calculates the timestamp at which point all predictors are the same since they use all data points.\n     *\n     * @param forecastArray The concerning forecast array.\n     * @returns The timestamp where the repetition starts.\n     */\n    private static _calculateTimestampForPredictorRepetition(forecastArray: DataPoint[]): number {\n        const firstTimestamp = forecastArray[0][timestampIndexOfForecastArray];\n        const lastTimestamp = forecastArray[forecastArray.length - 1][timestampIndexOfForecastArray];\n        return lastTimestamp + (lastTimestamp - firstTimestamp) / ForecastModelSingleton.backCastTimeFactor;\n    }\n\n    /**\n     * Loads the historic data for the provided etfIdentifier and sets up the predictors.\n     *\n     * @param etfIdentifier The concerning ETFIdentifier.\n     * @returns -\n     */\n    private async _loadAndCacheHistoricalETFData(etfIdentifier: string): Promise<void> {\n        if (etfIdentifier in this.historicalData) {\n            return;\n        }\n        const historicalData = await loadHistoricalETFData(etfIdentifier, ForecastModelSingleton.apiKey);\n\n        const courseForecastArray = etfHistoricalToCourseForecastArray(historicalData);\n        const maxTimestampBeforeCoursePredictorRepetition = ForecastModelSingleton._calculateTimestampForPredictorRepetition(\n            courseForecastArray\n        );\n\n        const dividendForecastArray = etfHistoricalToDividendForecastArray(historicalData);\n        const maxYearBeforeDividendPredictorRepetition = ForecastModelSingleton._calculateTimestampForPredictorRepetition(\n            dividendForecastArray\n        );\n\n        this.historicalData[etfIdentifier] = {\n            history: historicalData,\n            courseForecastArray: courseForecastArray,\n            dividendForecastArray: dividendForecastArray,\n        };\n        this.coursePredictors[etfIdentifier] = {\n            maxTimestampBeforeCoursePredictorRepetition: maxTimestampBeforeCoursePredictorRepetition,\n            predictors: {},\n        };\n        this.dividendPredictors[etfIdentifier] = {\n            maxYearBeforeDividendPredictorRepetition: maxYearBeforeDividendPredictorRepetition,\n            predictors: {},\n        };\n    }\n\n    /**\n     * Creates the course predictor for the etfIdentifier and the given timestamp if not already present.\n     *\n     * @param etfIdentifier The concerning etfIdentifier.\n     * @param timestamp The concerning timestamp.\n     * @returns\n     */\n    private _createCoursePredictorIfNotPresent(etfIdentifier: string, timestamp: number) {\n        // Skip if already exists.\n        if (timestamp in this.coursePredictors[etfIdentifier]) {\n            return;\n        }\n        const forecastArray = this.historicalData[etfIdentifier].courseForecastArray;\n        const lastTimestampToIncludeInPrediction =\n            forecastArray[forecastArray.length - 1][timestampIndexOfForecastArray] -\n            Math.abs(forecastArray[forecastArray.length - 1][timestampIndexOfForecastArray] - timestamp) *\n                ForecastModelSingleton.backCastTimeFactor -\n            ForecastModelSingleton.backCastTimestampConstant;\n        const filteredForecastArray = forecastArray.filter(\n            entry => entry[timestampIndexOfForecastArray] >= lastTimestampToIncludeInPrediction\n        );\n        this.coursePredictors[etfIdentifier].predictors[timestamp] = regression.linear(filteredForecastArray, {\n            order: 2,\n            precision: 20,\n        });\n    }\n\n    /**\n     * Calculates the timestamp of the given date and the timestamp that should be used for the predictor.\n     * That means that the predictor timestamp is clamped to the timestamp where the predictor already uses all data points.\n     *\n     * @param date The concerning Date.\n     * @param etfIdentifier The concerning etfIdentifier.\n     * @returns The predictor timestamp and date timestamp.\n     */\n    private _courseDateToPredictorTimestampAndDateTimestamp(date: Date, etfIdentifier: string): [number, number] {\n        const timestamp = dateToTimestamp(date);\n        return [\n            timestamp > this.coursePredictors[etfIdentifier].maxTimestampBeforeCoursePredictorRepetition\n                ? this.coursePredictors[etfIdentifier].maxTimestampBeforeCoursePredictorRepetition\n                : timestamp,\n            timestamp,\n        ];\n    }\n\n    /**\n     * Creates the dividend predictor for the given etf and the year.\n     *\n     * @param etfIdentifier The concerning etfIdentifier.\n     * @param year The concerning year.\n     */\n    private _createDividendPredictorIfNotPresent(etfIdentifier: string, year: number): void {\n        // Skip if already exists.\n        if (year in this.dividendPredictors[etfIdentifier]) {\n            return;\n        }\n        const forecastArray = this.historicalData[etfIdentifier].dividendForecastArray;\n        const lastYearToIncludeInPrediction =\n            forecastArray[forecastArray.length - 1][timestampIndexOfForecastArray] -\n            Math.abs(forecastArray[forecastArray.length - 1][timestampIndexOfForecastArray] - year) *\n                ForecastModelSingleton.backCastTimeFactor -\n            ForecastModelSingleton.backCastTimestampConstant;\n        const filteredForecastArray = forecastArray.filter(\n            entry => entry[timestampIndexOfForecastArray] >= lastYearToIncludeInPrediction\n        );\n        this.dividendPredictors[etfIdentifier].predictors[year] = regression.linear(filteredForecastArray, {\n            order: 2,\n            precision: 20,\n        });\n    }\n\n    /**\n     * Clamps the given year to the year when all predictors would be the same\n     *  since all historic data of the given etf is already used.\n     *\n     * @param etfIdentifier The concerning etfIdentifier.\n     * @param year The concerning year.\n     * @returns The adjusted year.\n     */\n    private _dividendYearToPredictorYear(etfIdentifier: string, year: number): number {\n        return this.dividendPredictors[etfIdentifier].maxYearBeforeDividendPredictorRepetition < year\n            ? this.dividendPredictors[etfIdentifier].maxYearBeforeDividendPredictorRepetition\n            : year;\n    }\n\n    /**\n     * Predicts the course of the given ETF at the given date.\n     *\n     * @param etfIdentifier The concerning etfIdentifier\n     * @param date The concerning date.\n     * @returns The predicted course of the etf.\n     */\n    predictCourse(etfIdentifier: string, date: Date) {\n        if (!(etfIdentifier in this.coursePredictors)) {\n            throw generateHistoricalDataNotPresentException(etfIdentifier);\n        }\n        const [predictorTimestamp, timestamp] = this._courseDateToPredictorTimestampAndDateTimestamp(\n            date,\n            etfIdentifier\n        );\n        this._createCoursePredictorIfNotPresent(etfIdentifier, predictorTimestamp);\n        return this.coursePredictors[etfIdentifier].predictors[predictorTimestamp].predict(timestamp)[\n            courseIndexOfForecastArray\n        ];\n    }\n\n    /**\n     * Predicts the dividend amount of the given ETF at the given year.\n     *\n     * @param etfIdentifier The concerning etfIdentifier\n     * @param year The concerning year.\n     * @returns The predicted dividend amount of the etf.\n     */\n    predictDividend(etfIdentifier: string, year: number) {\n        if (!(etfIdentifier in this.dividendPredictors)) {\n            throw generateHistoricalDataNotPresentException(etfIdentifier);\n        }\n        const predictorYear = this._dividendYearToPredictorYear(etfIdentifier, year);\n        this._createDividendPredictorIfNotPresent(etfIdentifier, predictorYear);\n        return Math.max(\n            0,\n            this.dividendPredictors[etfIdentifier].predictors[predictorYear].predict(year)[courseIndexOfForecastArray]\n        );\n    }\n}\n","import { ForecastModelSingleton, ETFIdentifier } from './ForecastModel';\nimport { numberOfMonthsOfAYear, isLastMonthOfAYear, clamp, isFirstMonthOfAYear } from '../helpers/utils';\nimport cloneDeep from 'lodash.clonedeep';\n\nimport { ICostConfiguration, IConfigOptions } from '../components/Visualization';\n\ntype ETFShares = { [key in ETFIdentifier]: number };\n\nexport type ETFRatio = { [key in ETFIdentifier]?: number };\n\nexport type NegativeInvestmentStepIdentifier = 'totalCosts' | 'totalTaxes' | 'inflation';\n\nexport interface InvestmentStep {\n    date: Date;\n    newShares: ETFShares;\n    totalShares: ETFShares;\n    dividendNewShares: ETFShares;\n    dividendTotalShares: ETFShares;\n    distributingNewAmount: ETFShares;\n    distributingAmountUsableForPayout: ETFShares;\n    totalCosts: number;\n    sharePrizes: ETFShares;\n    totalInvestedMoney: ETFShares;\n    newInvestedMoney: ETFShares;\n    newInvestment: number;\n    totalTaxes: number;\n    totalPayout: ETFShares;\n    newPayout: ETFShares;\n    inflation: number;\n}\n\ntype IPayoutStats = { [key in ETFIdentifier]: IPayoutStat };\n\ninterface IPayoutStat {\n    investmentStepsIdx: number;\n    alreadySoldShares: number;\n}\n\nconst basicRateOfInterest = 0.007;\nconst partialExemption = 0.7;\nconst corporateTaxRatio = 0.26375;\nconst inflationRate = 0.01;\nconst defaultDividendAmount = 0.025;\n\n/**\n * Calculates the currency value of all shares of the etf for the given investment step.\n *\n * @param etfIdentifier The concerning etfIdentifier.\n * @param investmentStep The concerning InvestmentStep.\n * @returns The currency value of the total shares of the specified etf.\n */\nexport function getTotalShareValue(etfIdentifier: ETFIdentifier, investmentStep: InvestmentStep): number {\n    return investmentStep.totalShares[etfIdentifier] * investmentStep.sharePrizes[etfIdentifier];\n}\n\n/**\n * Calculates the currency value of all shares generated by dividends of the etf for the given investment step.\n *\n * @param etfIdentifier The concerning etfIdentifier.\n * @param investmentStep The concerning InvestmentStep.\n * @returns The currency value of the total shares generated by dividends. of the specified etf.\n */\nexport function getTotalDividendShareValue(etfIdentifier: ETFIdentifier, investmentStep: InvestmentStep): number {\n    return investmentStep.dividendTotalShares[etfIdentifier] * investmentStep.sharePrizes[etfIdentifier];\n}\n\n/**\n * Calculates the currency value of new shares of the etf for the given investment step.\n *\n * @param etfIdentifier The concerning etfIdentifier.\n * @param investmentStep The concerning InvestmentStep.\n * @returns The currency value of the new shares of the specified etf.\n */\nfunction getNewShareValue(etfIdentifier: ETFIdentifier, investmentStep: InvestmentStep): number {\n    return investmentStep.newShares[etfIdentifier] * investmentStep.sharePrizes[etfIdentifier];\n}\n\n/**\n * Creates a new date which is the given date + 1 month.\n *\n * @param date The concerning date.\n * @returns The given date increased by one month.\n */\nfunction getNextMonthDate(date: Date): Date {\n    const newDate = new Date(date);\n    newDate.setMonth(date.getMonth() + 1);\n    return newDate;\n}\n\n/**\n * Predicts the dividend for the etf at the given date.\n * If the date is not the last month of a year, zero is returned. Indicating that no divided payout has been done.\n * If the dividend prediction is 0 since all historic data is 0, then the defaultDividendAmount is used.\n *\n * @param etfIdentifier The concerning etfIdentifier.\n * @param date The concerning date.\n * @returns The predicted dividend for the given etf and date.\n */\nfunction calculateDividend(etfIdentifier: string, date: Date): number {\n    if (!isLastMonthOfAYear(date)) {\n        return 0;\n    } else {\n        const dividendAmount = ForecastModelSingleton.getInstance().predictDividend(etfIdentifier, date.getFullYear());\n        const sharePrize = ForecastModelSingleton.getInstance().predictCourse(etfIdentifier, date);\n        return dividendAmount > 0 ? dividendAmount : defaultDividendAmount * sharePrize;\n    }\n}\n\n/**\n * Calculates the cost for the given money amount regarding the cost configuration.\n *\n * @param amount The amount of money to which the costs need to be applied.\n * @param costConfiguration The cost configuration consisting of fixed and percentage costs.\n * @returns The amount minus the costs and the costs itself.\n */\nfunction calculateCosts(amount: number, costConfiguration: ICostConfiguration): [number, number] {\n    let costs = amount * costConfiguration.percentageCosts + costConfiguration.fixedCosts;\n    const amountWithoutCosts = Math.max(amount - costs, 0);\n    costs = amount - amountWithoutCosts;\n    return [amountWithoutCosts, costs];\n}\n\n/**\n * Subtracts the tax free amount from the tax amount and\n * returns the resulting leftover taxes and tax free amount.\n *\n * @param taxAmount The amount of taxes that need to be paid.\n * @param taxFreeAmount The tax free amount that is left and can be used.\n * @returns The leftover taxes and tax free amount.\n */\nfunction subtractTaxFreeGain(taxAmount: number, taxFreeAmount: number): [number, number] {\n    const leftoverTaxes = Math.max(0, taxAmount - taxFreeAmount);\n    const leftoverTaxFreeAmount = Math.max(0, taxFreeAmount - taxAmount);\n    return [leftoverTaxes, leftoverTaxFreeAmount];\n}\n\nfunction sumOfTotalValues(investmentStep: InvestmentStep): number {\n    let sum = 0;\n    for (const etfIdentifier of Object.keys(investmentStep.totalShares) as ETFIdentifier[]) {\n        sum += getTotalShareValue(etfIdentifier, investmentStep);\n    }\n    return sum;\n}\n\n/**\n * Calculates and adds the amount of effective money loss caused by inflation\n * between the initialDate and the date of the investment step.\n *\n * @param investmentStep The concerning investmentStep.\n * @param initialDate The initial date of the whole investment model.\n */\nfunction calculateAndAddInflation(investmentStep: InvestmentStep, initialDate: Date): void {\n    const sumTotalValues = sumOfTotalValues(investmentStep);\n    const date = investmentStep.date;\n    const timeFactor =\n        date.getFullYear() -\n        initialDate.getFullYear() +\n        (date.getMonth() - initialDate.getMonth()) / numberOfMonthsOfAYear;\n    investmentStep.inflation = sumTotalValues - sumTotalValues * Math.pow(1 - inflationRate, timeFactor);\n}\n\n/**\n * Calculates the amount increase in a accumulative fashion for every passed year.\n *\n * @param amount The initial amount.\n * @param percentageIncrease The percentage increase of the amount per year.\n * @param numberOfMonths The number of months passed since the investment model start.\n * @returns The amount increased by the percentage for every passed year in an accumulative way.\n */\nfunction calculateAmountIncrease(amount: number, percentageIncrease: number, numberOfMonths: number): number {\n    const yearsSinceStart = Math.floor(numberOfMonths / numberOfMonthsOfAYear);\n    return amount * Math.pow(1 + percentageIncrease, yearsSinceStart);\n}\n\n/**\n * Calculates the forecast interval of the model and all necessary dates.\n * Divides the interval in saving and payout phase. Adds the fade out years\n * to the life expectation to indicate that death is expected in that phase.\n *\n * @param age The age of the person.\n * @param lifeExpectation The life expectation of the person.\n * @param savingPhaseLength The saving phase length of the person.\n * @param fadeOutYears The length of the fade out years.\n * @returns The three dates indicating the start of the saving phase, the start of the payout phase and the end of the payout phase.\n */\nfunction calculateForecastInterval(\n    age: number,\n    lifeExpectation: number,\n    savingPhaseLength: number,\n    fadeOutYears: number = 10\n): [Date, Date, Date] {\n    const yearsLeft = lifeExpectation - age;\n    const now = new Date();\n    const beginningDate = new Date(now.getFullYear(), now.getMonth() + 1);\n    // start next month.\n    const endSavingPhaseDate = new Date(beginningDate);\n    endSavingPhaseDate.setFullYear(beginningDate.getFullYear() + savingPhaseLength);\n    const endDate = new Date(beginningDate);\n    endDate.setFullYear(beginningDate.getFullYear() + yearsLeft + fadeOutYears);\n    return [beginningDate, endSavingPhaseDate, endDate];\n}\n\n/**\n * Calculates the Vorabpauschale for the last year. Thus is zero if the month is not January.\n *\n * @param investmentSteps All investmentSteps already calculated for the model.\n * @param date The date of the concerning investment step.\n * @param leftoverTaxFreeAmount The leftover tax free amount.\n * @param etfToRatio The etfIdentifier mapping to the ratio.\n * @returns The amount of taxes to pay and the leftover tax free amount.\n */\nfunction calculateVorabpauschaleTaxes(\n    investmentSteps: InvestmentStep[],\n    date: Date,\n    leftoverTaxFreeAmount: number,\n    etfToRatio: ETFRatio\n): [number, number] {\n    if (!isFirstMonthOfAYear(date) || investmentSteps.length < 2) {\n        return [0, leftoverTaxFreeAmount];\n    }\n    let summedTaxes = 0;\n    const decemberInvestmentStep = investmentSteps[investmentSteps.length - 1];\n    // Use the second investment step if there are not enough meaning the investing started this year after january.\n    // The second is the true first investment step the first is a dummy.\n    const firstInvestmentStepOfThisYear =\n        investmentSteps.length - numberOfMonthsOfAYear > 1\n            ? investmentSteps[investmentSteps.length - numberOfMonthsOfAYear]\n            : investmentSteps[1];\n    for (const etfIdentifier of Object.keys(etfToRatio) as ETFIdentifier[]) {\n        const distributionsOfETF = decemberInvestmentStep.distributingNewAmount[etfIdentifier];\n        // Sum up total Investment of the first date of this year.\n        let accumulatedBasicProfit =\n            (getTotalShareValue(etfIdentifier, firstInvestmentStepOfThisYear) *\n                (numberOfMonthsOfAYear - firstInvestmentStepOfThisYear.date.getMonth())) /\n            numberOfMonthsOfAYear;\n        // Sum up all new investments from february to december.\n        for (let i = 1; i < numberOfMonthsOfAYear && investmentSteps.length - i > 0; i++) {\n            const currentInvestmentStep = investmentSteps[investmentSteps.length - i];\n            accumulatedBasicProfit +=\n                (getNewShareValue(etfIdentifier, currentInvestmentStep) * i) / numberOfMonthsOfAYear;\n        }\n        accumulatedBasicProfit *= 0.7 * basicRateOfInterest;\n        // If there were more distributions than the base profit, no vorabpauschale needs to be paid.\n        if (distributionsOfETF >= accumulatedBasicProfit) {\n            continue;\n        }\n        const currentShareValues = getTotalShareValue(etfIdentifier, decemberInvestmentStep);\n        // Calculate profit of last year.\n        const profitOverAllTime = currentShareValues - decemberInvestmentStep.totalInvestedMoney[etfIdentifier];\n        let profitOfPreviousYears = 0;\n        if (investmentSteps.length > numberOfMonthsOfAYear) {\n            profitOfPreviousYears = Math.max(\n                0,\n                getTotalShareValue(etfIdentifier, investmentSteps[investmentSteps.length - 1 - numberOfMonthsOfAYear]) -\n                    investmentSteps[investmentSteps.length - 1 - numberOfMonthsOfAYear].totalInvestedMoney[\n                        etfIdentifier\n                    ]\n            );\n        }\n\n        const profitOfThisYear = profitOverAllTime - profitOfPreviousYears;\n        let amountToApplyTaxes = clamp(profitOfThisYear, 0, accumulatedBasicProfit);\n        [amountToApplyTaxes, leftoverTaxFreeAmount] = subtractTaxFreeGain(amountToApplyTaxes, leftoverTaxFreeAmount);\n        summedTaxes += amountToApplyTaxes * partialExemption * corporateTaxRatio;\n    }\n    return [summedTaxes, leftoverTaxFreeAmount];\n}\n\n/**\n * Adds an accumulating month to the investment model.\n *\n * @param investmentSteps The whole investment model.\n * @param investment The amount of money to invest this month.\n * @param date The date of the new investment step.\n * @param initialDate The initial date of the investment model.\n * @param etfToRatio The etfIdentifier mapping to the ratio.\n * @param leftoverTaxFreeAmount The leftover tax free amount of this year. Is automatically reset in January.\n * @param useDistributingModel Determines the Model used for the calculation. Distributing vs. Accumulating.\n * @param configOptions The configuration options containing the tax free amount and cost configuration.\n */\nfunction addSavingPhaseMonth(\n    investmentSteps: InvestmentStep[],\n    investment: number,\n    date: Date,\n    initialDate: Date,\n    etfToRatio: ETFRatio,\n    configOptions: IConfigOptions,\n    leftoverTaxFreeAmount: number,\n    useDistributingModel: boolean\n): number {\n    // Reset tax free amount every beginning year.\n    if (isFirstMonthOfAYear(date)) {\n        leftoverTaxFreeAmount = configOptions.taxFreeAmount;\n    }\n    const forecast = ForecastModelSingleton.getInstance();\n    let costs = 0;\n    const prevInvestmentStep = investmentSteps[investmentSteps.length - 1];\n    const newInvestmentStep = cloneDeep(prevInvestmentStep);\n    newInvestmentStep.date = date;\n    newInvestmentStep.newInvestment = 0;\n\n    for (const etfIdentifier of Object.keys(etfToRatio) as ETFIdentifier[]) {\n        // Handle investment amount and costs.\n        const investmentOfEtfWithCosts = (etfToRatio[etfIdentifier] as number) * investment;\n        newInvestmentStep.newInvestment += investmentOfEtfWithCosts;\n        const [investmentOfEtfWithoutCosts, newCosts] = calculateCosts(\n            investmentOfEtfWithCosts,\n            configOptions.costConfig\n        );\n        costs += newCosts;\n        newInvestmentStep.newInvestedMoney[etfIdentifier] = investmentOfEtfWithoutCosts;\n        newInvestmentStep.totalInvestedMoney[etfIdentifier] += investmentOfEtfWithoutCosts;\n\n        // Handle new shares and prize.\n        const etfSharePrize = forecast.predictCourse(etfIdentifier, date);\n        const newShares = investmentOfEtfWithoutCosts / etfSharePrize;\n        newInvestmentStep.sharePrizes[etfIdentifier] = etfSharePrize;\n        newInvestmentStep.newShares[etfIdentifier] = newShares;\n\n        // Handle dividend.\n        const dividendPayoutMoneyPerShare = calculateDividend(etfIdentifier, date);\n        let dividendPayoutMoney = newInvestmentStep.totalShares[etfIdentifier] * dividendPayoutMoneyPerShare;\n\n        if (useDistributingModel) {\n            newInvestmentStep.distributingNewAmount[etfIdentifier] = dividendPayoutMoney;\n            let dividendPayoutMoneyBrutto = dividendPayoutMoney;\n            let leftoverDividendPayoutMoneyBrutto;\n            [leftoverDividendPayoutMoneyBrutto, leftoverTaxFreeAmount] = subtractTaxFreeGain(\n                dividendPayoutMoneyBrutto,\n                leftoverTaxFreeAmount\n            );\n            let taxesToPay = leftoverDividendPayoutMoneyBrutto * partialExemption * corporateTaxRatio;\n            newInvestmentStep.totalTaxes += taxesToPay;\n            dividendPayoutMoney = dividendPayoutMoneyBrutto - taxesToPay;\n        }\n        const newSharesByDividend = dividendPayoutMoney / etfSharePrize;\n        newInvestmentStep.newShares[etfIdentifier] += newSharesByDividend;\n        if (!useDistributingModel) {\n            newInvestmentStep.dividendNewShares[etfIdentifier] = newSharesByDividend;\n            newInvestmentStep.dividendTotalShares[etfIdentifier] += newSharesByDividend;\n        }\n\n        // Adjust other values.\n        newInvestmentStep.totalShares[etfIdentifier] += newInvestmentStep.newShares[etfIdentifier];\n        newInvestmentStep.newPayout[etfIdentifier] = 0;\n    }\n\n    // Handle costs, taxes and inflation.\n    newInvestmentStep.totalCosts += costs;\n    const [newTaxes] = calculateVorabpauschaleTaxes(investmentSteps, date, configOptions.taxFreeAmount, etfToRatio);\n    newInvestmentStep.totalTaxes += newTaxes;\n    calculateAndAddInflation(newInvestmentStep, initialDate);\n    investmentSteps.push(newInvestmentStep);\n    return leftoverTaxFreeAmount;\n}\n\n/**\n * Adds a payout month step to the investment model.\n *\n * @param investmentSteps The whole investment model.\n * @param sellingAmount The money amount of shares to sell this month.\n * @param etfToRatio The etfIdentifier mapping to the ratio.\n * @param date The date of the new payout step.\n * @param initialDate The initial date of the investment model.\n * @param configOptions The configuration options containing the tax free amount and cost configuration.\n * @param leftoverAlreadyPaidTaxes The leftover amount of taxes that have already been paid.\n * @param leftoverTaxFreeAmount The leftover tax free amount.\n * @param payoutStats The payout stats containing which investment step is next and what shares are left according to the FIFO principle.\n * @param useDistributingModel Determines the Model used for the calculation. Distributing vs. Accumulating.\n * @returns The updated leftoverAlreadyPaidTaxes and leftoverTaxFreeAmount.\n */\nfunction addPayoutMonth(\n    investmentSteps: InvestmentStep[],\n    sellingAmount: number,\n    etfToRatio: ETFRatio,\n    date: Date,\n    initialDate: Date,\n    configOptions: IConfigOptions,\n    leftoverAlreadyPaidTaxes: number,\n    leftoverTaxFreeAmount: number,\n    payoutStats: IPayoutStats,\n    useDistributingModel: boolean\n) {\n    if (isFirstMonthOfAYear(date)) {\n        leftoverTaxFreeAmount = configOptions.taxFreeAmount;\n    }\n    const forecast = ForecastModelSingleton.getInstance();\n    let costs = 0;\n    let taxes = 0;\n    const prevInvestmentStep = investmentSteps[investmentSteps.length - 1];\n    const newInvestmentStep = cloneDeep(prevInvestmentStep);\n    newInvestmentStep.date = date;\n    newInvestmentStep.newInvestment = 0;\n\n    for (const etfIdentifier of Object.keys(etfToRatio) as ETFIdentifier[]) {\n        const etfSharePrize = forecast.predictCourse(etfIdentifier, date);\n        let amountToSell = (etfToRatio[etfIdentifier] as number) * sellingAmount;\n        // Set default values.\n        newInvestmentStep.sharePrizes[etfIdentifier] = etfSharePrize;\n        newInvestmentStep.newPayout[etfIdentifier] = 0;\n        newInvestmentStep.newInvestedMoney[etfIdentifier] = 0;\n        // Handle dividend.\n        const dividendPayoutMoneyPerShare = calculateDividend(etfIdentifier, date);\n        const dividendPayoutMoney = newInvestmentStep.totalShares[etfIdentifier] * dividendPayoutMoneyPerShare;\n        if (date.getFullYear() > 2080 && date.getFullYear() < 2100) {\n            console.log(date, newInvestmentStep.totalShares[etfIdentifier]);\n        }\n        if (date.getFullYear() === 2086 && date.getMonth() === 11) {\n            console.log('hi');\n        }\n\n        // Apply taxes if using distributing model.\n        if (useDistributingModel) {\n            newInvestmentStep.distributingNewAmount[etfIdentifier] = dividendPayoutMoney;\n            let dividendPayoutMoneyBrutto = dividendPayoutMoney;\n            let leftoverDividendPayoutMoneyBrutto;\n            [leftoverDividendPayoutMoneyBrutto, leftoverTaxFreeAmount] = subtractTaxFreeGain(\n                dividendPayoutMoneyBrutto,\n                leftoverTaxFreeAmount\n            );\n            let taxesToPay = leftoverDividendPayoutMoneyBrutto * partialExemption * corporateTaxRatio;\n            [taxesToPay, leftoverAlreadyPaidTaxes] = subtractTaxFreeGain(taxesToPay, leftoverAlreadyPaidTaxes);\n            newInvestmentStep.totalTaxes += taxesToPay;\n            const dividendPayout = dividendPayoutMoneyBrutto - taxesToPay;\n            newInvestmentStep.distributingAmountUsableForPayout[etfIdentifier] = dividendPayout;\n            newInvestmentStep.newShares[etfIdentifier] = 0;\n        } else {\n            const newSharesByDividend = dividendPayoutMoney / etfSharePrize;\n            newInvestmentStep.newShares[etfIdentifier] = newSharesByDividend;\n            newInvestmentStep.totalShares[etfIdentifier] += newSharesByDividend;\n            newInvestmentStep.dividendNewShares[etfIdentifier] = newSharesByDividend;\n            newInvestmentStep.dividendTotalShares[etfIdentifier] += newSharesByDividend;\n        }\n\n        const amountUsedByDistribution = Math.min(\n            amountToSell,\n            newInvestmentStep.distributingAmountUsableForPayout[etfIdentifier]\n        );\n        amountToSell -= amountUsedByDistribution;\n        newInvestmentStep.distributingAmountUsableForPayout[etfIdentifier] -= amountUsedByDistribution;\n        newInvestmentStep.newPayout[etfIdentifier] += amountUsedByDistribution;\n\n        let amountAlreadySold = 0;\n        // Skip payout if there are no shares left to sell or the payout is covered by the dividend.\n        if (payoutStats[etfIdentifier].investmentStepsIdx < investmentSteps.length && amountToSell > 0) {\n            // Prepare amount and costs.\n            const costsToPay = calculateCosts(amountToSell, configOptions.costConfig)[1];\n            let alreadyPaidCosts = 0;\n            let payoutInvestmentStepIdxForFIFO = payoutStats[etfIdentifier].investmentStepsIdx;\n            let currentSharesLeft =\n                investmentSteps[payoutInvestmentStepIdxForFIFO].newShares[etfIdentifier] -\n                payoutStats[etfIdentifier].alreadySoldShares;\n            // Iterate over all investment steps according to the FIFO principle and sell as much shares as needed.\n            for (; payoutInvestmentStepIdxForFIFO < investmentSteps.length; payoutInvestmentStepIdxForFIFO++) {\n                const currentInvestmentStepForFIFO = investmentSteps[payoutInvestmentStepIdxForFIFO];\n                const leftoverAmountToSell = amountToSell - amountAlreadySold;\n\n                // Calculate the amount of shares to sell and the leftover shares.\n                const currentValueOfShares =\n                    etfSharePrize *\n                    (payoutInvestmentStepIdxForFIFO === payoutStats[etfIdentifier].investmentStepsIdx\n                        ? currentInvestmentStepForFIFO.newShares[etfIdentifier] -\n                          payoutStats[etfIdentifier].alreadySoldShares\n                        : currentInvestmentStepForFIFO.newShares[etfIdentifier]);\n                const amountToSellWithCosts = Math.min(currentValueOfShares, leftoverAmountToSell);\n                const amountOfSharesToSell = amountToSellWithCosts / etfSharePrize;\n                currentSharesLeft = currentInvestmentStepForFIFO.newShares[etfIdentifier] - amountOfSharesToSell;\n                currentSharesLeft -=\n                    payoutInvestmentStepIdxForFIFO === payoutStats[etfIdentifier].investmentStepsIdx\n                        ? payoutStats[etfIdentifier].alreadySoldShares\n                        : 0;\n\n                // Apply costs to the sold shares.\n                const amountToSellWithoutCosts = Math.max(0, amountToSellWithCosts - (costsToPay - alreadyPaidCosts));\n                alreadyPaidCosts += Math.max(0, amountToSellWithCosts - amountToSellWithoutCosts);\n\n                // Calculate amount on which taxes need to be paid.\n                const initialValueOfShares =\n                    amountOfSharesToSell * currentInvestmentStepForFIFO.sharePrizes[etfIdentifier];\n                let amountToPayTaxes = Math.max(0, amountToSellWithoutCosts - initialValueOfShares);\n\n                // Apply taxes.\n                [amountToPayTaxes, leftoverTaxFreeAmount] = subtractTaxFreeGain(\n                    amountToPayTaxes,\n                    leftoverTaxFreeAmount\n                );\n                let taxesToPay = amountToPayTaxes * partialExemption * corporateTaxRatio;\n                [taxesToPay, leftoverAlreadyPaidTaxes] = subtractTaxFreeGain(taxesToPay, leftoverAlreadyPaidTaxes);\n                taxes += taxesToPay;\n                const payoutAmount = amountToSellWithoutCosts - taxesToPay;\n\n                // Set resulting values.\n                newInvestmentStep.newPayout[etfIdentifier] += payoutAmount;\n                newInvestmentStep.totalPayout[etfIdentifier] += payoutAmount;\n\n                newInvestmentStep.totalShares[etfIdentifier] -= amountOfSharesToSell;\n                amountAlreadySold += amountToSellWithCosts;\n\n                // Handle the decrease of the dividendShares.\n                let amountOfDividendSharesLeft = 0;\n                if (payoutInvestmentStepIdxForFIFO === payoutStats[etfIdentifier].investmentStepsIdx) {\n                    amountOfDividendSharesLeft = Math.max(\n                        0,\n                        currentInvestmentStepForFIFO.dividendNewShares[etfIdentifier] -\n                            payoutStats[etfIdentifier].alreadySoldShares\n                    );\n                } else {\n                    amountOfDividendSharesLeft = currentInvestmentStepForFIFO.dividendNewShares[etfIdentifier];\n                }\n                const amountOfDividendSharesSold = Math.min(amountOfDividendSharesLeft, amountOfSharesToSell);\n                newInvestmentStep.dividendTotalShares[etfIdentifier] -= amountOfDividendSharesSold;\n\n                // Use break in order to not change the value of payoutInvestmentStepIdxForFIFO.\n                if (amountAlreadySold >= amountToSell) {\n                    break;\n                }\n            }\n            // Handle update payoutStats.\n            costs += alreadyPaidCosts;\n            payoutStats[etfIdentifier].investmentStepsIdx = payoutInvestmentStepIdxForFIFO;\n\n            payoutStats[etfIdentifier].alreadySoldShares =\n                payoutInvestmentStepIdxForFIFO < investmentSteps.length\n                    ? investmentSteps[payoutInvestmentStepIdxForFIFO].newShares[etfIdentifier] - currentSharesLeft\n                    : 0;\n        }\n        // Handle Vorabpauschale.\n        const [newTaxes, newLeftoverTaxFreeAmount] = calculateVorabpauschaleTaxes(\n            investmentSteps,\n            date,\n            leftoverTaxFreeAmount,\n            etfToRatio\n        );\n        leftoverTaxFreeAmount = newLeftoverTaxFreeAmount;\n        taxes += newTaxes;\n        leftoverAlreadyPaidTaxes += newTaxes;\n    }\n\n    // Set resulting values and inflation.\n    newInvestmentStep.totalCosts += costs;\n    newInvestmentStep.totalTaxes += taxes;\n    calculateAndAddInflation(newInvestmentStep, initialDate);\n    investmentSteps.push(newInvestmentStep);\n    return [leftoverAlreadyPaidTaxes, leftoverTaxFreeAmount];\n}\n\n/**\n * Creates a dummy investment step intended to be the first investment step in the model\n * in order to avoid if statements in the other investment methods checking whether this is the first step or not.\n *\n * @param etfToRatio The etfIdentifier mapping to the ratio.\n * @param date The starting date of the investment model.\n * @returns A dummy investment step.\n */\nfunction generateEmptyInvestmentStep(etfToRatio: ETFRatio, date: Date): InvestmentStep {\n    const forecast = ForecastModelSingleton.getInstance();\n    const dummyData: ETFShares = { 'SP5C.PAR': 0, ESGE: 0, SUSA: 0 };\n    const emptyInvestmentStep: InvestmentStep = {\n        date: date,\n        totalCosts: 0,\n        totalTaxes: 0,\n        newShares: { ...dummyData },\n        totalShares: { ...dummyData },\n        dividendNewShares: { ...dummyData },\n        dividendTotalShares: { ...dummyData },\n        distributingNewAmount: { ...dummyData },\n        distributingAmountUsableForPayout: { ...dummyData },\n        totalInvestedMoney: { ...dummyData },\n        totalPayout: { ...dummyData },\n        newPayout: { ...dummyData },\n        sharePrizes: { ...dummyData },\n        newInvestedMoney: { ...dummyData },\n        newInvestment: 0,\n        inflation: 0,\n    };\n    for (const etfIdentifier of Object.keys(etfToRatio) as ETFIdentifier[]) {\n        emptyInvestmentStep.newShares[etfIdentifier] = 0;\n        emptyInvestmentStep.totalShares[etfIdentifier] = 0;\n        emptyInvestmentStep.dividendNewShares[etfIdentifier] = 0;\n        emptyInvestmentStep.dividendTotalShares[etfIdentifier] = 0;\n        emptyInvestmentStep.totalInvestedMoney[etfIdentifier] = 0;\n        emptyInvestmentStep.totalPayout[etfIdentifier] = 0;\n        emptyInvestmentStep.newPayout[etfIdentifier] = 0;\n        emptyInvestmentStep.newInvestedMoney[etfIdentifier] = 0;\n        emptyInvestmentStep.sharePrizes[etfIdentifier] = forecast.predictCourse(etfIdentifier, date);\n    }\n    return emptyInvestmentStep;\n}\n\n/**\n * Creates the investment model for the visualization which consists of arrays of an object\n *  which contain all important values for the visualization.\n * It can deliver the model with different levels of detail meaning that one step covers more than one month.\n *\n * Example code:\n * ```typescript\n * const investmentModel = new InvestmentModel(...uiParams);\n * // 2 => every investment step will cover 6 Months.\n * const dataVorTheVisualization = investmentModel.getInvestmentSteps(2);\n * ```\n */\nexport class InvestmentModel {\n    private startCapital: number;\n    private monthlyInvestment: number;\n    private yearlyInvestmentIncrease: number;\n    private monthlyPayout: number;\n    private yearlyPayoutIncrease: number;\n    private savingPhaseLength: number;\n    private etfToRatio: ETFRatio;\n    private configOptions: IConfigOptions;\n    private expectationOfLife: number;\n    private age: number;\n    private useDistributingModel: boolean;\n\n    private savingDates: Date[] = [];\n    private payoutDates: Date[] = [];\n    private initialDate: Date = new Date();\n    private investmentSteps: InvestmentStep[] = [];\n\n    /**\n     * Constructs and calculates the investment model.\n     *\n     * @param startCapital The starting capital.\n     * @param monthlyInvestment The monthly investment.\n     * @param yearlyInvestmentIncrease The yearly investment increase given as a percentage in float representation.\n     * @param monthlyPayout The monthly payout.\n     * @param yearlyPayoutIncrease The yearly payout increase given as a percentage in float representation.\n     * @param savingPhaseLength The length of the saving phase.\n     * @param etfToRatio The etfIdentifier mapping to the ratio.\n     * @param configOptions The config options containing the tax free amount and cost configuration.\n     * @param age The current age of the person.\n     * @param expectationOfLife The life expectation of the person.\n     * @param useDistributingModel Indicate which model should be used.\n     */\n    constructor(\n        startCapital: number,\n        monthlyInvestment: number,\n        yearlyInvestmentIncrease: number,\n        monthlyPayout: number,\n        yearlyPayoutIncrease: number,\n        savingPhaseLength: number,\n        etfToRatio: ETFRatio,\n        configOptions: IConfigOptions,\n        age: number,\n        expectationOfLife: number,\n        useDistributingModel: boolean\n    ) {\n        this.startCapital = startCapital;\n        this.monthlyInvestment = monthlyInvestment;\n        this.monthlyPayout = monthlyPayout;\n        this.savingPhaseLength = savingPhaseLength;\n        this.etfToRatio = etfToRatio;\n        this.configOptions = configOptions;\n        this.expectationOfLife = expectationOfLife;\n        this.age = age;\n        this.yearlyInvestmentIncrease = yearlyInvestmentIncrease;\n        this.yearlyPayoutIncrease = yearlyPayoutIncrease;\n        this.useDistributingModel = useDistributingModel;\n\n        this._calculateDatesForModel();\n        this._calculateModel();\n    }\n\n    /**\n     * Calculates all necessary dates for the saving and payout phase.\n     */\n    private _calculateDatesForModel() {\n        const [startDate, endSavingPhaseDate, endDate] = calculateForecastInterval(\n            this.age,\n            this.expectationOfLife,\n            this.savingPhaseLength\n        );\n        const savingDates = [];\n        for (\n            let currentDate = startDate;\n            currentDate < endSavingPhaseDate;\n            currentDate = getNextMonthDate(currentDate)\n        ) {\n            savingDates.push(currentDate);\n        }\n        this.savingDates = savingDates;\n        const payoutDates = [];\n        for (let currentDate = endSavingPhaseDate; currentDate < endDate; currentDate = getNextMonthDate(currentDate)) {\n            payoutDates.push(currentDate);\n        }\n        this.payoutDates = payoutDates;\n        this.initialDate = startDate;\n    }\n\n    /**\n     * Calculates the investment model by first adding all investment and the payout dates.\n     */\n    private _calculateModel() {\n        let investmentSteps = [generateEmptyInvestmentStep(this.etfToRatio, this.savingDates[0])];\n        let leftoverTaxFreeAmount = addSavingPhaseMonth(\n            investmentSteps,\n            this.monthlyInvestment + this.startCapital,\n            this.savingDates[0],\n            this.initialDate,\n            this.etfToRatio,\n            this.configOptions,\n            this.configOptions.taxFreeAmount,\n            this.useDistributingModel\n        );\n        for (let i = 1; i < this.savingDates.length; i++) {\n            const investmentAmount = calculateAmountIncrease(this.monthlyInvestment, this.yearlyInvestmentIncrease, i);\n            addSavingPhaseMonth(\n                investmentSteps,\n                investmentAmount,\n                this.savingDates[i],\n                this.initialDate,\n                this.etfToRatio,\n                this.configOptions,\n                leftoverTaxFreeAmount,\n                this.useDistributingModel\n            );\n        }\n        // Discard the empty investment step.\n        investmentSteps = investmentSteps.slice(1);\n\n        let leftoverAlreadyPaidTaxes = this.useDistributingModel\n            ? 0\n            : investmentSteps[investmentSteps.length - 1].totalTaxes;\n        const payoutStats: IPayoutStats = {\n            'SP5C.PAR': { investmentStepsIdx: 0, alreadySoldShares: 0 },\n            ESGE: { investmentStepsIdx: 0, alreadySoldShares: 0 },\n            SUSA: { investmentStepsIdx: 0, alreadySoldShares: 0 },\n        };\n        for (let i = 0; i < this.payoutDates.length; i++) {\n            const payoutAmount = calculateAmountIncrease(this.monthlyPayout, this.yearlyPayoutIncrease, i);\n            [leftoverAlreadyPaidTaxes, leftoverTaxFreeAmount] = addPayoutMonth(\n                investmentSteps,\n                payoutAmount,\n                this.etfToRatio,\n                this.payoutDates[i],\n                this.initialDate,\n                this.configOptions,\n                leftoverAlreadyPaidTaxes,\n                leftoverTaxFreeAmount,\n                payoutStats,\n                this.useDistributingModel\n            );\n        }\n        this.investmentSteps = investmentSteps;\n    }\n\n    /**\n     * Returns the investment model with the given level of detail.\n     *\n     * numberOfEntriesPerYear = 1 will result in one investment Step per year and\n     * numberOfEntriesPerYear = 12 will change nothing on the model.\n     *\n     * NOTE: Only the newInvestment and newPayout values are adjusted when investment steps need to be merged\n     * since the current visualizations need no further adjustments.\n     *\n     * @param numberOfEntriesPerYear The number of investment steps per year.\n     * @returns\n     */\n    getInvestmentSteps(numberOfEntriesPerYear: number) {\n        if (!Number.isInteger(numberOfMonthsOfAYear / numberOfEntriesPerYear)) {\n            throw new Error(\n                `The numberOfEntriesPerYear need to be dividable by ${numberOfMonthsOfAYear} in order to make sense.`\n            );\n        }\n\n        if (numberOfEntriesPerYear === numberOfMonthsOfAYear) {\n            return this.investmentSteps;\n        }\n        const selectedInvestmentSteps = [];\n        const numberOfMonthsToMerge = numberOfMonthsOfAYear / numberOfEntriesPerYear;\n        for (let i = 0; i < this.investmentSteps.length; i += numberOfMonthsToMerge) {\n            // Take the start date of the period as the representation.\n            const adjustedInvestmentStep = cloneDeep(this.investmentSteps[i]);\n            for (let offset = 1; offset < numberOfMonthsToMerge; offset++) {\n                adjustedInvestmentStep.newInvestment += this.investmentSteps[i + offset].newInvestment;\n                for (const etfIdentifier of Object.keys(\n                    this.investmentSteps[i + offset].newPayout\n                ) as ETFIdentifier[]) {\n                    adjustedInvestmentStep.newPayout[etfIdentifier] += this.investmentSteps[i + offset].newPayout[\n                        etfIdentifier\n                    ];\n                }\n            }\n            selectedInvestmentSteps.push(adjustedInvestmentStep);\n        }\n        return selectedInvestmentSteps;\n    }\n\n    /**\n     * Returns the first payout date of the model.\n     * @returns The first payoutDate.\n     */\n    getPayoutPhaseBeginDate() {\n        return this.payoutDates[0];\n    }\n}\n","import * as d3 from 'd3';\nimport { roundDateToBeginningOfMonth, numberOfMonthsOfAYear } from '../helpers/utils';\nimport { InvestmentStep } from '../model/InvestmentModel';\n\ninterface ITextProperty {\n    text: string;\n    x: number;\n    y: number;\n    fontSize: number;\n    fontFamily: string | null;\n    textAnchor: string;\n    fontWeight: string;\n    color: string;\n}\n\ninterface ITextProperties {\n    [textIdentifier: string]: ITextProperty;\n}\n\nexport interface DataArrayEntry {\n    yStart: number;\n    yEnd: number;\n    date: Date;\n    color: string;\n}\n\nexport type DataArray = DataArrayEntry[][];\n\nconst FIVE_MILLION = 5000000;\nconst ONE_THOUSAND = 1000;\nconst ONE_MILLION = 1000000;\nconst numberOfTicks = 6;\n\n/**\n * Returns a formatted text to fit the text. If the value is undefined '-' is used.\n *\n * @param name The label.\n * @param value The value of the data referenced by the label.\n * @returns The formatted text.\n */\nexport function generateLabel(name: string): string {\n    name = name.charAt(0).toUpperCase() + name.slice(1);\n    // Regex from: https://stackoverflow.com/a/58861672\n    name = name.replace(/(?!^)([A-Z]|\\d+)/g, ' $1');\n    return `${name}:`;\n}\n\nfunction calculateInvestmentStepIndexForDate(date: Date, investmentSteps: InvestmentStep[]): number {\n    const firstDate = investmentSteps[0].date;\n    const secondDate = investmentSteps[1].date;\n    const numberOfMonthsSinceStartDate =\n        (date.getFullYear() - firstDate.getFullYear()) * numberOfMonthsOfAYear +\n        (date.getMonth() - firstDate.getMonth());\n    const numberOfMonthsPerInvestmentStep =\n        (secondDate.getFullYear() - firstDate.getFullYear()) * numberOfMonthsOfAYear +\n        (secondDate.getMonth() - firstDate.getMonth());\n\n    return Math.floor(numberOfMonthsSinceStartDate / numberOfMonthsPerInvestmentStep);\n}\n\n/**\n * A rendering base class for d3 visualizations implementing the strategy design pattern.\n * Provides the rendering and interaction strategy and provides common behavior such as axis rendering.\n *\n * No update of the data is implemented.\n * In order to adjust the visualization to a new investment model, a complete re rendering is required.\n *\n * Keeps track of all active diagrams. Thus needs to be reset in the case of a redrawing of the graphs.\n *\n * It ensures that all active diagrams are synced regarding the tooltip and x axis.\n */\nexport abstract class D3ChartStrategy {\n    tooltipDate: Date;\n    yExtent: [number, number];\n\n    protected readonly lineStrokeWidth = 3;\n    protected readonly standardFontSize = 18;\n    protected readonly contentOpacity = 0.7;\n    protected readonly labelValueIdentifier = 'value';\n    protected readonly deltaIdentifier = 'delta';\n    protected readonly monospaceFont = 'monospace';\n\n    protected investmentSteps: InvestmentStep[];\n    protected dateExtent: [Date, Date] = [new Date(), new Date()];\n    protected marginW: number;\n    protected marginH: number;\n    protected width: number;\n    protected height: number;\n    protected maxIndex = 0;\n    protected minIndex = 0;\n    protected yScale: d3.ScaleLinear<number, number, never> = d3.scaleLinear();\n    protected xScale: d3.ScaleTime<number, number, never> = d3.scaleTime();\n    protected dataArray: DataArray = [];\n    protected textProperties: ITextProperties = {};\n    protected payoutPhaseStartDate: Date;\n\n    protected svg: d3.Selection<SVGGElement, unknown, null, undefined>;\n\n    private static activeStrategies: D3ChartStrategy[] = [];\n\n    private readonly fadeOutGradientID = 'fadeOutGradient';\n    private readonly fadeOutYearsLength = 10;\n    private readonly gridOpacity = 0.2;\n    private readonly gridColor = 'grey';\n    private readonly gridStrokeWidth = 2;\n\n    private labelDivisionFactor = 1;\n    private numberIndicator = 'K';\n    private hoverLine: d3.Selection<SVGLineElement, unknown, null, undefined>;\n    private interaction: d3.Selection<SVGGElement, unknown, null, undefined>;\n    private textGroup: d3.Selection<SVGGElement, unknown, null, undefined>;\n    private xAxis: d3.Axis<d3.NumberValue | Date>;\n    private yAxis: d3.Axis<d3.NumberValue | Date>;\n\n    /**\n     * Constructs the strategy and registers the object.\n     *\n     * @param investmentSteps The investment model.\n     * @param renderDivRef The reference to the div to which the diagram should be rendered.\n     * @param payoutPhaseStartDate The start date of the payout phase.\n     * @param svgID The ID of the svg.\n     * @param tooltipDate The tooltip date. Undefined if no tooltip was visible in the last diagram.\n     * @param yExtent The yExtent. Undefined if it should be recalculated.\n     * @param width The diagram width.\n     * @param height The diagram height.\n     * @param marginW The diagram margin width.\n     * @param marginH The diagram margin height.\n     */\n    constructor(\n        investmentSteps: InvestmentStep[],\n        renderDivRef: HTMLDivElement,\n        payoutPhaseStartDate: Date,\n        svgID: string,\n        tooltipDate: Date | undefined,\n        yExtent: [number, number] | undefined,\n        captionSpace = 0,\n        width = 1100,\n        height = 300,\n        marginW = 250,\n        marginH = 40,\n    ) {\n        if (this.constructor === D3ChartStrategy) {\n            throw new Error(\"Abstract classes can't be instantiated.\");\n        }\n        D3ChartStrategy.activeStrategies.push(this);\n        this.investmentSteps = investmentSteps;\n        this.payoutPhaseStartDate = payoutPhaseStartDate;\n        this.tooltipDate = tooltipDate != null ? tooltipDate : new Date(0);\n        this.yExtent = yExtent != null ? yExtent : [0, 0];\n\n        this.marginW = marginW;\n        this.marginH = marginH;\n        this.width = width;\n        this.height = height;\n\n        // Reset diagram by deletion.\n        renderDivRef.innerHTML = '';\n\n        this.svg = d3\n            .select(renderDivRef)\n            .append('svg')\n            .attr('class', 'img-fluid')\n            .attr('id', svgID)\n            .attr('viewBox', `0 0 ${this.width + 2 * this.marginW} ${this.height + 2 * this.marginH + captionSpace}`)\n            .append('g')\n            .attr('transform', `translate(${[this.marginW / 2, this.marginH]})`);\n\n        // Set default values needed by typescript.\n        this.textGroup = this.svg;\n        this.interaction = this.svg;\n        this.hoverLine = this.svg.append('line');\n        this.yAxis = d3.axisLeft(this.yScale);\n        this.xAxis = d3.axisBottom(this.xScale);\n    }\n\n    /**\n     * Resets the static state that keeps track of every active diagram.\n     * Needs to be called before re rendering the diagrams.\n     */\n    static reset(): void {\n        D3ChartStrategy.activeStrategies = [];\n    }\n\n    /**\n     * Sets the visibility option for all active diagram tooltips.\n     *\n     * @param displayOption The visibility option to apply to all active diagram tooltips.\n     */\n    private static _setInteractionVisibilityForActiveDiagrams(displayOption: 'hidden' | 'visible'): void {\n        for (const activeDiagram of D3ChartStrategy.activeStrategies) {\n            activeDiagram.interaction.style('visibility', displayOption);\n        }\n    }\n\n    /**\n     * The rendering strategy which defined the order in which the diagram is rendered.\n     * Thus defined which part lies on top of the other. e.g. Text is rendered over the central content.\n     */\n    render(): void {\n        this._prepareData();\n        this._calculateExtents();\n        this._createScales();\n        this._createAxis();\n        this._drawGrid();\n        this._drawContent();\n        this._drawFadeOut();\n        this._prepareText();\n        this._drawText();\n        this._drawAxis();\n        this._addInteraction();\n\n        if (this.tooltipDate >= this.dateExtent[0] && this.tooltipDate <= this.dateExtent[1]) {\n            this._updateAllDiagrams();\n        }\n    }\n\n    /**\n     * Transforms the value to the number that would be used to display it.\n     * Is used by valueToDisplayText().\n     *\n     * @param value The value to display.\n     * @param hasToBePositive Optional parameter which can bes et to ensure the value is positive by ignoring the sign.\n     * @returns The resulting text.\n     */\n    protected valueToDisplayNumber(value: number, hasToBePositive = false): number {\n        if (hasToBePositive && value != null) {\n            value = Math.abs(value);\n        }\n        return value / this.labelDivisionFactor;\n    }\n\n    /**\n     * Generates a human readable display text from the value. Returns '-' as a placeholder when value is undefined.\n     *\n     * @param value The value to display.\n     * @param hasToBePositive Optional parameter which can bes et to ensure the value is positive by ignoring the sign.\n     * @param skipDecimalPlaces Optional parameter which can be used to force skipping the decimal places.\n     * @returns The resulting text.\n     */\n    protected valueToDisplayText(\n        value: number | undefined,\n        hasToBePositive = false,\n        skipDecimalPlaces = false\n    ): string {\n        const decimalPlaces = skipDecimalPlaces ? 0 : 2;\n        return `${\n            value != null\n                ? this.valueToDisplayNumber(value, hasToBePositive).toLocaleString(undefined, {\n                      maximumFractionDigits: decimalPlaces,\n                      minimumFractionDigits: decimalPlaces,\n                  })\n                : ' - '\n        }${this.numberIndicator} €`;\n    }\n\n    /**\n     * calculates the data and thus the axis extent for the time (x-Axis) and money (y-Axis).\n     * The calculation of the y extent is skipped if it has already been set to a valid extent.\n     * Thus if the extent has been set in the constructor the y extent is preserved.\n     */\n    private _calculateExtents() {\n        this.dateExtent = d3.extent(this.dataArray[0], d => d.date) as [Date, Date];\n\n        const lastImportantDateForYScale = new Date(this.payoutPhaseStartDate);\n        lastImportantDateForYScale.setMonth(lastImportantDateForYScale.getMonth() + numberOfMonthsOfAYear);\n        // Only calculate the y extent when it is undefined. Meaning the y axis is not locked.\n        if (this.yExtent[0] === 0 && this.yExtent[1] === 0) {\n            const filteredDataArrayForYMax = this.dataArray[this.maxIndex].filter(\n                e => e.date <= lastImportantDateForYScale && e.date > this.dateExtent[0]\n            );\n            const filteredDataArrayForYMin = this.dataArray[this.minIndex].filter(\n                e => e.date <= lastImportantDateForYScale\n            );\n            const maxVal = d3.max(filteredDataArrayForYMax.map(e => e.yStart)) as number;\n            const minVal = d3.min(filteredDataArrayForYMin.map(e => e.yEnd)) as number;\n            this.yExtent = [minVal, maxVal];\n        }\n        // Set label constants.\n        this.labelDivisionFactor =\n            Math.max(-this.yExtent[0], this.yExtent[1] as number) >= FIVE_MILLION ? ONE_MILLION : ONE_THOUSAND;\n        this.numberIndicator = this.labelDivisionFactor === ONE_MILLION ? 'M' : 'K';\n    }\n\n    /**\n     * Creates the d3 scales for both axis.\n     */\n    private _createScales() {\n        this.yScale = d3.scaleLinear().domain(this.yExtent).range([this.height, 0]);\n        this.xScale = d3.scaleTime().domain(this.dateExtent).range([0, this.width]);\n    }\n\n    /**\n     * Creates the axis but does not draw it.\n     */\n    private _createAxis() {\n        // Only skip decimal Places if all axis numbers are integers.\n        const skipDecimalPlaces = this.yScale\n            .ticks(numberOfTicks)\n            .every(tick => Number.isInteger(this.valueToDisplayNumber(tick, false)));\n        this.yAxis = d3\n            .axisLeft(this.yScale)\n            .tickFormat(d => this.valueToDisplayText(d as number, false, skipDecimalPlaces))\n            .ticks(numberOfTicks);\n\n        this.xAxis = d3.axisBottom(this.xScale);\n    }\n\n    /**\n     * Draws the grid in the background which is aligned to the ticks of the axes.\n     */\n    private _drawGrid() {\n        const gridGroup = this.svg.append('g').attr('class', 'grid');\n        const yGridGroup = gridGroup.append('g').attr('class', 'yGrid');\n        const xGridGroup = gridGroup.append('g').attr('class', 'xGrid');\n\n        yGridGroup\n            .selectAll('line')\n            .data(this.yScale.ticks(numberOfTicks))\n            .enter()\n            .append('line')\n            .attr('x1', this.xScale(this.dateExtent[0]))\n            .attr('y1', d => this.yScale(d))\n            .attr('x2', this.xScale(this.dateExtent[1]))\n            .attr('y2', d => this.yScale(d))\n            .style('stroke-width', this.gridStrokeWidth)\n            .style('stroke', this.gridColor)\n            .style('opacity', this.gridOpacity);\n\n        xGridGroup\n            .selectAll('line')\n            .data(this.xScale.ticks())\n            .enter()\n            .append('line')\n            .attr('x1', d => this.xScale(d))\n            .attr('y1', this.yScale(this.yExtent[0]))\n            .attr('x2', d => this.xScale(d))\n            .attr('y2', this.yScale(this.yExtent[1]))\n            .style('stroke-width', this.gridStrokeWidth)\n            .style('stroke', this.gridColor)\n            .style('opacity', this.gridOpacity);\n    }\n\n    /**\n     * Draws both scales, the zero line and the line that separates the saving and payout phase.\n     */\n    private _drawAxis() {\n        this.svg.append('g').style('font-size', '20px').call(this.yAxis);\n\n        this.svg\n            .append('g')\n            .style('font-size', '20px')\n            .attr('transform', `translate(0, ${this.height})`)\n            .call(this.xAxis);\n\n        // Draw zero line.\n        this.svg\n            .append('g')\n            .append('line')\n            .attr('x1', this.xScale(this.dateExtent[0]))\n            .attr('y1', this.yScale(0))\n            .attr('x2', this.xScale(this.dateExtent[1]))\n            .attr('y2', this.yScale(0))\n            .style('stroke-width', this.lineStrokeWidth)\n            .style('stroke', 'black');\n\n        // Draw phase division line.\n        this.svg\n            .append('g')\n            .append('line')\n            .attr('x1', this.xScale(this.payoutPhaseStartDate) - this.lineStrokeWidth / 2)\n            .attr('y1', this.yScale(this.yExtent[0]))\n            .attr('x2', this.xScale(this.payoutPhaseStartDate) - this.lineStrokeWidth / 2)\n            .attr('y2', this.yScale(this.yExtent[1]))\n            .style('stroke-width', this.lineStrokeWidth)\n            .style('stroke', 'black');\n    }\n\n    /**\n     * Adds all necessary things for the interaction to the diagram.\n     *\n     * The interaction design is inspired by: http://www.d3noob.org/2014/07/my-favourite-tooltip-method-for-line.html\n     */\n    private _addInteraction() {\n        const interactionClass = 'interaction';\n        const tooltipLineClass = 'tooltipLine';\n\n        this.interaction = this.svg\n            .append('g')\n            .attr('class', interactionClass)\n            .style('visibility', 'hidden')\n            .attr('transform', `translate(${[0, -this.marginH]})`);\n\n        this.hoverLine = this.interaction\n            .append('line')\n            .attr('class', tooltipLineClass)\n            .style('stroke', 'blue')\n            .style('stroke-dasharray', '3,3')\n            .style('stroke-width', this.lineStrokeWidth)\n            .style('opacity', 0.5)\n            .attr('y1', this.height + 2 * this.marginH)\n            .attr('y2', 0);\n\n        // Add rectangle to catch mouse events.\n        this.svg\n            .append('rect')\n            .attr('class', 'mouseEvent')\n            .attr('transform', `translate(${[0, -this.marginH]})`)\n            .attr('height', this.height + 2 * this.marginH)\n            .attr('width', this.width)\n            .attr('fill', 'none')\n            .style('pointer-events', 'all')\n            .on('mouseover', () => D3ChartStrategy._setInteractionVisibilityForActiveDiagrams('visible'))\n            .on('mousemove', mouseEvent => this._handleTooltipEvent(mouseEvent));\n    }\n\n    /**\n     * Handles the tooltip event and updates all diagrams accordingly.\n     *\n     * @param mouseEvent The mouse event.\n     */\n    private _handleTooltipEvent(mouseEvent: MouseEvent) {\n        const x = d3.pointer(mouseEvent)[0];\n        const date = this.xScale.invert(x);\n        this.tooltipDate = roundDateToBeginningOfMonth(date);\n        this._updateAllDiagrams();\n    }\n\n    /**\n     * Updates all tooltips of all diagrams.\n     */\n    private _updateAllDiagrams() {\n        const investmentStepIndex = calculateInvestmentStepIndexForDate(this.tooltipDate, this.investmentSteps);\n        D3ChartStrategy._setInteractionVisibilityForActiveDiagrams('visible');\n        for (const activeDiagram of D3ChartStrategy.activeStrategies) {\n            activeDiagram.hoverLine.attr('x1', this.xScale(this.tooltipDate)).attr('x2', this.xScale(this.tooltipDate));\n            activeDiagram._updateTooltip(investmentStepIndex);\n            activeDiagram._updateDiagram();\n        }\n    }\n\n    /**\n     * Draws all text that is stored in the textProperties.\n     */\n    private _drawText() {\n        this.textGroup = this.svg.append('g').attr('class', 'textGroup');\n        this.textGroup\n            .selectAll('text')\n            .data(Object.values(this.textProperties))\n            .enter()\n            .append('text')\n            .text(d => d.text)\n            .attr('x', d => d.x)\n            .attr('y', d => d.y)\n            .style('font-size', d => d.fontSize)\n            .style('font-family', d => d.fontFamily)\n            .style('font-weight', d => d.fontWeight)\n            .style('text-anchor', d => d.textAnchor)\n            .style('fill', d => d.color);\n    }\n\n    /**\n     * Updates a single diagram. The update currently only consists of the text update.\n     */\n    private _updateDiagram() {\n        this.textGroup.selectAll('text').text(d => (d as ITextProperty).text);\n    }\n\n    /**\n     * Prepares all text which should be displayed and stores them in the textProperties variable.\n     *  Default text is included. Thus a super call is expected.\n     */\n    protected _prepareText() {\n        const savingPhaseMid =\n            this.xScale(this.dateExtent[0]) +\n            (this.xScale(this.payoutPhaseStartDate) - this.xScale(this.dateExtent[0])) / 2;\n\n        const payoutPhaseMid =\n            this.xScale(this.payoutPhaseStartDate) +\n            (this.xScale(this.dateExtent[1]) - this.xScale(this.payoutPhaseStartDate)) / 2;\n        const yPos = -10;\n        this.textProperties = {\n            savingBold: {\n                text: 'SAVING',\n                x: savingPhaseMid,\n                y: yPos,\n                fontSize: this.standardFontSize,\n                fontFamily: null,\n                textAnchor: 'end',\n                fontWeight: 'bold',\n                color: 'black',\n            },\n            savingPhase: {\n                text: 'Phase',\n                x: savingPhaseMid,\n                y: yPos,\n                fontSize: this.standardFontSize,\n                fontFamily: null,\n                textAnchor: 'start',\n                fontWeight: 'normal',\n                color: 'black',\n            },\n            payoutBold: {\n                text: 'PAYOUT',\n                x: payoutPhaseMid,\n                y: yPos,\n                fontSize: this.standardFontSize,\n                fontFamily: null,\n                textAnchor: 'end',\n                fontWeight: 'bold',\n                color: 'black',\n            },\n            payoutPhase: {\n                text: 'Phase',\n                x: payoutPhaseMid,\n                y: yPos,\n                fontSize: this.standardFontSize,\n                fontFamily: null,\n                textAnchor: 'start',\n                fontWeight: 'normal',\n                color: 'black',\n            },\n        };\n    }\n\n    /**\n     * Draws the opacity of the fade out years by using a svg linear gradient applied to a rectangle.\n     */\n    private _drawFadeOut() {\n        const fadeOutGroup = this.svg.append('g').attr('class', 'fadeOut');\n        const fadeOutStartDate = new Date(this.dateExtent[1]);\n        fadeOutStartDate.setFullYear(fadeOutStartDate.getFullYear() - this.fadeOutYearsLength);\n\n        const gradient = fadeOutGroup.append('linearGradient').attr('id', this.fadeOutGradientID);\n\n        gradient\n            .append('stop')\n            .attr('class', 'start')\n            .attr('offset', '0%')\n            .attr('stop-color', 'white')\n            .attr('stop-opacity', 0);\n\n        gradient\n            .append('stop')\n            .attr('class', 'end')\n            .attr('offset', '100%')\n            .attr('stop-color', 'white')\n            .attr('stop-opacity', 1);\n\n        fadeOutGroup\n            .append('rect')\n            .attr('x', this.xScale(fadeOutStartDate))\n            .attr('y', -this.marginH)\n            .attr('width', this.xScale(this.dateExtent[1]) - this.xScale(fadeOutStartDate) + 1)\n            .attr('height', this.yScale(this.yExtent[0]) - this.yScale(this.yExtent[1]) + this.marginH * 2)\n            .style('fill', `url(#${this.fadeOutGradientID})`);\n    }\n\n    /**\n     * Prepares the data needed for the rendering.\n     */\n    protected abstract _prepareData(): void;\n\n    /**\n     * Draws the main content of the diagram.\n     */\n    protected abstract _drawContent(): void;\n\n    /**\n     * Updates the textProperties according to the investment step the tooltip is currently on.\n     *\n     * @param investmentStepIndex The index of the investment step of at the current mouse position.\n     */\n    protected abstract _updateTooltip(investmentStepIndex: number): void;\n}\n","import * as d3 from 'd3';\nimport {\n    getTotalShareValue,\n    getTotalDividendShareValue,\n    InvestmentStep,\n    NegativeInvestmentStepIdentifier,\n    ETFRatio,\n} from '../model/InvestmentModel';\nimport { ETFIdentifier } from '../model/ForecastModel';\nimport { D3ChartStrategy, generateLabel, DataArrayEntry } from './D3ChartStrategy';\nimport { ETF_SYMBOL_TO_NAME } from '../components/App';\n\ninterface IDataToIndex {\n    [identifier: string]: number;\n}\n\ntype ETFIdentifierToColors = { [key in ETFIdentifier]: { total: string; invested: string } };\n\ntype NegativeInvestmentToColorMap = { [key in NegativeInvestmentStepIdentifier]: string };\n\nconst captionSpaceForDeltaValues = 200;\n\n/**\n * A class that draws an area chart that contains the value of costs, taxes,\n * inflation and the total value and invested value of all used ETFs.\n */\nexport class AreaChartD3 extends D3ChartStrategy {\n    private readonly etfLineColors: ETFIdentifierToColors = {\n        'SP5C.PAR': { total: '#0562a0', invested: '#71c1f7' },\n        ESGE: { total: '#ff1eff', invested: '#ff63ff' },\n        SUSA: { total: '#23ff01', invested: '#7dff69' },\n    };\n\n    private readonly colors: NegativeInvestmentToColorMap = {\n        inflation: '#ff7f00',\n        totalCosts: '#be3bff',\n        totalTaxes: '#e31a1c',\n    };\n    private readonly valueTextOffset = 200;\n    private readonly negativeLabels: NegativeInvestmentStepIdentifier[] = ['totalCosts', 'totalTaxes', 'inflation'];\n    private readonly investedIdentifier = 'invested';\n    private readonly capitalIdentifier = 'capital';\n    private readonly totalIdentifier = 'total';\n    private readonly totalColor = '#ff557f';\n\n    private etfIdentifiers: ETFIdentifier[];\n    private dataToIndex: IDataToIndex = {};\n    private subtractInflationFromTotal: boolean;\n    private previousInvestmentSteps: InvestmentStep[] | undefined;\n\n    /**\n     * Constructs the area chart by calling the base class constructor and determining all used ETFs.\n     */\n    constructor(\n        investmentSteps: InvestmentStep[],\n        renderDivRef: HTMLDivElement,\n        payoutPhaseStartDate: Date,\n        tooltipDate: Date | undefined,\n        yExtent: [number, number] | undefined,\n        etfRatio: ETFRatio,\n        subtractInflationFromTotal: boolean,\n        previousInvestmentSteps: InvestmentStep[] | undefined\n    ) {\n        super(\n            investmentSteps,\n            renderDivRef,\n            payoutPhaseStartDate,\n            'firstSVG',\n            tooltipDate,\n            yExtent,\n            captionSpaceForDeltaValues\n        );\n        this.previousInvestmentSteps = previousInvestmentSteps;\n        this.subtractInflationFromTotal = subtractInflationFromTotal;\n\n        this.etfIdentifiers = [];\n        for (const etfIdentifier of Object.keys(etfRatio) as ETFIdentifier[]) {\n            const ratio = etfRatio[etfIdentifier];\n            if (ratio != null && ratio > 0.0) {\n                this.etfIdentifiers.push(etfIdentifier);\n            }\n        }\n    }\n\n    /**\n     * Prepares all data from the investment model for rendering.\n     */\n    _prepareData() {\n        this.dataToIndex = {\n            totalCosts: 0,\n            totalTaxes: 1,\n            inflation: 2,\n        };\n\n        let currentIdx = 3;\n        for (const etfIdentifier of this.etfIdentifiers) {\n            this.dataToIndex[etfIdentifier + this.investedIdentifier] = currentIdx++;\n            this.dataToIndex[etfIdentifier + this.capitalIdentifier] = currentIdx++;\n        }\n\n        this.minIndex = this.dataToIndex.inflation;\n        this.maxIndex = currentIdx - 1;\n\n        this.dataArray = [];\n        for (let i = 0; i < currentIdx; i++) {\n            this.dataArray.push([]);\n        }\n        for (const investmentStep of this.investmentSteps) {\n            this.dataArray[this.dataToIndex.totalCosts].push({\n                yStart: 0,\n                yEnd: -investmentStep.totalCosts,\n                date: investmentStep.date,\n                color: this.colors.totalCosts,\n            });\n            this.dataArray[this.dataToIndex.totalTaxes].push({\n                yStart: -investmentStep.totalCosts,\n                yEnd: -investmentStep.totalCosts - investmentStep.totalTaxes,\n                date: investmentStep.date,\n                color: this.colors.totalTaxes,\n            });\n            this.dataArray[this.dataToIndex.inflation].push({\n                yStart: -investmentStep.totalCosts - investmentStep.totalTaxes,\n                yEnd: -investmentStep.totalCosts - investmentStep.totalTaxes - investmentStep.inflation,\n                date: investmentStep.date,\n                color: this.colors.inflation,\n            });\n            let heightOffset = 0;\n            for (const etfIdentifier of this.etfIdentifiers) {\n                const totalShareValue = getTotalShareValue(etfIdentifier, investmentStep);\n                const totalDividendShareValue = getTotalDividendShareValue(etfIdentifier, investmentStep);\n                this.dataArray[this.dataToIndex[etfIdentifier + this.capitalIdentifier]].push({\n                    yStart: totalShareValue + heightOffset,\n                    yEnd: totalShareValue - totalDividendShareValue + heightOffset,\n                    date: investmentStep.date,\n                    color: this.etfLineColors[etfIdentifier].total,\n                });\n                this.dataArray[this.dataToIndex[etfIdentifier + this.investedIdentifier]].push({\n                    yStart: totalShareValue - totalDividendShareValue + heightOffset,\n                    yEnd: heightOffset,\n                    date: investmentStep.date,\n                    color: this.etfLineColors[etfIdentifier].invested,\n                });\n                heightOffset += totalShareValue;\n            }\n        }\n    }\n\n    /**\n     * Draws the data as lines instead of a stacked area chart.\n     */\n    _drawLines() {\n        // Draw total line.\n        this.svg\n            .append('path')\n            .datum(this.dataArray[this.dataArray.length - 1])\n            .style('stroke', this.totalColor)\n            .style('stroke-width', this.lineStrokeWidth)\n            .style('fill', 'none')\n            .attr(\n                'd',\n                d3\n                    .line<DataArrayEntry>()\n                    .x(d => this.xScale(d.date))\n                    .y((d, i) => {\n                        return this.yScale(\n                            d.yStart - (this.subtractInflationFromTotal ? this.investmentSteps[i].inflation : 0)\n                        );\n                    })\n            );\n    }\n\n    /**\n     * Draws the main content of the diagram. Currently a stacked area chart.\n     */\n    _drawContent() {\n        this._drawArea();\n        this._drawLines();\n    }\n\n    /**\n     * Draws the stacked areas of the diagram.\n     */\n    _drawArea() {\n        // Draw stacked area chart.\n        for (let i = 0; i < this.dataArray.length; i++) {\n            this.svg\n                .append('g')\n                .attr('class', 'area')\n                .append('path')\n                .datum(this.dataArray[i])\n                .style('opacity', this.contentOpacity)\n                .style('fill', d => d[0].color)\n                .attr(\n                    'd',\n                    d3\n                        .area<DataArrayEntry>()\n                        .curve(d3.curveMonotoneX)\n                        .x(d => this.xScale(d.date))\n                        .y0(d => this.yScale(d.yEnd))\n                        .y1(d => this.yScale(d.yStart))\n                );\n        }\n    }\n\n    /**\n     * Prepares the additional text that is displayed by adding it to the textProperties.\n     */\n    _prepareText() {\n        super._prepareText();\n        const paddingW = this.width * 0.02;\n        const paddingH = this.standardFontSize * 0.4;\n\n        // Negative labels.\n        for (let i = 0; i < this.negativeLabels.length; i++) {\n            this.textProperties[this.negativeLabels[i]] = {\n                text: generateLabel(this.negativeLabels[i]),\n                x: this.xScale(this.dateExtent[1]) + paddingW,\n                y: this.yScale(0) + (this.standardFontSize + paddingH) * (i + 1),\n                fontSize: this.standardFontSize,\n                fontFamily: null,\n                textAnchor: 'start',\n                fontWeight: 'normal',\n                color: this.colors[this.negativeLabels[i]],\n            };\n\n            this.textProperties[this.negativeLabels[i] + this.labelValueIdentifier] = {\n                text: this.valueToDisplayText(undefined),\n                x: this.xScale(this.dateExtent[1]) + paddingW + this.valueTextOffset,\n                y: this.yScale(0) + (this.standardFontSize + paddingH) * (i + 1),\n                fontSize: this.standardFontSize,\n                fontFamily: this.monospaceFont,\n                textAnchor: 'end',\n                fontWeight: 'bold',\n                color: this.colors[this.negativeLabels[i]],\n            };\n        }\n\n        // Add ETF values of Labels.\n        for (let i = 0; i < this.etfIdentifiers.length; i++) {\n            // ETF Label.\n            this.textProperties[this.etfIdentifiers[i]] = {\n                text: ETF_SYMBOL_TO_NAME[this.etfIdentifiers[i]],\n                x: this.xScale(this.dateExtent[1]) + paddingW,\n                y: this.yScale(0) - (this.standardFontSize + paddingH) * i * 3 - 2 * this.standardFontSize,\n                fontSize: this.standardFontSize,\n                fontFamily: null,\n                textAnchor: 'start',\n                fontWeight: 'normal',\n                color: this.etfLineColors[this.etfIdentifiers[i]].total,\n            };\n            // Total\n            this.textProperties[this.etfIdentifiers[i] + this.totalIdentifier] = {\n                text: generateLabel(this.totalIdentifier),\n                x: this.xScale(this.dateExtent[1]) + paddingW,\n                y: this.yScale(0) - (this.standardFontSize + paddingH) * i * 3 - 1 * this.standardFontSize,\n                fontSize: this.standardFontSize,\n                fontFamily: null,\n                textAnchor: 'start',\n                fontWeight: 'normal',\n                color: this.etfLineColors[this.etfIdentifiers[i]].total,\n            };\n\n            this.textProperties[this.etfIdentifiers[i] + this.labelValueIdentifier + this.totalIdentifier] = {\n                text: this.valueToDisplayText(undefined),\n                x: this.xScale(this.dateExtent[1]) + paddingW + this.valueTextOffset,\n                y: this.yScale(0) - (this.standardFontSize + paddingH) * i * 3 - 1 * this.standardFontSize,\n                fontSize: this.standardFontSize,\n                fontFamily: this.monospaceFont,\n                textAnchor: 'end',\n                fontWeight: 'bold',\n                color: this.etfLineColors[this.etfIdentifiers[i]].total,\n            };\n            // Invested\n            this.textProperties[this.etfIdentifiers[i] + this.investedIdentifier] = {\n                text: generateLabel(this.investedIdentifier),\n                x: this.xScale(this.dateExtent[1]) + paddingW,\n                y: this.yScale(0) - (this.standardFontSize + paddingH) * i * 3 - 0 * this.standardFontSize,\n                fontSize: this.standardFontSize,\n                fontFamily: null,\n                textAnchor: 'start',\n                fontWeight: 'normal',\n                color: this.etfLineColors[this.etfIdentifiers[i]].invested,\n            };\n\n            this.textProperties[this.etfIdentifiers[i] + this.labelValueIdentifier + this.investedIdentifier] = {\n                text: this.valueToDisplayText(undefined),\n                x: this.xScale(this.dateExtent[1]) + paddingW + this.valueTextOffset,\n                y: this.yScale(0) - (this.standardFontSize + paddingH) * i * 3 - 0 * this.standardFontSize,\n                fontSize: this.standardFontSize,\n                fontFamily: this.monospaceFont,\n                textAnchor: 'end',\n                fontWeight: 'bold',\n                color: this.etfLineColors[this.etfIdentifiers[i]].invested,\n            };\n        }\n\n        // Add total label.\n        this.textProperties[this.totalIdentifier] = {\n            text: generateLabel(this.totalIdentifier),\n            x: this.xScale(this.dateExtent[1]) + paddingW,\n            y: this.yScale(this.yExtent[1]),\n            fontSize: this.standardFontSize,\n            fontFamily: null,\n            textAnchor: 'start',\n            fontWeight: 'normal',\n            color: this.totalColor,\n        };\n\n        this.textProperties[this.totalIdentifier + this.labelValueIdentifier] = {\n            text: this.valueToDisplayText(undefined),\n            x: this.xScale(this.dateExtent[1]) + paddingW + this.valueTextOffset,\n            y: this.yScale(this.yExtent[1]),\n            fontSize: this.standardFontSize,\n            fontFamily: this.monospaceFont,\n            textAnchor: 'end',\n            fontWeight: 'bold',\n            color: this.totalColor,\n        };\n\n        const yOffset = this.height * 1.15;\n        const xPadding = this.width / this.negativeLabels.length;\n        // Add delta labels.\n        this.textProperties[this.deltaIdentifier] = {\n            text: 'Differences to Previous Configuration:',\n            x: this.xScale(\n                this.dateExtent[0].valueOf() + (this.dateExtent[1].valueOf() - this.dateExtent[0].valueOf()) / 2\n            ),\n            y: yOffset + this.standardFontSize,\n            fontSize: this.standardFontSize,\n            fontFamily: null,\n            textAnchor: 'middle',\n            fontWeight: 'bold',\n            color: 'black',\n        };\n        // Negative labels (delta).\n        for (let i = 0; i < this.negativeLabels.length; i++) {\n            this.textProperties[this.negativeLabels[i] + this.deltaIdentifier] = {\n                text: generateLabel(this.negativeLabels[i]),\n                x: xPadding * i,\n                y: yOffset + (this.standardFontSize + paddingH) * (4 + this.etfIdentifiers.length),\n                fontSize: this.standardFontSize,\n                fontFamily: null,\n                textAnchor: 'start',\n                fontWeight: 'normal',\n                color: this.colors[this.negativeLabels[i]],\n            };\n\n            this.textProperties[this.negativeLabels[i] + this.deltaIdentifier + this.labelValueIdentifier] = {\n                text: this.valueToDisplayText(undefined),\n                x: xPadding * i + this.valueTextOffset + paddingW,\n                y: yOffset + (this.standardFontSize + paddingH) * (4 + this.etfIdentifiers.length),\n                fontSize: this.standardFontSize,\n                fontFamily: this.monospaceFont,\n                textAnchor: 'end',\n                fontWeight: 'bold',\n                color: this.colors[this.negativeLabels[i]],\n            };\n        }\n        const numberOfEntriesPerRow = 3;\n        // Add ETF values of Labels (delta).\n        for (let i = 0; i < this.etfIdentifiers.length; i++) {\n            // ETF Label.\n            this.textProperties[this.etfIdentifiers[i] + this.deltaIdentifier] = {\n                text: ETF_SYMBOL_TO_NAME[this.etfIdentifiers[i]],\n                x: (this.width / numberOfEntriesPerRow) * 0,\n                y: yOffset + (this.standardFontSize + paddingH) * (i + 2),\n                fontSize: this.standardFontSize,\n                fontFamily: null,\n                textAnchor: 'start',\n                fontWeight: 'normal',\n                color: this.etfLineColors[this.etfIdentifiers[i]].total,\n            };\n            // Total\n            this.textProperties[this.etfIdentifiers[i] + this.deltaIdentifier + this.totalIdentifier] = {\n                text: generateLabel(this.totalIdentifier),\n                x: (this.width / numberOfEntriesPerRow) * 1,\n                y: yOffset + (this.standardFontSize + paddingH) * (i + 2),\n                fontSize: this.standardFontSize,\n                fontFamily: null,\n                textAnchor: 'start',\n                fontWeight: 'normal',\n                color: this.etfLineColors[this.etfIdentifiers[i]].total,\n            };\n\n            this.textProperties[\n                this.etfIdentifiers[i] + this.deltaIdentifier + this.labelValueIdentifier + this.totalIdentifier\n            ] = {\n                text: this.valueToDisplayText(undefined),\n                x: (this.width / numberOfEntriesPerRow) * 1 + this.valueTextOffset + paddingW,\n                y: yOffset + (this.standardFontSize + paddingH) * (i + 2),\n                fontSize: this.standardFontSize,\n                fontFamily: this.monospaceFont,\n                textAnchor: 'end',\n                fontWeight: 'bold',\n                color: this.etfLineColors[this.etfIdentifiers[i]].total,\n            };\n            // Invested\n            this.textProperties[this.etfIdentifiers[i] + this.deltaIdentifier + this.investedIdentifier] = {\n                text: generateLabel(this.investedIdentifier),\n                x: (this.width / numberOfEntriesPerRow) * 2,\n                y: yOffset + (this.standardFontSize + paddingH) * (i + 2),\n                fontSize: this.standardFontSize,\n                fontFamily: null,\n                textAnchor: 'start',\n                fontWeight: 'normal',\n                color: this.etfLineColors[this.etfIdentifiers[i]].invested,\n            };\n\n            this.textProperties[\n                this.etfIdentifiers[i] + this.deltaIdentifier + this.labelValueIdentifier + this.investedIdentifier\n            ] = {\n                text: this.valueToDisplayText(undefined),\n                x: (this.width / numberOfEntriesPerRow) * 2 + this.valueTextOffset + paddingW,\n                y: yOffset + (this.standardFontSize + paddingH) * (i + 2),\n                fontSize: this.standardFontSize,\n                fontFamily: this.monospaceFont,\n                textAnchor: 'end',\n                fontWeight: 'bold',\n                color: this.etfLineColors[this.etfIdentifiers[i]].invested,\n            };\n        }\n        // Add total label.\n        this.textProperties[this.totalIdentifier + this.deltaIdentifier] = {\n            text: generateLabel(this.totalIdentifier),\n            x: (this.width / numberOfEntriesPerRow) * 0,\n            y: yOffset + (this.standardFontSize + paddingH) * (this.etfIdentifiers.length + 2),\n            fontSize: this.standardFontSize,\n            fontFamily: null,\n            textAnchor: 'start',\n            fontWeight: 'normal',\n            color: this.totalColor,\n        };\n\n        this.textProperties[this.totalIdentifier + this.deltaIdentifier + this.labelValueIdentifier] = {\n            text: this.valueToDisplayText(undefined),\n            x: (this.width / numberOfEntriesPerRow) * 0 + this.valueTextOffset + paddingW,\n            y: yOffset + (this.standardFontSize + paddingH) * (this.etfIdentifiers.length + 2),\n            fontSize: this.standardFontSize,\n            fontFamily: this.monospaceFont,\n            textAnchor: 'end',\n            fontWeight: 'bold',\n            color: this.totalColor,\n        };\n    }\n\n    /**\n     * Updates the textProperties according to the investment step the tooltip is currently on.\n     *\n     * @param investmentStepIndex The index of the investment step of at the current mouse position.\n     */\n    _updateTooltip(investmentStepIndex: number) {\n        // Update ETF Values.\n        for (const etfIdentifier of this.etfIdentifiers) {\n            const totalValue = getTotalShareValue(etfIdentifier, this.investmentSteps[investmentStepIndex]);\n            const totalDividendValue = getTotalDividendShareValue(\n                etfIdentifier,\n                this.investmentSteps[investmentStepIndex]\n            );\n            const investedValue = totalValue - totalDividendValue;\n            this.textProperties[\n                etfIdentifier + this.labelValueIdentifier + this.investedIdentifier\n            ].text = this.valueToDisplayText(investedValue, true);\n            this.textProperties[\n                etfIdentifier + this.labelValueIdentifier + this.totalIdentifier\n            ].text = this.valueToDisplayText(totalValue, true);\n        }\n        // Update negative values.\n        for (const negativeLabel of this.negativeLabels) {\n            const value = this.investmentSteps[investmentStepIndex][negativeLabel];\n            this.textProperties[negativeLabel + this.labelValueIdentifier].text = this.valueToDisplayText(value, true);\n        }\n        // Update total values.\n        let totalValue = 0;\n        for (const etfIdentifier of this.etfIdentifiers) {\n            totalValue += getTotalShareValue(etfIdentifier, this.investmentSteps[investmentStepIndex]);\n        }\n        totalValue -= this.subtractInflationFromTotal ? this.investmentSteps[investmentStepIndex].inflation : 0;\n        this.textProperties[this.totalIdentifier + this.labelValueIdentifier].text = this.valueToDisplayText(\n            totalValue\n        );\n\n        // Set the delta Values if the previous model exists.\n        if (this.previousInvestmentSteps != null && this.previousInvestmentSteps.length > investmentStepIndex) {\n            // Negative labels.\n            for (const negativeLabel of this.negativeLabels) {\n                const currentValue = this.investmentSteps[investmentStepIndex][negativeLabel];\n                const previousValue = this.previousInvestmentSteps[investmentStepIndex][negativeLabel];\n                const value = currentValue - previousValue;\n                this.textProperties[\n                    negativeLabel + this.deltaIdentifier + this.labelValueIdentifier\n                ].text = this.valueToDisplayText(value, true);\n            }\n            // ETF labels.\n            for (const etfIdentifier of this.etfIdentifiers) {\n                const currentTotalValue = getTotalShareValue(etfIdentifier, this.investmentSteps[investmentStepIndex]);\n                const currentTotalDividendValue = getTotalDividendShareValue(\n                    etfIdentifier,\n                    this.investmentSteps[investmentStepIndex]\n                );\n                const currentInvestedValue = currentTotalValue - currentTotalDividendValue;\n\n                const previousTotalValue = getTotalShareValue(\n                    etfIdentifier,\n                    this.previousInvestmentSteps[investmentStepIndex]\n                );\n                const previousTotalDividendValue = getTotalDividendShareValue(\n                    etfIdentifier,\n                    this.previousInvestmentSteps[investmentStepIndex]\n                );\n                const previousInvestedValue = previousTotalValue - previousTotalDividendValue;\n\n                const investedValue = currentInvestedValue - previousInvestedValue;\n                const totalValue = currentTotalValue - previousTotalValue;\n                this.textProperties[\n                    etfIdentifier + this.deltaIdentifier + this.labelValueIdentifier + this.investedIdentifier\n                ].text = this.valueToDisplayText(investedValue);\n                this.textProperties[\n                    etfIdentifier + this.deltaIdentifier + this.labelValueIdentifier + this.totalIdentifier\n                ].text = this.valueToDisplayText(totalValue);\n            }\n            // Total Value.\n            let previousTotalValue = 0;\n            for (const etfIdentifier of this.etfIdentifiers) {\n                previousTotalValue += getTotalShareValue(\n                    etfIdentifier,\n                    this.previousInvestmentSteps[investmentStepIndex]\n                );\n            }\n            previousTotalValue -= this.subtractInflationFromTotal\n                ? this.previousInvestmentSteps[investmentStepIndex].inflation\n                : 0;\n            this.textProperties[\n                this.totalIdentifier + this.deltaIdentifier + this.labelValueIdentifier\n            ].text = this.valueToDisplayText(totalValue - previousTotalValue);\n            // Set all delta value to undefined if the investmentStep is not included in the previous investment steps.\n        } else if (this.previousInvestmentSteps != null && this.previousInvestmentSteps.length <= investmentStepIndex) {\n            for (const textPropertyIdentifier in this.textProperties) {\n                if (textPropertyIdentifier.includes(this.deltaIdentifier) && textPropertyIdentifier.includes(this.labelValueIdentifier)) {\n                    this.textProperties[textPropertyIdentifier].text = this.valueToDisplayText(undefined);\n                }\n            }\n        }\n    }\n}\n","import { InvestmentStep } from '../model/InvestmentModel';\nimport { ETFIdentifier } from '../model/ForecastModel';\nimport { D3ChartStrategy } from './D3ChartStrategy';\n\n/**\n * Calculates the sum of all payout over all used etfs.\n *\n * @param investmentStep The concerning investmentStep.\n * @returns The sum of all payouts.\n */\nfunction getSumNewPayout(investmentStep: InvestmentStep) {\n    let sumNewPayout = 0;\n    for (const etfIdentifier of Object.keys(investmentStep.newPayout) as ETFIdentifier[]) {\n        sumNewPayout += investmentStep.newPayout[etfIdentifier];\n    }\n    return sumNewPayout;\n}\n\n/**\n * Renders a cashflow diagram of the investment model.\n */\nexport class CashflowBarChart extends D3ChartStrategy {\n    private readonly barPaddingPercentage = 0.9;\n    private readonly payoutIdentifier = 'payout';\n    private readonly investedIdentifier = 'invested';\n    private readonly maxNumberTextLength = 100;\n    private readonly colors = {\n        payout: { first: '#3acc5c', second: '#2d9e45' },\n        invested: { first: '#ff3e58', second: '#c32f46' },\n    };\n\n    private rectWidth = 0;\n\n    /**\n     * Just calls the constructor of the base class with the specific svg id.\n     *\n     * @param investmentSteps The investment model.\n     * @param renderDivRef The div reference where the diagram should be placed.\n     * @param payoutPhaseStartDate The start of the payout phase.\n     * @param tooltipDate The tooltip date if the tooltip was active in the last rendered diagram.\n     * @param yExtent The y extent if it should stay static.\n     */\n    constructor(\n        investmentSteps: InvestmentStep[],\n        renderDivRef: HTMLDivElement,\n        payoutPhaseStartDate: Date,\n        tooltipDate: Date | undefined,\n        yExtent: [number, number] | undefined\n    ) {\n        super(investmentSteps, renderDivRef, payoutPhaseStartDate, 'secondSVG', tooltipDate, yExtent);\n    }\n\n    /**\n     * Prepares the data for the diagram based on the investment model.\n     */\n    _prepareData() {\n        // Create line array.\n        const dataToIndex = {\n            invested: 0,\n            payout: 1,\n        };\n\n        this.minIndex = dataToIndex.invested;\n        this.maxIndex = dataToIndex.payout;\n\n        this.dataArray = [[], []];\n        const startYear = this.investmentSteps[0].date.getFullYear();\n        for (const investmentStep of this.investmentSteps) {\n            let sumNewPayout = getSumNewPayout(investmentStep);\n            const colorIdentifier = (investmentStep.date.getFullYear() - startYear) % 2 === 0 ? 'first' : 'second';\n\n            this.dataArray[dataToIndex.invested].push({\n                yStart: 0,\n                yEnd: -investmentStep.newInvestment,\n                date: investmentStep.date,\n                color: this.colors.invested[colorIdentifier],\n            });\n            this.dataArray[dataToIndex.payout].push({\n                yStart: sumNewPayout,\n                yEnd: 0,\n                date: investmentStep.date,\n                color: this.colors.payout[colorIdentifier],\n            });\n        }\n\n        this.rectWidth = (this.width / this.dataArray[dataToIndex.invested].length) * this.barPaddingPercentage;\n    }\n\n    /**\n     * Prepares additional Text that should be displayed by adding it to the textProperties.\n     */\n    _prepareText() {\n        super._prepareText();\n\n        const payoutX =\n            this.xScale(this.payoutPhaseStartDate) +\n            (this.xScale(this.dateExtent[1]) - this.xScale(this.payoutPhaseStartDate)) / 2;\n        const payoutY = this.yScale(0) + (this.yScale(this.yExtent[0]) - this.yScale(0)) / 2;\n\n        this.textProperties[this.payoutIdentifier] = {\n            text: this.payoutIdentifier,\n            x: payoutX,\n            y: payoutY,\n            fontSize: this.standardFontSize,\n            fontFamily: null,\n            textAnchor: 'end',\n            fontWeight: 'normal',\n            color: this.colors[this.payoutIdentifier].first,\n        };\n\n        this.textProperties[this.payoutIdentifier + this.labelValueIdentifier] = {\n            text: this.valueToDisplayText(undefined),\n            x: payoutX + this.maxNumberTextLength,\n            y: payoutY,\n            fontSize: this.standardFontSize,\n            fontFamily: this.monospaceFont,\n            textAnchor: 'end',\n            fontWeight: 'bold',\n            color: this.colors[this.payoutIdentifier].first,\n        };\n\n        const investedX =\n            this.xScale(this.dateExtent[0]) +\n            (this.xScale(this.payoutPhaseStartDate) - this.xScale(this.dateExtent[0])) / 2;\n        const investedY = this.yScale(0) - (this.yScale(0) - this.yScale(this.yExtent[1])) / 2;\n\n        this.textProperties[this.investedIdentifier] = {\n            text: this.investedIdentifier,\n            x: investedX,\n            y: investedY,\n            fontSize: this.standardFontSize,\n            fontFamily: null,\n            textAnchor: 'end',\n            fontWeight: 'normal',\n            color: this.colors[this.investedIdentifier].first,\n        };\n        this.textProperties[this.investedIdentifier + this.labelValueIdentifier] = {\n            text: this.valueToDisplayText(undefined),\n            x: investedX + this.maxNumberTextLength,\n            y: investedY,\n            fontSize: this.standardFontSize,\n            fontFamily: this.monospaceFont,\n            textAnchor: 'end',\n            fontWeight: 'bold',\n            color: this.colors[this.investedIdentifier].first,\n        };\n    }\n\n    /**\n     * Updates the textProperties according to the investment step the tooltip is currently on.\n     *\n     * @param investmentStepIndex The index of the investment step of at the current mouse position.\n     */\n    _updateTooltip(investmentStepIndex: number) {\n        const payoutValue = getSumNewPayout(this.investmentSteps[investmentStepIndex]);\n        const investedValue = this.investmentSteps[investmentStepIndex].newInvestment;\n        this.textProperties[this.payoutIdentifier + this.labelValueIdentifier].text = this.valueToDisplayText(\n            payoutValue\n        );\n\n        this.textProperties[this.investedIdentifier + this.labelValueIdentifier].text = this.valueToDisplayText(\n            investedValue\n        );\n    }\n\n    /**\n     * Draws the main content of the diagram. In this case the bars of the cashflow barchart.\n     */\n    _drawContent() {\n        // Skip the last bar if it is outside the graph.\n        const needToSkipLastBar = this.dataArray[0][this.dataArray[0].length - 1].date === this.dateExtent[1];\n        for (let barArray of this.dataArray) {\n            if (needToSkipLastBar) {\n                barArray = barArray.slice(0, -1);\n            }\n\n            this.svg\n                .append('g')\n                .attr('class', 'bars')\n                .selectAll(`rect.none`)\n                .data(barArray)\n                .enter()\n                .append('rect')\n                .style('fill', d => d.color)\n                .attr('x', d => this.xScale(d.date))\n                .attr('width', this.rectWidth)\n                .attr('y', d => this.yScale(d.yStart))\n                .attr('height', d => this.yScale(d.yEnd) - this.yScale(d.yStart))\n                .style('opacity', this.contentOpacity);\n        }\n    }\n}\n","import React from 'react';\nimport {\n    STARTING_CAPITAL_IDENTIFIER,\n    MONTHLY_INVESTMENT_IDENTIFIER,\n    YEARLY_INVESTMENT_INCREASE_IDENTIFIER,\n    SAVING_PHASE_IDENTIFIER,\n    AGE_IDENTIFIER,\n    TAX_FREE_AMOUNT_IDENTIFIER,\n    MONTHLY_PAYOUT_IDENTIFIER,\n    YEARLY_PAYOUT_INCREASE_IDENTIFIER,\n    LIFE_EXPECTATION_IDENTIFIER,\n    DETAILED_GRAPH_DROPDOWN_IDENTIFIER,\n    Y_AXIS_LOCK_IDENTIFIER,\n    INFLATION_USED_FOR_TOTAL,\n    USE_DISTRIBUTION_MODEL,\n    generateCostConfig,\n} from './App';\nimport { InvestmentModel, ETFRatio } from '../model/InvestmentModel';\nimport { AreaChartD3 } from '../renderer/AreaChartD3';\nimport { CashflowBarChart } from '../renderer/CashflowBarChartD3';\nimport { D3ChartStrategy } from '../renderer/D3ChartStrategy';\nimport { IAppState } from './App';\nimport { percentageStringToFloat, stringToInt } from '../helpers/utils';\n\nexport interface IConfigOptions {\n    costConfig: ICostConfiguration;\n    taxFreeAmount: number;\n}\n\nexport interface ICostConfiguration {\n    percentageCosts: number;\n    fixedCosts: number;\n}\n\n/**\n * React component which handles the visualization.\n * It re renders the visualizations each time the state changes.\n */\nexport class Visualization extends React.Component<IAppState, {}> {\n    private firstSVGRef = React.createRef<HTMLDivElement>();\n    private secondSVGRef = React.createRef<HTMLDivElement>();\n\n    private areaChart: AreaChartD3 | undefined = undefined;\n    private barChart: CashflowBarChart | undefined = undefined;\n\n    private investmentModel: InvestmentModel | undefined = undefined;\n\n    /**\n     * Generates the etf to ratio mapping for all currently selected etfs.\n     *\n     * @returns The etf to ratio mapping.\n     */\n    private _getETFIdentifierToRatio(): ETFRatio {\n        const etfIdentifierToRatio: ETFRatio = {};\n        const etfProperties = this.props.etfDropdownSelection.elements;\n        for (const etfIdentifier in etfProperties) {\n            if (etfProperties[etfIdentifier].selected) {\n                etfIdentifierToRatio[etfProperties[etfIdentifier].symbol] = percentageStringToFloat(\n                    etfProperties[etfIdentifier].value\n                );\n            }\n        }\n        return etfIdentifierToRatio;\n    }\n\n    /**\n     * Calculates the investment model for the current properties.\n     *\n     * @param etfIdentifierToRatio The etfIdentifier mapping to the ratio.\n     * @returns The investment model for the current state.\n     */\n    private _getInvestmentModel(etfIdentifierToRatio: ETFRatio): InvestmentModel {\n        const configOptions: IConfigOptions = {\n            taxFreeAmount: stringToInt(this.props[TAX_FREE_AMOUNT_IDENTIFIER].value),\n            costConfig: generateCostConfig(this.props),\n        };\n\n        return new InvestmentModel(\n            stringToInt(this.props[STARTING_CAPITAL_IDENTIFIER].value),\n            stringToInt(this.props[MONTHLY_INVESTMENT_IDENTIFIER].value),\n            percentageStringToFloat(this.props[YEARLY_INVESTMENT_INCREASE_IDENTIFIER].value),\n            stringToInt(this.props[MONTHLY_PAYOUT_IDENTIFIER].value),\n            percentageStringToFloat(this.props[YEARLY_PAYOUT_INCREASE_IDENTIFIER].value),\n            stringToInt(this.props[SAVING_PHASE_IDENTIFIER].value),\n            etfIdentifierToRatio,\n            configOptions,\n            stringToInt(this.props[AGE_IDENTIFIER].value),\n            stringToInt(this.props[LIFE_EXPECTATION_IDENTIFIER].value),\n            this.props[USE_DISTRIBUTION_MODEL].value\n        );\n    }\n\n    /**\n     * Returns the tooltip date if it existed in the last visualization.\n     *\n     * @returns The tooltip date if defined.\n     */\n    private _getTooltipDate(): Date | undefined {\n        if (this.areaChart != null) {\n            return this.areaChart.tooltipDate;\n        } else if (this.barChart != null) {\n            return this.barChart.tooltipDate;\n        } else {\n            return undefined;\n        }\n    }\n\n    /**\n     * Returns the y extent if it exists and the y axis should be locked.\n     *\n     * @returns The y extent if defined and axis should be locked.\n     */\n    private _getYAxisExtent(diagram: D3ChartStrategy | undefined) {\n        return diagram != null && this.props[Y_AXIS_LOCK_IDENTIFIER].value ? diagram.yExtent : undefined;\n    }\n\n    /**\n     * Draws both charts.\n     */\n    private _drawVisualization() {\n        D3ChartStrategy.reset();\n        try {\n            if (\n                this.props.isValid != null &&\n                this.props.isValid &&\n                this.firstSVGRef.current != null &&\n                this.secondSVGRef.current != null\n            ) {\n                const etfIdentifierToRatio = this._getETFIdentifierToRatio();\n                const previousInvestmentSteps =\n                    this.investmentModel != null\n                        ? this.investmentModel.getInvestmentSteps(this.props[DETAILED_GRAPH_DROPDOWN_IDENTIFIER].value)\n                        : undefined;\n                this.investmentModel = this._getInvestmentModel(etfIdentifierToRatio);\n                const firstPayoutPhaseDate = this.investmentModel.getPayoutPhaseBeginDate();\n                const correctLevelOfDetailInvestmentSteps = this.investmentModel.getInvestmentSteps(\n                    this.props[DETAILED_GRAPH_DROPDOWN_IDENTIFIER].value\n                );\n                let tooltipDate = this._getTooltipDate();\n                this.areaChart = new AreaChartD3(\n                    correctLevelOfDetailInvestmentSteps,\n                    this.firstSVGRef.current,\n                    firstPayoutPhaseDate,\n                    tooltipDate,\n                    this._getYAxisExtent(this.areaChart),\n                    etfIdentifierToRatio,\n                    this.props[INFLATION_USED_FOR_TOTAL].value,\n                    previousInvestmentSteps\n                );\n                this.areaChart.render();\n                this.barChart = new CashflowBarChart(\n                    correctLevelOfDetailInvestmentSteps,\n                    this.secondSVGRef.current,\n                    firstPayoutPhaseDate,\n                    tooltipDate,\n                    this._getYAxisExtent(this.barChart)\n                );\n                this.barChart.render();\n            }\n        } catch (e) {\n            console.error(e);\n        }\n    }\n\n    /**\n     * Draws the visualization if the component has been drawn for the first time.\n     */\n    componentDidMount() {\n        this._drawVisualization();\n    }\n\n    /**\n     * Draws the visualization if the state changed.\n     */\n    componentDidUpdate() {\n        this._drawVisualization();\n    }\n\n    /**\n     * Renders the divs with the references for the charts.\n     *\n     * @returns The divs holding the references for the charts.\n     */\n    render() {\n        return (\n            <React.Fragment>\n                <div ref={this.secondSVGRef}></div>\n                <div ref={this.firstSVGRef}></div>\n            </React.Fragment>\n        );\n    }\n}\n","interface IErrorMessage {\n    identifier: string;\n    isValid: boolean;\n    errorMessage: string;\n}\n\n/**\n * Renders an error message as a tooltip.\n * \n * @param props The error message properties.\n * @returns The rendered error message.\n */\nexport function ErrorMessage(props: IErrorMessage) {\n    return (\n        <div\n            id={props.identifier + 'Feedback'}\n            className=\"invalid-tooltip\"\n            style={{ visibility: props.isValid ? 'hidden' : 'visible' }}>\n            {props.errorMessage}\n        </div>\n    );\n}\n","import { ErrorMessage } from './ErrorMessageComponent';\n\nexport interface ITextInputState {\n    value: string;\n    label: string;\n    errorMessage: string;\n    textAppending: string;\n    isValid: boolean;\n    disabled: boolean;\n    identifier: TextInputStateIdentifier;\n    onValueChange: (changedValue: string, changedStateIdentifier: TextInputStateIdentifier) => void;\n}\n\nexport interface IETFTextInputState {\n    value: string;\n    label: string;\n    errorMessage: string;\n    textAppending: string;\n    isValid: boolean;\n    disabled: boolean;\n    identifier: string;\n    onValueChange: (changedValue: string, changedStateIdentifier: string) => void;\n}\n\nexport type NumberInputStateIdentifier =\n    | 'startingCapital'\n    | 'monthlyInvestment'\n    | 'monthlyPayout'\n    | 'transactionCosts'\n    | 'savingPhase'\n    | 'age'\n    | 'lifeExpectation'\n    | 'taxFreeAmount'\n    | 'yearlyInvestmentIncrease'\n    | 'yearlyPayoutIncrease';\n\nexport type TextInputStateIdentifier = NumberInputStateIdentifier | 'apiKey';\n\n/**\n * Renders a text input element.\n *\n * @param props The text input properties.\n * @returns The rendered text input.\n */\nexport function TextInputElement(props: ITextInputState) {\n    return (\n        <div className=\"position-relative\">\n            <label className=\"form-label\" htmlFor={props.identifier}>\n                {props.label}\n            </label>\n            <input\n                className={'form-control ' + (props.isValid ? '' : 'is-invalid')}\n                id={props.identifier}\n                type=\"text\"\n                value={props.value + (props.textAppending !== '' ? ' ' + props.textAppending : '')}\n                onChange={e => props.onValueChange(e.target.value.split(' ')[0], props.identifier)}\n                disabled={props.disabled}\n            />\n            <ErrorMessage {...props} />\n        </div>\n    );\n}\n\n/**\n * Renders a text input element without hard identifier. Intended for the etf drop down.\n *\n * @param props The text input properties.\n * @returns The rendered text input.\n */\nexport function ETFTextInputElement(props: IETFTextInputState) {\n    return (\n        <div className=\"position-relative\">\n            <label className=\"form-label\" htmlFor={props.identifier}>\n                {props.label}\n            </label>\n            <input\n                className={'form-control ' + (props.isValid ? '' : 'is-invalid')}\n                id={props.identifier}\n                type=\"text\"\n                value={props.value + (props.textAppending !== '' ? ' ' + props.textAppending : '')}\n                onChange={e => props.onValueChange(e.target.value.split(' ')[0], props.identifier)}\n                disabled={props.disabled}\n            />\n            <ErrorMessage {...props} />\n        </div>\n    );\n}\n","export interface ICheckboxState {\n    value: boolean;\n    label: string;\n    identifier: ICheckBoxStateIdentifier;\n    onValueChange: (changedStateIdentifier: ICheckBoxStateIdentifier) => void;\n}\n\nexport type ICheckBoxStateIdentifier =\n    | 'transactionCostsType'\n    | 'etfAutomaticPercentage'\n    | 'yAxisLock'\n    | 'inflationUsedForTotal'\n    | 'useDistributionModel';\n\n/**\n * Renders a checkbox from the given properties.\n *\n * @param props The checkbox properties.\n * @returns The rendered checkbox.\n */\nexport function CheckboxInputElement(props: ICheckboxState) {\n    return (\n        <div className=\"checkbox-element\">\n            <input\n                className=\"form-check-input\"\n                id={props.identifier}\n                type=\"checkbox\"\n                value={props.value.toString()}\n                onChange={() => props.onValueChange(props.identifier)}\n            />\n            <label className=\"form-check-label\" htmlFor={props.identifier}>\n                {props.label}\n            </label>\n        </div>\n    );\n}\n","import { TextInputElement, TextInputStateIdentifier } from './TextInputElement';\n\nexport interface IAPIKey {\n    displayOverlay: boolean;\n    value: string;\n    label: string;\n    errorMessage: string;\n    isValid: boolean;\n    textAppending: string;\n    identifier: TextInputStateIdentifier;\n    onValueChange: (changedValue: string, changedStateIdentifier: TextInputStateIdentifier) => void;\n    handleAPIKeyConfirm: () => void;\n    error: boolean;\n}\n\n/**\n * Renders the API Key entering UI.\n *\n * @param props The properties for the api key UI.\n * @returns\n */\nexport function Overlay(props: IAPIKey) {\n    return (\n        <div className=\"row\">\n            <div className=\"col-12 p-0\">\n                <div className=\"d-grid gap-0\">\n                    <div\n                        className=\"overlay min-vh-100 text-center m-0 d-flex flex-column justify-content-center\"\n                        style={{ visibility: props.displayOverlay ? 'visible' : 'hidden' }}>\n                        <h1 className=\"p-5\">\n                            Enter your personal{' '}\n                            <a\n                                href=\"https://www.alphavantage.co/support/#api-key\"\n                                target=\"_blank\"\n                                rel=\"noopener noreferrer\">\n                                {' '}\n                                Alphavantage API Key\n                            </a>{' '}\n                        </h1>\n                        <TextInputElement {...props} disabled={!props.displayOverlay} />\n                        <button type=\"button\" className=\"btn btn-primary my-5\" onClick={props.handleAPIKeyConfirm}>\n                            Confirm\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}\n","interface ISidebarSectionHeading {\n    title: string;\n    initiallyCollapsed: boolean;\n    children: JSX.Element[];\n}\n\n/**\n * Renders a collapsible side bar section header which contains child ui elements.\n *\n * @param props The side bar properties.\n * @returns The rendered side bar section.\n */\nexport function SidebarSectionHeading(props: ISidebarSectionHeading) {\n    const titleID = props.title.replace(/\\W/g, '_');\n    return (\n        <div className=\"position-relative my-4 mb-1\">\n            <div className=\"d-flex my-3\">\n                <button\n                    className={'btn btn-secondary hamburgerButton mt-0 mb-0 pt-0 pb-0 me-4'}\n                    type=\"button\"\n                    data-bs-toggle=\"collapse\"\n                    data-bs-target={`#${titleID}`}\n                    aria-expanded={props.initiallyCollapsed ? 'false' : 'true'}\n                    aria-controls={titleID}>\n                    ☰\n                </button>\n                <h6 className=\"sidebar-heading m-0 my-auto\">{props.title}</h6>\n            </div>\n            <div className={'collapse ' + (props.initiallyCollapsed ? '' : 'show')} id={titleID}>\n                {props.children}\n            </div>\n        </div>\n    );\n}\n","import { ICostConfiguration } from './Visualization';\n\nexport interface BrokerProperties {\n    identifier: string;\n    label: string;\n    fixedCosts: number;\n    percentageCosts: number;\n}\n\nexport interface IBrokerDropDown {\n    label: string;\n    isValid: boolean;\n    handleChange: (brokerProperties: BrokerProperties) => void;\n    elements: BrokerProperties[];\n}\n\ntype BrokerDropDownProps = ICostConfiguration & IBrokerDropDown;\n\n/**\n * Tests if the given element properties match the current broker cost properties.\n *\n * @param props The broker properties.\n * @param element The broker element properties.\n * @returns If the element matches the broker cost properties.\n */\nfunction costsOfElementMatchUIValues(props: BrokerDropDownProps, element: BrokerProperties) {\n    return element.fixedCosts === props.fixedCosts && element.percentageCosts === props.percentageCosts;\n}\n\n/**\n * Renders the broker drop down element.\n * An element is displayed as selected if the current cost configuration matches that of the element.\n *\n * @param props The broker properties.\n * @returns The rendering of the broker drop down.\n */\nexport function BrokerDropDown(props: BrokerDropDownProps) {\n    return (\n        <div className=\"dropdown\">\n            <button\n                className=\"btn btn-secondary dropdown-toggle\"\n                type=\"button\"\n                id=\"BrokerDropDown\"\n                data-bs-toggle=\"dropdown\"\n                aria-expanded=\"false\">\n                {props.label}\n            </button>\n            <ul className=\"dropdown-menu\" aria-labelledby=\"BrokerDropDown\">\n                {props.elements.map(element => (\n                    <li key={element.identifier}>\n                        <button\n                            className={\n                                costsOfElementMatchUIValues(props, element) ? 'dropdown-item active' : 'dropdown-item'\n                            }\n                            type=\"button\"\n                            onClick={e => props.handleChange(element)}>\n                            {element.label}\n                        </button>\n                    </li>\n                ))}\n            </ul>\n        </div>\n    );\n}\n","export interface IGraphDetailLevel {\n    identifier: string;\n    value: number;\n    label: string;\n}\n\nexport interface IGraphDetailDropDown {\n    value: number;\n    label: string;\n    isValid: boolean;\n    handleChange: (detailProperties: IGraphDetailLevel) => void;\n    elements: IGraphDetailLevel[];\n}\n\n/**\n * Renders a drop down to select the graph level of detail.\n *\n * @param props The graph detail properties.\n * @returns Rendered graph level of detail drop down.\n */\nexport function GraphDetailDropDown(props: IGraphDetailDropDown) {\n    return (\n        <div className=\"dropdown\">\n            <button\n                className=\"btn btn-secondary dropdown-toggle\"\n                type=\"button\"\n                id=\"GraphDetailDropDown\"\n                data-bs-toggle=\"dropdown\"\n                aria-expanded=\"false\">\n                {props.label}\n            </button>\n            <ul className=\"dropdown-menu\" aria-labelledby=\"GraphDetailDropDown\">\n                {props.elements.map(element => (\n                    <li key={element.identifier}>\n                        <button\n                            className={props.value === element.value ? 'dropdown-item active' : 'dropdown-item'}\n                            type=\"button\"\n                            onClick={e => props.handleChange(element)}>\n                            {element.label}\n                        </button>\n                    </li>\n                ))}\n            </ul>\n        </div>\n    );\n}\n","import { MouseEvent } from 'react';\n\nimport { ETFTextInputElement } from './TextInputElement';\nimport { ErrorMessage } from './ErrorMessageComponent';\n\nimport { IETFProperty } from '../model/ForecastModel';\n\ninterface IETFIndex {\n    [etfIdentifier: string]: IETFProperty;\n}\n\nexport interface IETFSelection {\n    label: string;\n    isValid: boolean;\n    identifier: string;\n    errorMessage: string;\n    handleSelectionChange: (etfProperties: IETFProperty) => void;\n    handleShareChange: (changedValue: string, changedStateIdentifier: string) => void;\n    elements: IETFIndex;\n}\n\ntype ETFSelectionDropDownProps = IETFSelection & { autoPercentage: boolean };\n\n/**\n * Renders the ETF selection drop down which includes editable text for the percentages.\n *\n * @param props The etf drop down properties.\n * @returns The rendered ETF selection drop down.\n */\nexport function ETFSelectionDropDown(props: ETFSelectionDropDownProps) {\n    return (\n        <div className=\"dropdown position-relative\">\n            <button\n                className=\"btn btn-secondary dropdown-toggle is-invalid\"\n                type=\"button\"\n                id=\"ETFSelectionDropDown\"\n                data-bs-toggle=\"dropdown\"\n                aria-expanded=\"false\">\n                {props.label}\n            </button>\n            <ErrorMessage {...props} />\n            <ul className=\"dropdown-menu\" aria-labelledby=\"ETFSelectionDropDown\">\n                {Object.keys(props.elements).map(elementIdentifier => (\n                    <li key={elementIdentifier}>\n                        <button\n                            className={\n                                props.elements[elementIdentifier].selected ? 'dropdown-item active' : 'dropdown-item'\n                            }\n                            type=\"button\"\n                            onClick={(e: MouseEvent<HTMLButtonElement>) => {\n                                // Skip all events from the text input field.\n                                if (!(e.target instanceof HTMLInputElement)) {\n                                    props.handleSelectionChange(props.elements[elementIdentifier]);\n                                }\n                            }}>\n                            <ETFTextInputElement\n                                {...props.elements[elementIdentifier]}\n                                value={props.elements[elementIdentifier].value}\n                                textAppending=\"%\"\n                                onValueChange={props.handleShareChange}\n                                disabled={props.autoPercentage}\n                                isValid={true}\n                                errorMessage=\"\"\n                            />\n                        </button>\n                    </li>\n                ))}\n            </ul>\n        </div>\n    );\n}\n","import React from 'react';\nimport { Visualization, ICostConfiguration } from './Visualization';\nimport {\n    TextInputElement,\n    ITextInputState,\n    TextInputStateIdentifier,\n    NumberInputStateIdentifier,\n} from './TextInputElement';\nimport { CheckboxInputElement, ICheckboxState, ICheckBoxStateIdentifier } from './CheckboxInputElement';\nimport { Overlay, IAPIKey } from './APIKeyOverlay';\nimport { SidebarSectionHeading } from './SidebarSectionHeadingComponent';\nimport { BrokerDropDown, BrokerProperties, IBrokerDropDown } from './BrokerDropDown';\nimport { GraphDetailDropDown, IGraphDetailDropDown, IGraphDetailLevel } from './GraphDetailDropDown';\nimport { ETFSelectionDropDown, IETFSelection } from './ETFSelectionDropDown';\nimport { ForecastModelSingleton, ETFIdentifier, IETFProperty } from '../model/ForecastModel';\nimport { percentageStringToFloat, stringToInt, isPercentage, isPositiveInt } from '../helpers/utils';\n\nexport const STARTING_CAPITAL_IDENTIFIER = 'startingCapital';\nexport const MONTHLY_INVESTMENT_IDENTIFIER = 'monthlyInvestment';\nexport const YEARLY_INVESTMENT_INCREASE_IDENTIFIER = 'yearlyInvestmentIncrease';\nexport const TRANSACTION_COSTS_IDENTIFIER = 'transactionCosts';\nexport const TRANSACTION_COSTS_TYPE_IDENTIFIER = 'transactionCostsType';\nexport const SAVING_PHASE_IDENTIFIER = 'savingPhase';\nexport const AGE_IDENTIFIER = 'age';\nexport const TAX_FREE_AMOUNT_IDENTIFIER = 'taxFreeAmount';\nexport const MONTHLY_PAYOUT_IDENTIFIER = 'monthlyPayout';\nexport const YEARLY_PAYOUT_INCREASE_IDENTIFIER = 'yearlyPayoutIncrease';\nexport const LIFE_EXPECTATION_IDENTIFIER = 'lifeExpectation';\nexport const DETAILED_GRAPH_DROPDOWN_IDENTIFIER = 'detailedGraph';\nexport const ETF_DROPDOWN_SELECTION_IDENTIFIER = 'etfDropdownSelection';\nexport const API_KEY_IDENTIFIER = 'apiKey';\nexport const Y_AXIS_LOCK_IDENTIFIER = 'yAxisLock';\nexport const INFLATION_USED_FOR_TOTAL = 'inflationUsedForTotal';\nexport const USE_DISTRIBUTION_MODEL = 'useDistributionModel';\n\nconst BROKER_DROPDOWN_IDENTIFIER = 'brokerDropdown';\nconst ETF_AUTOMATIC_PERCENTAGE_IDENTIFIER = 'etfAutomaticPercentage';\n\nexport interface IAppState {\n    isValid: boolean;\n    startingCapital: ITextInputState;\n    monthlyInvestment: ITextInputState;\n    yearlyInvestmentIncrease: ITextInputState;\n    monthlyPayout: ITextInputState;\n    yearlyPayoutIncrease: ITextInputState;\n    transactionCosts: ITextInputState;\n    savingPhase: ITextInputState;\n    age: ITextInputState;\n    lifeExpectation: ITextInputState;\n    taxFreeAmount: ITextInputState;\n\n    apiKey: IAPIKey;\n\n    transactionCostsType: ICheckboxState;\n    etfAutomaticPercentage: ICheckboxState;\n    yAxisLock: ICheckboxState;\n    inflationUsedForTotal: ICheckboxState;\n    useDistributionModel: ICheckboxState;\n\n    detailedGraph: IGraphDetailDropDown;\n    brokerDropdown: IBrokerDropDown;\n    etfDropdownSelection: IETFSelection;\n}\n\ntype ETFIdentifierToString = { [key in ETFIdentifier]: string };\n\nexport const ETF_SYMBOL_TO_NAME: ETFIdentifierToString = {\n    'SP5C.PAR': 'S & P 500',\n    ESGE: 'MSCI EM',\n    SUSA: 'MSCI USA ESG',\n};\n\n/**\n * Returns if the given value is a valid integer.\n * Meaning that the value is an integer and is not NaN.\n *\n * @param val The concerning value.\n * @returns If the value is a valid integer.\n */\nexport function generateCostConfig(state: IAppState): ICostConfiguration {\n    if (state[TRANSACTION_COSTS_TYPE_IDENTIFIER].value) {\n        return { percentageCosts: 0.0, fixedCosts: stringToInt(state[TRANSACTION_COSTS_IDENTIFIER].value) };\n    } else {\n        return { percentageCosts: percentageStringToFloat(state[TRANSACTION_COSTS_IDENTIFIER].value), fixedCosts: 0.0 };\n    }\n}\n\n/**\n * Recalculates the ETF percentages based on how many are selected.\n * This secures that the sum of all active percentages always equal 100%.\n *\n * @param state The state of the app.\n * @returns The manipulated state of the app.\n */\nfunction recalculateETFPercentages(state: IAppState): IAppState {\n    let numberOfSelectedETFs = 0;\n    for (const etfIdentifier in state[ETF_DROPDOWN_SELECTION_IDENTIFIER].elements) {\n        if (state[ETF_DROPDOWN_SELECTION_IDENTIFIER].elements[etfIdentifier].selected) {\n            numberOfSelectedETFs++;\n        }\n    }\n    const newPercentage = 100.0 / Math.max(1, numberOfSelectedETFs);\n    for (const etfIdentifier in state[ETF_DROPDOWN_SELECTION_IDENTIFIER].elements) {\n        if (state[ETF_DROPDOWN_SELECTION_IDENTIFIER].elements[etfIdentifier].selected) {\n            state[ETF_DROPDOWN_SELECTION_IDENTIFIER].elements[etfIdentifier].value = newPercentage.toString();\n        }\n    }\n    return state;\n}\n\n/**\n * The class which renders the whole UI and holds the whole UI state with its interaction changes.\n * Also draws the visualizations.\n */\nexport class App extends React.Component<{}, IAppState> {\n    constructor(props: {}) {\n        super(props);\n\n        this.handleTextChange = this.handleTextChange.bind(this);\n        this.handleCheckBoxChange = this.handleCheckBoxChange.bind(this);\n        this.handleBrokerChange = this.handleBrokerChange.bind(this);\n        this.handleGraphDetailChange = this.handleGraphDetailChange.bind(this);\n        this.handleETFSelectionChange = this.handleETFSelectionChange.bind(this);\n        this.handleETFShareChange = this.handleETFShareChange.bind(this);\n        this.handleAPIKeyConfirm = this.handleAPIKeyConfirm.bind(this);\n\n        this.state = getInitialInputFormState(this);\n    }\n\n    /**\n     * Handles the change of a text and applies its value to the state and validates it.\n     *\n     * @param changedValue The changed Value.\n     * @param changedStateIdentifier  The changed state identifier.\n     */\n    handleTextChange(changedValue: string, changedStateIdentifier: TextInputStateIdentifier): void {\n        const state = { ...this.state };\n        state[changedStateIdentifier].value = changedValue;\n        this._validateAndSetState(state);\n    }\n\n    /**\n     * Handles the change of a checkbox and applies the change to the state and validates it.\n     *\n     * Does further adjustments if the specific checkbox needs further state changes.\n     * e.g. the  automatic percentage checkbox.\n     *\n     * @param changedStateIdentifier  The changed state identifier.\n     */\n    handleCheckBoxChange(changedStateIdentifier: ICheckBoxStateIdentifier): void {\n        const state = { ...this.state };\n        state[changedStateIdentifier].value = !state[changedStateIdentifier].value;\n        if (changedStateIdentifier === TRANSACTION_COSTS_TYPE_IDENTIFIER) {\n            state[TRANSACTION_COSTS_IDENTIFIER].value = state[changedStateIdentifier].value ? '5' : '0.015';\n            state[TRANSACTION_COSTS_IDENTIFIER].textAppending = state[changedStateIdentifier].value ? '€' : '%';\n        } else if (\n            changedStateIdentifier === ETF_AUTOMATIC_PERCENTAGE_IDENTIFIER &&\n            state[changedStateIdentifier].value\n        ) {\n            recalculateETFPercentages(state);\n        }\n        this._validateAndSetState(state);\n    }\n\n    /**\n     * Handles the selection of a specific broker.\n     *\n     * @param brokerProperties The broker properties.\n     */\n    handleBrokerChange(brokerProperties: BrokerProperties): void {\n        const state = { ...this.state };\n        state[TRANSACTION_COSTS_IDENTIFIER].value =\n            brokerProperties.percentageCosts > 0\n                ? brokerProperties.percentageCosts.toString()\n                : brokerProperties.fixedCosts.toString();\n        state[TRANSACTION_COSTS_TYPE_IDENTIFIER].value = brokerProperties.percentageCosts > 0 ? false : true;\n        this._validateAndSetState(state);\n    }\n\n    /**\n     * Handles the selection of a specific graph detail.\n     *\n     * @param brokerProperties The graph detail properties.\n     */\n    handleGraphDetailChange(detailProperties: IGraphDetailLevel): void {\n        const state = { ...this.state };\n        state[DETAILED_GRAPH_DROPDOWN_IDENTIFIER].value = detailProperties.value;\n        this._validateAndSetState(state);\n    }\n\n    /**\n     * Handles the selection of a specific ETF.\n     *\n     * @param brokerProperties The ETF properties of the selected ETF.\n     */\n    handleETFSelectionChange(etfProperties: IETFProperty): void {\n        const state = { ...this.state };\n        state[ETF_DROPDOWN_SELECTION_IDENTIFIER].elements[etfProperties.identifier].selected = !state[\n            ETF_DROPDOWN_SELECTION_IDENTIFIER\n        ].elements[etfProperties.identifier].selected;\n        if (state[ETF_AUTOMATIC_PERCENTAGE_IDENTIFIER].value) {\n            recalculateETFPercentages(state);\n        }\n        this._validateAndSetState(state);\n    }\n\n    /**\n     * Handles the percentage value change of the etf selection.\n     *\n     * @param changedValue The changed  percentage value of the ETF.\n     * @param changedETFIdentifier The identifier of the ETF.\n     */\n    handleETFShareChange(changedValue: string, changedETFIdentifier: string): void {\n        const state = { ...this.state };\n        state[ETF_DROPDOWN_SELECTION_IDENTIFIER].elements[changedETFIdentifier].value = changedValue;\n        this._validateAndSetState(state);\n    }\n\n    /**\n     * Handles the confirmation event of the API key.\n     */\n    async handleAPIKeyConfirm(): Promise<void> {\n        const apiKey = this.state[API_KEY_IDENTIFIER].value;\n        const apiValues = { ...this.state[API_KEY_IDENTIFIER] };\n        try {\n            await ForecastModelSingleton.loadHistoricData(\n                apiKey,\n                this.state[ETF_DROPDOWN_SELECTION_IDENTIFIER].elements\n            );\n            apiValues.error = false;\n            apiValues.displayOverlay = false;\n        } catch (e) {\n            apiValues.error = true;\n        }\n        this.setState({ [API_KEY_IDENTIFIER]: apiValues });\n        this.forceUpdate();\n    }\n\n    /**\n     * Checks if the updated state contains an invalid configuration.\n     *\n     * @param state The updated state of the App.\n     */\n    private _validateAndSetState(state: IAppState) {\n        const positiveIntIdentifiers: NumberInputStateIdentifier[] = [\n            MONTHLY_INVESTMENT_IDENTIFIER,\n            MONTHLY_PAYOUT_IDENTIFIER,\n            STARTING_CAPITAL_IDENTIFIER,\n            AGE_IDENTIFIER,\n            LIFE_EXPECTATION_IDENTIFIER,\n            SAVING_PHASE_IDENTIFIER,\n            TAX_FREE_AMOUNT_IDENTIFIER,\n        ];\n\n        const percentageIdentifiers: NumberInputStateIdentifier[] = [\n            YEARLY_INVESTMENT_INCREASE_IDENTIFIER,\n            YEARLY_PAYOUT_INCREASE_IDENTIFIER,\n        ];\n\n        state.isValid = true;\n\n        for (const identifier of positiveIntIdentifiers) {\n            state[identifier].isValid = isPositiveInt(state[identifier].value);\n            state[identifier].errorMessage = 'Please enter a positive number.';\n            state.isValid = state[identifier].isValid && state.isValid;\n        }\n\n        for (const identifier of percentageIdentifiers) {\n            state[identifier].isValid = isPercentage(state[identifier].value);\n            state[identifier].errorMessage = 'Please enter a valid percentage between 0 and 100 %.';\n            state.isValid = state[identifier].isValid && state.isValid;\n        }\n\n        // Check the year values.\n        const leftoverYears =\n            stringToInt(state[LIFE_EXPECTATION_IDENTIFIER].value) - stringToInt(state[AGE_IDENTIFIER].value);\n        if (leftoverYears <= 0) {\n            state[AGE_IDENTIFIER].errorMessage = 'You cannot be older than the life expectation';\n            state[AGE_IDENTIFIER].isValid = false;\n            state.isValid = false;\n        } else if (leftoverYears <= stringToInt(state[SAVING_PHASE_IDENTIFIER].value)) {\n            state[SAVING_PHASE_IDENTIFIER].errorMessage =\n                'You cannot have a saving phase that lasts longer than your life.';\n            state[SAVING_PHASE_IDENTIFIER].isValid = false;\n            state.isValid = false;\n        }\n\n        // Check Cost values.\n        if (state[TRANSACTION_COSTS_TYPE_IDENTIFIER].value) {\n            state[TRANSACTION_COSTS_IDENTIFIER].isValid = isPositiveInt(state[TRANSACTION_COSTS_IDENTIFIER].value);\n            state[TRANSACTION_COSTS_IDENTIFIER].errorMessage = 'Please enter a positive number.';\n        } else {\n            state[TRANSACTION_COSTS_IDENTIFIER].isValid = isPercentage(state[TRANSACTION_COSTS_IDENTIFIER].value);\n            state[TRANSACTION_COSTS_IDENTIFIER].errorMessage = 'Please enter a valid percentage.';\n        }\n        state.isValid = state[TRANSACTION_COSTS_IDENTIFIER].isValid && state.isValid;\n\n        // Check the etf percentages.\n        let sumOfPercentages = 0;\n        let foundOneSelectedEtf = false;\n        for (const etfIdentifier in state[ETF_DROPDOWN_SELECTION_IDENTIFIER].elements) {\n            if (state[ETF_DROPDOWN_SELECTION_IDENTIFIER].elements[etfIdentifier].selected) {\n                sumOfPercentages += percentageStringToFloat(\n                    state[ETF_DROPDOWN_SELECTION_IDENTIFIER].elements[etfIdentifier].value\n                );\n                foundOneSelectedEtf = true;\n            }\n        }\n        if (!foundOneSelectedEtf) {\n            state[ETF_DROPDOWN_SELECTION_IDENTIFIER].isValid = false;\n            state[ETF_DROPDOWN_SELECTION_IDENTIFIER].errorMessage = 'Please select at least one ETF.';\n            state.isValid = false;\n        } else if (sumOfPercentages !== 1.0) {\n            state[ETF_DROPDOWN_SELECTION_IDENTIFIER].isValid = false;\n            state[ETF_DROPDOWN_SELECTION_IDENTIFIER].errorMessage = 'The sum of all selected ETFs need to be 100%.';\n            state.isValid = false;\n        } else {\n            state[ETF_DROPDOWN_SELECTION_IDENTIFIER].isValid = true;\n        }\n\n        this.setState(state);\n    }\n\n    /**\n     * Renders the whole page based on the state of the app.\n     *\n     * @returns The Page content.\n     */\n    render() {\n        const costConfig = generateCostConfig(this.state);\n        return (\n            <div className=\"container-fluid\">\n                <Overlay {...this.state[API_KEY_IDENTIFIER]} />\n                <div className=\"row row-cols-3\">\n                    <nav id=\"sidebarMenu\" className=\"col-md-3 col-lg-2 bg-light sidebar\">\n                        <form className=\"position-sticky needs-validation\" noValidate>\n                            {/* Money Options */}\n                            <SidebarSectionHeading title=\"Money Options\" initiallyCollapsed={false}>\n                                <TextInputElement {...this.state[STARTING_CAPITAL_IDENTIFIER]} />\n                                <TextInputElement {...this.state[MONTHLY_INVESTMENT_IDENTIFIER]} />\n                                <TextInputElement {...this.state[YEARLY_INVESTMENT_INCREASE_IDENTIFIER]} />\n                                <TextInputElement {...this.state[MONTHLY_PAYOUT_IDENTIFIER]} />\n                                <TextInputElement {...this.state[YEARLY_PAYOUT_INCREASE_IDENTIFIER]} />\n                                <TextInputElement {...this.state[TAX_FREE_AMOUNT_IDENTIFIER]} />\n                                <CheckboxInputElement {...this.state[USE_DISTRIBUTION_MODEL]} />\n                            </SidebarSectionHeading>\n                            {/* Time Options */}\n                            <SidebarSectionHeading title=\"Time Options\" initiallyCollapsed={false}>\n                                <TextInputElement {...this.state[AGE_IDENTIFIER]} />\n                                <TextInputElement {...this.state[LIFE_EXPECTATION_IDENTIFIER]} />\n                                <TextInputElement {...this.state[SAVING_PHASE_IDENTIFIER]} />\n                            </SidebarSectionHeading>\n                            {/* Cost Options */}\n                            <SidebarSectionHeading title=\"Cost Options\" initiallyCollapsed={true}>\n                                <BrokerDropDown {...costConfig} {...this.state[BROKER_DROPDOWN_IDENTIFIER]} />\n                                <TextInputElement\n                                    key={TRANSACTION_COSTS_IDENTIFIER}\n                                    {...this.state[TRANSACTION_COSTS_IDENTIFIER]}\n                                />\n                                <CheckboxInputElement {...this.state[TRANSACTION_COSTS_TYPE_IDENTIFIER]} />\n                            </SidebarSectionHeading>\n                            {/* Visualization Options */}\n                            <SidebarSectionHeading title=\"Visualization Options\" initiallyCollapsed={true}>\n                                <GraphDetailDropDown {...this.state[DETAILED_GRAPH_DROPDOWN_IDENTIFIER]} />\n                                <CheckboxInputElement {...this.state[Y_AXIS_LOCK_IDENTIFIER]} />\n                                <CheckboxInputElement {...this.state[INFLATION_USED_FOR_TOTAL]} />\n                                <CheckboxInputElement {...this.state[ETF_AUTOMATIC_PERCENTAGE_IDENTIFIER]} />\n                                <ETFSelectionDropDown\n                                    autoPercentage={this.state[ETF_AUTOMATIC_PERCENTAGE_IDENTIFIER].value}\n                                    {...this.state[ETF_DROPDOWN_SELECTION_IDENTIFIER]}\n                                />\n                            </SidebarSectionHeading>\n                        </form>\n                    </nav>\n                    <div id=\"sidebarMenu\" className=\"col-md-3 col-lg-2\">\n                        <h1>Test</h1>\n                    </div>\n                    <main className=\"col-md-8 col-lg-9\">\n                        <h1>Etf Pension Plan Visualization</h1>\n                        <Visualization {...this.state} />\n                    </main>\n                    <div className=\"col-md-1 col-lg-1\">\n                        <h1>History</h1>\n                        <h5>TODO</h5>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\n/**\n * Generates the initial app state.\n *\n * @param caller The calling instance of the App class.\n * @returns The initial app state.\n */\nfunction getInitialInputFormState(caller: App): IAppState {\n    return {\n        isValid: true,\n        // simple ui elements.\n        [STARTING_CAPITAL_IDENTIFIER]: {\n            value: '1000',\n            label: 'Starting Capital',\n            errorMessage: '',\n            textAppending: '€',\n            isValid: true,\n            identifier: STARTING_CAPITAL_IDENTIFIER,\n            onValueChange: caller.handleTextChange,\n            disabled: false,\n        },\n        [MONTHLY_INVESTMENT_IDENTIFIER]: {\n            value: '100',\n            label: 'Monthly Investment',\n            errorMessage: 'Please enter a positive Money amount.',\n            textAppending: '€',\n            isValid: true,\n            identifier: MONTHLY_INVESTMENT_IDENTIFIER,\n            onValueChange: caller.handleTextChange,\n            disabled: false,\n        },\n        [YEARLY_INVESTMENT_INCREASE_IDENTIFIER]: {\n            value: '0.0',\n            label: 'Yearly Investment Increase',\n            errorMessage: '',\n            textAppending: '%',\n            isValid: true,\n            identifier: YEARLY_INVESTMENT_INCREASE_IDENTIFIER,\n            onValueChange: caller.handleTextChange,\n            disabled: false,\n        },\n        [MONTHLY_PAYOUT_IDENTIFIER]: {\n            value: '1000',\n            label: 'Monthly Payout',\n            errorMessage: '',\n            textAppending: '€',\n            isValid: true,\n            identifier: MONTHLY_PAYOUT_IDENTIFIER,\n            onValueChange: caller.handleTextChange,\n            disabled: false,\n        },\n        [YEARLY_PAYOUT_INCREASE_IDENTIFIER]: {\n            value: '0.0',\n            label: 'Yearly Payout Increase',\n            errorMessage: '',\n            textAppending: '%',\n            isValid: true,\n            identifier: YEARLY_PAYOUT_INCREASE_IDENTIFIER,\n            onValueChange: caller.handleTextChange,\n            disabled: false,\n        },\n        [TRANSACTION_COSTS_IDENTIFIER]: {\n            value: '1.5',\n            label: 'Transaction Costs',\n            errorMessage: '',\n            textAppending: '%',\n            isValid: true,\n            identifier: TRANSACTION_COSTS_IDENTIFIER,\n            onValueChange: caller.handleTextChange,\n            disabled: false,\n        },\n        [SAVING_PHASE_IDENTIFIER]: {\n            value: '40',\n            label: 'Saving Phase',\n            errorMessage: '',\n            textAppending: 'Y',\n            isValid: true,\n            identifier: SAVING_PHASE_IDENTIFIER,\n            onValueChange: caller.handleTextChange,\n            disabled: false,\n        },\n        [AGE_IDENTIFIER]: {\n            value: '30',\n            label: 'Your Age',\n            textAppending: 'Y',\n            errorMessage: '',\n            isValid: true,\n            identifier: AGE_IDENTIFIER,\n            onValueChange: caller.handleTextChange,\n            disabled: false,\n        },\n        [LIFE_EXPECTATION_IDENTIFIER]: {\n            value: '80',\n            label: 'Life Expectation',\n            errorMessage: '',\n            isValid: true,\n            textAppending: 'Y',\n            identifier: LIFE_EXPECTATION_IDENTIFIER,\n            onValueChange: caller.handleTextChange,\n            disabled: false,\n        },\n        [TAX_FREE_AMOUNT_IDENTIFIER]: {\n            value: '801',\n            label: 'Tax Free Amount',\n            errorMessage: '',\n            isValid: true,\n            textAppending: '€',\n            identifier: TAX_FREE_AMOUNT_IDENTIFIER,\n            onValueChange: caller.handleTextChange,\n            disabled: false,\n        },\n        [TRANSACTION_COSTS_TYPE_IDENTIFIER]: {\n            value: false,\n            label: 'Fixed Amount',\n            identifier: TRANSACTION_COSTS_TYPE_IDENTIFIER,\n            onValueChange: caller.handleCheckBoxChange,\n        },\n        [ETF_AUTOMATIC_PERCENTAGE_IDENTIFIER]: {\n            value: false,\n            label: 'Automatic ETF Ratio',\n            identifier: ETF_AUTOMATIC_PERCENTAGE_IDENTIFIER,\n            onValueChange: caller.handleCheckBoxChange,\n        },\n        [INFLATION_USED_FOR_TOTAL]: {\n            value: false,\n            label: 'Subtract Inflation of Total',\n            identifier: INFLATION_USED_FOR_TOTAL,\n            onValueChange: caller.handleCheckBoxChange,\n        },\n        [USE_DISTRIBUTION_MODEL]: {\n            value: false,\n            label: 'Use Distribution Model',\n            identifier: USE_DISTRIBUTION_MODEL,\n            onValueChange: caller.handleCheckBoxChange,\n        },\n        [Y_AXIS_LOCK_IDENTIFIER]: {\n            value: false,\n            label: 'Lock Y Axis Extent',\n            identifier: Y_AXIS_LOCK_IDENTIFIER,\n            onValueChange: caller.handleCheckBoxChange,\n        },\n        [API_KEY_IDENTIFIER]: {\n            displayOverlay: true,\n            error: false,\n            value: '',\n            label: '',\n            errorMessage: '',\n            isValid: true,\n            textAppending: '',\n            identifier: API_KEY_IDENTIFIER,\n            onValueChange: caller.handleTextChange,\n            handleAPIKeyConfirm: caller.handleAPIKeyConfirm,\n        },\n        // Complex UI elements.\n        [DETAILED_GRAPH_DROPDOWN_IDENTIFIER]: {\n            value: 1,\n            label: 'Graph Detail Level',\n            isValid: true,\n            handleChange: caller.handleGraphDetailChange,\n            elements: [\n                {\n                    identifier: '12',\n                    value: 12,\n                    label: 'All Months a Year (high detail)',\n                },\n                {\n                    identifier: '3',\n                    value: 3,\n                    label: 'Every 4th Month (middle detail)',\n                },\n                {\n                    identifier: '1',\n                    value: 1,\n                    label: 'One Month a Year (low detail)',\n                },\n            ],\n        },\n        [BROKER_DROPDOWN_IDENTIFIER]: {\n            label: 'Broker',\n            isValid: true,\n            handleChange: caller.handleBrokerChange,\n            elements: [\n                {\n                    identifier: 'comdirect',\n                    label: 'comdirect',\n                    fixedCosts: 0,\n                    percentageCosts: 1.5,\n                },\n                {\n                    identifier: 'tradeRepublic',\n                    label: 'Trade Republic',\n                    fixedCosts: 0,\n                    percentageCosts: 1.0,\n                },\n                {\n                    identifier: 'eToro',\n                    label: 'eToro',\n                    fixedCosts: 0,\n                    percentageCosts: 0.0,\n                },\n            ],\n        },\n        [ETF_DROPDOWN_SELECTION_IDENTIFIER]: {\n            label: 'ETF Selection',\n            isValid: true,\n            identifier: ETF_DROPDOWN_SELECTION_IDENTIFIER,\n            errorMessage: '',\n            handleSelectionChange: caller.handleETFSelectionChange,\n            handleShareChange: caller.handleETFShareChange,\n            elements: {\n                S_and_P_500: {\n                    identifier: 'S_and_P_500',\n                    symbol: 'SP5C.PAR',\n                    label: ETF_SYMBOL_TO_NAME['SP5C.PAR'],\n                    value: '100',\n                    selected: true,\n                },\n                iShare: {\n                    identifier: 'iShare',\n                    symbol: 'ESGE',\n                    label: ETF_SYMBOL_TO_NAME['ESGE'],\n                    value: '100',\n                    selected: false,\n                },\n                msciUSA: {\n                    identifier: 'msciUSA',\n                    symbol: 'SUSA',\n                    label: ETF_SYMBOL_TO_NAME['SUSA'],\n                    value: '100',\n                    selected: false,\n                },\n            },\n        },\n    };\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './scss/main.scss';\nimport { App } from './components/App';\nimport reportWebVitals from './reportWebVitals';\n// Needed to make the drop downs work.\nimport { Dropdown, Tooltip } from 'bootstrap'; // eslint-disable-line no-unused-vars\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}