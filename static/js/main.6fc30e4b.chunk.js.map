{"version":3,"sources":["helpers/utils.ts","model/ForecastModel.ts","model/InvestmentModel.ts","renderer/D3ChartStrategy.js","renderer/AreaChartD3.js","renderer/CashflowBarChartD3.js","components/Visualization.tsx","components/MinimalBootstrapComponents.tsx","components/TextInputElement.tsx","components/CheckboxInputElement.tsx","components/APIKeyOverlay.tsx","components/BrokerDropDown.tsx","components/GraphDetailDropDown.tsx","components/ETFSelectionDropDown.tsx","components/App.tsx","reportWebVitals.js","index.js"],"names":["timeDiffIgnoreDivisor","numberOfMonthsOfAYear","isFirstMonthOfAYear","date","getMonth","loadHistoricalETFData","etfIdentifier","apiKey","a","d3","entry","undefined","timestamp","Error","Date","toString","dividend","parseFloat","course","historicalData","sort","b","valueOf","etfHistoricalToCourseForecastArray","map","dateToTimestamp","etfHistoricalToDividendForecastArray","currentYear","getFullYear","dividendForecastArray","forEach","length","push","Math","floor","getTime","generateHistoricalDataNotPresentException","roundDateToBeginningOfMonth","month","year","currentDayOfMonth","getDate","maxDayOfMonth","monthOffset","round","ForecastModelSingleton","coursePredictors","dividendPredictors","this","courseForecastArray","maxTimestampBeforeCoursePredictorRepetition","_calculateMaxTimestampBeforePredictorRepetition","maxYearBeforeDividendPredictorRepetition","history","predictors","forecastArray","lastTimestampToIncludeInPrediction","abs","backCastTimeFactor","backCastTimestampConstant","filteredForecastArray","filter","regression","linear","order","precision","lastYearToIncludeInPrediction","_courseDateToPredictorTimestampAndDateTimestamp","predictorTimestamp","_createCoursePredictorIfNotPresent","predict","predictorYear","_dividendYearToPredictorYear","_createDividendPredictorIfNotPresent","max","backCastTimeConstant","backCastTimeDate","setMonth","instance","getInstance","etfProperties","configure","forecast","_loadAndCacheHistoricalETFData","symbol","console","log","firstTimestamp","lastTimestamp","corporateTaxRatio","getTotalShareValue","investmentStep","totalShares","sharePrizes","getTotalDividenShareValue","dividendTotalShares","getNextMonthDate","newDate","calculateDividend","isLastMonthOfAYear","dividendAmount","predictDividend","sharePrize","predictCourse","calculateCosts","amount","costConfiguration","costs","percentageCosts","fixedCosts","amountWithoutCosts","subtractTaxFreeGain","taxAmount","taxFreeAmount","calculateAndAddInflation","initialDate","endDate","sumTotalValues","sum","sumOfTotalValues","timeFactor","inflation","pow","addAccumulationMonth","investmentSteps","investment","etfToRatio","configOptions","prevInvestmentStep","newInvestmentStep","newShares","dividendNewShares","totalCosts","totalInvestedMoney","newInvestedMoney","newInvestment","totalTaxes","totalPayout","newPayout","investmentOfEtfWithCosts","costConfig","investmentOfEtfWithoutCosts","etfSharePrize","dividendPayoutMoneyPerShare","newSharesByDividend","leftoverTaxFreeAmount","value","min","summedTaxes","decemberInvestmentStep","firstInvestmentStepOfThisYear","accumulatedBasicProfit","i","profitOverAllTime","profitOfPreviousYears","amountToApplyTaxes","calculateTaxes","newTaxes","newLeftoverTaxFreeAmount","addPayoutMonth","sellingAmount","leftoverAlreadyPaidTaxes","payoutStats","taxes","investmentStepsIdx","amountToSell","amountAlreadySold","costsToPay","alreadyPaidCosts","payoutInvestmentStepIdxForFIFO","currentSharesLeft","alreadySoldShares","leftoverAmountToSell","currentInvestmentStepForFIFO","currentValueOfShares","amountToSellWithCosts","amountOfSharesToSell","amountToSellWithoutCosts","initialValueOfShares","amountToPayTaxes","taxesToPay","payoutAmount","amountOfDividendSharesLeft","amountOfDividendSharesSold","generateEmptyInvestmentStep","emptyInvestmentStep","InvestmentModel","startCapital","monthlyInvestment","monthlyPayout","savingPhaseLength","age","expectationOfLife","savingDates","payoutDates","_calculateTimestampsForModel","_calculateModel","lifeExpectation","fadeOutYears","yearsLeft","now","beginningDate","endSavingPhaseDate","setFullYear","calculateForecastInterval","startDate","currentDate","slice","savingDate","payoutDate","numberOfEntriesPerYear","Number","isInteger","selectedInvestmentSteps","numberOfMonthsToMerge","adjustedInvestmentStep","cloneDeep","offset","FIVE_MILLION","ONE_MILLION","generateLabelWithValueText","name","charAt","toUpperCase","setInteractionDisplayForActiveDiagrams","displayOption","D3ChartStrategy","activeStrategies","interaction","style","renderDivRef","payoutPhaseStartDate","svgID","tooltipDate","yExtent","width","height","marginW","marginH","constructor","lineStrokeWidth","labelValueIdentifier","innerHTML","svg","append","attr","_prepareData","_calculateExtents","_createScales","_drawContent","_prepareText","_drawText","_drawAxis","_addInteraction","_updateAllDiagrams","dateExtent","dataArray","d","lastImportantDateForYScale","filteredDataArrayForYMax","maxIndex","e","filteredDataArrayForYMin","minIndex","maxVal","yStart","minVal","yEnd","yScale","domain","range","xScale","hasToBePositive","labelDivisionFactor","numberIndicator","toLocaleString","maximumFractionDigits","call","tickFormat","valueToDisplayText","ticks","hoverLine","on","mouseEvent","_handleTooltipEvent","x","invert","investmentStepIndex","firstDate","secondDate","numberOfMonthsSinceStartDate","numberOfMonthsPerInvestmentStep","calculateInvestmentStepIndexForDate","activeDiagram","_updateTooltip","_updateDiagram","textGroup","selectAll","data","Object","values","textProperties","enter","text","y","fontSize","fontWeight","textAnchor","color","savingPhaseMid","payoutPhaseMid","yPos","standardFontSize","savingBold","savingPhase","payoutBold","payoutPhase","generateEtfValueText","investmentValue","totalValue","negativeLabels","negativeLabelsToInvestmentStepIdentifier","capitalIdentifier","investedIdentifier","AreaChartD3","etfLineColors","total","invested","ESGE","SUSA","colors","lineOpacity","etfIdentifiers","keys","dataToIndex","currentIdx","heightOffset","totalShareValue","totalDividendShareValue","datum","_drawArea","curve","y0","y1","paddingW","paddingH","ETF_SYMBOL_TO_NAME","investedValue","updatedValueText","negativeLabel","getSumNewPayout","sumNewPayout","CashflowBarChart","barPaddingPercentage","zeroLineStrokeWidth","payout","rectWidth","payoutX","payoutY","payoutIdentifier","investedX","investedY","payoutValue","needToSkipLastBar","barArray","Visualization","firstSVGRef","React","createRef","secondSVGRef","areaChart","barChart","investmentModel","etfIdentifierToRatio","props","etfDropdownSelection","elements","selected","percentage","TAX_FREE_AMOUNT_IDENTIFIER","generateCostConfig","STARTING_CAPITAL_IDENTIFIER","MONTHLY_INVESTMENT_IDENTIFIER","MONTHLY_PAYOUT_IDENTIFIER","SAVING_PHASE_IDENTIFIER","AGE_IDENTIFIER","LIFE_EXPECTATION_IDENTIFIER","diagram","Y_AXIS_LOCK_IDENTIFIER","reset","isValid","_getInvestmentModel","firstPayoutPhaseDate","getPayoutPhaseBeginDate","correctLevelOfDetailInvestmentSteps","getInvestmentSteps","DETAILED_GRAPH_DROPDOWN_IDENTIFIER","_getTooltipDate","current","_getYAxisExtent","render","error","_drawVisualization","Fragment","ref","Component","SidebarSectionHeading","className","title","ErrorMessage","id","identifier","visibility","errorMessage","TextInputElement","htmlFor","label","type","textAppending","onChange","onValueChange","transformFunction","disabled","StringTextInputElement","ETFPercentageInputElement","CheckboxInputElement","Overlay","displayOverlay","href","target","rel","onClick","handleAPIKeyConfirm","costsOfElementMatchUIValues","element","BrokerDropDown","data-bs-toggle","aria-expanded","aria-labelledby","handleChange","GraphDetailDropDown","percentageTransformFunction","floatVal","isNaN","ETFSelectionDropDown","elementIdentifier","handleSelectionChange","handleShareChange","autoPercentage","TRANSACTION_COSTS_IDENTIFIER","TRANSACTION_COSTS_TYPE_IDENTIFIER","ETF_DROPDOWN_SELECTION_IDENTIFIER","API_KEY_IDENTIFIER","BROKER_DROPDOWN_IDENTIFIER","ETF_AUTOMATIC_PERCENTAGE_IDENTIFIER","transformInputToInt","valueWithoutTextAppending","split","intVal","parseInt","transformInputToFloat","isPositiveInt","val","state","recalculateETFPercentages","numberOfSelectedETFs","newPercentage","App","handleTextChange","bind","handleCheckBoxChange","handleBrokerChange","handleGraphDetailChange","handleETFSelectionChange","handleETFShareChange","caller","S_and_P_500","iShare","msciUSA","getInitialInputFormState","changedValue","changedStateIdentifier","_validateAndSetState","brokerProperties","detailProperties","changedETFIdentifier","apiValues","loadHistoricData","setState","forceUpdate","positiveIntIdentifier","leftoverYears","sumOfPercentages","foundOneSelectedEtf","noValidate","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6fc30e4b.chunk.js","sourcesContent":["import * as d3 from 'd3';\n\nimport { DataPoint } from 'regression';\n\n// Ignore milliseconds, seconds, minutes.\nconst timeDiffIgnoreDivisor = 1000 * 60 * 60 * 24;\n\nexport const timestampIndexOfForecastArray = 0;\nexport const courseIndexOfForecastArray = 1;\nexport const numberOfMonthsOfAYear = 12;\nexport const inflationRate = 0.01;\n\nexport interface IHistoricEntry {\n    date: Date;\n    dividend: number;\n    course: number;\n}\n\nexport function isLastMonthOfAYear(date: Date) {\n    return date.getMonth() === numberOfMonthsOfAYear - 1;\n}\n\nexport function clamp(value: number, min: number, max: number) {\n    return Math.max(min, Math.min(value, max));\n}\n\nexport function isFirstMonthOfAYear(date: Date) {\n    return date.getMonth() === 0;\n}\n\nexport async function loadHistoricalETFData(etfIdentifier: string, apiKey: string): Promise<IHistoricEntry[]> {\n    const historicalData = await d3.csv(\n        `https://www.alphavantage.co/query?function=TIME_SERIES_MONTHLY_ADJUSTED&symbol=${etfIdentifier}&apikey=${apiKey}&datatype=csv`,\n        entry => {\n            if (\n                entry.timestamp === undefined ||\n                entry['dividend amount'] === undefined ||\n                entry['adjusted close'] === undefined\n            ) {\n                throw new Error(`The history of ${etfIdentifier} contained an undefined field.`);\n            }\n            return {\n                date: new Date(entry.timestamp.toString()),\n                dividend: parseFloat(entry['dividend amount']),\n                course: parseFloat(entry['adjusted close']),\n            };\n        }\n    );\n    historicalData.sort((a, b) => a.date.valueOf() - b.date.valueOf());\n    return historicalData;\n}\n\nexport function etfHistoricalToCourseForecastArray(historicalData: IHistoricEntry[]): DataPoint[] {\n    return historicalData.map(entry => [dateToTimestamp(entry.date), entry.course]);\n}\n\n// Requires sorted historical data. Note it is sorted by default. Do not change the order.\nexport function etfHistoricalToDividendForecastArray(historicalData: IHistoricEntry[]): DataPoint[] {\n    let currentYear = historicalData[0].date.getFullYear();\n    const dividendForecastArray: DataPoint[] = [[currentYear, 0]];\n    historicalData.forEach(entry => {\n        if (entry.date.getFullYear() === currentYear) {\n            dividendForecastArray[dividendForecastArray.length - 1][courseIndexOfForecastArray] += entry.dividend;\n        } else {\n            currentYear = entry.date.getFullYear();\n            dividendForecastArray.push([currentYear, entry.dividend]);\n        }\n    });\n    dividendForecastArray.sort((a, b) => a[timestampIndexOfForecastArray] - b[timestampIndexOfForecastArray]);\n    return dividendForecastArray;\n}\n\nexport function dateToTimestamp(date: Date) {\n    return Math.floor(date.getTime() / timeDiffIgnoreDivisor);\n}\n\nexport function timestampToDate(timestamp: number) {\n    return new Date(timestamp * timeDiffIgnoreDivisor);\n}\n\nexport function generateHistoricalDataNotPresentException(etfIdentifier: string) {\n    return new Error(`First call loadHistoricalDataIfNotPresent() before predicting: ${etfIdentifier}`);\n}\n\n// Slightly manipulated. Original: https://stackoverflow.com/a/315767\nfunction daysInMonth(month: number, year: number) {\n    return new Date(year, month + 1, 0).getDate();\n}\n\nexport function roundDateToBeginningOfMonth(date: Date) {\n    const currentDayOfMonth = date.getDate();\n    const maxDayOfMonth = daysInMonth(date.getMonth(), date.getFullYear());\n    const monthOffset = Math.round(currentDayOfMonth / maxDayOfMonth);\n    return new Date(date.getFullYear(), date.getMonth() + monthOffset);\n}\n","import regression from 'regression';\nimport { DataPoint } from 'regression';\nimport {\n    dateToTimestamp,\n    etfHistoricalToCourseForecastArray,\n    etfHistoricalToDividendForecastArray,\n    loadHistoricalETFData,\n    timestampIndexOfForecastArray,\n    courseIndexOfForecastArray,\n    generateHistoricalDataNotPresentException,\n    IHistoricEntry,\n} from '../helpers/utils';\n\ninterface IDividendPredictor {\n    [timestamp: number]: regression.Result;\n}\n\ninterface IDividendPredictors {\n    maxYearBeforeDividendPredictorRepetition: number;\n    predictors: IDividendPredictor;\n}\n\ninterface ICoursePredictors {\n    maxTimestampBeforeCoursePredictorRepetition: number;\n    predictors: ICoursePredictor;\n}\n\ninterface ICoursePredictor {\n    [timestamp: number]: regression.Result;\n}\n\ninterface IETFCoursePredictors {\n    [etfIdentifier: string]: ICoursePredictors;\n}\n\ninterface IETFDividendPredictors {\n    [etfIdentifier: string]: IDividendPredictors;\n}\n\ninterface IHistoricData {\n    [etfIdentifier: string]: IHistoricDataOfETF;\n}\n\ninterface IHistoricDataOfETF {\n    courseForecastArray: DataPoint[];\n    dividendForecastArray: DataPoint[];\n    history: IHistoricEntry[];\n}\n\ninterface IETFProperty {\n    identifier: string;\n    symbol: string;\n    label: string;\n    percentage: number;\n    selected: boolean;\n}\n\ninterface IETFProperties {\n    [etfIdentifier: string]: IETFProperty;\n}\n\n// USAGE: first call configure to set required static vars. Then the singleton can be accessed via getInstance. Never call the Constructor on your own.\n// Always call loadAndCacheHistoricalETFData of an etf before calling predict on that etf.\nexport class ForecastModelSingleton {\n    private static instance: null | ForecastModelSingleton = null;\n    private static apiKey: string = '';\n    private static backCastTimestampConstant: number = 7;\n    private static backCastTimeFactor: number = 2;\n\n    private historicalData: IHistoricData = {};\n    private coursePredictors: IETFCoursePredictors = {};\n    private dividendPredictors: IETFDividendPredictors = {};\n\n    private constructor() {}\n\n    static configure(apiKey: string, backCastTimeFactor = 2, backCastTimeConstant = 7) {\n        ForecastModelSingleton.apiKey = apiKey;\n        ForecastModelSingleton.backCastTimeFactor = backCastTimeFactor;\n\n        const backCastTimeDate = new Date(0);\n        backCastTimeDate.setMonth(backCastTimeConstant);\n        ForecastModelSingleton.backCastTimestampConstant = dateToTimestamp(backCastTimeDate);\n\n        // reset predictors if present.\n        if (ForecastModelSingleton.instance != null) {\n            const instance = ForecastModelSingleton.getInstance();\n            for (const etfIdentifier in instance.coursePredictors) {\n                instance.coursePredictors[\n                    etfIdentifier\n                ].maxTimestampBeforeCoursePredictorRepetition = ForecastModelSingleton._calculateMaxTimestampBeforePredictorRepetition(\n                    instance.historicalData[etfIdentifier].courseForecastArray\n                );\n            }\n            for (const etfIdentifier in instance.dividendPredictors) {\n                instance.dividendPredictors[\n                    etfIdentifier\n                ].maxYearBeforeDividendPredictorRepetition = ForecastModelSingleton._calculateMaxTimestampBeforePredictorRepetition(\n                    instance.historicalData[etfIdentifier].dividendForecastArray\n                );\n            }\n        }\n    }\n\n    static async loadHistoricData(apiKey: string, etfProperties: IETFProperties) {\n        ForecastModelSingleton.configure(apiKey);\n        const forecast = ForecastModelSingleton.getInstance();\n        for (const etfIdentifier in etfProperties) {\n            await forecast._loadAndCacheHistoricalETFData(etfProperties[etfIdentifier].symbol);\n        }\n        console.log('Finished loading the historic data.');\n    }\n\n    static getInstance() {\n        if (ForecastModelSingleton.instance == null) {\n            ForecastModelSingleton.instance = new ForecastModelSingleton();\n        }\n        return ForecastModelSingleton.instance;\n    }\n\n    private static _calculateMaxTimestampBeforePredictorRepetition(forecastArray: DataPoint[]) {\n        const firstTimestamp = forecastArray[0][timestampIndexOfForecastArray];\n        const lastTimestamp = forecastArray[forecastArray.length - 1][timestampIndexOfForecastArray];\n        return lastTimestamp + (lastTimestamp - firstTimestamp) / ForecastModelSingleton.backCastTimeFactor;\n    }\n\n    private async _loadAndCacheHistoricalETFData(etfIdentifier: string) {\n        if (etfIdentifier in this.historicalData) {\n            return;\n        }\n        const historicalData = await loadHistoricalETFData(etfIdentifier, ForecastModelSingleton.apiKey);\n\n        const courseForecastArray = etfHistoricalToCourseForecastArray(historicalData);\n        const maxTimestampBeforeCoursePredictorRepetition = ForecastModelSingleton._calculateMaxTimestampBeforePredictorRepetition(\n            courseForecastArray\n        );\n\n        const dividendForecastArray = etfHistoricalToDividendForecastArray(historicalData);\n        const maxYearBeforeDividendPredictorRepetition = ForecastModelSingleton._calculateMaxTimestampBeforePredictorRepetition(\n            dividendForecastArray\n        );\n\n        this.historicalData[etfIdentifier] = {\n            history: historicalData,\n            courseForecastArray: courseForecastArray,\n            dividendForecastArray: dividendForecastArray,\n        };\n        this.coursePredictors[etfIdentifier] = {\n            maxTimestampBeforeCoursePredictorRepetition: maxTimestampBeforeCoursePredictorRepetition,\n            predictors: {},\n        };\n        this.dividendPredictors[etfIdentifier] = {\n            maxYearBeforeDividendPredictorRepetition: maxYearBeforeDividendPredictorRepetition,\n            predictors: {},\n        };\n    }\n\n    private _createCoursePredictorIfNotPresent(etfIdentifier: string, timestamp: number) {\n        // Skip if already exists.\n        if (timestamp in this.coursePredictors[etfIdentifier]) {\n            return;\n        }\n        const forecastArray = this.historicalData[etfIdentifier].courseForecastArray;\n        const lastTimestampToIncludeInPrediction =\n            forecastArray[forecastArray.length - 1][timestampIndexOfForecastArray] -\n            Math.abs(forecastArray[forecastArray.length - 1][timestampIndexOfForecastArray] - timestamp) *\n                ForecastModelSingleton.backCastTimeFactor -\n            ForecastModelSingleton.backCastTimestampConstant;\n        const filteredForecastArray = forecastArray.filter(\n            entry => entry[timestampIndexOfForecastArray] >= lastTimestampToIncludeInPrediction\n        );\n        this.coursePredictors[etfIdentifier].predictors[timestamp] = regression.linear(filteredForecastArray, {\n            order: 2,\n            precision: 20,\n        });\n    }\n\n    private _courseDateToPredictorTimestampAndDateTimestamp(date: Date, etfIdentifier: string) {\n        const timestamp = dateToTimestamp(date);\n        return [\n            timestamp > this.coursePredictors[etfIdentifier].maxTimestampBeforeCoursePredictorRepetition\n                ? this.coursePredictors[etfIdentifier].maxTimestampBeforeCoursePredictorRepetition\n                : timestamp,\n            timestamp,\n        ];\n    }\n\n    private _createDividendPredictorIfNotPresent(etfIdentifier: string, year: number) {\n        // Skip if already exists.\n        if (year in this.dividendPredictors[etfIdentifier]) {\n            return;\n        }\n        const forecastArray = this.historicalData[etfIdentifier].dividendForecastArray;\n        const lastYearToIncludeInPrediction =\n            forecastArray[forecastArray.length - 1][timestampIndexOfForecastArray] -\n            Math.abs(forecastArray[forecastArray.length - 1][timestampIndexOfForecastArray] - year) *\n                ForecastModelSingleton.backCastTimeFactor -\n            ForecastModelSingleton.backCastTimestampConstant;\n        const filteredForecastArray = forecastArray.filter(\n            entry => entry[timestampIndexOfForecastArray] >= lastYearToIncludeInPrediction\n        );\n        this.dividendPredictors[etfIdentifier].predictors[year] = regression.linear(filteredForecastArray, {\n            order: 2,\n            precision: 20,\n        });\n    }\n\n    private _dividendYearToPredictorYear(etfIdentifier: string, year: number) {\n        return this.dividendPredictors[etfIdentifier].maxYearBeforeDividendPredictorRepetition < year\n            ? this.dividendPredictors[etfIdentifier].maxYearBeforeDividendPredictorRepetition\n            : year;\n    }\n\n    predictCourse(etfIdentifier: string, date: Date) {\n        if (!(etfIdentifier in this.coursePredictors)) {\n            throw generateHistoricalDataNotPresentException(etfIdentifier);\n        }\n        const [predictorTimestamp, timestamp] = this._courseDateToPredictorTimestampAndDateTimestamp(\n            date,\n            etfIdentifier\n        );\n        this._createCoursePredictorIfNotPresent(etfIdentifier, predictorTimestamp);\n        return this.coursePredictors[etfIdentifier].predictors[predictorTimestamp].predict(timestamp)[\n            courseIndexOfForecastArray\n        ];\n    }\n\n    predictDividend(etfIdentifier: string, year: number) {\n        if (!(etfIdentifier in this.dividendPredictors)) {\n            throw generateHistoricalDataNotPresentException(etfIdentifier);\n        }\n        const predictorYear = this._dividendYearToPredictorYear(etfIdentifier, year);\n        this._createDividendPredictorIfNotPresent(etfIdentifier, predictorYear);\n        return Math.max(\n            0,\n            this.dividendPredictors[etfIdentifier].predictors[predictorYear].predict(year)[courseIndexOfForecastArray]\n        );\n    }\n}\n","import { ForecastModelSingleton } from './ForecastModel';\nimport { numberOfMonthsOfAYear, isLastMonthOfAYear, clamp, isFirstMonthOfAYear } from '../helpers/utils';\nimport cloneDeep from 'lodash.clonedeep';\n\nimport { ICostConfiguration, IConfigOptions } from '../components/Visualization';\n\nconst basicRateOfInterest = 0.007;\nconst partialExemption = 0.7;\nconst corporateTaxRatio = 0.26375;\nconst inflationRate = 0.01;\nconst defaultDividendAmount = 0.025;\n\ninterface IETFShares {\n    [etfIdentifier: string]: number;\n}\n\nexport type ETFRatio = IETFShares;\n\ntype ETFPrizes = IETFShares;\n\ntype ETFMoney = IETFShares;\n\ninterface InvestmentStep {\n    date: Date;\n    newShares: IETFShares;\n    totalShares: IETFShares;\n    dividendNewShares: IETFShares;\n    dividendTotalShares: IETFShares;\n    totalCosts: number;\n    sharePrizes: ETFPrizes;\n    totalInvestedMoney: ETFMoney;\n    newInvestedMoney: ETFMoney;\n    newInvestment: number;\n    totalTaxes: number;\n    totalPayout: ETFMoney;\n    newPayout: ETFMoney;\n    inflation: number;\n}\n\ninterface IPayoutStats {\n    [etfIdentifier: string]: IPayoutStat;\n}\n\ninterface IPayoutStat {\n    investmentStepsIdx: number;\n    alreadySoldShares: number;\n}\n\nexport function getTotalShareValue(etfIdentifier: string, investmentStep: InvestmentStep) {\n    return investmentStep.totalShares[etfIdentifier] * investmentStep.sharePrizes[etfIdentifier];\n}\n\nexport function getTotalDividenShareValue(etfIdentifier: string, investmentStep: InvestmentStep) {\n    return investmentStep.dividendTotalShares[etfIdentifier] * investmentStep.sharePrizes[etfIdentifier];\n}\n\n\nfunction getNextMonthDate(date: Date) {\n    const newDate = new Date(date);\n    newDate.setMonth(date.getMonth() + 1);\n    return newDate;\n}\n\nfunction calculateDividend(etfIdentifier: string, date: Date) {\n    if (!isLastMonthOfAYear(date)) {\n        return 0;\n    } else {\n        const dividendAmount = ForecastModelSingleton.getInstance().predictDividend(etfIdentifier, date.getFullYear());\n        const sharePrize = ForecastModelSingleton.getInstance().predictCourse(etfIdentifier, date);\n        return dividendAmount > 0 ? dividendAmount : defaultDividendAmount * sharePrize;\n    }\n}\n\nfunction calculateCosts(amount: number, costConfiguration: ICostConfiguration) {\n    let costs = amount * costConfiguration.percentageCosts + costConfiguration.fixedCosts;\n    const amountWithoutCosts = Math.max(amount - costs, 0);\n    costs = amount - amountWithoutCosts;\n    return [amountWithoutCosts, costs];\n}\n\nfunction subtractTaxFreeGain(taxAmount: number, taxFreeAmount: number) {\n    const leftoverTaxes = Math.max(0, taxAmount - taxFreeAmount);\n    const leftoverTaxFreeAmount = Math.max(0, taxFreeAmount - taxAmount);\n    return [leftoverTaxes, leftoverTaxFreeAmount];\n}\n\nfunction getNewShareValue(etfIdentifier: string, investmentStep: InvestmentStep) {\n    return investmentStep.newShares[etfIdentifier] * investmentStep.sharePrizes[etfIdentifier];\n}\n\nfunction sumOfTotalValues(investmentStep: InvestmentStep) {\n    let sum = 0;\n    for (const etfIdentifier in investmentStep.totalShares) {\n        sum += getTotalShareValue(etfIdentifier, investmentStep);\n    }\n    return sum;\n}\n\nfunction calculateAndAddInflation(investmentStep: InvestmentStep, initialDate: Date, endDate: Date) {\n    // TODO predict inflationRate??? if so how should I predict it?\n    const sumTotalValues = sumOfTotalValues(investmentStep);\n    const timeFactor =\n        endDate.getFullYear() -\n        initialDate.getFullYear() +\n        (endDate.getMonth() - initialDate.getMonth()) / numberOfMonthsOfAYear;\n    investmentStep.inflation = sumTotalValues - sumTotalValues * Math.pow(1 - inflationRate, timeFactor);\n}\n\nfunction calculateForecastInterval(\n    age: number,\n    lifeExpectation: number,\n    savingPhaseLength: number,\n    fadeOutYears: number = 10\n) {\n    const yearsLeft = lifeExpectation - age;\n    const now = new Date();\n    const beginningDate = new Date(now.getFullYear(), now.getMonth() + 1);\n    // start next month.\n    const endSavingPhaseDate = new Date(beginningDate);\n    endSavingPhaseDate.setFullYear(beginningDate.getFullYear() + savingPhaseLength);\n    const endDate = new Date(beginningDate);\n    endDate.setFullYear(beginningDate.getFullYear() + yearsLeft + fadeOutYears);\n    return [beginningDate, endSavingPhaseDate, endDate];\n}\n\nfunction calculateTaxes(\n    investmentSteps: InvestmentStep[],\n    date: Date,\n    leftoverTaxFreeAmount: number,\n    etfToRatio: ETFRatio\n) {\n    if (!isFirstMonthOfAYear(date) || investmentSteps.length < 2) {\n        return [0, leftoverTaxFreeAmount];\n    }\n    let summedTaxes = 0;\n    const decemberInvestmentStep = investmentSteps[investmentSteps.length - 1];\n    // Use the second investment step if there are not enough meaning the investing started this year after january.\n    // The second is the true first investment step the first is a dummy.\n    const firstInvestmentStepOfThisYear =\n        investmentSteps.length - numberOfMonthsOfAYear > 1\n            ? investmentSteps[investmentSteps.length - numberOfMonthsOfAYear]\n            : investmentSteps[1];\n    for (const etfIdentifier in etfToRatio) {\n        let accumulatedBasicProfit = 0;\n        // Sum up all new investments from february to december.\n        for (let i = 1; i < numberOfMonthsOfAYear && investmentSteps.length - i > 0; i++) {\n            const currentInvestmentStep = investmentSteps[investmentSteps.length - i];\n            accumulatedBasicProfit +=\n                (getNewShareValue(etfIdentifier, currentInvestmentStep) * i) / numberOfMonthsOfAYear;\n        }\n        // Sum up total Investment of the first date of this year.\n        accumulatedBasicProfit +=\n            (getTotalShareValue(etfIdentifier, firstInvestmentStepOfThisYear) *\n                (numberOfMonthsOfAYear - firstInvestmentStepOfThisYear.date.getMonth())) /\n            numberOfMonthsOfAYear;\n        accumulatedBasicProfit *= 0.7 * basicRateOfInterest;\n        const currentShareValues = getTotalShareValue(etfIdentifier, decemberInvestmentStep);\n        // Calculate profit of last year.\n        const profitOverAllTime = currentShareValues - decemberInvestmentStep.totalInvestedMoney[etfIdentifier];\n        let profitOfPreviousYears = 0;\n        if (investmentSteps.length > numberOfMonthsOfAYear) {\n            profitOfPreviousYears = Math.max(\n                0,\n                getTotalShareValue(etfIdentifier, investmentSteps[investmentSteps.length - 1 - numberOfMonthsOfAYear]) -\n                    investmentSteps[investmentSteps.length - 1 - numberOfMonthsOfAYear].totalInvestedMoney[\n                        etfIdentifier\n                    ]\n            );\n        }\n\n        const profitOfThisYear = profitOverAllTime - profitOfPreviousYears;\n        let amountToApplyTaxes = clamp(profitOfThisYear, 0, accumulatedBasicProfit);\n        [amountToApplyTaxes, leftoverTaxFreeAmount] = subtractTaxFreeGain(amountToApplyTaxes, leftoverTaxFreeAmount);\n        summedTaxes += amountToApplyTaxes * partialExemption * corporateTaxRatio;\n    }\n    return [summedTaxes, leftoverTaxFreeAmount];\n}\n\nfunction addAccumulationMonth(\n    investmentSteps: InvestmentStep[],\n    investment: number,\n    date: Date,\n    initialDate: Date,\n    etfToRatio: ETFRatio,\n    configOptions: IConfigOptions\n) {\n    const forecast = ForecastModelSingleton.getInstance();\n    let costs = 0;\n    const prevInvestmentStep = investmentSteps[investmentSteps.length - 1];\n    const newInvestmentStep: InvestmentStep = {\n        date: date,\n        newShares: {},\n        totalShares: { ...prevInvestmentStep.totalShares },\n        dividendNewShares: {},\n        dividendTotalShares: { ...prevInvestmentStep.dividendTotalShares },\n        totalCosts: prevInvestmentStep.totalCosts,\n        sharePrizes: {},\n        totalInvestedMoney: { ...prevInvestmentStep.totalInvestedMoney },\n        newInvestedMoney: {},\n        newInvestment: 0,\n        totalTaxes: prevInvestmentStep.totalTaxes,\n        totalPayout: { ...prevInvestmentStep.totalPayout },\n        newPayout: {},\n        inflation: 0,\n    };\n    for (const etfIdentifier in etfToRatio) {\n        const investmentOfEtfWithCosts = etfToRatio[etfIdentifier] * investment;\n        newInvestmentStep.newInvestment += investmentOfEtfWithCosts;\n        const [investmentOfEtfWithoutCosts, newCosts] = calculateCosts(\n            investmentOfEtfWithCosts,\n            configOptions.costConfig\n        );\n        costs += newCosts;\n        newInvestmentStep.newInvestedMoney[etfIdentifier] = investmentOfEtfWithoutCosts;\n        newInvestmentStep.totalInvestedMoney[etfIdentifier] += investmentOfEtfWithoutCosts;\n\n        const etfSharePrize = forecast.predictCourse(etfIdentifier, date);\n        const newShares = investmentOfEtfWithoutCosts / etfSharePrize;\n        newInvestmentStep.sharePrizes[etfIdentifier] = etfSharePrize;\n        newInvestmentStep.newShares[etfIdentifier] = newShares;\n\n        const dividendPayoutMoneyPerShare = calculateDividend(etfIdentifier, date);\n        const dividendPayoutMoney = newInvestmentStep.totalShares[etfIdentifier] * dividendPayoutMoneyPerShare;\n        const newSharesByDividend = dividendPayoutMoney / etfSharePrize;\n        newInvestmentStep.newShares[etfIdentifier] += newSharesByDividend;\n        newInvestmentStep.dividendNewShares[etfIdentifier] = newSharesByDividend;\n        newInvestmentStep.dividendTotalShares[etfIdentifier] += newSharesByDividend;\n\n        newInvestmentStep.totalShares[etfIdentifier] += newInvestmentStep.newShares[etfIdentifier];\n        newInvestmentStep.newPayout[etfIdentifier] = 0;\n    }\n    newInvestmentStep.totalCosts += costs;\n    const [newTaxes, newLeftoverTaxFreeAmount] = calculateTaxes(\n        investmentSteps,\n        date,\n        configOptions.taxFreeAmount,\n        etfToRatio\n    );\n    newInvestmentStep.totalTaxes += newTaxes;\n    calculateAndAddInflation(newInvestmentStep, initialDate, date);\n    investmentSteps.push(newInvestmentStep);\n\n    return newLeftoverTaxFreeAmount;\n}\n\nfunction addPayoutMonth(\n    investmentSteps: InvestmentStep[],\n    sellingAmount: number,\n    etfToRatio: ETFRatio,\n    date: Date,\n    initialDate: Date,\n    configOptions: IConfigOptions,\n    leftoverAlreadyPaidTaxes: number,\n    leftoverTaxFreeAmount: number,\n    payoutStats: IPayoutStats\n) {\n    if (isFirstMonthOfAYear(date)) {\n        leftoverTaxFreeAmount = configOptions.taxFreeAmount;\n    }\n    const forecast = ForecastModelSingleton.getInstance();\n    let costs = 0;\n    let taxes = 0;\n    const prevInvestmentStep = investmentSteps[investmentSteps.length - 1];\n    const newInvestmentStep: InvestmentStep = {\n        date: date,\n        newShares: {},\n        totalShares: { ...prevInvestmentStep.totalShares },\n        dividendNewShares: {},\n        dividendTotalShares: { ...prevInvestmentStep.dividendTotalShares },\n        totalCosts: prevInvestmentStep.totalCosts,\n        sharePrizes: {},\n        totalInvestedMoney: { ...prevInvestmentStep.totalInvestedMoney },\n        newInvestedMoney: {},\n        newInvestment: 0,\n        totalTaxes: prevInvestmentStep.totalTaxes,\n        totalPayout: { ...prevInvestmentStep.totalPayout },\n        newPayout: {},\n        inflation: 0,\n    };\n    for (const etfIdentifier in etfToRatio) {\n        const etfSharePrize = forecast.predictCourse(etfIdentifier, date);\n        newInvestmentStep.sharePrizes[etfIdentifier] = etfSharePrize;\n        newInvestmentStep.newPayout[etfIdentifier] = 0;\n        newInvestmentStep.newInvestedMoney[etfIdentifier] = 0;\n        // Skip payout if there are no shares left to sell.\n        if (payoutStats[etfIdentifier].investmentStepsIdx < investmentSteps.length) {\n            // Handle payout.\n            const amountToSell = sellingAmount * etfToRatio[etfIdentifier];\n            let amountAlreadySold = 0;\n            const costsToPay = calculateCosts(amountToSell, configOptions.costConfig)[1];\n            let alreadyPaidCosts = 0;\n            let payoutInvestmentStepIdxForFIFO = payoutStats[etfIdentifier].investmentStepsIdx;\n            let currentSharesLeft =\n                investmentSteps[payoutInvestmentStepIdxForFIFO].newShares[etfIdentifier] -\n                payoutStats[etfIdentifier].alreadySoldShares;\n            for (; payoutInvestmentStepIdxForFIFO < investmentSteps.length; payoutInvestmentStepIdxForFIFO++) {\n                const leftoverAmountToSell = amountToSell - amountAlreadySold;\n                const currentInvestmentStepForFIFO = investmentSteps[payoutInvestmentStepIdxForFIFO];\n\n                const currentValueOfShares =\n                    etfSharePrize *\n                    (payoutInvestmentStepIdxForFIFO === payoutStats[etfIdentifier].investmentStepsIdx\n                        ? currentInvestmentStepForFIFO.newShares[etfIdentifier] -\n                          payoutStats[etfIdentifier].alreadySoldShares\n                        : currentInvestmentStepForFIFO.newShares[etfIdentifier]);\n                const amountToSellWithCosts = Math.min(currentValueOfShares, leftoverAmountToSell);\n                const amountOfSharesToSell = amountToSellWithCosts / etfSharePrize;\n                currentSharesLeft = currentInvestmentStepForFIFO.newShares[etfIdentifier] - amountOfSharesToSell;\n                currentSharesLeft -=\n                    payoutInvestmentStepIdxForFIFO === payoutStats[etfIdentifier].investmentStepsIdx\n                        ? payoutStats[etfIdentifier].alreadySoldShares\n                        : 0;\n\n                const amountToSellWithoutCosts = Math.max(0, amountToSellWithCosts - (costsToPay - alreadyPaidCosts));\n                alreadyPaidCosts += Math.max(0, amountToSellWithCosts - amountToSellWithoutCosts);\n\n                const initialValueOfShares =\n                    amountOfSharesToSell * currentInvestmentStepForFIFO.sharePrizes[etfIdentifier];\n                let amountToPayTaxes = Math.max(0, amountToSellWithoutCosts - initialValueOfShares);\n\n                [amountToPayTaxes, leftoverTaxFreeAmount] = subtractTaxFreeGain(\n                    amountToPayTaxes,\n                    leftoverTaxFreeAmount\n                );\n                let taxesToPay = amountToPayTaxes * partialExemption * corporateTaxRatio;\n                [taxesToPay, leftoverAlreadyPaidTaxes] = subtractTaxFreeGain(taxesToPay, leftoverAlreadyPaidTaxes);\n                taxes += taxesToPay;\n                const payoutAmount = amountToSellWithoutCosts - taxesToPay;\n\n                newInvestmentStep.newPayout[etfIdentifier] += payoutAmount;\n                newInvestmentStep.totalPayout[etfIdentifier] += payoutAmount;\n\n                newInvestmentStep.totalShares[etfIdentifier] -= amountOfSharesToSell;\n                amountAlreadySold += amountToSellWithCosts;\n\n                // Handle the decrease of the dividendShares.\n                let amountOfDividendSharesLeft = 0;\n                if (payoutInvestmentStepIdxForFIFO === payoutStats[etfIdentifier].investmentStepsIdx) {\n                    amountOfDividendSharesLeft = Math.max(\n                        0,\n                        currentInvestmentStepForFIFO.dividendNewShares[etfIdentifier] -\n                            payoutStats[etfIdentifier].alreadySoldShares\n                    );\n                } else {\n                    amountOfDividendSharesLeft = currentInvestmentStepForFIFO.dividendNewShares[etfIdentifier];\n                }\n                const amountOfDividendSharesSold = Math.min(amountOfDividendSharesLeft, amountOfSharesToSell);\n                newInvestmentStep.dividendTotalShares[etfIdentifier] -= amountOfDividendSharesSold;\n\n                // Use break in order to not change the value of payoutInvestmentStepIdxForFIFO.\n                if (amountAlreadySold >= amountToSell) {\n                    break;\n                }\n            }\n            costs += alreadyPaidCosts;\n            // Handle update payoutStats.\n            payoutStats[etfIdentifier].investmentStepsIdx = payoutInvestmentStepIdxForFIFO;\n            payoutStats[etfIdentifier].investmentStepsIdx += currentSharesLeft === 0 ? 1 : 0;\n\n            payoutStats[etfIdentifier].alreadySoldShares =\n                payoutInvestmentStepIdxForFIFO < investmentSteps.length\n                    ? investmentSteps[payoutInvestmentStepIdxForFIFO].newShares[etfIdentifier] - currentSharesLeft\n                    : 0;\n        }\n\n        // Handle dividend.\n        const dividendPayoutMoney =\n            newInvestmentStep.totalShares[etfIdentifier] * calculateDividend(etfIdentifier, date);\n        const newSharesByDividend = dividendPayoutMoney / etfSharePrize;\n        newInvestmentStep.newShares[etfIdentifier] = newSharesByDividend;\n        newInvestmentStep.totalShares[etfIdentifier] += newSharesByDividend;\n        newInvestmentStep.dividendNewShares[etfIdentifier] = newSharesByDividend;\n        newInvestmentStep.dividendTotalShares[etfIdentifier] += newSharesByDividend;\n    }\n\n    newInvestmentStep.totalCosts += costs;\n    newInvestmentStep.totalTaxes += taxes;\n    calculateAndAddInflation(newInvestmentStep, initialDate, date);\n    investmentSteps.push(newInvestmentStep);\n    return [leftoverAlreadyPaidTaxes, leftoverTaxFreeAmount];\n}\n\nfunction generateEmptyInvestmentStep(etfToRatio: ETFRatio, date: Date) {\n    const forecast = ForecastModelSingleton.getInstance();\n    const emptyInvestmentStep: InvestmentStep = {\n        date: date,\n        totalCosts: 0,\n        totalTaxes: 0,\n        newShares: {},\n        totalShares: {},\n        dividendNewShares: {},\n        dividendTotalShares: {},\n        totalInvestedMoney: {},\n        totalPayout: {},\n        newPayout: {},\n        sharePrizes: {},\n        newInvestedMoney: {},\n        newInvestment: 0,\n        inflation: 0,\n    };\n    for (const etfIdentifier in etfToRatio) {\n        emptyInvestmentStep.newShares[etfIdentifier] = 0;\n        emptyInvestmentStep.totalShares[etfIdentifier] = 0;\n        emptyInvestmentStep.dividendNewShares[etfIdentifier] = 0;\n        emptyInvestmentStep.dividendTotalShares[etfIdentifier] = 0;\n        emptyInvestmentStep.totalInvestedMoney[etfIdentifier] = 0;\n        emptyInvestmentStep.totalPayout[etfIdentifier] = 0;\n        emptyInvestmentStep.newPayout[etfIdentifier] = 0;\n        emptyInvestmentStep.newInvestedMoney[etfIdentifier] = 0;\n        emptyInvestmentStep.sharePrizes[etfIdentifier] = forecast.predictCourse(etfIdentifier, date);\n    }\n    return emptyInvestmentStep;\n}\n\nexport class InvestmentModel {\n    private startCapital: number;\n    private monthlyInvestment: number;\n    private monthlyPayout: number;\n    private savingPhaseLength: number;\n    private etfToRatio: ETFRatio;\n    private configOptions: IConfigOptions;\n    private expectationOfLife: number;\n    private age: number;\n\n    private savingDates: Date[] = [];\n    private payoutDates: Date[] = [];\n    private initialDate: Date = new Date();\n    private investmentSteps: InvestmentStep[] = [];\n\n    constructor(\n        startCapital: number,\n        monthlyInvestment: number,\n        monthlyPayout: number,\n        savingPhaseLength: number,\n        etfToRatio: ETFRatio,\n        configOptions: IConfigOptions,\n        age: number,\n        expectationOfLife: number\n    ) {\n        this.startCapital = startCapital;\n        this.monthlyInvestment = monthlyInvestment;\n        this.monthlyPayout = monthlyPayout;\n        this.savingPhaseLength = savingPhaseLength;\n        this.etfToRatio = etfToRatio;\n        this.configOptions = configOptions;\n        this.expectationOfLife = expectationOfLife;\n        this.age = age;\n        this._calculateTimestampsForModel();\n        this._calculateModel();\n    }\n\n    private _calculateTimestampsForModel() {\n        const [startDate, endSavingPhaseDate, endDate] = calculateForecastInterval(\n            this.age,\n            this.expectationOfLife,\n            this.savingPhaseLength\n        );\n        const savingDates = [];\n        for (\n            let currentDate = startDate;\n            currentDate < endSavingPhaseDate;\n            currentDate = getNextMonthDate(currentDate)\n        ) {\n            savingDates.push(currentDate);\n        }\n        this.savingDates = savingDates;\n        const payoutDates = [];\n        for (let currentDate = endSavingPhaseDate; currentDate < endDate; currentDate = getNextMonthDate(currentDate)) {\n            payoutDates.push(currentDate);\n        }\n        this.payoutDates = payoutDates;\n        this.initialDate = startDate;\n    }\n\n    private _calculateModel() {\n        let investmentSteps = [generateEmptyInvestmentStep(this.etfToRatio, this.savingDates[0])];\n        addAccumulationMonth(\n            investmentSteps,\n            this.monthlyInvestment + this.startCapital,\n            this.savingDates[0],\n            this.initialDate,\n            this.etfToRatio,\n            this.configOptions\n        );\n        for (const savingDate of this.savingDates.slice(1)) {\n            addAccumulationMonth(\n                investmentSteps,\n                this.monthlyInvestment,\n                savingDate,\n                this.initialDate,\n                this.etfToRatio,\n                this.configOptions\n            );\n        }\n        // Discard the empty investment step.\n        investmentSteps = investmentSteps.slice(1);\n\n        let leftoverAlreadyPaidTaxes = investmentSteps[investmentSteps.length - 1].totalTaxes;\n        let leftoverTaxFreeAmount = this.configOptions.taxFreeAmount;\n        const payoutStats: IPayoutStats = {};\n        for (const etfIdentifier in this.etfToRatio) {\n            payoutStats[etfIdentifier] = { investmentStepsIdx: 0, alreadySoldShares: 0 };\n        }\n        for (const payoutDate of this.payoutDates) {\n            [leftoverAlreadyPaidTaxes, leftoverTaxFreeAmount] = addPayoutMonth(\n                investmentSteps,\n                this.monthlyPayout,\n                this.etfToRatio,\n                payoutDate,\n                this.initialDate,\n                this.configOptions,\n                leftoverAlreadyPaidTaxes,\n                leftoverTaxFreeAmount,\n                payoutStats\n            );\n        }\n        this.investmentSteps = investmentSteps;\n    }\n\n    getInvestmentSteps(numberOfEntriesPerYear: number) {\n        if (!Number.isInteger(numberOfMonthsOfAYear / numberOfEntriesPerYear)) {\n            throw new Error(\n                `The numberOfEntriesPerYear need to be dividable by ${numberOfMonthsOfAYear} in order to make sense.`\n            );\n        }\n\n        if (numberOfEntriesPerYear === numberOfMonthsOfAYear) {\n            return this.investmentSteps;\n        }\n        const selectedInvestmentSteps = [];\n        const numberOfMonthsToMerge = numberOfMonthsOfAYear / numberOfEntriesPerYear;\n        for (let i = 0; i < this.investmentSteps.length; i += numberOfMonthsToMerge) {\n            // Take the start date as representative.\n            const adjustedInvestmentStep = cloneDeep(this.investmentSteps[i]);\n            for (let offset = 1; offset < numberOfMonthsToMerge; offset++) {\n                adjustedInvestmentStep.newInvestment += this.investmentSteps[i + offset].newInvestment;\n                for (const etfIdentifier in this.investmentSteps[i + offset].newPayout) {\n                    adjustedInvestmentStep.newPayout[etfIdentifier] += this.investmentSteps[i + offset].newPayout[\n                        etfIdentifier\n                    ];\n                }\n            }\n            selectedInvestmentSteps.push(adjustedInvestmentStep);\n        }\n        return selectedInvestmentSteps;\n    }\n\n    getPayoutPhaseBeginDate() {\n        return this.payoutDates[0];\n    }\n}\n","import * as d3 from 'd3';\nimport { roundDateToBeginningOfMonth, numberOfMonthsOfAYear } from '../helpers/utils';\n\nconst FIVE_MILLION = 5000000;\nconst ONE_THOUSAND = 1000;\nconst ONE_MILLION = 1000000;\nconst numberOfTicks = 7;\n\nexport function generateLabelWithValueText(name, value = undefined) {\n    return `${name.charAt(0).toUpperCase()}${name.slice(1)}: ${value == null ? '-' : value}`;\n}\n\nfunction setInteractionDisplayForActiveDiagrams(displayOption) {\n    for (const activeDiagram of D3ChartStrategy.activeStrategies) {\n        activeDiagram.interaction.style('display', displayOption);\n    }\n}\n\nfunction calculateInvestmentStepIndexForDate(date, investmentSteps) {\n    const firstDate = investmentSteps[0].date;\n    const secondDate = investmentSteps[1].date;\n    const numberOfMonthsSinceStartDate =\n        (date.getFullYear() - firstDate.getFullYear()) * numberOfMonthsOfAYear +\n        (date.getMonth() - firstDate.getMonth());\n    const numberOfMonthsPerInvestmentStep =\n        (secondDate.getFullYear() - firstDate.getFullYear()) * numberOfMonthsOfAYear +\n        (secondDate.getMonth() - firstDate.getMonth());\n\n    return Math.floor(numberOfMonthsSinceStartDate / numberOfMonthsPerInvestmentStep);\n}\n\nexport class D3ChartStrategy {\n    static activeStrategies = [];\n    constructor(\n        investmentSteps,\n        renderDivRef,\n        payoutPhaseStartDate,\n        svgID,\n        tooltipDate,\n        yExtent,\n        width = 1100,\n        height = 300,\n        marginW = 200,\n        marginH = 40\n    ) {\n        if (this.constructor === D3ChartStrategy) {\n            throw new Error(\"Abstract classes can't be instantiated.\");\n        }\n        D3ChartStrategy.activeStrategies.push(this);\n        this.investmentSteps = investmentSteps;\n        this.payoutPhaseStartDate = payoutPhaseStartDate;\n        this.tooltipDate = tooltipDate;\n        this.yExtent = yExtent;\n\n        this.marginW = marginW;\n        this.marginH = marginH;\n        this.width = width;\n        this.height = height;\n\n        this.lineStrokeWidth = 3;\n        this.labelValueIdentifier = 'value';\n\n        // Reset diagram by deletion.\n        renderDivRef.innerHTML = '';\n\n        this.svg = d3\n            .select(renderDivRef)\n            .append('svg')\n            .attr('id', svgID)\n            .attr('viewBox', `0 0 ${this.width + 2 * this.marginW} ${this.height + 2 * this.marginH}`)\n            .append('g')\n            .attr('transform', `translate(${[this.marginW / 2, this.marginH]})`);\n    }\n\n    static reset() {\n        D3ChartStrategy.activeStrategies = [];\n    }\n\n    render() {\n        this._prepareData();\n        this._calculateExtents();\n        this._createScales();\n        this._drawContent();\n        this._prepareText();\n        this._drawText();\n        this._drawAxis();\n        this._addInteraction();\n\n        if (this.tooltipDate != null) {\n            this._updateAllDiagrams();\n        }\n    }\n\n    _calculateExtents() {\n        this.dateExtent = d3.extent(this.dataArray[0], d => d.date);\n\n        const lastImportantDateForYScale = new Date(this.payoutPhaseStartDate);\n        lastImportantDateForYScale.setMonth(lastImportantDateForYScale.getMonth() + numberOfMonthsOfAYear);\n        // Only calculate the y extent when it is undefined. Meaning the y axis is not locked.\n        if (this.yExtent == null) {\n            const filteredDataArrayForYMax = this.dataArray[this.maxIndex].filter(\n                e => e.date <= lastImportantDateForYScale && e.date > this.dateExtent[0]\n            );\n            const filteredDataArrayForYMin = this.dataArray[this.minIndex].filter(\n                e => e.date <= lastImportantDateForYScale\n            );\n            const maxVal = d3.max(filteredDataArrayForYMax.map(e => e.yStart));\n            const minVal = d3.min(filteredDataArrayForYMin.map(e => e.yEnd));\n            this.yExtent = [minVal, maxVal];\n        }\n    }\n\n    _createScales() {\n        this.yScale = d3.scaleLinear().domain(this.yExtent).range([this.height, 0]);\n        this.xScale = d3.scaleTime().domain(this.dateExtent).range([0, this.width]);\n    }\n\n    valueToDisplayText(value, hasToBePositive = false) {\n        const labelDivisionFactor =\n            Math.max(-this.yExtent[0], this.yExtent[1]) >= FIVE_MILLION ? ONE_MILLION : ONE_THOUSAND;\n        const numberIndicator = labelDivisionFactor === ONE_MILLION ? 'M' : 'K';\n        if (hasToBePositive) {\n            value = Math.abs(value);\n        }\n        return `${(value / labelDivisionFactor).toLocaleString(undefined, {\n            maximumFractionDigits: 2,\n        })}${numberIndicator} €`;\n    }\n\n    _drawAxis() {\n        this.svg\n            .append('g')\n            .style('font-size', '20px')\n            .call(\n                d3\n                    .axisLeft(this.yScale)\n                    .tickFormat(d => this.valueToDisplayText(d))\n                    .ticks(numberOfTicks)\n            );\n\n        this.svg\n            .append('g')\n            .style('font-size', '20px')\n            .attr('transform', `translate(0, ${this.height})`)\n            .call(d3.axisBottom(this.xScale));\n\n        // Draw zero line.\n        this.svg\n            .append('g')\n            .append('line')\n            .attr('x1', this.xScale(this.dateExtent[0]))\n            .attr('y1', this.yScale(0))\n            .attr('x2', this.xScale(this.dateExtent[1]))\n            .attr('y2', this.yScale(0))\n            .style('stroke-width', this.lineStrokeWidth)\n            .style('stroke', 'black');\n\n        // Draw phase division line.\n        this.svg\n            .append('g')\n            .append('line')\n            .attr('x1', this.xScale(this.payoutPhaseStartDate) - this.lineStrokeWidth / 2)\n            .attr('y1', this.yScale(this.yExtent[0]))\n            .attr('x2', this.xScale(this.payoutPhaseStartDate) - this.lineStrokeWidth / 2)\n            .attr('y2', this.yScale(this.yExtent[1]))\n            .style('stroke-width', this.lineStrokeWidth)\n            .style('stroke', 'black');\n    }\n\n    _addInteraction() {\n        const interactionClass = 'interaction';\n        const tooltipLineClass = 'tooltipLine';\n\n        this.interaction = this.svg\n            .append('g')\n            .attr('class', interactionClass)\n            .style('display', 'none')\n            .attr('transform', `translate(${[0, -this.marginH]})`);\n\n        this.hoverLine = this.interaction\n            .append('line')\n            .attr('class', tooltipLineClass)\n            .style('stroke', 'blue')\n            .style('stroke-dasharray', '3,3')\n            .style('opacity', 0.5)\n            .attr('y1', this.height + 2 * this.marginH)\n            .attr('y2', 0);\n\n        // Add rectangle to catch mouse events.\n        this.svg\n            .append('rect')\n            .attr('class', 'mouseEvent')\n            .attr('transform', `translate(${[0, -this.marginH]})`)\n            .attr('height', this.height + 2 * this.marginH)\n            .attr('width', this.width)\n            .attr('fill', 'none')\n            .style('pointer-events', 'all')\n            .on('mouseover', () => setInteractionDisplayForActiveDiagrams(null))\n            .on('mouseout', () => setInteractionDisplayForActiveDiagrams('none'))\n            .on('mousemove', mouseEvent => this._handleTooltipEvent(mouseEvent));\n    }\n\n    // Interaction inspired by: http://www.d3noob.org/2014/07/my-favourite-tooltip-method-for-line.html\n    _handleTooltipEvent(mouseEvent) {\n        const x = d3.pointer(mouseEvent)[0];\n        const date = this.xScale.invert(x);\n        this.tooltipDate = roundDateToBeginningOfMonth(date);\n        this._updateAllDiagrams();\n    }\n\n    _updateAllDiagrams() {\n        const investmentStepIndex = calculateInvestmentStepIndexForDate(this.tooltipDate, this.investmentSteps);\n        for (const activeDiagram of D3ChartStrategy.activeStrategies) {\n            activeDiagram.hoverLine.attr('x1', this.xScale(this.tooltipDate)).attr('x2', this.xScale(this.tooltipDate));\n            activeDiagram._updateTooltip(investmentStepIndex);\n            activeDiagram._updateDiagram();\n        }\n    }\n\n    _drawText() {\n        this.textGroup = this.svg.append('g').attr('class', 'textGroup');\n        this.textGroup\n            .selectAll('text')\n            .data(Object.values(this.textProperties))\n            .enter()\n            .append('text')\n            .text(d => d.text)\n            .attr('x', d => d.x)\n            .attr('y', d => d.y)\n            .style('font-size', d => d.fontSize)\n            .style('font-weight', d => d.fontWeight)\n            .style('text-anchor', d => d.textAnchor)\n            .style('fill', d => d.color);\n    }\n\n    _updateDiagram() {\n        this.textGroup.selectAll('text').text(d => d.text);\n    }\n\n    _prepareText() {\n        const savingPhaseMid =\n            this.xScale(this.dateExtent[0]) +\n            (this.xScale(this.payoutPhaseStartDate) - this.xScale(this.dateExtent[0])) / 2;\n\n        const payoutPhaseMid =\n            this.xScale(this.payoutPhaseStartDate) +\n            (this.xScale(this.dateExtent[1]) - this.xScale(this.payoutPhaseStartDate)) / 2;\n        const yPos = -10;\n        this.standardFontSize = 20;\n        this.textProperties = {\n            savingBold: {\n                text: 'SAVING',\n                x: savingPhaseMid,\n                y: yPos,\n                fontSize: this.standardFontSize,\n                textAnchor: 'end',\n                fontWeight: 'bold',\n                color: 'black',\n            },\n            savingPhase: {\n                text: 'Phase',\n                x: savingPhaseMid,\n                y: yPos,\n                fontSize: this.standardFontSize,\n                textAnchor: 'start',\n                fontWeight: 'normal',\n                color: 'black',\n            },\n            payoutBold: {\n                text: 'PAYOUT',\n                x: payoutPhaseMid,\n                y: yPos,\n                fontSize: this.standardFontSize,\n                textAnchor: 'end',\n                fontWeight: 'bold',\n                color: 'black',\n            },\n            payoutPhase: {\n                text: 'Phase',\n                x: payoutPhaseMid,\n                y: yPos,\n                fontSize: this.standardFontSize,\n                textAnchor: 'start',\n                fontWeight: 'normal',\n                color: 'black',\n            },\n        };\n    }\n\n    _prepareData() {\n        throw new Error('Abstract method. Not Implemented');\n    }\n\n    _drawContent() {\n        throw new Error('Abstract method. Not Implemented');\n    }\n\n    _updateTooltip() {\n        throw new Error('Abstract method. Not Implemented');\n    }\n}\n","import * as d3 from 'd3';\nimport { getTotalShareValue, getTotalDividenShareValue } from '../model/InvestmentModel';\nimport { D3ChartStrategy, generateLabelWithValueText } from './D3ChartStrategy';\nimport { ETF_SYMBOL_TO_NAME } from '../components/App';\n\nfunction generateEtfValueText(investmentValue = undefined, totalValue = undefined) {\n    return `Inv: ${investmentValue == null ? '-' : investmentValue}, Tot: ${totalValue == null ? '-' : totalValue}`;\n}\n\nconst negativeLabels = ['costs', 'taxes', 'inflation'];\nconst negativeLabelsToInvestmentStepIdentifier = { costs: 'totalCosts', taxes: 'totalTaxes', inflation: 'inflation' };\nconst capitalIdentifier = 'capital';\nconst investedIdentifier = 'invested';\n\nexport class AreaChartD3 extends D3ChartStrategy {\n    constructor(investmentSteps, renderDivRef, payoutPhaseStartDate, tooltipDate, yExtent) {\n        super(investmentSteps, renderDivRef, payoutPhaseStartDate, 'firstSVG', tooltipDate, yExtent);\n\n        this.etfLineColors = {\n            'SP5C.PAR': { total: '#0562a0', invested: '#71c1f7' },\n            ESGE: { total: '#ff1eff', invested: '#ff63ff' },\n            SUSA: { total: '#23ff01', invested: '#7dff69' },\n        };\n        this.colors = { inflation: '#ff7f00', costs: '#be3bff', taxes: '#e31a1c' };\n        this.lineOpacity = 0.7;\n\n        this.etfIdentifiers = Object.keys(this.investmentSteps[0].totalShares);\n    }\n\n    _prepareData() {\n        this.dataToIndex = {\n            costs: 0,\n            taxes: 1,\n            inflation: 2,\n        };\n\n        let currentIdx = 3;\n        for (const etfIdentifier of this.etfIdentifiers) {\n            this.dataToIndex[etfIdentifier + investedIdentifier] = currentIdx++;\n            this.dataToIndex[etfIdentifier + capitalIdentifier] = currentIdx++;\n        }\n\n        this.minIndex = this.dataToIndex.inflation;\n        this.maxIndex = currentIdx - 1;\n\n        this.dataArray = [];\n        for (let i = 0; i < currentIdx; i++) {\n            this.dataArray.push([]);\n        }\n        for (const investmentStep of this.investmentSteps) {\n            this.dataArray[this.dataToIndex.costs].push({\n                yStart: 0,\n                yEnd: -investmentStep.totalCosts,\n                date: investmentStep.date,\n            });\n            this.dataArray[this.dataToIndex.taxes].push({\n                yStart: -investmentStep.totalCosts,\n                yEnd: -investmentStep.totalCosts - investmentStep.totalTaxes,\n                date: investmentStep.date,\n            });\n            this.dataArray[this.dataToIndex.inflation].push({\n                yStart: -investmentStep.totalCosts - investmentStep.totalTaxes,\n                yEnd: -investmentStep.totalCosts - investmentStep.totalTaxes - investmentStep.inflation,\n                date: investmentStep.date,\n            });\n            let heightOffset = 0;\n            for (const etfIdentifier in investmentStep.totalShares) {\n                const totalShareValue = getTotalShareValue(etfIdentifier, investmentStep);\n                const totalDividendShareValue = getTotalDividenShareValue(etfIdentifier, investmentStep);\n                this.dataArray[this.dataToIndex[etfIdentifier + capitalIdentifier]].push({\n                    yStart: totalShareValue + heightOffset,\n                    yEnd: totalShareValue - totalDividendShareValue + heightOffset,\n                    date: investmentStep.date,\n                });\n                this.dataArray[this.dataToIndex[etfIdentifier + investedIdentifier]].push({\n                    yStart: totalShareValue - totalDividendShareValue + heightOffset,\n                    yEnd: heightOffset,\n                    date: investmentStep.date,\n                });\n                heightOffset += totalShareValue;\n            }\n        }\n\n        // Append miscellaneous data to array.\n        this.dataArray[this.dataToIndex.inflation].color = this.colors.inflation;\n        this.dataArray[this.dataToIndex.taxes].color = this.colors.taxes;\n        this.dataArray[this.dataToIndex.costs].color = this.colors.costs;\n        for (const etfIdentifier in this.investmentSteps[0].totalShares) {\n            this.dataArray[this.dataToIndex[etfIdentifier + investedIdentifier]].color = this.etfLineColors[\n                etfIdentifier\n            ].invested;\n            this.dataArray[this.dataToIndex[etfIdentifier + capitalIdentifier]].color = this.etfLineColors[\n                etfIdentifier\n            ].total;\n        }\n    }\n\n    _drawLines() {\n        // Draw line chart.\n        for (let i = 0; i < this.dataArray.length; i++) {\n            this.svg\n                .append('path')\n                .datum(this.dataArray[i])\n                .style('stroke', d => d.color)\n                .style('stroke-width', this.lineStrokeWidth)\n                .style('opacity', this.lineOpacity)\n                .style('fill', 'none')\n                .attr(\n                    'd',\n                    d3\n                        .line()\n                        .x(d => this.xScale(d.date))\n                        .y(d => this.yScale(d.yStart))\n                );\n        }\n    }\n    _drawContent() {\n        this._drawArea();\n    }\n\n    _drawArea() {\n        // Draw stacked area chart.\n        for (let i = 0; i < this.dataArray.length; i++) {\n            this.svg\n                .append('g')\n                .attr('class', 'area')\n                .append('path')\n                .datum(this.dataArray[i])\n                .style('opacity', this.lineOpacity)\n                .style('fill', d => d.color)\n                .attr(\n                    'd',\n                    d3\n                        .area()\n                        .curve(d3.curveMonotoneX)\n                        .x(d => this.xScale(d.date))\n                        .y0(d => this.yScale(d.yEnd))\n                        .y1(d => this.yScale(d.yStart))\n                );\n        }\n    }\n\n    _prepareText() {\n        super._prepareText();\n        const paddingW = this.width * 0.005;\n        const paddingH = this.standardFontSize * 0.3;\n\n        for (let i = 0; i < negativeLabels.length; i++) {\n            this.textProperties[negativeLabels[i]] = {\n                text: generateLabelWithValueText(negativeLabels[i]),\n                x: this.xScale(this.dateExtent[1]) + paddingW,\n                y: this.yScale(0) + (this.standardFontSize + paddingH) * i + this.standardFontSize,\n                fontSize: this.standardFontSize,\n                textAnchor: 'start',\n                fontWeight: 'normal',\n                color: this.colors[negativeLabels[i]],\n            };\n        }\n\n        // Add ETF Labels.\n        for (let i = 0; i < this.etfIdentifiers.length; i++) {\n            this.textProperties[this.etfIdentifiers[i]] = {\n                text: ETF_SYMBOL_TO_NAME[this.etfIdentifiers[i]],\n                x: this.xScale(this.dateExtent[1]) + paddingW,\n                y: this.yScale(0) - (this.standardFontSize + paddingH) * i * 2 - 2 * this.standardFontSize,\n                fontSize: this.standardFontSize,\n                textAnchor: 'start',\n                fontWeight: 'normal',\n                color: this.etfLineColors[this.etfIdentifiers[i]].total,\n            };\n        }\n\n        // Add ETF values of Labels.\n        for (let i = 0; i < this.etfIdentifiers.length; i++) {\n            this.textProperties[this.etfIdentifiers[i] + this.labelValueIdentifier] = {\n                text: generateEtfValueText(),\n                x: this.xScale(this.dateExtent[1]) + paddingW,\n                y: this.yScale(0) - (this.standardFontSize + paddingH) * i * 2 - 1 * this.standardFontSize,\n                fontSize: this.standardFontSize,\n                textAnchor: 'start',\n                fontWeight: 'normal',\n                color: this.etfLineColors[this.etfIdentifiers[i]].total,\n            };\n        }\n    }\n\n    _updateTooltip(investmentStepIndex) {\n        for (const etfIdentifier of this.etfIdentifiers) {\n            const totalValue = getTotalShareValue(etfIdentifier, this.investmentSteps[investmentStepIndex]);\n            const totalDividendValue = getTotalDividenShareValue(\n                etfIdentifier,\n                this.investmentSteps[investmentStepIndex]\n            );\n            const investedValue = totalValue - totalDividendValue;\n            const updatedValueText = generateEtfValueText(\n                this.valueToDisplayText(investedValue, true),\n                this.valueToDisplayText(totalValue, true)\n            );\n            this.textProperties[etfIdentifier + this.labelValueIdentifier].text = updatedValueText;\n        }\n        for (const negativeLabel of negativeLabels) {\n            const value = this.investmentSteps[investmentStepIndex][\n                negativeLabelsToInvestmentStepIdentifier[negativeLabel]\n            ];\n            const updatedValueText = generateLabelWithValueText(negativeLabel, this.valueToDisplayText(value, true));\n            this.textProperties[negativeLabel].text = updatedValueText;\n        }\n    }\n}\n","import { D3ChartStrategy, generateLabelWithValueText } from './D3ChartStrategy';\n\nfunction getSumNewPayout(investmentStep) {\n    let sumNewPayout = 0;\n    for (const etfIdentifier in investmentStep.newPayout) {\n        sumNewPayout += investmentStep.newPayout[etfIdentifier];\n    }\n    return sumNewPayout;\n}\n\nexport class CashflowBarChart extends D3ChartStrategy {\n    constructor(investmentSteps, renderDivRef, payoutPhaseStartDate, tooltipDate, yExtent) {\n        super(investmentSteps, renderDivRef, payoutPhaseStartDate, 'secondSVG', tooltipDate, yExtent);\n        this.barPaddingPercentage = 0.9;\n\n        this.zeroLineStrokeWidth = 3;\n\n        this.colors = { payout: '#3acc5c', invested: '#ff3e58' };\n    }\n\n    render() {\n        super.render();\n    }\n\n    _prepareData() {\n        // Create line array.\n        const dataToIndex = {\n            invested: 0,\n            payout: 1,\n        };\n\n        this.minIndex = dataToIndex.invested;\n        this.maxIndex = dataToIndex.payout;\n\n        this.dataArray = [[], []];\n        for (const investmentStep of this.investmentSteps) {\n            let sumNewPayout = getSumNewPayout(investmentStep);\n\n            this.dataArray[dataToIndex.invested].push({\n                yStart: 0,\n                yEnd: -investmentStep.newInvestment,\n                date: investmentStep.date,\n                color: this.colors.invested,\n            });\n            this.dataArray[dataToIndex.payout].push({\n                yStart: sumNewPayout,\n                yEnd: 0,\n                date: investmentStep.date,\n                color: this.colors.payout,\n            });\n        }\n\n        this.rectWidth = (this.width / this.dataArray[dataToIndex.invested].length) * this.barPaddingPercentage;\n    }\n\n    _prepareText() {\n        super._prepareText();\n\n        const payoutX =\n            this.xScale(this.payoutPhaseStartDate) +\n            (this.xScale(this.dateExtent[1]) - this.xScale(this.payoutPhaseStartDate)) / 2;\n        const payoutY = this.yScale(0) + (this.yScale(this.yExtent[0]) - this.yScale(0)) / 2;\n\n        const payoutIdentifier = 'payout';\n        this.textProperties[payoutIdentifier] = {\n            text: generateLabelWithValueText(payoutIdentifier),\n            x: payoutX,\n            y: payoutY,\n            fontSize: this.standardFontSize,\n            textAnchor: 'middle',\n            fontWeight: 'normal',\n            color: this.colors[payoutIdentifier],\n        };\n\n        const investedX =\n            this.xScale(this.dateExtent[0]) +\n            (this.xScale(this.payoutPhaseStartDate) - this.xScale(this.dateExtent[0])) / 2;\n        const investedY = this.yScale(0) - (this.yScale(0) - this.yScale(this.yExtent[1])) / 2;\n\n        const investedIdentifier = 'invested';\n        this.textProperties[investedIdentifier] = {\n            text: generateLabelWithValueText(investedIdentifier),\n            x: investedX,\n            y: investedY,\n            fontSize: this.standardFontSize,\n            textAnchor: 'middle',\n            fontWeight: 'normal',\n            color: this.colors[investedIdentifier],\n        };\n    }\n\n    _updateTooltip(investmentStepIndex) {\n        const payoutValue = getSumNewPayout(this.investmentSteps[investmentStepIndex]);\n        const investedValue = this.investmentSteps[investmentStepIndex].newInvestment;\n        this.textProperties.payout.text = generateLabelWithValueText('payout', this.valueToDisplayText(payoutValue));\n        this.textProperties.invested.text = generateLabelWithValueText(\n            'invested',\n            this.valueToDisplayText(investedValue)\n        );\n    }\n\n    _drawContent() {\n        // Skip the last bar if it is outside the graph.\n        const needToSkipLastBar = this.dataArray[0][this.dataArray[0].length - 1].date === this.dateExtent[1];\n        for (let barArray of this.dataArray) {\n            if (needToSkipLastBar) {\n                barArray = barArray.slice(0, -1);\n            }\n\n            this.svg\n                .append('g')\n                .attr('class', 'bars')\n                .selectAll(`rect.none`)\n                .data(barArray)\n                .enter()\n                .append('rect')\n                .style('fill', d => d.color)\n                .attr('x', d => this.xScale(d.date))\n                .attr('width', this.rectWidth)\n                .attr('y', d => this.yScale(d.yStart))\n                .attr('height', d => this.yScale(d.yEnd) - this.yScale(d.yStart));\n        }\n    }\n}\n","import React from 'react';\nimport {\n    STARTING_CAPITAL_IDENTIFIER,\n    MONTHLY_INVESTMENT_IDENTIFIER,\n    SAVING_PHASE_IDENTIFIER,\n    AGE_IDENTIFIER,\n    TAX_FREE_AMOUNT_IDENTIFIER,\n    MONTHLY_PAYOUT_IDENTIFIER,\n    LIFE_EXPECTATION_IDENTIFIER,\n    DETAILED_GRAPH_DROPDOWN_IDENTIFIER,\n    Y_AXIS_LOCK_IDENTIFIER,\n    generateCostConfig,\n} from './App';\nimport { InvestmentModel, ETFRatio } from '../model/InvestmentModel';\nimport { AreaChartD3 } from '../renderer/AreaChartD3';\nimport { CashflowBarChart } from '../renderer/CashflowBarChartD3';\nimport { D3ChartStrategy } from '../renderer/D3ChartStrategy';\nimport { IAppState } from './App';\n\nexport interface IConfigOptions {\n    costConfig: ICostConfiguration;\n    taxFreeAmount: number;\n}\n\nexport interface ICostConfiguration {\n    percentageCosts: number;\n    fixedCosts: number;\n}\n\nexport class Visualization extends React.Component<IAppState, {}> {\n    private firstSVGRef = React.createRef<HTMLDivElement>();\n    private secondSVGRef = React.createRef<HTMLDivElement>();\n\n    private areaChart: AreaChartD3 | undefined = undefined;\n    private barChart: CashflowBarChart | undefined = undefined;\n\n    private investmentModel: InvestmentModel | undefined = undefined;\n\n    private _getInvestmentModel() {\n        const etfIdentifierToRatio: ETFRatio = {};\n        const etfProperties = this.props.etfDropdownSelection.elements;\n        for (const etfIdentifier in etfProperties) {\n            if (etfProperties[etfIdentifier].selected) {\n                etfIdentifierToRatio[etfProperties[etfIdentifier].symbol] = etfProperties[etfIdentifier].percentage;\n            }\n        }\n        const configOptions: IConfigOptions = {\n            taxFreeAmount: this.props[TAX_FREE_AMOUNT_IDENTIFIER].value,\n            costConfig: generateCostConfig(this.props),\n        };\n\n        return new InvestmentModel(\n            this.props[STARTING_CAPITAL_IDENTIFIER].value,\n            this.props[MONTHLY_INVESTMENT_IDENTIFIER].value,\n            this.props[MONTHLY_PAYOUT_IDENTIFIER].value,\n            this.props[SAVING_PHASE_IDENTIFIER].value,\n            etfIdentifierToRatio,\n            configOptions,\n            this.props[AGE_IDENTIFIER].value,\n            this.props[LIFE_EXPECTATION_IDENTIFIER].value\n        );\n    }\n\n    private _getTooltipDate() {\n        if (this.areaChart != null) {\n            return this.areaChart.tooltipDate;\n        } else if (this.barChart != null) {\n            return this.barChart.tooltipDate;\n        } else {\n            return undefined;\n        }\n    }\n\n    private _getYAxisExtent(diagram: D3ChartStrategy | undefined) {\n        return diagram != null && this.props[Y_AXIS_LOCK_IDENTIFIER].value ? diagram.yExtent : undefined;\n    }\n\n    private _drawVisualization() {\n        D3ChartStrategy.reset();\n        try {\n            if (this.props.isValid != null && this.props.isValid) {\n                this.investmentModel = this._getInvestmentModel();\n                const firstPayoutPhaseDate = this.investmentModel.getPayoutPhaseBeginDate();\n                const correctLevelOfDetailInvestmentSteps = this.investmentModel.getInvestmentSteps(\n                    this.props[DETAILED_GRAPH_DROPDOWN_IDENTIFIER].value\n                );\n                let tooltipDate = this._getTooltipDate();\n                this.areaChart = new AreaChartD3(\n                    correctLevelOfDetailInvestmentSteps,\n                    this.firstSVGRef.current,\n                    firstPayoutPhaseDate,\n                    tooltipDate,\n                    this._getYAxisExtent(this.areaChart)\n                );\n                this.areaChart.render();\n                this.barChart = new CashflowBarChart(\n                    correctLevelOfDetailInvestmentSteps,\n                    this.secondSVGRef.current,\n                    firstPayoutPhaseDate,\n                    tooltipDate,\n                    this._getYAxisExtent(this.barChart)\n                );\n                this.barChart.render();\n            }\n        } catch (e) {\n            console.error(e);\n        }\n    }\n\n    async componentDidMount() {\n        this._drawVisualization();\n    }\n\n    componentDidUpdate() {\n        this._drawVisualization();\n    }\n    render() {\n        return (\n            <React.Fragment>\n                <div ref={this.secondSVGRef}></div>\n                <div ref={this.firstSVGRef}></div>\n            </React.Fragment>\n        );\n    }\n}\n","interface ISidebarSectionHeading {\n    title: string;\n}\n\ninterface IErrorMessage {\n    identifier: string;\n    isValid: boolean;\n    errorMessage: string;\n}\n\nexport function SidebarSectionHeading(props: ISidebarSectionHeading) {\n    return (\n        <div className=\"position-relative\">\n            <h6 className=\"sidebar-heading d-flex justify-content-between align-items-center px-3 mt-4 mb-1\">\n                <span>{props.title}</span>\n            </h6>\n        </div>\n    );\n}\n\nexport function ErrorMessage(props: IErrorMessage) {\n    return (\n        <div\n            id={props.identifier + 'Feedback'}\n            className=\"invalid-tooltip\"\n            style={{ visibility: props.isValid ? 'hidden' : 'visible' }}>\n            {props.errorMessage}\n        </div>\n    );\n}\n","import { ChangeEvent } from 'react';\nimport { ErrorMessage } from './MinimalBootstrapComponents';\n\nexport interface ITextInputState {\n    value: number;\n    label: string;\n    errorMessage: string;\n    textAppending: string;\n    isValid: boolean;\n    disabled: boolean;\n    identifier: NumberInputStateIdentifier;\n    transformFunction: (e: ChangeEvent<HTMLInputElement>) => number;\n    onValueChange: (changedValue: number, changedStateIdentifier: NumberInputStateIdentifier) => void;\n}\n\nexport interface IStringTextInputState {\n    value: string;\n    label: string;\n    errorMessage: string;\n    textAppending: string;\n    isValid: boolean;\n    disabled: boolean;\n    identifier: TextInputStateIdentifier;\n    transformFunction: (e: ChangeEvent<HTMLInputElement>) => string;\n    onValueChange: (changedValue: string, changedStateIdentifier: TextInputStateIdentifier) => void;\n}\n\nexport interface IETFPercentageInputState {\n    value: number;\n    label: string;\n    errorMessage: string;\n    textAppending: string;\n    isValid: boolean;\n    disabled: boolean;\n    identifier: string;\n    transformFunction: (e: ChangeEvent<HTMLInputElement>) => number;\n    onValueChange: (changedValue: number, changedStateIdentifier: string) => void;\n}\n\nexport type NumberInputStateIdentifier =\n    | 'startingCapital'\n    | 'monthlyInvestment'\n    | 'monthlyPayout'\n    | 'transactionCosts'\n    | 'savingPhase'\n    | 'age'\n    | 'lifeExpectation'\n    | 'taxFreeAmount';\n\nexport type TextInputStateIdentifier = NumberInputStateIdentifier | 'apiKey';\n\nexport function TextInputElement(props: ITextInputState) {\n    return (\n        <div className=\"position-relative\">\n            <label className=\"form-label\" htmlFor={props.identifier}>\n                {props.label}\n            </label>\n            <input\n                className={'form-control ' + (props.isValid ? '' : 'is-invalid')}\n                id={props.identifier}\n                type=\"text\"\n                value={props.value.toString() + (props.textAppending !== '' ? ' ' + props.textAppending : '')}\n                onChange={e => props.onValueChange(props.transformFunction(e), props.identifier)}\n                disabled={props.disabled}\n            />\n            <ErrorMessage {...props} />\n        </div>\n    );\n}\n\nexport function StringTextInputElement(props: IStringTextInputState) {\n    return (\n        <div className=\"position-relative\">\n            <label className=\"form-label\" htmlFor={props.identifier}>\n                {props.label}\n            </label>\n            <input\n                className={'form-control ' + (props.isValid ? '' : 'is-invalid')}\n                id={props.identifier}\n                type=\"text\"\n                value={props.value.toString() + (props.textAppending !== '' ? ' ' + props.textAppending : '')}\n                onChange={e => props.onValueChange(props.transformFunction(e), props.identifier)}\n                disabled={props.disabled}\n            />\n            <ErrorMessage {...props} />\n        </div>\n    );\n}\n\nexport function ETFPercentageInputElement(props: IETFPercentageInputState) {\n    return (\n        <div className=\"position-relative\">\n            <label className=\"form-label\" htmlFor={props.identifier}>\n                {props.label}\n            </label>\n            <input\n                className={'form-control ' + (props.isValid ? '' : 'is-invalid')}\n                id={props.identifier}\n                type=\"text\"\n                value={props.value.toString() + (props.textAppending !== '' ? ' ' + props.textAppending : '')}\n                onChange={e => props.onValueChange(props.transformFunction(e), props.identifier)}\n                disabled={props.disabled}\n            />\n            <ErrorMessage {...props} />\n        </div>\n    );\n}\n","export interface ICheckboxState {\n    value: boolean;\n    label: string;\n    identifier: ICheckBoxStateIdentifier;\n    onValueChange: (changedStateIdentifier: ICheckBoxStateIdentifier) => void;\n}\n\nexport type ICheckBoxStateIdentifier = 'transactionCostsType' | 'etfAutomaticPercentage' | 'yAxisLock';\n\nexport function CheckboxInputElement(props: ICheckboxState) {\n    return (\n        <div className=\"checkbox-element\">\n            <input\n                className=\"form-check-input\"\n                id={props.identifier}\n                type=\"checkbox\"\n                value={props.value.toString()}\n                onChange={() => props.onValueChange(props.identifier)}\n            />\n            <label className=\"form-check-label\" htmlFor={props.identifier}>\n                {props.label}\n            </label>\n        </div>\n    );\n}\n","import { ChangeEvent } from 'react';\nimport { StringTextInputElement, TextInputStateIdentifier } from './TextInputElement';\n\nexport interface IAPIKey {\n    displayOverlay: boolean;\n    value: string;\n    label: string;\n    errorMessage: string;\n    isValid: boolean;\n    textAppending: string;\n    identifier: TextInputStateIdentifier;\n    transformFunction: (e: ChangeEvent<HTMLInputElement>) => string;\n    onValueChange: (changedValue: string, changedStateIdentifier: TextInputStateIdentifier) => void;\n    handleAPIKeyConfirm: () => void;\n    error: boolean;\n}\n\nexport function Overlay(props: IAPIKey) {\n    return (\n        <div className=\"row\">\n            <div className=\"col-12 p-0\">\n                <div className=\"d-grid gap-0\">\n                    <div\n                        className=\"overlay min-vh-100 text-center m-0 d-flex flex-column justify-content-center\"\n                        style={{ visibility: props.displayOverlay ? 'visible' : 'hidden' }}>\n                        <h1 className=\"p-5\">\n                            Enter your personal{' '}\n                            <a\n                                href=\"https://www.alphavantage.co/support/#api-key\"\n                                target=\"_blank\"\n                                rel=\"noopener noreferrer\">\n                                {' '}\n                                Alphavantage API Key\n                            </a>{' '}\n                        </h1>\n                        <StringTextInputElement {...props} disabled={!props.displayOverlay} />\n                        <button type=\"button\" className=\"btn btn-primary my-5\" onClick={props.handleAPIKeyConfirm}>\n                            Confirm\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}\n","import { ICostConfiguration } from './Visualization';\n\nexport interface BrokerProperties {\n    identifier: string;\n    label: string;\n    fixedCosts: number;\n    percentageCosts: number;\n}\n\nexport interface IBrokerDropDown {\n    label: string;\n    isValid: boolean;\n    handleChange: (brokerProperties: BrokerProperties) => void;\n    elements: BrokerProperties[];\n}\n\ntype BrokerDropDownProps = ICostConfiguration & IBrokerDropDown;\n\nfunction costsOfElementMatchUIValues(props: BrokerDropDownProps, element: BrokerProperties) {\n    return element.fixedCosts === props.fixedCosts && element.percentageCosts === props.percentageCosts;\n}\n\nexport function BrokerDropDown(props: BrokerDropDownProps) {\n    return (\n        <div className=\"dropdown\">\n            <button\n                className=\"btn btn-secondary dropdown-toggle\"\n                type=\"button\"\n                id=\"BrokerDropDown\"\n                data-bs-toggle=\"dropdown\"\n                aria-expanded=\"false\">\n                {props.label}\n            </button>\n            <ul className=\"dropdown-menu\" aria-labelledby=\"BrokerDropDown\">\n                {props.elements.map(element => (\n                    <li key={element.identifier}>\n                        <button\n                            className={\n                                costsOfElementMatchUIValues(props, element) ? 'dropdown-item active' : 'dropdown-item'\n                            }\n                            type=\"button\"\n                            onClick={e => props.handleChange(element)}>\n                            {element.label}\n                        </button>\n                    </li>\n                ))}\n            </ul>\n        </div>\n    );\n}\n","export interface IGraphDetailLevel {\n    identifier: string;\n    value: number;\n    label: string;\n}\n\nexport interface IGraphDetailDropDown {\n    value: number;\n    label: string;\n    isValid: boolean;\n    handleChange: (detailProperties: IGraphDetailLevel) => void;\n    elements: IGraphDetailLevel[];\n}\n\nexport function GraphDetailDropDown(props: IGraphDetailDropDown) {\n    return (\n        <div className=\"dropdown\">\n            <button\n                className=\"btn btn-secondary dropdown-toggle\"\n                type=\"button\"\n                id=\"GraphDetailDropDown\"\n                data-bs-toggle=\"dropdown\"\n                aria-expanded=\"false\">\n                {props.label}\n            </button>\n            <ul className=\"dropdown-menu\" aria-labelledby=\"GraphDetailDropDown\">\n                {props.elements.map(element => (\n                    <li key={element.identifier}>\n                        <button\n                            className={props.value === element.value ? 'dropdown-item active' : 'dropdown-item'}\n                            type=\"button\"\n                            onClick={e => props.handleChange(element)}>\n                            {element.label}\n                        </button>\n                    </li>\n                ))}\n            </ul>\n        </div>\n    );\n}\n","import { ChangeEvent, MouseEvent } from 'react';\n\nimport { ETFPercentageInputElement } from './TextInputElement';\nimport { ErrorMessage } from './MinimalBootstrapComponents';\n\nexport interface IETFProperties {\n    identifier: string;\n    symbol: string;\n    label: string;\n    percentage: number;\n    selected: boolean;\n}\n\ninterface IETFIndex {\n    [etfIdentifier: string]: IETFProperties;\n}\n\nexport interface IETFSelection {\n    label: string;\n    isValid: boolean;\n    identifier: string;\n    errorMessage: string;\n    handleSelectionChange: (etfProperties: IETFProperties) => void;\n    handleShareChange: (changedValue: number, changedStateIdentifier: string) => void;\n    elements: IETFIndex;\n}\n\ntype ETFSelectionDropDownProps = IETFSelection & { autoPercentage: boolean };\n\nfunction percentageTransformFunction(e: ChangeEvent<HTMLInputElement>) {\n    const floatVal = parseFloat(e.target.value) / 100;\n    return isNaN(floatVal) ? 0 : floatVal;\n}\n\nexport function ETFSelectionDropDown(props: ETFSelectionDropDownProps) {\n    return (\n        <div className=\"dropdown position-relative\">\n            <button\n                className=\"btn btn-secondary dropdown-toggle is-invalid\"\n                type=\"button\"\n                id=\"ETFSelectionDropDown\"\n                data-bs-toggle=\"dropdown\"\n                aria-expanded=\"false\">\n                {props.label}\n            </button>\n            <ErrorMessage {...props} />\n            <ul className=\"dropdown-menu\" aria-labelledby=\"ETFSelectionDropDown\">\n                {Object.keys(props.elements).map(elementIdentifier => (\n                    <li key={elementIdentifier}>\n                        <button\n                            className={\n                                props.elements[elementIdentifier].selected ? 'dropdown-item active' : 'dropdown-item'\n                            }\n                            type=\"button\"\n                            onClick={(e: MouseEvent<HTMLButtonElement>) => {\n                                //if (e.target.type !== 'text') {\n                                    props.handleSelectionChange(props.elements[elementIdentifier]);\n                                //}\n                            }}>\n                            <ETFPercentageInputElement\n                                {...props.elements[elementIdentifier]}\n                                value={Math.round(props.elements[elementIdentifier].percentage * 100)}\n                                textAppending=\"%\"\n                                onValueChange={props.handleShareChange}\n                                transformFunction={percentageTransformFunction}\n                                disabled={props.autoPercentage}\n                                isValid={true}\n                                errorMessage=''\n                            />\n                        </button>\n                    </li>\n                ))}\n            </ul>\n        </div>\n    );\n}\n","import React, { ChangeEvent } from 'react';\nimport { Visualization, ICostConfiguration } from './Visualization';\nimport {\n    TextInputElement,\n    ITextInputState,\n    TextInputStateIdentifier,\n    NumberInputStateIdentifier,\n} from './TextInputElement';\nimport { CheckboxInputElement, ICheckboxState, ICheckBoxStateIdentifier } from './CheckboxInputElement';\nimport { Overlay, IAPIKey } from './APIKeyOverlay';\nimport { SidebarSectionHeading } from './MinimalBootstrapComponents';\nimport { BrokerDropDown, BrokerProperties, IBrokerDropDown } from './BrokerDropDown';\nimport { GraphDetailDropDown, IGraphDetailDropDown, IGraphDetailLevel } from './GraphDetailDropDown';\nimport { ETFSelectionDropDown, IETFProperties, IETFSelection } from './ETFSelectionDropDown';\nimport { ForecastModelSingleton } from '../model/ForecastModel';\n\nexport const STARTING_CAPITAL_IDENTIFIER = 'startingCapital';\nexport const MONTHLY_INVESTMENT_IDENTIFIER = 'monthlyInvestment';\nexport const TRANSACTION_COSTS_IDENTIFIER = 'transactionCosts';\nexport const TRANSACTION_COSTS_TYPE_IDENTIFIER = 'transactionCostsType';\nexport const SAVING_PHASE_IDENTIFIER = 'savingPhase';\nexport const AGE_IDENTIFIER = 'age';\nexport const TAX_FREE_AMOUNT_IDENTIFIER = 'taxFreeAmount';\nexport const MONTHLY_PAYOUT_IDENTIFIER = 'monthlyPayout';\nexport const LIFE_EXPECTATION_IDENTIFIER = 'lifeExpectation';\nexport const DETAILED_GRAPH_DROPDOWN_IDENTIFIER = 'detailedGraph';\nexport const ETF_DROPDOWN_SELECTION_IDENTIFIER = 'etfDropdownSelection';\nexport const API_KEY_IDENTIFIER = 'apiKey';\nexport const Y_AXIS_LOCK_IDENTIFIER = 'yAxisLock';\n\nconst BROKER_DROPDOWN_IDENTIFIER = 'brokerDropdown';\nconst ETF_AUTOMATIC_PERCENTAGE_IDENTIFIER = 'etfAutomaticPercentage';\n\nexport const ETF_SYMBOL_TO_NAME = {\n    'SP5C.PAR': 'S & P 500',\n    ESGE: 'iShare',\n    SUSA: 'MSCI USA ESG',\n};\n\n// TODO  mach notation konsistent: _, private,\nexport interface IAppState {\n    isValid: boolean;\n    startingCapital: ITextInputState;\n    monthlyInvestment: ITextInputState;\n    monthlyPayout: ITextInputState;\n    transactionCosts: ITextInputState;\n    savingPhase: ITextInputState;\n    age: ITextInputState;\n    lifeExpectation: ITextInputState;\n    taxFreeAmount: ITextInputState;\n\n    apiKey: IAPIKey;\n\n    transactionCostsType: ICheckboxState;\n    etfAutomaticPercentage: ICheckboxState;\n    yAxisLock: ICheckboxState;\n\n    detailedGraph: IGraphDetailDropDown;\n    brokerDropdown: IBrokerDropDown;\n    etfDropdownSelection: IETFSelection;\n}\n\nfunction transformInputToInt(e: ChangeEvent<HTMLInputElement>) {\n    const valueWithoutTextAppending = e.target.value.split(' ')[0];\n    const intVal = parseInt(valueWithoutTextAppending);\n    return isNaN(intVal) ? 0 : intVal;\n}\n\nfunction transformInputToFloat(e: ChangeEvent<HTMLInputElement>) {\n    const floatVal = parseFloat(e.target.value);\n    return isNaN(floatVal) ? 0 : floatVal;\n}\n\nfunction isPercentage(val: number) {\n    return !Number.isNaN(val) && val >= 0 && val <= 1;\n}\n\nfunction isPositiveInt(val: number) {\n    return !Number.isNaN(val) && Number.isInteger(val) && val >= 0;\n}\n\nexport function generateCostConfig(state: IAppState): ICostConfiguration {\n    if (state[TRANSACTION_COSTS_TYPE_IDENTIFIER].value) {\n        return { percentageCosts: 0.0, fixedCosts: state[TRANSACTION_COSTS_IDENTIFIER].value };\n    } else {\n        return { percentageCosts: state[TRANSACTION_COSTS_IDENTIFIER].value, fixedCosts: 0.0 };\n    }\n}\n\nfunction recalculateETFPercentages(state: IAppState) {\n    let numberOfSelectedETFs = 0;\n    for (const etfIdentifier in state[ETF_DROPDOWN_SELECTION_IDENTIFIER].elements) {\n        if (state[ETF_DROPDOWN_SELECTION_IDENTIFIER].elements[etfIdentifier].selected) {\n            numberOfSelectedETFs++;\n        }\n    }\n    const newPercentage = 1.0 / Math.max(1, numberOfSelectedETFs);\n    for (const etfIdentifier in state[ETF_DROPDOWN_SELECTION_IDENTIFIER].elements) {\n        state[ETF_DROPDOWN_SELECTION_IDENTIFIER].elements[etfIdentifier].percentage = newPercentage;\n    }\n    return state;\n}\n\nexport class App extends React.Component<{}, IAppState> {\n    constructor(props: {}) {\n        super(props);\n\n        this.handleTextChange = this.handleTextChange.bind(this);\n        this.handleCheckBoxChange = this.handleCheckBoxChange.bind(this);\n        this.handleBrokerChange = this.handleBrokerChange.bind(this);\n        this.handleGraphDetailChange = this.handleGraphDetailChange.bind(this);\n        this.handleETFSelectionChange = this.handleETFSelectionChange.bind(this);\n        this.handleETFShareChange = this.handleETFShareChange.bind(this);\n        this.handleAPIKeyConfirm = this.handleAPIKeyConfirm.bind(this);\n\n        this.state = getInitialInputFormState(this);\n    }\n\n    handleTextChange(changedValue: number | string, changedStateIdentifier: TextInputStateIdentifier) {\n        const state = { ...this.state };\n        state[changedStateIdentifier].value = changedValue;\n        this._validateAndSetState(state);\n    }\n\n    handleCheckBoxChange(changedStateIdentifier: ICheckBoxStateIdentifier) {\n        const state = { ...this.state };\n        state[changedStateIdentifier].value = !state[changedStateIdentifier].value;\n        if (changedStateIdentifier === TRANSACTION_COSTS_TYPE_IDENTIFIER) {\n            state[TRANSACTION_COSTS_IDENTIFIER].value = state[changedStateIdentifier].value ? 5 : 0.015;\n            state[TRANSACTION_COSTS_IDENTIFIER].textAppending = state[changedStateIdentifier].value ? '€' : '%';\n            state[TRANSACTION_COSTS_IDENTIFIER].transformFunction = state[changedStateIdentifier].value\n                ? transformInputToInt\n                : transformInputToFloat;\n        } else if (\n            changedStateIdentifier === ETF_AUTOMATIC_PERCENTAGE_IDENTIFIER &&\n            state[changedStateIdentifier].value\n        ) {\n            recalculateETFPercentages(state);\n        }\n        this._validateAndSetState(state);\n    }\n\n    handleBrokerChange(brokerProperties: BrokerProperties) {\n        const state = { ...this.state };\n        state[TRANSACTION_COSTS_IDENTIFIER].value =\n            brokerProperties.percentageCosts > 0 ? brokerProperties.percentageCosts : brokerProperties.fixedCosts;\n        state[TRANSACTION_COSTS_TYPE_IDENTIFIER].value = brokerProperties.percentageCosts > 0 ? false : true;\n        this._validateAndSetState(state);\n    }\n\n    handleGraphDetailChange(detailProperties: IGraphDetailLevel) {\n        const state = { ...this.state };\n        state[DETAILED_GRAPH_DROPDOWN_IDENTIFIER].value = detailProperties.value;\n        this._validateAndSetState(state);\n    }\n\n    handleETFSelectionChange(etfProperties: IETFProperties) {\n        const state = { ...this.state };\n        state[ETF_DROPDOWN_SELECTION_IDENTIFIER].elements[etfProperties.identifier].selected = !state[\n            ETF_DROPDOWN_SELECTION_IDENTIFIER\n        ].elements[etfProperties.identifier].selected;\n        if (state[ETF_AUTOMATIC_PERCENTAGE_IDENTIFIER].value) {\n            recalculateETFPercentages(state);\n        }\n        this._validateAndSetState(state);\n    }\n\n    handleETFShareChange(changedValue: number, changedETFIdentifier: string) {\n        const state = { ...this.state };\n        state[ETF_DROPDOWN_SELECTION_IDENTIFIER].elements[changedETFIdentifier].percentage = changedValue;\n        this._validateAndSetState(state);\n    }\n\n    async handleAPIKeyConfirm() {\n        const apiKey = this.state[API_KEY_IDENTIFIER].value;\n        const apiValues = { ...this.state[API_KEY_IDENTIFIER] };\n        try {\n            await ForecastModelSingleton.loadHistoricData(\n                apiKey,\n                this.state[ETF_DROPDOWN_SELECTION_IDENTIFIER].elements\n            );\n            apiValues.error = false;\n            apiValues.displayOverlay = false;\n        } catch (e) {\n            apiValues.error = true;\n        }\n        this.setState({ [API_KEY_IDENTIFIER]: apiValues });\n        this.forceUpdate();\n    }\n\n    private _validateAndSetState(state: IAppState) {\n        const positiveIntIdentifier: NumberInputStateIdentifier[] = [\n            MONTHLY_INVESTMENT_IDENTIFIER,\n            MONTHLY_PAYOUT_IDENTIFIER,\n            STARTING_CAPITAL_IDENTIFIER,\n            AGE_IDENTIFIER,\n            LIFE_EXPECTATION_IDENTIFIER,\n            SAVING_PHASE_IDENTIFIER,\n            TAX_FREE_AMOUNT_IDENTIFIER,\n        ];\n        state.isValid = true;\n\n        for (const identifier of positiveIntIdentifier) {\n            state[identifier].isValid = isPositiveInt(state[identifier].value);\n            state[identifier].errorMessage = 'Please enter a positive number.';\n            state.isValid = state[identifier].isValid && state.isValid;\n        }\n\n        // Check the year values.\n        const leftoverYears = state[LIFE_EXPECTATION_IDENTIFIER].value - state[AGE_IDENTIFIER].value;\n        if (state[AGE_IDENTIFIER].value >= state[LIFE_EXPECTATION_IDENTIFIER].value) {\n            state[AGE_IDENTIFIER].errorMessage = 'You cannot be older than the life expectation';\n            state[AGE_IDENTIFIER].isValid = false;\n            state.isValid = false;\n        } else if (leftoverYears <= state[SAVING_PHASE_IDENTIFIER].value) {\n            state[SAVING_PHASE_IDENTIFIER].errorMessage =\n                'You cannot have a saving phase that lasts longer than your life.';\n            state[SAVING_PHASE_IDENTIFIER].isValid = false;\n            state.isValid = false;\n        }\n\n        // Check Cost values.\n        if (state[TRANSACTION_COSTS_TYPE_IDENTIFIER].value) {\n            state[TRANSACTION_COSTS_IDENTIFIER].isValid = isPositiveInt(state[TRANSACTION_COSTS_IDENTIFIER].value);\n            state[TRANSACTION_COSTS_IDENTIFIER].errorMessage = 'Please enter a positive number.';\n        } else {\n            state[TRANSACTION_COSTS_IDENTIFIER].isValid = isPercentage(state[TRANSACTION_COSTS_IDENTIFIER].value);\n            state[TRANSACTION_COSTS_IDENTIFIER].errorMessage = 'Please enter a valid percentage.';\n        }\n        state.isValid = state[TRANSACTION_COSTS_IDENTIFIER].isValid && state.isValid;\n\n        // Check the etf percentages.\n        let sumOfPercentages = 0;\n        let foundOneSelectedEtf = false;\n        for (const etfIdentifier in state[ETF_DROPDOWN_SELECTION_IDENTIFIER].elements) {\n            if (state[ETF_DROPDOWN_SELECTION_IDENTIFIER].elements[etfIdentifier].selected) {\n                sumOfPercentages += state[ETF_DROPDOWN_SELECTION_IDENTIFIER].elements[etfIdentifier].percentage;\n                foundOneSelectedEtf = true;\n            }\n        }\n        if (!foundOneSelectedEtf) {\n            state[ETF_DROPDOWN_SELECTION_IDENTIFIER].isValid = false;\n            state[ETF_DROPDOWN_SELECTION_IDENTIFIER].errorMessage = 'Please select at least one ETF.';\n            state.isValid = false;\n        } else if (sumOfPercentages !== 1.0) {\n            state[ETF_DROPDOWN_SELECTION_IDENTIFIER].isValid = false;\n            state[ETF_DROPDOWN_SELECTION_IDENTIFIER].errorMessage = 'The sum of all selected ETF needs to be 100%';\n            state.isValid = false;\n        } else {\n            state[ETF_DROPDOWN_SELECTION_IDENTIFIER].isValid = true;\n        }\n\n        this.setState(state);\n    }\n\n    render() {\n        const costConfig = generateCostConfig(this.state);\n        return (\n            <div className=\"container-fluid\">\n                <Overlay {...this.state[API_KEY_IDENTIFIER]} />\n                <div className=\"row\">\n                    <nav id=\"sidebarMenu\" className=\"col-md-3 col-lg-2 bg-light sidebar\">\n                        <form className=\"position-sticky needs-validation\" noValidate>\n                            {/* Money Options */}\n                            <SidebarSectionHeading title=\"Money Options\" />\n                            <TextInputElement {...this.state[STARTING_CAPITAL_IDENTIFIER]} />\n                            <TextInputElement {...this.state[MONTHLY_INVESTMENT_IDENTIFIER]} />\n                            <TextInputElement {...this.state[MONTHLY_PAYOUT_IDENTIFIER]} />\n                            <TextInputElement {...this.state[TAX_FREE_AMOUNT_IDENTIFIER]} />\n                            {/* Time Options */}\n                            <SidebarSectionHeading title=\"Time Options\" />\n                            <TextInputElement {...this.state[AGE_IDENTIFIER]} />\n                            <TextInputElement {...this.state[LIFE_EXPECTATION_IDENTIFIER]} />\n                            <TextInputElement {...this.state[SAVING_PHASE_IDENTIFIER]} />\n                            {/* Cost Options */}\n                            <SidebarSectionHeading title=\"Cost Options\" />\n                            <TextInputElement\n                                key={TRANSACTION_COSTS_IDENTIFIER}\n                                {...this.state[TRANSACTION_COSTS_IDENTIFIER]}\n                            />\n                            <CheckboxInputElement {...this.state[TRANSACTION_COSTS_TYPE_IDENTIFIER]} />\n                            <BrokerDropDown {...costConfig} {...this.state[BROKER_DROPDOWN_IDENTIFIER]} />\n                            {/* Visualization Options */}\n                            <SidebarSectionHeading title=\"Visualization Options\" />\n                            <GraphDetailDropDown {...this.state[DETAILED_GRAPH_DROPDOWN_IDENTIFIER]} />\n                            <CheckboxInputElement {...this.state[Y_AXIS_LOCK_IDENTIFIER]} />\n                            <CheckboxInputElement {...this.state[ETF_AUTOMATIC_PERCENTAGE_IDENTIFIER]} />\n                            <ETFSelectionDropDown\n                                autoPercentage={this.state[ETF_AUTOMATIC_PERCENTAGE_IDENTIFIER].value}\n                                {...this.state[ETF_DROPDOWN_SELECTION_IDENTIFIER]}\n                            />\n                        </form>\n                    </nav>\n                    <main className=\"col-md-9 col-lg-10 ms-sm-auto\">\n                        <h1>Etf Pension Plan Visualization</h1>\n                        <Visualization {...this.state} />\n                    </main>\n                </div>\n            </div>\n        );\n    }\n}\n\nfunction getInitialInputFormState(caller: App): IAppState {\n    return {\n        isValid: true,\n        // simple ui elements.\n        [STARTING_CAPITAL_IDENTIFIER]: {\n            value: 1000,\n            label: 'Starting Capital',\n            errorMessage: '',\n            textAppending: '€',\n            isValid: true,\n            identifier: STARTING_CAPITAL_IDENTIFIER,\n            transformFunction: transformInputToInt,\n            onValueChange: caller.handleTextChange,\n            disabled: false,\n        },\n        [MONTHLY_INVESTMENT_IDENTIFIER]: {\n            value: 100,\n            label: 'Monthly Investment',\n            errorMessage: 'Please enter a positive Money amount.',\n            textAppending: '€',\n            isValid: true,\n            identifier: MONTHLY_INVESTMENT_IDENTIFIER,\n            transformFunction: transformInputToInt,\n            onValueChange: caller.handleTextChange,\n            disabled: false,\n        },\n        [MONTHLY_PAYOUT_IDENTIFIER]: {\n            value: 1000,\n            label: 'Monthly Payout',\n            errorMessage: '',\n            textAppending: '€',\n            isValid: true,\n            identifier: MONTHLY_PAYOUT_IDENTIFIER,\n            transformFunction: transformInputToInt,\n            onValueChange: caller.handleTextChange,\n            disabled: false,\n        },\n        [TRANSACTION_COSTS_IDENTIFIER]: {\n            value: 0.015,\n            label: 'Transaction Costs',\n            errorMessage: '',\n            textAppending: '%',\n            isValid: true,\n            identifier: TRANSACTION_COSTS_IDENTIFIER,\n            transformFunction: transformInputToFloat,\n            onValueChange: caller.handleTextChange,\n            disabled: false,\n        },\n        [SAVING_PHASE_IDENTIFIER]: {\n            value: 40,\n            label: 'Saving Phase',\n            errorMessage: '',\n            textAppending: 'Y',\n            isValid: true,\n            identifier: SAVING_PHASE_IDENTIFIER,\n            transformFunction: transformInputToInt,\n            onValueChange: caller.handleTextChange,\n            disabled: false,\n        },\n        [AGE_IDENTIFIER]: {\n            value: 30,\n            label: 'Your Age',\n            textAppending: 'Y',\n            errorMessage: '',\n            isValid: true,\n            identifier: AGE_IDENTIFIER,\n            transformFunction: transformInputToInt,\n            onValueChange: caller.handleTextChange,\n            disabled: false,\n        },\n        [LIFE_EXPECTATION_IDENTIFIER]: {\n            value: 80,\n            label: 'Life Expectation',\n            errorMessage: '',\n            isValid: true,\n            textAppending: 'Y',\n            identifier: LIFE_EXPECTATION_IDENTIFIER,\n            transformFunction: transformInputToInt,\n            onValueChange: caller.handleTextChange,\n            disabled: false,\n        },\n        [TAX_FREE_AMOUNT_IDENTIFIER]: {\n            value: 801,\n            label: 'Tax Free Amount',\n            errorMessage: '',\n            isValid: true,\n            textAppending: '€',\n            identifier: TAX_FREE_AMOUNT_IDENTIFIER,\n            transformFunction: transformInputToInt,\n            onValueChange: caller.handleTextChange,\n            disabled: false,\n        },\n        [TRANSACTION_COSTS_TYPE_IDENTIFIER]: {\n            value: false,\n            label: 'Fixed Amount',\n            identifier: TRANSACTION_COSTS_TYPE_IDENTIFIER,\n            onValueChange: caller.handleCheckBoxChange,\n        },\n        [ETF_AUTOMATIC_PERCENTAGE_IDENTIFIER]: {\n            value: false,\n            label: 'Automatic ETF Ratio',\n            identifier: ETF_AUTOMATIC_PERCENTAGE_IDENTIFIER,\n            onValueChange: caller.handleCheckBoxChange,\n        },\n        [Y_AXIS_LOCK_IDENTIFIER]: {\n            value: false,\n            label: 'Lock Y Axis Extent',\n            identifier: Y_AXIS_LOCK_IDENTIFIER,\n            onValueChange: caller.handleCheckBoxChange,\n        },\n        [API_KEY_IDENTIFIER]: {\n            displayOverlay: true,\n            error: false,\n            value: '',\n            label: '',\n            errorMessage: '',\n            isValid: true,\n            textAppending: '',\n            identifier: API_KEY_IDENTIFIER,\n            transformFunction: (e: ChangeEvent<HTMLInputElement>) => (e.target as HTMLInputElement).value,\n            onValueChange: caller.handleTextChange,\n            handleAPIKeyConfirm: caller.handleAPIKeyConfirm,\n        },\n        // Complex UI elements.\n        [DETAILED_GRAPH_DROPDOWN_IDENTIFIER]: {\n            value: 1,\n            label: 'Graph Detail Level',\n            isValid: true,\n            handleChange: caller.handleGraphDetailChange,\n            elements: [\n                {\n                    identifier: '12',\n                    value: 12,\n                    label: 'All Months a Year (highest detail)',\n                },\n                {\n                    identifier: '6',\n                    value: 6,\n                    label: 'Every 2nd Month (higher detail)',\n                },\n                {\n                    identifier: '3',\n                    value: 3,\n                    label: 'Every 4th Month (lower detail)',\n                },\n                {\n                    identifier: '1',\n                    value: 1,\n                    label: 'One Month a Year (lowest detail) (default)',\n                },\n            ],\n        },\n        [BROKER_DROPDOWN_IDENTIFIER]: {\n            label: 'Broker',\n            isValid: true,\n            handleChange: caller.handleBrokerChange,\n            elements: [\n                {\n                    identifier: 'comdirect',\n                    label: 'comdirect',\n                    fixedCosts: 0,\n                    percentageCosts: 0.015,\n                },\n                {\n                    identifier: 'tradeRepublic',\n                    label: 'Trade Republic',\n                    fixedCosts: 0,\n                    percentageCosts: 0.01,\n                },\n                {\n                    identifier: 'eToro',\n                    label: 'eToro',\n                    fixedCosts: 0,\n                    percentageCosts: 0.0,\n                },\n            ],\n        },\n        [ETF_DROPDOWN_SELECTION_IDENTIFIER]: {\n            label: 'ETF Selection',\n            isValid: true,\n            identifier: ETF_DROPDOWN_SELECTION_IDENTIFIER,\n            errorMessage: '',\n            handleSelectionChange: caller.handleETFSelectionChange,\n            handleShareChange: caller.handleETFShareChange,\n            elements: {\n                S_and_P_500: {\n                    identifier: 'S_and_P_500',\n                    symbol: 'SP5C.PAR',\n                    label: ETF_SYMBOL_TO_NAME['SP5C.PAR'],\n                    percentage: 1.0,\n                    selected: true,\n                },\n                iShare: {\n                    identifier: 'iShare',\n                    symbol: 'ESGE',\n                    label: ETF_SYMBOL_TO_NAME['ESGE'],\n                    percentage: 1.0,\n                    selected: false,\n                },\n                msciUSA: {\n                    identifier: 'msciUSA',\n                    symbol: 'SUSA',\n                    label: ETF_SYMBOL_TO_NAME['SUSA'],\n                    percentage: 1.0,\n                    selected: false,\n                },\n            },\n        },\n    };\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './scss/main.scss';\nimport { App } from './components/App';\nimport reportWebVitals from './reportWebVitals';\n// Needed to make the drop downs work.\nimport { Dropdown, Tooltip } from 'bootstrap'; // eslint-disable-line no-unused-vars\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}